#!/bin/bash

SCRIPTS_SOURCE="$(dirname $(realpath ${BASH_SOURCE-$0}))/../available"
. $SCRIPTS_SOURCE/common.sh

if [ "$RELEASE_BUILD"x = ""x ] ; then
    CONF=${SCRIPTS_SOURCE}/CONF.sh
else
    CONF=$SCRIPTS_SOURCE/CONF.sh.${RELEASE_BUILD}
fi
. $CONF

while getopts ":c:a:t:b:B:l:n:r:" o; do
    case "${o}" in
	c)
	    VMCONFIG=${OPTARG}
	    ;;
        a)
            ARCH=${OPTARG}
            ;;
        t)
            TYPE=${OPTARG}
            ;;
        b)
            BUILD=${OPTARG}
            ;;
	l)
	    BUILDS_LOG=${OPTARG}
	    ;;
	n)
	    NUM_BUILDS=${OPTARG}
	    ;;
	r)
	    RELEASE=${OPTARG}
	    ;;
	B)
	    # Easier to drive from the Makefile - accept the full
	    # build name (e.g. "BL_amd64_gnome_F") and split it up
	    # here
	    LONG_NAME=${OPTARG}
	    case $LONG_NAME in
		*_F)
		    TYPE=non-free;;
		*)
		    TYPE=free;;
	    esac
	    ARCH=$(echo $LONG_NAME | awk -F "_" '{print $2}')
	    BUILD=$(echo $LONG_NAME | awk -F "_" '{print $3}')
	    ;;
        *)
	    echo "Unrecognised arg ${o}"
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))

validate_arg ARCH "amd64:i386:source"
validate_arg TYPE "free:non-free"
validate_arg RELEASE "buster:bullseye:bookworm:trixie"

if [ "$DRYRUN"x != ""x ]; then
    echo "Dry-run $0: ARCH $ARCH TYPE $TYPE BUILD $BUILD VMCONFIG $VMCONFIG"
    # Add a small delay to help with testing Makefiles
    if [ $DRYRUN != count ]; then
	if [ $ARCH = source ]; then
	    sleep 0.5
	else
	    sleep 2
	fi
    fi
    exit 0
fi

if [ -f "$VMCONFIG" ]; then
    . $VMCONFIG
else
    echo "$0: Can't load config from $VMCONFIG, aborting"
    exit 1
fi

if [ ${TYPE} = "free" ] ; then
    typestem=""
else
    typestem="+nonfree"
fi

NAME="debian-live-${VERSION}-${ARCH}-${BUILD}${typestem}"
lockfile -! -l 43200 -r-1 $BUILDS_LOG.lock
echo $LONG_NAME >> $BUILDS_LOG
BUILDNUM=$(wc -l < $BUILDS_LOG)
rm -f $BUILDS_LOG.lock

BUILD_START=$(now)
echo "$BUILDNUM/$NUM_BUILDS: $LONG_NAME: Starting $NAME build at $BUILD_START"
if [ "$ARCH" = source ]; then
    case $RELEASE in
	bookworm|trixie)
	    # Source build is a no-op with live-build; this should never be called
	    echo "  Unexpectedly calling step for $LONG_NAME"
	    exit 1
	    ;;
	buster|bullseye)
	    # Our dependencies should mean that the binary builds have already
	    # run. The .sources files that were generated by those builds
	    # will be our input.
	    WD=$OUTDIR/out/$TYPE/$ARCH/tar.tmp
	    cd ${WD}
	    mkdir $BUILD
	    sort -u debian-live-*$BUILD*.sources > $BUILD/sources.list
	    rm -f debian-live-*$BUILD*.sources
	    cd $BUILD
	    touch ${NAME}.log

	    SOURCE_ERROR=0
	    mkdir source
	    IFS="$NL"
	    if [ -f sources.list ] ; then
		for line in $(cat sources.list); do
		    IFS=$OLDIFS
		    grab_file $line
		    IFS="$NL"
		done
		IFS=$OLDIFS
		tar cf ../${NAME}.tar source
		find source | sed 's,^source,,g' > ../${NAME}.contents
		rm -rf source sources.list
	    else
		log "  ABORTING: No sources.list file in $PWD"
		exit 1
	    fi

	    if [ $SOURCE_ERROR -ne 0 ] ; then
		log "  ABORTING: Failed to download sources correctly"
		exit 1
	    fi
	    mv ${NAME}.log ..
	    cd ..
	    rmdir $BUILD
	    ERROR=$SOURCE_ERROR
	    ;;
	esac
else
    # Run a binary build inside the VM
    mkdir -p $OUTDIR
    case $RELEASE in
	buster|bullseye)
	    ssh root@$VM_IP -p $SSH_PORT /w/live-wrapper-binary -a $ARCH -t $TYPE -b $BUILD
	    ERROR=$?
	    mkdir -p $OUTDIR/out/$TYPE/source/tar.tmp
	    mv $OUTDIR/out/$TYPE/$ARCH/iso-hybrid.tmp/debian-live-*$BUILD*.sources $OUTDIR/out/$TYPE/source/tar.tmp
	    ;;
	bookworm|trixie)
	    ssh root@$VM_IP -p $SSH_PORT /w/live-build-binary -a $ARCH -t $TYPE -b $BUILD
	    ERROR=$?
	    mkdir -p $OUTDIR/out/$TYPE/source/tar.tmp
	    # No idea what to do about sources yet!
    esac
fi

BUILD_END=$(now)
time_spent=$(calc_time $BUILD_START $BUILD_END)
echo "  $LONG_NAME: $NAME build started at $BUILD_START, ended at $BUILD_END (took $time_spent), error $ERROR"
