2023-12-20  Daniel Kiper  <daniel.kiper@oracle.com>

	Release 2.12

2023-12-20  Glenn Washburn  <development@efficientek.com>

	efi: Add support for reproducible builds
	Having randomly generated bytes in the binary output breaks reproducible
	builds. Since build timestamps are usually the source of irreproducibility
	there is a standard which defines an environment variable SOURCE_DATE_EPOCH
	to be used when set for build timestamps. According to the standard [1], the
	value of SOURCE_DATE_EPOCH is a base-10 integer of the number of seconds
	since the UNIX epoch. Currently, this is a 10 digit number that fits into
	32-bits, but will not shortly after the year 2100. So to be future-proof
	only use the least significant 32-bits. On 64-bit architectures, where the
	canary is also 64-bits, there is an extra 32-bits that can be filled to
	provide more entropy. The first byte is NUL to filter out string buffer
	overflow attacks and the remaining 24-bits are set to static random bytes.

	[1] https://reproducible-builds.org/specs/source-date-epoch

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-20  Glenn Washburn  <development@efficientek.com>

	efi: Generate stack protector canary at build time if urandom is available
	Generating the canary at build time allows the canary to be different for
	every build which could limit the effectiveness of certain exploits.
	Fallback to the statically generated random bytes if /dev/urandom is not
	readable, e.g. Windows.

	On 32-bit architectures, which use a 32-bit canary, reduce the canary to
	4 bytes with one byte being NUL to filter out string buffer overflow attacks.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-20  Glenn Washburn  <development@efficientek.com>

	efi: Initialize canary to non-zero value
	The canary, __stack_chk_guard, is in the BSS and so will get initialized to
	zero if it is not explicitly initialized. If the UEFI firmware does not
	support the RNG protocol, then the canary will not be randomized and will
	be zero. This seems like a possibly easier value to write by an attacker.
	Initialize canary to static random bytes, so that it is still random when
	there is no RNG protocol. Set at least one byte to NUL to protect against
	string buffer overflow attacks [1]. Code that writes NUL terminated strings
	will terminate when a NUL is encountered in the input byte stream. So the
	attacker will not be able to forge the canary by including it in the input
	stream without terminating the string operation and thus limiting the
	stack corruption.

	[1] https://www.sans.org/blog/stack-canaries-gingerly-sidestepping-the-cage/

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-14  Alec Brown  <alec.r.brown@oracle.com>

	gfxmenu/gui_image: Fix double free of bitmap
	In grub-core/gfxmenu/gui_image.c, Coverity detected a double free in the
	function load_image(). The function checks if self->bitmap and self->raw_bitmap
	aren't NULL and then frees them. In the case self->bitmap and self->raw_bitmap
	are the same, only self->raw_bitmap is freed which would also free the memory
	used by self->bitmap. However, in this case self->bitmap isn't being set to NULL
	which could lead to a double free later in the code. After self->raw_bitmap is
	freed, it gets set to the variable bitmap. If this variable is NULL, the code
	could have a path that would free self->bitmap a second time in the function
	rescale_image().

	Fixes: CID 292472

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-13  Qiumiao Zhang  <zhangqiumiao1@huawei.com>

	commands/acpi: Fix calculation of ACPI tables addresses when processing RSDT and XSDT
	According to the ACPI specification the XSDT Entry field contains an array
	of 64-bit physical addresses which points to other DESCRIPTION_HEADERs. However,
	the entry_ptr iterator is defined as a 32-bit pointer. It means each 64-bit
	entry in the XSDT table is treated as two separate 32-bit entries then. Fix the
	issue by using correct addresses sizes when processing RSDT and XSDT tables.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-13  Vladimir Serbinenko  <phcoder@gmail.com>

	libnvpair: Support prefixed nvlist symbol names as found on NetBSD
	NetBSD uses slightly different function names for the same functions.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-13  Vladimir Serbinenko  <phcoder@gmail.com>

	bootstrap: Don't check gettext version
	NetBSD gettext is older than the check but we don't actually need 0.18.3,
	older one works fine. This is needed to make bootstrap work on NetBSD.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-13  Vladimir Serbinenko  <phcoder@gmail.com>

	kern/mm: Use %x and cast for displaying sizeof()
	There is some variance in how compiler treats sizeof() especially
	on 32-bit platforms where it can be naturally either int or long.
	Explicit cast solves the issue.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-13  Vladimir Serbinenko  <phcoder@gmail.com>

	configure: Add RPATH for freetype on NetBSD
	Without this build-time mkfont fails dynamic linking. This is not ideal
	but improves the situation until a better solution is available.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-13  Vladimir Serbinenko  <phcoder@gmail.com>

	configure: Add *BSD font paths
	*BSD puts fonts in other places. Add them to the list.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-13  Vladimir Serbinenko  <phcoder@gmail.com>

	autogen: Accept python3.10 as a python alternative
	NetBSD doesn't provide python or python3.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-12  Vladimir Serbinenko  <phcoder@gmail.com>

	build: Rename HAVE_LIBZFS to USE_LIBZFS
	The HAVE_LIBZFS is defined by libzfs test and hence conflicts with
	manual definition. On NetBSD it ends up detecting zfs but not detecting
	nvpair and creates confusion. Split them.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-12  Vladimir Serbinenko  <phcoder@gmail.com>

	gnulib: Tolerate always_inline attribute being ignored
	It's not critical, -Werror on it is inappropriate. We don't want to
	modify gnulib too much. This warning is pretty much irrelevant.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-12  Vladimir Serbinenko  <phcoder@gmail.com>

	util/editenv: Don't use %m formatter
	It's not available on NetBSD outside of syslog. Using strerror() is more
	reliable as we retrieve errno immediately rather than down the stack.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-12  Vladimir Serbinenko  <phcoder@gmail.com>

	osdep/bsd/hostdisk: Fix NetBSD compilation
	Wrong function and variable name cause a stupid compilation error on
	NetBSD and OpenBSD. Only NetBSD and OpenBSD use this file. No other
	platform is affected.

	Additionally, define RAW_FLOPPY_MAJOR constant if it is missing.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-12  Vladimir Serbinenko  <phcoder@gmail.com>

	osdep/generic/blocklist: Fix compilation
	After recent change in blocklist types we have a type mismatch. Fixing it
	requires a wrapper or large changes. I feel like wrapper makes more sense.

	Without this patch we end up with a compilation problem and without wrapping
	callback data is not passed properly anymore.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-12  Vladimir Serbinenko  <phcoder@gmail.com>

	disk/diskfilter: Remove unused variable
	Variable e is set but never used. We can just remove it now.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-12  Vladimir Serbinenko  <phcoder@gmail.com>

	build: Tolerate unused-but-set in generated lexer/bison files
	We don't really control the small aspects of generated files and NetBSD
	version has an unused variable that is then detected by gcc as warning
	that is then promoted to error.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-12  Vladimir Serbinenko  <phcoder@gmail.com>

	loader/i386/bsdXX: Fix loading after unaligned module
	Current code implicitly assumes that aligning chunk_size + *kern_end is
	the same as aligning on curload which is not the case because
	chunk_size starts at zero even if *kern_end is unaligned and ALIGN_PAGE
	moved curload to an aligned position but not *kern_end + chunk_size.

	This fixes booting of FreeBSD with zfs module.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-12  Mate Kukri  <mate.kukri@canonical.com>

	grub-core/Makefile.am: Make path to extra_deps.lst relative to $(top_srcdir)/grub-core
	The commit 154dcb1ae (build: Allow explicit module dependencies) broke
	out of tree builds by introducing the extra_deps.lst file into the
	source tree but referencing it just by name in grub-core/Makefile.am.
	Fix it by adding $(top_srcdir)/grub-core to the path.

	Fixes: 154dcb1ae (build: Allow explicit module dependencies)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-12  Mate Kukri  <mate.kukri@canonical.com>

	util/grub-install: Move platdir path canonicalization after files were copied to grubdir
	The commit 3f9eace2d (util/grub-install: Delay copying files to
	{grubdir,platdir} after install_device was validated) delaying
	copying of files caused a regression when installing without an
	existing directory structure.

	This patch ensures that the platform directory actually exists by the
	time the code tries to canonicalize its filename.

	Fixes: 3f9eace2d (util/grub-install: Delay copying files to {grubdir,platdir} after install_device was validated)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-12  Michael Chang  <mchang@suse.com>

	util/grub-mkstandalone: Ensure deterministic tar file creation by sorting contents
	The add_tar_files() function currently iterates through a directory's
	content using readdir(), which doesn't guarantee a specific order. This
	lack of deterministic behavior impacts reproducibility in the build process.

	This commit resolves the issue by introducing sorting functionality.
	The list retrieved by readdir() is now sorted alphabetically before
	incorporation into the tar archive, ensuring consistent and predictable
	file ordering within the archive.

	On the occasion fix tfp memory leak.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-12  Michael Chang  <mchang@suse.com>

	util/grub-mkstandalone: Ensure stable timestamps for generated images
	This change mirrors a previous fix [1] but is specific to images
	generated by grub-mkstandalone.

	The former fix, commit 85a7be241 (util/mkimage: Use stable timestamp
	when generating binaries.), focused on utilizing a stable timestamp
	during binary generation in the util/mkimage context. This commit
	extends that approach to the images produced by grub-mkstandalone,
	ensuring consistency and stability in timestamps across all generated
	binaries.

	[1] 85a7be241 util/mkimage: Use stable timestamp when generating binaries.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-05  Mate Kukri  <mate.kukri@canonical.com>

	net/http: Fix gcc-13 errors relating to type signedness
	Replace definition of HTTP_PORT with a pre-processor macro that converts
	the constant to the correct grub_uint16_t type.

	Change "port" local variable definition in http_establish() to have the
	same type.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com

2023-12-05  Julian Andres Klode  <julian.klode@canonical.com>

	templates: Reinstate unused version comparison functions with warning
	Revert the commit a79c567f6 (templates: Remove unused version comparison
	functions) and add a warning to the functions that they are deprecated.

	Removing the functions directly caused a lot of upgrade issues
	with custom user scripts that called the functions. In Debian and
	Ubuntu, grub-mkconfig is invoked as a post-installation script
	and would fail, causing upgrades to fail halfway through and
	putting the package manager into an inconsistent state.

	FWIW, we get one bug per 2 weeks basically, for an interim Ubuntu
	release which generally does not receive much usage, that is a high
	number.

	The proposal is to pick this for 2.12 and directly after the release
	remove it again. Then users will have time to fix their scripts without
	systems breaking immediately.

	This reverts commit a79c567f6 (templates: Remove unused version
	comparison functions).

	Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
	Cc: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-05  Mate Kukri  <mate.kukri@canonical.com>

	util/grub-install: Delay copying files to {grubdir,platdir} after install_device was validated
	Previously grub-install copied modules to grubdir before doing any
	validation on the install_device.

	When grub-install was called with an invalid install_device, modules
	were already copied to /boot before it found out and was forced to rely
	on atexit() rollback.

	This patch delays copying the modules after at least some install_device
	validation was done, and thus reduces reliance on successful rollback.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-05  Julian Andres Klode  <julian.klode@canonical.com>

	efi: Set shim_lock_enabled even if validation is disabled
	If validation has been disabled via MokSbState, secure boot on the
	firmware is still enabled, and the kernel fails to boot.

	This is a bit hacky, because shim_lock is not *fully* enabled, but
	it triggers the right code paths.

	Ultimately, all this will be resolved by shim gaining it's own image
	loading and starting protocol, so this is more a temporary workaround.

	Fixes: 6425c12cd (efi: Fallback to legacy mode if shim is loaded on x86 archs)

	Cc: Peter Jones <pjones@redhat.com>
	Cc: Michael Chang <mchang@suse.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-05  Oliver Steffen  <osteffen@redhat.com>

	docs: Improve bli module documentation
	Improve the documentation of the bli module and explain in more detail what
	it does. Make clear that GPT formatted drives are expected and other
	partition formats are ignored. Also reorder and reword this section a bit.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-05  Oliver Steffen  <osteffen@redhat.com>

	bli: Add explicit dependency on the part_gpt module
	The bli module has a "hidden" dependency on the part_gpt module, which
	is not picked up automatically by the build system. One purpose of the
	bli module is to communicate the GPT UUID of the partition GRUB was
	launched from to Linux user-space (systemd-gpt-auto-generator).
	Without the part_gpt module, bli is not able to obtain the UUID. Since
	bli does its work in the module initialization function, the order in
	which the modules are loaded is also important: part_gpt needs to be
	loaded before the bli module.

	To solve this, track this dependency explicitly.

	Note that the Boot Loader Interface specification, which bli aims to
	implement, requires GPT formatted drives. The bli module ignores all
	other partition formats.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-05  Oliver Steffen  <osteffen@redhat.com>

	build: Allow explicit module dependencies
	The build system deduces inter-module dependencies from the symbols
	required and exported by the modules. This works well, except for some
	rare cases where the dependency is indirect or hidden. A module might
	not make use of any function of some other module, but still expect its
	functionality to be available to GRUB.

	To solve this, introduce a new file, currently empty, called extra_deps.lst
	to track these cases manually. This file gets processed in the same way
	as the automatically generated syminfo.lst, making it possible to inject
	data into the dependency resolver.

	Since *.lst files are set to be ignored by git, add an exception for
	extra_deps.lst.

	Additionally, introduce a new keyword for the syminfo.lst syntax:
	"depends" allows specifying a module dependency directly:

	  depends <module> <depdendency>...

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-05  Stefan Berger  <stefanb@linux.ibm.com>

	kern/ieee1275/init/ppc64: Display upper_mem_limit when debugging
	Display upper_mem_limit and its rounded-down value in MiB.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-05  Stefan Berger  <stefanb@linux.ibm.com>

	kern/ieee1275/init/ppc64: Fix a comment
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-12-05  Stefan Berger  <stefanb@linux.ibm.com>

	kern/ieee1275/ieee1275: Display successful memory claims when debugging
	Display successful memory claims with exact address and rounded-down
	MiB location and rounded-up size in MiB.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Cc: Eric Snowberg <eric.snowberg@oracle.com>
	Cc: Hari Bathini <hbathini@linux.ibm.com>
	Cc: Pavithra Prakash <pavrampu@in.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Carolyn Scherrer <cpscherr@us.ibm.com>
	Cc: Mahesh Salgaonkar <mahesh@linux.ibm.com>
	Cc: Sourabh Jain <sourabhjain@linux.ibm.com>

2023-12-05  Stefan Berger  <stefanb@linux.ibm.com>

	loader/powerpc/ieee1275: Use new allocation function for kernel and initrd
	On PowerVM and KVM on Power use the new memory allocation function that
	honors restrictions on which memory GRUB can actually use. In the request
	structure indicate the request for a single memory block along with
	address alignment restrictions. Request direct usage of the memory block
	by setting init_region to false (prevent it from being added to GRUB's
	heap). Initialize the found addr to -1, so that -1 will be returned
	to the loader in case no memory could be allocated.

	Report an out-of-memory error in case the initrd could not be loaded.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Cc: Hari Bathini <hbathini@linux.ibm.com>
	Cc: Pavithra Prakash <pavrampu@in.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Carolyn Scherrer <cpscherr@us.ibm.com>
	Cc: Mahesh Salgaonkar <mahesh@linux.ibm.com>
	Cc: Sourabh Jain <sourabhjain@linux.ibm.com>

2023-12-05  Stefan Berger  <stefanb@linux.ibm.com>

	kern/ieee1275/cmain/ppc64: Introduce flags to identify KVM and PowerVM
	Introduce flags to identify PowerVM and KVM on Power and set them where
	each type of host has been detected.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Cc: Hari Bathini <hbathini@linux.ibm.com>
	Cc: Pavithra Prakash <pavrampu@in.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Carolyn Scherrer <cpscherr@us.ibm.com>
	Cc: Mahesh Salgaonkar <mahesh@linux.ibm.com>
	Cc: Sourabh Jain <sourabhjain@linux.ibm.com>

2023-12-05  Stefan Berger  <stefanb@linux.ibm.com>

	kern/ieee1275/init/ppc64: Rename regions_claim() to grub_regions_claim()
	Rename regions_claim() to grub_regions_claim() to make it available for
	memory allocation. The ieee1275 loader will use this function on PowerVM
	and KVM on Power and thus avoid usage of memory that it is not allowed
	to use.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Cc: Hari Bathini <hbathini@linux.ibm.com>
	Cc: Pavithra Prakash <pavrampu@in.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Carolyn Scherrer <cpscherr@us.ibm.com>
	Cc: Mahesh Salgaonkar <mahesh@linux.ibm.com>
	Cc: Sourabh Jain <sourabhjain@linux.ibm.com>

2023-12-05  Stefan Berger  <stefanb@linux.ibm.com>

	kern/ieee1275/init/ppc64: Add support for alignment requirements
	Add support for memory alignment requirements and adjust a candidate
	address to it before checking whether the block is large enough. This
	must be done in this order since the alignment adjustment can make
	a block smaller than what was requested.

	None of the current callers has memory alignment requirements but the
	ieee1275 loader for kernel and initrd will use it to convey them.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Cc: Hari Bathini <hbathini@linux.ibm.com>
	Cc: Pavithra Prakash <pavrampu@in.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Carolyn Scherrer <cpscherr@us.ibm.com>
	Cc: Mahesh Salgaonkar <mahesh@linux.ibm.com>
	Cc: Sourabh Jain <sourabhjain@linux.ibm.com>

2023-12-05  Stefan Berger  <stefanb@linux.ibm.com>

	kern/ieee1275/init/ppc64: Return allocated address using context
	Return the allocated address of the memory block in the request structure
	if a memory allocation was actually done. Leave the address untouched
	otherwise. This enables a caller who wants to use the allocated memory
	directly, rather than adding the memory to the heap, to see where memory
	was allocated. None of the current callers need this but the converted
	ieee1275 loader will make use of it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Cc: Hari Bathini <hbathini@linux.ibm.com>
	Cc: Pavithra Prakash <pavrampu@in.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Carolyn Scherrer <cpscherr@us.ibm.com>
	Cc: Mahesh Salgaonkar <mahesh@linux.ibm.com>
	Cc: Sourabh Jain <sourabhjain@linux.ibm.com>

2023-12-05  Stefan Berger  <stefanb@linux.ibm.com>

	kern/ieee1275/init/ppc64: Decide by request whether to initialize region
	Let the regions_claim() request structure's init_region determine whether
	to call grub_mm_init_region() on it. This allows for adding memory to
	GRUB's memory heap if init_region is set to true, or direct usage of the
	memory otherwise. Set all current callers' init_region to true since they
	want to add memory regions to GRUB's heap.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Cc: Hari Bathini <hbathini@linux.ibm.com>
	Cc: Pavithra Prakash <pavrampu@in.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Carolyn Scherrer <cpscherr@us.ibm.com>
	Cc: Mahesh Salgaonkar <mahesh@linux.ibm.com>
	Cc: Sourabh Jain <sourabhjain@linux.ibm.com>

2023-12-05  Stefan Berger  <stefanb@linux.ibm.com>

	kern/ieee1275/init/ppc64: Introduce a request for regions_claim()
	The regions_claim() function limits the allocation of memory regions
	by excluding certain memory areas from being used by GRUB. This for
	example includes a gap between 640MB and 768MB as well as an upper
	limit beyond which no memory may be used when an fadump is present.
	However, the ieee1275 loader for kernel and initrd currently does not
	use regions_claim() for memory allocation on PowerVM and KVM on Power
	and therefore may allocate memory in those areas that it should not use.

	To make the regions_claim() function more flexible and ultimately usable
	for the ieee1275 loader, introduce a request structure to pass various
	parameters to the regions_claim() function that describe the properties
	of requested memory chunks. In a first step, move the total and flags
	variables into this structure.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Cc: Hari Bathini <hbathini@linux.ibm.com>
	Cc: Pavithra Prakash <pavrampu@in.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Carolyn Scherrer <cpscherr@us.ibm.com>
	Cc: Mahesh Salgaonkar <mahesh@linux.ibm.com>
	Cc: Sourabh Jain <sourabhjain@linux.ibm.com>

2023-11-22  Anthony Iliopoulos  <ailiop@suse.com>

	fs/xfs: Add large extent counters incompat feature support
	XFS introduced 64-bit extent counters for inodes via a series of
	upstream commits and the feature was marked as stable in v6.5 via
	commit 61d7e8274cd8 (xfs: drop EXPERIMENTAL tag for large extent
	counts).

	Further, xfsprogs release v6.5.0 switched this feature on by default
	in mkfs.xfs via commit e5b18d7d1d96 (mkfs: enable large extent counts
	by default).

	Filesystems formatted with large extent count support, nrext64=1, are
	thus currently not recognizable by GRUB, since this is an incompat
	feature. Add the required support so that those filesystems and inodes
	with large extent counters can be read by GRUB.

	Reviewed-by: Andrey Albershteyn <aalbersh@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Marta Lewandowska <mlewando@redhat.com>
	Tested-by: Sebastian Andrzej Siewior <sebastian@breakpoint.cc>

2023-11-08  Vladimir Serbinenko  <phcoder@gmail.com>

	gpt: Add compile time asserts for guid and gpt_partentry sizes
	With new alignment specification it's easy to screw up. Fortunately if it
	happens the size will be bigger than intended. Compile time assert will catch
	this.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-11-08  Vladimir Serbinenko  <phcoder@gmail.com>

	types: Split aligned and packed guids
	On ia64 alignment requirements are strict. When we pass a pointer to
	UUID it needs to be at least 4-byte aligned or EFI will crash.
	On the other hand in device path there is no padding for UUID, so we
	need 2 types in one formor another. Make 4-byte aligned and unaligned types

	The code is structured in a way to accept unaligned inputs
	in most cases and supply 4-byte aligned outputs.

	Efiemu case is a bit ugly because there inputs and outputs are
	reversed and so we need careful casts to account for this
	inversion.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-11-06  Vladimir Serbinenko  <phcoder@gmail.com>

	gpt_partition: Mark grub_gpt_partentry as having natural alignment
	gpt_partition contains grub_guid. We need to decide whether the whole
	structure is unaligned and then we need to use packed_guid. But we never
	have unaligned part entries as we read them in an aligned buffer from disk.
	Hence just make it all aligned.

2023-11-06  Vladimir Serbinenko  <phcoder@gmail.com>

	efi: Deduplicate configuration table search function
	We do table search in many places doing exactly the same algorithm.
	The only minor variance in users is which table is used if several entries
	are present. As specification mandates uniqueness and even if it ever isn't,
	first entry is good enough, unify this code and always use the first entry.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-11-06  Vladimir Serbinenko  <phcoder@gmail.com>

	lsefi: Add missing static qualifier
	known_protocols isn't used anywhere else and even misses grub_ prefix, so
	let's make it local (static).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-11-06  Vladimir Serbinenko  <phcoder@gmail.com>

	types: Fix typo
	Just a small grammar mistake.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-30  Qiumiao Zhang  <zhangqiumiao1@huawei.com>

	util/grub-mount: Check file path sanity
	The function argp_parser() in util/grub-mount.c lacks a check on the
	sanity of the file path when parsing parameters. This results in
	a segmentation fault if a partition is mounted to a non-existent path.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-30  Richard Marko  <srk@48.io>

	configure: Make the DJVU_FONT_SOURCE configurable with --with-dejavufont=FILE
	Font might be located in different location, the default font might
	not be available on all systems or other font might be preferred.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-30  Mads Kiilerich  <mads@kiilerich.com>

	configure: Make the Unifont FONT_SOURCE configurable with --with-unifont=FILE
	Font might be located in different location, the default font might
	not be available on all systems or other font might be preferred.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-30  Jon DeVree  <nuxi@vault24.org>

	fs/xfs: Fix XFS directory extent parsing
	The XFS directory entry parsing code has never been completely correct
	for extent based directories. The parser correctly handles the case
	where the directory is contained in a single extent, but then mistakenly
	assumes the data blocks for the multiple extent case are each identical
	to the single extent case. The difference in the format of the data
	blocks between the two cases is tiny enough that its gone unnoticed for
	a very long time.

	A recent change introduced some additional bounds checking into the XFS
	parser. Like GRUB's existing parser, it is correct for the single extent
	case but incorrect for the multiple extent case. When parsing a directory
	with multiple extents, this new bounds checking is sometimes (but not
	always) tripped and triggers an "invalid XFS directory entry" error. This
	probably would have continued to go unnoticed but the /boot/grub/<arch>
	directory is large enough that it often has multiple extents.

	The difference between the two cases is that when there are multiple
	extents, the data blocks do not contain a trailer nor do they contain
	any leaf information. That information is stored in a separate set of
	extents dedicated to just the leaf information. These extents come after
	the directory entry extents and are not included in the inode size. So
	the existing parser already ignores the leaf extents.

	The only reason to read the trailer/leaf information at all is so that
	the parser can avoid misinterpreting that data as directory entries. So
	this updates the parser as follows:

	For the single extent case the parser doesn't change much:
	1. Read the size of the leaf information from the trailer
	2. Set the end pointer for the parser to the start of the leaf
	   information. (The previous bounds checking set the end pointer to the
	   start of the trailer, so this is actually a small improvement.)
	3. Set the entries variable to the expected number of directory entries.

	For the multiple extent case:
	1. Set the end pointer to the end of the block.
	2. Do not set up the entries variable. Figuring out how many entries are
	   in each individual block is complex and does not seem worth it when
	   it appears to be safe to just iterate over the entire block.

	The bounds check itself was also dependent upon the faulty XFS parser
	because it accidentally used "filename + length - 1". Presumably this
	was able to pass the fuzzer because in the old parser there was always
	8 bytes of slack space between the tail pointer and the actual end of
	the block. Since this is no longer the case the bounds check needs to be
	updated to "filename + length + 1" in order to prevent a regression in
	the handling of corrupt fliesystems.

	Notes:
	* When there is only one extent there will only ever be one block. If
	  more than one block is required then XFS will always switch to holding
	  leaf information in a separate extent.
	* B-tree based directories seems to be parsed properly by the same code
	  that handles multiple extents. This is unlikely to ever occur within
	  /boot though because its only used when there are an extremely large
	  number of directory entries.

	Fixes: ef7850c75 (fs/xfs: Fix issues found while fuzzing the XFS filesystem)
	Fixes: b2499b29c (Adds support for the XFS filesystem.)
	Fixes: https://savannah.gnu.org/bugs/?64376

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Sebastian Andrzej Siewior <sebastian@breakpoint.cc>
	Tested-by: Marta Lewandowska <mlewando@redhat.com>

2023-10-30  Lidong Chen  <lidong.chen@oracle.com>

	fs/xfs: Incorrect short form directory data boundary check
	After parsing of the current entry, the entry pointer is advanced
	to the next entry at the end of the "for" loop. In case where the
	last entry is at the end of the data boundary, the advanced entry
	pointer can point off the data boundary. The subsequent boundary
	check for the advanced entry pointer can cause a failure.

	The fix is to include the boundary check into the "for" loop
	condition.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Sebastian Andrzej Siewior <sebastian@breakpoint.cc>
	Tested-by: Marta Lewandowska <mlewando@redhat.com>

2023-10-12  Vladimir 'phcoder' Serbinenko  <phcoder@gmail.com>

	Revert "zfsinfo: Correct a check for error allocating memory"
	Original commit is wrong because grub_file_get_device_name() may return NULL
	if we use implicit $root. Additionally, the grub_errno is guaranteed to be
	GRUB_ERR_NONE at the beginning of a command. So, everything should work as
	expected and Coverity report, CID 73668, WRT to this code should be treated
	as false positive.

	This reverts commit 7aab03418 (zfsinfo: Correct a check for error allocating memory).

	Fixes: 7aab03418 (zfsinfo: Correct a check for error allocating memory)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-12  ValdikSS  <iam@valdikss.org.ru>

	disk/i386/pc/biosdisk: Read up to 63 sectors in LBA mode
	Current code imposes limitations on the amount of sectors read in
	a single call according to CHS layout of the disk even in LBA
	read mode. There's no need to obey CHS layout restrictions for
	LBA reads on LBA disks. It only slows down booting process.

	See: https://lore.kernel.org/grub-devel/d42a11fa-2a59-b5e7-08b1-d2c60444bb99@valdikss.org.ru/

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-12  ValdikSS  <iam@valdikss.org.ru>

	kern/i386/pc/init: Flush cache only on VIA C3 and earlier
	The code flushes the cache on VIA processors unconditionally which
	is excessive. Check for cpuid family and execute wbinvd only on C3
	and earlier.

	Fixes: https://savannah.gnu.org/bugs/?45149
	Fixes: 25492a0f0 (Add wbinvd around bios call.)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-12  Fabian Vogt  <fvogt@suse.de>

	fs/btrfs: Zero file data not backed by extents
	Implicit holes in file data need to be zeroed explicitly, instead of
	just leaving the data in the buffer uninitialized.

	This led to kernels randomly failing to boot in "fun" ways when loaded
	from btrfs with the no_holes feature enabled, because large blocks of
	zeros in the kernel file contained random data instead.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Qu Wenruo <wqu@suse.com>

2023-10-12  Stefan Berger  <stefanb@linux.ibm.com>

	kern/ieee1275/init: Restrict high memory in presence of fadump on ppc64
	When a kernel dump is present then restrict the high memory regions to
	avoid allocating memory where the kernel dump resides. Use the
	ibm,kernel-dump node under /rtas to determine whether a kernel dump
	exists and up to which limit GRUB can use available memory. Set the
	upper_mem_limit to the size of the kernel dump section of type
	REAL_MODE_REGION and therefore only allow GRUB's memory usage for high
	addresses from RMO_ADDR_MAX to upper_mem_limit. This means that GRUB can
	use high memory in the range of RMO_ADDR_MAX (768MB) to upper_mem_limit
	and the kernel-dump memory regions above upper_mem_limit remain
	untouched. This change has no effect on memory allocations below
	linux_rmo_save (typically at 640MB).

	Also, fall back to allocating below rmo_linux_save in case the chunk of
	memory there would be larger than the chunk of memory above RMO_ADDR_MAX.
	This can for example occur if a free memory area is found starting at 300MB
	extending up to 1GB but a kernel dump is located at 768MB and therefore
	does not allow the allocation of the high memory area but requiring to use
	the chunk starting at 300MB to avoid an unnecessary out-of-memory condition.

	Reviewed-by: Hari Bathini <hbathini@linux.ibm.com>
	Cc: Pavithra Prakash <pavrampu@in.ibm.com>
	Cc: Michael Ellerman <mpe@ellerman.id.au>
	Cc: Carolyn Scherrer <cpscherr@us.ibm.com>
	Cc: Mahesh Salgaonkar <mahesh@linux.ibm.com>
	Cc: Sourabh Jain <sourabhjain@linux.ibm.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-12  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell: Enable RNG device to better test stack smashing
	In certain firmwares, e.g. OVMF, the RNG protocol is not enabled unless
	there is an RNG device. When not enabled, GRUB fails to initialize the
	stack guard with random bytes. For testing, this is not a big issue, but
	there have been bugs found in the initialization. So turn this on for EFI
	platforms to catch any regressions.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-12  Glenn Washburn  <development@efficientek.com>

	kern/efi/init: Disable stack smashing protection on grub_efi_init()
	GCC is electing to instrument grub_efi_init() to give it stack smashing
	protection when configuring with --enable-stack-protector on the x86_64-efi
	target. In the function prologue, the canary at the top of the stack frame
	is set to the value of the stack guard. And in the epilogue, the canary is
	checked to verify if it is equal to the guard and if not to call the stack
	check fail function. The issue is that grub_efi_init() sets up the guard
	by initializing it with random bytes, if the firmware supports the RNG
	protocol. So in its prologue the canary will be set with the value of the
	uninitialized guard, likely NUL bytes. Then the guard is initialized, and
	finally the epilogue checks the canary against the guard, which will almost
	certainly be different. This causes the code path for a smashed stack to be
	taken, causing the machine to print out a message that stack smashing was
	detected, wait 5 seconds, and then reboot. Disable grub_efi_init()
	instrumentation so there is no stack smashing false positive generated.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-12  Glenn Washburn  <development@efficientek.com>

	disk/cryptodisk: Add support for LUKS2 in (proc)/luks_script
	The sector size in bytes is added to each line and it is allowed to be
	6 decimal digits long, which covers the most common cases of 512 and 4096
	byte sectors with space for two additional digits as future-proofing. The
	size allocation is updated to reflect this additional field. Also make
	clearer the size allocation calculation.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-12  Glenn Washburn  <development@efficientek.com>

	disk/cryptodisk: Optimize luks_script_get()
	Use the return value of grub_snprintf() to move the string pointer forward,
	instead of incrementing the string pointer iteratively until a NULL byte is
	reached. Move the space out of the format string argument, a small
	optimization, but also makes the spacing clearer. Also, use the new
	PRIxGRUB_OFFSET instead of PRIuGRUB_UINT64_T to accurately reflect the
	format string for this type.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-12  Glenn Washburn  <development@efficientek.com>

	term/serial: Ensure proper NULL termination after grub_strncpy()
	A large enough argument to the --port option could cause a string buffer
	to be not NULL terminated because grub_strncpy() does not guarantee NULL
	termination if copied string is longer than max characters to copy.

	Fixes: 712309eaae04 (term/serial: Use grub_strncpy() instead of grub_snprintf() when only copying string)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-12  Heinrich Schuchardt  <heinrich.schuchardt@canonical.com>

	commands/efi/lsefisystab: Print the UEFI specification revision in human readable form
	E.g. 2.10 instead of 00020064 and 2.3.1 instead of 0002001f.

	See UEFI 2.10 specification, chapter 4.2.1 EFI_TABLE_HEADER.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-03  Maxim Suhanov  <dfirblog@gmail.com>

	fs/ntfs: Make code more readable
	Move some calls used to access NTFS attribute header fields into
	functions with human-readable names.

	Suggested-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-03  Maxim Suhanov  <dfirblog@gmail.com>

	fs/ntfs: Fix an OOB read when parsing a volume label
	This fix introduces checks to ensure that an NTFS volume label is always
	read from the corresponding file record segment.

	The current NTFS code allows the volume label string to be read from an
	arbitrary, attacker-chosen memory location. However, the bytes read are
	always treated as UTF-16LE. So, the final string displayed is mostly
	unreadable and it can't be easily converted back to raw bytes.

	The lack of this check is a minor issue, likely not causing a significant
	data leak.

	Reported-by: Maxim Suhanov <dfirblog@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-03  Maxim Suhanov  <dfirblog@gmail.com>

	fs/ntfs: Fix an OOB read when parsing bitmaps for index attributes
	This fix introduces checks to ensure that bitmaps for directory indices
	are never read beyond their actual sizes.

	The lack of this check is a minor issue, likely not exploitable in any way.

	Reported-by: Maxim Suhanov <dfirblog@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-03  Maxim Suhanov  <dfirblog@gmail.com>

	fs/ntfs: Fix an OOB read when parsing directory entries from resident and non-resident index attributes
	This fix introduces checks to ensure that index entries are never read
	beyond the corresponding directory index.

	The lack of this check is a minor issue, likely not exploitable in any way.

	Reported-by: Maxim Suhanov <dfirblog@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-03  Maxim Suhanov  <dfirblog@gmail.com>

	fs/ntfs: Fix an OOB read when reading data from the resident $DATA attribute
	When reading a file containing resident data, i.e., the file data is stored in
	the $DATA attribute within the NTFS file record, not in external clusters,
	there are no checks that this resident data actually fits the corresponding
	file record segment.

	When parsing a specially-crafted file system image, the current NTFS code will
	read the file data from an arbitrary, attacker-chosen memory offset and of
	arbitrary, attacker-chosen length.

	This allows an attacker to display arbitrary chunks of memory, which could
	contain sensitive information like password hashes or even plain-text,
	obfuscated passwords from BS EFI variables.

	This fix implements a check to ensure that resident data is read from the
	corresponding file record segment only.

	Fixes: CVE-2023-4693

	Reported-by: Maxim Suhanov <dfirblog@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-03  Maxim Suhanov  <dfirblog@gmail.com>

	fs/ntfs: Fix an OOB write when parsing the $ATTRIBUTE_LIST attribute for the $MFT file
	When parsing an extremely fragmented $MFT file, i.e., the file described
	using the $ATTRIBUTE_LIST attribute, current NTFS code will reuse a buffer
	containing bytes read from the underlying drive to store sector numbers,
	which are consumed later to read data from these sectors into another buffer.

	These sectors numbers, two 32-bit integers, are always stored at predefined
	offsets, 0x10 and 0x14, relative to first byte of the selected entry within
	the $ATTRIBUTE_LIST attribute. Usually, this won't cause any problem.

	However, when parsing a specially-crafted file system image, this may cause
	the NTFS code to write these integers beyond the buffer boundary, likely
	causing the GRUB memory allocator to misbehave or fail. These integers contain
	values which are controlled by on-disk structures of the NTFS file system.

	Such modification and resulting misbehavior may touch a memory range not
	assigned to the GRUB and owned by firmware or another EFI application/driver.

	This fix introduces checks to ensure that these sector numbers are never
	written beyond the boundary.

	Fixes: CVE-2023-4692

	Reported-by: Maxim Suhanov <dfirblog@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-03  Michael Chang  <mchang@suse.com>

	kern/acpi: Skip NULL entries in RSDT and XSDT
	During attempts to configure a serial console, a Page Fault Exception
	and system reset were encountered, specifically on release 2.12~rc1.
	This issue was not present in prior versions and seemed to affect only
	a specific machine, potentially pointing to hardware or firmware flaw.

	After investigation, it was discovered that the invalid page access
	occurred during the discovery of serial MMIO ports as specified by
	ACPI's SPCR table [1]. The recent change uncovered an issue in GRUB's
	ACPI driver.

	In certain cases, the XSDT/RSDT root table might contain a NULL entry as
	a terminator, depending on how the tables are assembled. GRUB cannot
	blindly trust the address in the root table to be valid and should
	perform a sanity check for NULL entries. This patch introduces this
	simple check.

	This fix is also inspired by a related Linux kernel fix [2].

	[1] 7b192ec4c term/ns8250: Use ACPI SPCR table when available to configure serial
	[2] 0f929fbf0 ACPICA: Tables: Add new mechanism to skip NULL entries in RSDT and XSDT.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-03  Glenn Washburn  <development@efficientek.com>

	util/grub-install-common: Print usable grub-mkimage command
	When grub-install is run with the verbose option, it will print a log
	message indicating the grub-mkimage command and arguments used.
	GRUB no longer calls the grub-mkimage binary internally, however the
	command logged is a command that if run should effectively be what
	grub-install used. However, as this has changed some of the newer
	options have been incorrectly added so that the printed command fails
	when run separately. This change makes the displayed command run as
	intended.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-03  Glenn Washburn  <development@efficientek.com>

	util/grub-install-common: Minor improvements to printing of grub-mkimage command
	This is a preparatory patch to make the following patch less cluttered. The
	only visible change made here is to not print extra spaces when either or
	both --note or --disable-shim-lock are not given and to not print an extra
	space at the end of the command. The latter is done by constructing the
	trailing argument string with spaces in front of each argument rather than
	trailing. The allocation of the argument string is made precise, which has
	the benefit of saving a few bytes, but more importantly self-documenting
	what the needed allocated bytes are. Also, unneeded braces are removed from
	an if block.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-10-03  Vladimir 'phcoder' Serbinenko  <phcoder@gmail.com>

	lib/i386/relocator64: Fix 64-bit FreeBSD boot on BIOS
	The commit 80948f532d (lib/i386/relocator64: Build fixes for i386) has
	broken 64-bit FreeBSD boot on BIOS. This patch fixes the issue.

	Fixes: 80948f532d (lib/i386/relocator64: Build fixes for i386)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-09-22  Anthony PERARD  <anthony.perard@citrix.com>

	templates/linux_xen: Fix XSM entries generation
	It turns out that setting $xen_version in linux_entry_xsm() override
	$xen_version in the loop over $reverse_sorted_xen_list. This means
	that only one entry per Xen version is going to enable XSM, but all
	further entries are going to have "(XSM enabled)" in their titles
	without enabling XSM.

	When a "xenpolicy-$xen_version" file was found for the current
	$xen_version, it would overwrite $xen_version to add "(XSM enabled)" to
	the menu entry title. Once updated, the next call to linux_entry_xsm()
	would also have this modified $xen_version and would look for the file
	"xenpolicy-*(XSM enabled)" and fail.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-09-22  Xiaotian Wu  <wuxiaotian@loongson.cn>

	loongarch: Eliminate cmodel compilation warnings
	In the configure phase, the "-mcmodel=large" CFLAGS passed the test, but
	because it has not been implemented in gcc, the following warning will
	appear when compiling:

	  gcc: warning: 'large' is not supported, now cmodel is set to 'normal'

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-09-22  Glenn Washburn  <development@efficientek.com>

	configure: Enable -fno-omit-frame-pointer for backtrace module
	The backtrace module is written assuming that the frame pointer is in %ebp.
	By default, -Os optimization level is used, which enables the gcc option
	-fomit-frame-pointer. This breaks the backtrace functionality. Enabling
	this may cause an unnoticeable performance cost and virtually no size increase.

	The backtrace command on x86_64 and probably i386 is broken due to the
	above rationale. I've not verified, but presumably the backtrace that used
	to be printed for an unhandled CPU exception is also broken. Do any distros
	handle this?

	Considering that, to my knowledge, no one has complained about this in the
	over 13 years that -Os has been used, has this code actually been useful?
	Is it worth disabling -fomit-frame-pointer? Though, I don't see much downside
	right now in disabling it. Alternatively, we could disable/remove the
	backtrace code. I think it would be nice to keep it and have it working.

	Nowadays, presumably QEMU makes the GDB stub rarely used as I imagine most
	are developing in a virtual machines. Also, the GDB stub does not work in UEFI.
	So, if anyone is using it on real hardware, they are doing so on pretty old
	machines. The lack of a GDB stub does not seem to be a pain point because
	no one has got it working on UEFI.

	This patch gets the backtrace command working on x86_64-efi in QEMU for me.
	However, it hangs when run on my laptop. Not sure what's going on there.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-09-22  Ard Biesheuvel  <ardb@kernel.org>

	loader/efi/linux: Implement x86 mixed mode using legacy boot
	Recent mixed-mode Linux kernels, i.e., v4.0 or newer, can access EFI
	runtime services at OS runtime even when the OS was not entered via the
	EFI stub. This is because, instead of reverting back to the firmware's
	segment selectors, GDTs and IDTs, the 64-bit kernel simply calls 32-bit
	runtime services using compatibility mode, i.e., the same mode used for
	32-bit user space, without taking down all interrupt handling, exception
	handling, etc.

	This means that GRUB's legacy x86 boot mode is sufficient to make use of
	this: 32-bit i686 builds of GRUB can already boot 64-bit kernels in EFI
	enlightened mode, but without going via the EFI stub, and provide all
	the metadata that the OS needs to map the EFI runtime regions and call
	EFI runtime services successfully.

	It does mean that GRUB should not attempt to invoke the firmware's
	LoadImage()/StartImage() methods on kernel builds that it knows cannot
	be started natively. So, add a check for this in the native EFI boot
	path and fall back to legacy x86 mode in such cases.

	Note that in the general case, booting non-native images of the same
	native word size, e.g., x64 EFI apps on arm64 firmware, might be
	supported by means of emulation. So, let's only disallow images that use
	a non-native word size. This will also permit booting i686 kernels on
	x86_64 builds, although without access to runtime services, as this is
	not supported by Linux.

	This change on top of 2.12-rc1 is sufficient to boot ordinary Linux
	mixed mode builds and get full access to the EFI runtime services.

	Cc: Daniel Kiper <daniel.kiper@oracle.com>
	Cc: Steve McIntyre <steve@einval.com>
	Cc: Julian Andres Klode <julian.klode@canonical.com>
	Acked-by: Dimitri John Ledkov <dimitri.ledkov@canonical.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-09-22  Ard Biesheuvel  <ardb@kernel.org>

	loader/i386/linux: Prefer entry in long mode when booting via EFI
	The x86_64 Linux kernel can be booted in 32-bit mode, in which case the
	startup code creates a set of preliminary page tables that map the first
	4 GiB of physical memory 1:1 and enables paging. This is a prerequisite
	for 64-bit execution and can therefore only be implemented in 32-bit code.

	The x86_64 Linux kernel can also be booted in 64-bit mode directly: this
	implies that paging is already enabled and it is the responsibility of
	the bootloader to ensure that the active page tables cover the entire
	loaded image, including its BSS space, the size of which is described in
	the image's setup header.

	Given that the EFI spec mandates execution in long mode for x86_64 and
	stipulates that all system memory is mapped 1:1, the Linux/x86
	requirements for 64-bit entry can be met trivially when booting on
	x86_64 via EFI. So, enter via the 64-bit entry point in this case.

	This involves inspecting the xloadflags field in the setup header to
	check whether the 64-bit entry point is supported. This field was
	introduced in Linux version v3.8 (early 2013).

	This change ensures that all EFI firmware tables and other assets passed
	by the firmware or bootloader in memory remain mapped and accessible
	throughout the early startup code.

	Avoiding the drop out of long mode will also be needed to support
	upcoming CPU designs that no longer implement 32-bit mode at all
	(as recently announced by Intel [0]).

	[0] https://www.intel.com/content/www/us/en/developer/articles/technical/envisioning-future-simplified-architecture.html

	Cc: Daniel Kiper <daniel.kiper@oracle.com>
	Cc: Julian Andres Klode <julian.klode@canonical.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-09-18  Vladimir Serbinenko  <phcoder@gmail.com>

	ZFS: Check bonustype in addition to dnode type
	Some dnodes are shared with properties zap. This is used
	e.g. for quotas. Then dnode type is 0xc4 and GRUB stumbles on
	this. Check bonus type and if it's ok then ignore dnode type mismatch

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-09-18  Vladimir Serbinenko  <phcoder@gmail.com>

	ZFS: Don't iterate over null objsets
	Reading them is harmless but useless as they are empty by definition

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-09-18  Vladimir Serbinenko  <phcoder@gmail.com>

	ZFS: Fix invalid memcmp
	We ended up comparing over unset values as we had dnode_phys on one side
	and dnode on another

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-09-18  Vladimir Serbinenko  <phcoder@gmail.com>

	ZFS: support inode type embed into its ID
	This is a speedup used in some ZFS version. This trips GRUB and makes it
	unable to access directories. Just skip it for now and revisit
	if we ever need this speedup.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-31  Heinrich Schuchardt  <heinrich.schuchardt@canonical.com>

	video/efi_gop: Require shadow if PixelBltOnly
	If the EFI graphics pixel format is PixelBltOnly, we cannot write directly
	to the frame buffer. We need the shadow frame buffer which we copy via
	the BitBlt operation to the hardware.

	If the pixel format is PixelBltOnly and allocation of the shadow frame
	buffer fails, we must raise an error to signal that the EFI GOP protocol
	is not usable.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-31  Glenn Washburn  <development@efficientek.com>

	docs: Add menu to prevent older makeinfo versions from failing
	It has been reported that makeinfo version 4.13a complains and returns
	error when menus for chapter structuring commands are not present. It
	is also known that newer makeinfos, such as version 6.7, will create
	default menus when needed. Since the menu will be created regardless,
	explicitly create it to support older makeinfo versions. This also
	enables building to be successful when an older makeinfo is installed
	because in that case info files are attempted to be generated with the
	"all" target.

	Reported-by: Olaf Hering <olaf@aepfle.de>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Olaf Hering <olaf@aepfle.de>

2023-08-31  Glenn Washburn  <development@efficientek.com>

	docs: Use @ref instead of @xref
	The @xref command is meant to be used at the beginning of a sentence
	because its expansion creates a "See " prefix on all output formats, and
	on older makeinfo versions is strict about enforcing a "." or "," after
	the command. The @ref command has no such restriction and is just the
	link, which allows more control over output. This also fixes an issue
	where there was a repeated "see" in the output.

	Reported-by: Olaf Hering <olaf@aepfle.de>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Olaf Hering <olaf@aepfle.de>

2023-08-31  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell-luks-tester: Allow setting timeout
	Allow using the envvar GRUB_SHELL_LUKS_TIMEOUT to change the default
	timeout. If not specified, use value of GRUB_SHELL_DEFAULT_TIMEOUT. And
	if that is not specified, fallback to original 600s timeout.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-31  Glenn Washburn  <development@efficientek.com>

	disk/cryptodisk: Fix missing change when updating to use grub_uuidcasecmp()
	This was causing the cryptomount command to return failure even though
	the crypto device was successfully added. Of course, this meant that any
	script using the return code would behave unexpectedly.

	Fixes: 3cf2e848bc03 (disk/cryptodisk: Allows UUIDs to be compared in a dash-insensitive manner)

	Suggested-by: Olaf Hering <olaf@aepfle.de>
	Reviewed-by: Patrich Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-31  Glenn Washburn  <development@efficientek.com>

	kern/misc: Make grub_vsnprintf() C99/POSIX conformant
	To comply with C99 and POSIX standards, snprintf() should return the
	number of bytes that would be written to the string (excluding the
	terminating NUL byte) if the buffer size was big enough. Before this
	change, the return value was the minimum of the standard return and the
	length of the buffer. Rarely is the return value of grub_snprintf() or
	grub_vsnprintf() used with current code, and the few places where it is
	used do not need to be changed.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-31  Glenn Washburn  <development@efficientek.com>

	tests: Add serial_test
	This test is meant to test output via various serial devices. Currently,
	only the PCI serial device is tested.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-31  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell: Allow explicitly using other serial ports for output
	While here, move "-qemu=*" case to be next to the "--qemu-opts=*" case.
	This causes no change in logic, but is more logically located.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-31  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell-luks-tester: Do not remove generated files when test fails to allow debugging
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	tests/util/grub-shell: Convert spaces to TABs
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-14  Glenn Washburn  <development@efficientek.com>

	commands/ls: Print "????????????" if unable to get file size
	In long list mode, if the file can not be opened, the file is not printed.
	Instead, print the file but print the size as "????????????".

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-14  Glenn Washburn  <development@efficientek.com>

	commands/ls: Send correct dirname to print functions
	For each non-directory path argument to the ls command, the full path was
	being sent to the print functions, instead of the dirname. The long output
	print function expected dirname to be the directory containing the file
	and so could not open the file to get the file size because the generated
	path was incorrect. This caused the output to be a blank line.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-14  Glenn Washburn  <development@efficientek.com>

	fs/archelp: If path given to grub_archelp_dir() is not a directory return error
	Specifically, return GRUB_ERR_BAD_FILE_TYPE because this is what is
	expected by the ls command when it is given a path to a non-directory.
	This fixes a bug where calling ls with a list of non-directory paths
	outputs a blank line for each such argument.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-14  Glenn Washburn  <development@efficientek.com>

	commands/videoinfo: Prevent crash when run while video driver already active
	The videoinfo command will initialize all non-active video adapters. Video
	drivers tend to zero out the global framebuffer object on initialization.
	This is not a problem when there is no active video adapter. However, when
	there is, then outputting to the video adapter will cause a crash because
	methods in the framebuffer object are reinitialized. For example, this
	command sequence will cause a crash.

	  terminal_output --append gfxterm; videoinfo

	When running in a QEMU headless with GRUB built for the x86_64-efi target,
	the first command initializes the Bochs video adapter, which, among
	other things, sets the set_page() member function. Then when videoinfo is
	run, all non-Bochs video adapters will be initialized, each one wiping
	the framebuffer and thus setting set_page to NULL. Soon after the videoinfo
	command finishes there will be a call to grub_refresh(), which will
	ultimately call the framebuffer's set_page which will be NULL and cause
	a crash when called.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-14  Glenn Washburn  <development@efficientek.com>

	docs: Improve initrd documentation
	A list of improvements:
	  * Remove reference to "initial ramdisk" and replace with "initrd". This
	    then covers the case of ramdisk and ramfs, which is the usual method
	    with kernels 2.6 and newer.
	  * Add sentence with URL to initrd documentation Linux kernel.
	  * Add a section documenting how to have the initrd command generate
	    a new-style initrd via a specially crafted argument and include an example.
	  * Update initrd16 to refer to the initrd section and make note that
	    initrd16 is only on the pc platform.

	Reviewed-by: Oskari Pirhonen <xxc3ncoredxx@gmail.com>
	Reviewed-by: Paul Menzel <pmenzel@molgen.mpg.de>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-14  Glenn Washburn  <development@efficientek.com>

	term/ns8250-spcr: Continue processing SPCR table even if revision is < 2
	According to commit 0231d00082 (ACPI: SPCR: Make SPCR available to x86)
	to the Linux kernel, "On x86, many systems have a valid SPCR table but the
	table version is not 2 so the table version check must be a warning."

	Reviewed-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-14  Glenn Washburn  <development@efficientek.com>

	docs: A note to cat that hexdump should be used for binary data
	The cat command should not be used to print binary data because it can
	show bytes not in the binary data and not show bytes that are in the data,
	which can lead to confusion. This happens because cat does some processing
	of the data stream, namely trying to decode substrings as UTF-8.

	Reviewed-by: Oskari Pirhonen <xxc3ncoredxx@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-14  Glenn Washburn  <development@efficientek.com>

	docs: Document hexdump command
	Reviewed-by: Oskari Pirhonen <xxc3ncoredxx@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	docs: Group usage of user-space utilities into single chapter
	Reviewed-by: Oskari Pirhonen <xxc3ncoredxx@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-14  Qiumiao Zhang  <zhangqiumiao1@huawei.com>

	util/grub-mount: Fix memory leak in fuse_getattr()
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-14  Michał Grzelak  <mchl.grzlk@gmail.com>

	configure: Fix SDL2 typo by referencing value
	During configuration of SDL2, variable enable_grub_emu_sdl2 is checked
	whether to throw an error message. However, error could not happen
	because two unequal strings were compared. Fix this by referencing
	value of enable_grub_emu_sdl2, not name.

	Fixes: 17d6ac1a7 (emu: Add SDL2 support)

	Reviewed-by: Julian Andres Klode <julian.klode@canonical.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Paul Menzel <pmenzel@molgen.mpg.de>

2023-08-14  Glenn Washburn  <development@efficientek.com>

	docs: Add missing assumption
	Also reword a prior sentence to be more clear.

	Fixes: 5a3d2b4742df (docs: Add debugging chapter to development documentation)

	Reviewed-by: Oskari Pirhonen <xxc3ncoredxx@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-14  Oskari Pirhonen  <xxc3ncoredxx@gmail.com>

	util/grub.d/25_bli.in: Fix shebang on unmerged-usr
	On an unmerged-usr system, grub-mkconfig errors out with the following
	error due to /usr/bin/sh not existing:

	  /usr/sbin/grub-mkconfig: /etc/grub.d/25_bli: /usr/bin/sh: bad interpreter: No such file or directory

	Use a /bin/sh shebang to fix the error as well as match the other
	existing files.

	Fixes: 158a6583e (util/grub.d/25_bli.in: Activate bli module on EFI)

	Reviewed-by: Glenn Washburn <development@efficientek.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Oliver Steffen <osteffen@redhat.com>

2023-08-14  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell-luks-tester: Allow GRUB_SHELL_LUKS_DEFAULT_DEBUG and GRUB_TEST_DEFAULT_DEBUG to specify the debug level to grub-shell
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-14  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell: Allow setting the value of debug regardless of its previous state
	This allows an invocation of grub-shell to set the value of debug regardless
	of the global default environment variable GRUB_SHELL_DEFAULT_DEBUG.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-14  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell: Allow setting default timeout via GRUB_SHELL_DEFAULT_TIMEOUT envvar
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-08-14  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell: Add --verbose to grub-mkrescue when $debug is greater than 2
	Since this is fairly verbose output, do not enable first level of debug
	is turned on.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-07-10  Daniel Kiper  <daniel.kiper@oracle.com>

	Release 2.12~rc1

2023-07-03  Daniel Kiper  <daniel.kiper@oracle.com>

	efi: Fallback to legacy mode if shim is loaded on x86 archs
	The LoadImage() provided by the shim does not consult MOK when loading
	an image. So, simply signature verification fails when it should not.
	This means we cannot use Linux EFI stub to start the kernel when the
	shim is loaded. We have to fallback to legacy mode on x86 architectures.
	This is not possible on other architectures due to lack of legacy mode.

	This is workaround which should disappear when the shim provides
	LoadImage() which looks up MOK during signature verification.

	On the occasion align constants in include/grub/efi/sb.h.

	Reviewed-by: Ard Biesheuvel <ardb@kernel.org>

2023-07-03  Daniel Kiper  <daniel.kiper@oracle.com>

	efi: Drop __grub_efi_api attribute from shim_lock->verify() function
	... because (surprisingly) it does not use specific EFI calling convention...

	Fixes: 6a080b9cd (efi: Add calling convention annotation to all prototypes)

	Reviewed-by: Ard Biesheuvel <ardb@kernel.org>

2023-07-03  Samuel Thibault  <samuel.thibault@ens-lyon.org>

	templates: Start pci-arbiter before acpi on Hurd
	acpi actually needs to access PCI, while pci-arbiter will not be making
	use of ACPI, so we need to start acpi first.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-07-03  Michał Grzelak  <mchl.grzlk@gmail.com>

	configure.ac: Fix typo by adding missing $
	During configuration of SDL, variable enable_grub_emu_sdl is checked
	whether to throw an error message. However, error could not happen
	because two unequal strings were compared. Fix this by referencing
	value of enable_grub_emu_sdl, not name.

	Fixes: 17d6ac1a7 (emu: Add SDL2 support)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-07-03  Glenn Washburn  <development@efficientek.com>

	docs: Minor corrections
	When referring to initrd16 the link for initrd16 should be used, not a link
	for initrd. Also, correct the spelling of additionally and add a comma after
	it to correct its grammatical usage.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-07-03  Glenn Washburn  <development@efficientek.com>

	kern/misc: Add space after comma in function argument list
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	commands/regexp: Fix typo
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-07-03  Glenn Washburn  <development@efficientek.com>

	term/serial: Use grub_strncpy() instead of grub_snprintf() when only copying string
	Using grub_strncpy() instead of grub_snprintf() is less overhead and
	indicates clearly that the dest should be the same string as the source.

	Also fix indentation.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-07-03  Glenn Washburn  <development@efficientek.com>

	loader/linux: Print debug message for each generated newc path generated
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-07-03  Glenn Washburn  <development@efficientek.com>

	include/grub/types.h: Add PRI*GRUB_OFFSET and PRI*GRUB_DISK_ADDR
	These are currently always the same as PRI*GRUB_UINT64_T, but they may
	not be in the future.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-07-03  Glenn Washburn  <development@efficientek.com>

	kern/misc: Support octal printf format code
	Also add parenthesis to nested ternary operator to improve clarity.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-07-03  Glenn Washburn  <development@efficientek.com>

	gitignore: Ignore python bytecode files
	Python bytecode files, which end in .pyc, may be generated by the build
	system as needed and should not go into the git repository.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-07-03  Glenn Washburn  <development@efficientek.com>

	loader/linux: Only emit newc directory once
	When creating at runtime a newc initrd via arguments to initrd with "newc:"
	prefixes, only emit a directory path record once. The original code
	intended to do that by bailing out of emitting the record when the record
	to be created matches an existing record. However, this does not happen
	because grub_memcmp() is improperly checked.

	Generating duplicate newc directory records does not cause any problems
	because the Linux unpacker will skip it once it sees the directory already
	exists. This fix saves a little processing and makes the generated newc
	cpio archive a little smaller.

	Fixes: 92750e4c60 (Add ability to generate newc additions on runtime.)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-07-03  Glenn Washburn  <development@efficientek.com>

	loader/efi/linux: Fix formatting and remove unneeded parenthesis
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-07-03  Glenn Washburn  <development@efficientek.com>

	loader/efi/linux: Print EFI status as hex number instead of uint
	EFI status codes are of different classes depending on the first byte and
	all error status codes defined in appendix D of the main spec start from
	1 and have the high bit set. When printing as a uint, the decimal is a very
	large number that needs have the high bit cleared get the spec error code.
	This can be easily visually done by a human if the number is printed as hex.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-07-03  Oskari Pirhonen  <xxc3ncoredxx@gmail.com>

	docs: Minor edits to debugging chapter
	Small set of wording and grammatical edits which did not make it in time
	for the original review of the chapter.

	Reviewed-by: Glenn Washburn <development@efficientek.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-23  Daniel Kiper  <daniel.kiper@oracle.com>

	lib/relocator: Fix OOB write when initializing lo->freebytes[]
	Fixes: CID 96636

	Reviewed-by: Vladimir Serbinenko <phcoder@gmail.com>

2023-06-23  Daniel Kiper  <daniel.kiper@oracle.com>

	lib/relocator: Enforce GRUB_RELOCATOR_FIRMWARE_REQUESTS_QUANT divisibility by 8
	Most of leftover code blindly assumes GRUB_RELOCATOR_FIRMWARE_REQUESTS_QUANT
	divisibility by 8. So, enforce this at compile time.

	Reviewed-by: Vladimir Serbinenko <phcoder@gmail.com>

2023-06-23  Julian Andres Klode  <julian.klode@canonical.com>

	emu: Add SDL2 support
	So all we did with the surface in SDL1 was split into window,
	surface, renderer and texture. Instead of drawing into the
	surface and then flipping, you build your pixels, then update
	a texture and then copy the texture to the renderer.

	Here we use an empty RGB surface to hold our pixels, which enables
	us to keep most of the code the same. The SDL1 code has been adjusted
	to refer to "surface" instead of "window" when trying to access the
	properties of the surface.

	This approaches the configuration by adding a new --enable-grub-emu-sdl2
	argument. If set to yes, or auto detected, it disables SDL1 support
	automatically.

	This duplicates the sdl module block in Makefile.core.def which may
	be something to be aware of, but we also don't want to build separate
	module.

	Fixes: https://bugs.debian.org/1038035

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-23  Julian Andres Klode  <julian.klode@canonical.com>

	emu: SDL style fixes
	These should be quite obvious and will make the SDL2 patch easier
	to read then doing it inline there.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-23  Michał Grzelak  <mchl.grzlk@gmail.com>

	tpm: Enable boot despite unknown firmware failure
	Currently booting the system is prevented when call to EFI firmware
	hash_log_extend_event() returns unknown error. Solve this by following
	convention used in commit a4356538d (commands/tpm: Don't propagate
	measurement failures to the verifiers layer).

	Let the system to be bootable by default when unknown TPM error is
	encountered. Check environment variable tpm_fail_fatal to fallback to
	previous behaviour.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-23  Daniel Kiper  <daniel.kiper@oracle.com>

	bootstrap: Fix patching warnings
	Currently bootstrap complains in the following way when
	patching gnulib files:

	  patching file argp-help.c
	  Hunk #1 succeeded at 52 (offset 1 line).
	  Hunk #2 succeeded at 1548 (offset 115 lines).
	  patching file mbswidth.c
	  patching file mbswidth.h
	  Hunk #1 succeeded at 40 (offset -5 lines).

	Let's fix it by amending line numbers in the patch.

	Reviewed-by: Alec Brown <alec.r.brown@oracle.com>

2023-06-23  Daniel Kiper  <daniel.kiper@oracle.com>

	efi: Add missing __grub_efi_api attributes
	The commit bb4aa6e06 (efi: Drop all uses of efi_call_XX() wrappers) did
	not add some __grub_efi_api attributes to the EFI calls. Lack of them
	led to hangs on x86_64-efi target. So, let's add missing __grub_efi_api
	attributes.

	Fixes: bb4aa6e06 (efi: Drop all uses of efi_call_XX() wrappers)

	Reported-by: Christian Hesse <list@eworm.de>
	Reported-by: Robin Candau <antiz@archlinux.org>
	Tested-by: Robin Candau <antiz@archlinux.org>
	Tested-by: Christian Hesse <list@eworm.de>
	Reviewed-by: Peter Jones <pjones@redhat.com>

2023-06-23  Julian Andres Klode  <julian.klode@canonical.com>

	disk: Generalize MD_MAX_DISKS to GRUB_MDRAID_MAX_DISKS
	Move the constant from grub-core/osdep/linux/getroot.c to
	include/grub/disk.h and then reuse it in place of the
	hardcoded 1024 limit in diskfilter.

	Fixes: 2a5e3c1f2 (disk/diskfilter: Don't make a RAID array with more than 1024 disks)

	Cc: Daniel Axtens <dja@axtens.net>
	Cc: Kees Cook <keescook@chromium.org>
	Reviewed-by: Kees Cook <keescook@chromium.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-23  Xiaotian Wu  <wuxiaotian@loongson.cn>

	loongarch: Disable relaxation relocations
	A working GRUB cannot be built with upcoming binutils and GCC, because linker
	relaxation was added [1] causing new unsupported relocations to appear in modules.

	So we pass -mno-relax to GCC if it is supported, to disable relaxation and make
	GRUB forward-compatible with new toolchains.

	While similar code already exists for sparc64 in configure.ac, sparc64 sets
	LDFLAGS while LoongArch requires CFLAGS to be set. If we only set LDFLAGS on
	LoongArch, GCC will still generate relaxation relocations in the .o files, so
	the sparc64 code cannot be reused.

	[1] https://sourceware.org/git/?p=binutils-gdb.git;a=commit;h=56576f4a722b7398d35802ecf7d4185c27d6d69b

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-13  Xiaotian Wu  <wuxiaotian@loongson.cn>

	loongarch: Add ELF relocation types documentation and comments
	See https://github.com/loongson/la-abi-specs/blob/release/laelf.adoc#relocations

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-13  Xiaotian Wu  <wuxiaotian@loongson.cn>

	loongarch: Rename function names
	According to the relocation documentation, the following function names are
	renamed to show their exact meaning:
	  - from grub_loongarch64_xxx64_hi12() to grub_loongarch64_abs64_hi12(),
	  - from grub_loongarch64_xxx64_hi12() to grub_loongarch64_abs64_lo20().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-13  Xiaotian Wu  <wuxiaotian@loongson.cn>

	util/grub-mkimagexx: Optimize code using pc variable
	We already have the pc variable, no need to calculate it again.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-13  Xiaotian Wu  <wuxiaotian@loongson.cn>

	kern/{arm64,loongarch64}/dl_helper: Use the correct format specifier for formatted output
	Use PRIxGRUB_INT64_T format specifier for grub_int64_t type
	and drop redundant casts.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-13  Qiumiao Zhang  <zhangqiumiao1@huawei.com>

	kern/acpi: Use xsdt_addr if present
	According to the ACPI specification, in ACPI 2.0 or later, an
	ACPI-compatible OS must use the XSDT if present. So, we should
	use xsdt_addr instead of rsdt_addr if xsdt_addr is valid.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-13  Qiumiao Zhang  <zhangqiumiao1@huawei.com>

	commands/acpi: Use xsdt_addr if present
	According to the ACPI specification, in ACPI 2.0 or later, an
	ACPI-compatible OS must use the XSDT if present. So, we should
	use xsdt_addr instead of rsdt_addr if xsdt_addr is valid.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-13  Lidong Chen  <lidong.chen@oracle.com>

	fs/udf: Fix out of bounds access
	Implemented a boundary check before advancing the allocation
	descriptors pointer.

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-13  Glenn Washburn  <development@efficientek.com>

	docs: Add debugging chapter to development documentation
	Debugging GRUB can be tricky and require arcane knowledge. This will
	help those unfamiliar with the process to get started debugging GRUB
	with less effort.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-13  Darren Kenny  <darren.kenny@oracle.com>

	fs/xfs: Fix issues found while fuzzing the XFS filesystem
	While performing fuzz testing with XFS filesystem images with ASAN
	enabled, several issues were found where the memory accesses are made
	beyond the data that is allocated into the struct grub_xfs_data
	structure's data field.

	The existing structure didn't store the size of the memory allocated into
	the buffer in the data field and had no way to check it. To resolve these
	issues, the data size is stored to enable checks into the data buffer.

	With these checks in place, the fuzzing corpus no longer cause any crashes.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-13  Alexander Kanavin  <alex.kanavin@gmail.com>

	util/import_unicode.py: Ensure output is deterministic
	Ensure the generated unidata.c file is deterministic by sorting the
	keys of the dict.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-13  Alexander Kanavin  <alex.kanavin@gmail.com>

	grub-core/genmoddep.awk: Ensure output is deterministic
	The output in moddep.lst generated from syminfo.lst using genmoddep.awk
	is not deterministic since the order of the dependencies on each line
	can vary depending on how awk sorts the values in the array.

	Be deterministic in the output by sorting the dependencies on each line.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-13  Alexander Kanavin  <alex.kanavin@gmail.com>

	gentpl.py: Ensure output is deterministic
	The output of the SOURCES lines in grub-core/Makefile.core.am, generated
	from grub-core/Makefile.core.def with gentpl.py is not deterministic due to
	missing sorting of the list used to generate it. Add such a sort.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-01  Glenn Washburn  <development@efficientek.com>

	gdb: Add gdbinfo command for printing the load address of the EFI application
	EFI firmware determines where to load the GRUB EFI at runtime, and so the
	addresses of debug symbols are not known ahead of time. There is a command
	defined in the gdb_grub script which will load the debug symbols at the
	appropriate addresses, if given the application load address for GRUB.
	So add a command named "gdbinfo" to allow the user to print this GDB command
	string with the application load address on-demand. For the outputted GDB
	command to have any effect when entered into a GDB session, GDB should have
	been started with the script as an argument to the -x option or sourced into
	an active GDB session before running the outputted command.

	Documentation for the gdbinfo command is also added.

	Co-developed-by: Peter Jones <pjones@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-01  Glenn Washburn  <development@efficientek.com>

	loader/efi/chainloader: Do not require a $root visible to EFI firmware when chainloading
	The EFI chainloader checks that a device path can be created for the $root
	device before allowing chainloading to a given file. This is probably to
	ensure that the given file can be accessed and loaded by the firmware.
	However, since GRUB is loading the image itself, the firmware need not
	be able to access the file location of the image. So remove this check.

	Also, this fixes an issue where chainloading an image file on a location
	that is accessible by the firmware, e.g. (hd0,1)/efi/boot.efi, would
	fail when root is a location inaccessible by the firmware, e.g. memdisk.

	Use GRUB_EFI_BYTES_TO_PAGES() instead of doing the calculation explicitly.

	Add comment noting the section where the load options for the chainloaded
	EFI application is constructed.

	Reviewed-by: Ard Biesheuvel <ardb@kernel.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-01  Glenn Washburn  <development@efficientek.com>

	docs: Document extra arguments to chainloader on EFI
	Extra arguments given to chainloader on EFI platforms will be sent to
	the chainloaded application. Also, minor edit in the chainloading section
	to note that chainloading can be a jump via the firmware and not
	necessarily in real mode (which does not exist on some architectures).

	Reviewed-by: Ard Biesheuvel <ardb@kernel.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-01  Oliver Steffen  <osteffen@redhat.com>

	util/grub.d/25_bli.in: Activate bli module on EFI
	Add a new configuration drop-in file that loads the bli module and runs
	the command if booting on the EFI platform.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-01  Oliver Steffen  <osteffen@redhat.com>

	bli: Add a module for the Boot Loader Interface
	Add a new module named bli. It implements a small but quite useful part
	of the Boot Loader Interface [0]. This interface uses EFI variables for
	communication between the boot loader and the operating system.

	When loaded, this module sets two EFI variables under the vendor GUID
	4a67b082-0a4c-41cf-b6c7-440b29bb8c4f:

	- LoaderInfo: contains GRUB + <version number>.
	  This allows the running operating system to identify the boot loader
	  used during boot.

	- LoaderDevicePartUUID: contains the partition UUID of the EFI System
	  Partition (ESP). This is used by systemd-gpt-auto-generator [1] to
	  find the root partitions (and others too), via partition type IDs [2].

	This module is available on EFI platforms only. The bli module relies on
	the part_gpt module which has to be loaded beforehand to make the GPT
	partitions discoverable.

	Update the documentation, add a new chapter "Modules" and describe the
	bli module there.

	[0] https://systemd.io/BOOT_LOADER_INTERFACE/
	[1] https://www.freedesktop.org/software/systemd/man/systemd-gpt-auto-generator.html
	[2] https://uapi-group.org/specifications/specs/discoverable_partitions_specification/

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-01  Oliver Steffen  <osteffen@redhat.com>

	kern: Check for NULL when closing devices and disks
	Add checks for NULL pointers to grub_device_close() and
	grub_disk_close() to make these functions more robust.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-01  Oliver Steffen  <osteffen@redhat.com>

	docs: Reword section headings
	Reword some section headings, remove "The List of" from titles.  While
	grammatically correct, this phrase can be omitted to increase
	readability, especially in the table of contents.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-01  Oliver Steffen  <osteffen@redhat.com>

	efi: Add grub_efi_set_variable_to_string()
	Add a function that sets an EFI variable to a string value.
	The string is converted from UTF-8 to UTF-16.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-01  Oliver Steffen  <osteffen@redhat.com>

	kern/misc, kern/efi: Extract UTF-8 to UTF-16 code
	Create a new function for UTF-8 to UTF-16 conversion called
	grub_utf8_to_utf16_alloc() in the grub-code/kern/misc.c and replace
	charset conversion code used in some places in the EFI code. It is
	modeled after the grub_utf8_to_ucs4_alloc() like functions in
	include/grub/charset.h. It can't live in include/grub/charset.h,
	because it needs to be reachable from the kern/efi code.

	Add a check for integer overflow and remove redundant NUL-termination.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-01  Oliver Steffen  <osteffen@redhat.com>

	include/grub/types.h: Add GRUB_SSIZE_MAX
	In the same way as GRUB_SIZE_MAX, add GRUB_SSIZE_MAX.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-01  Oliver Steffen  <osteffen@redhat.com>

	guid: Make use of GUID printf format specifier
	Use the new printf format specifier %pG.

	Fixes the text representation of GUIDs in the output of the lsefisystab
	command (missing 4th dash).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-01  Oliver Steffen  <osteffen@redhat.com>

	kern/misc: Add a format specifier GUIDs
	Extend the printf format specifier for pointers (%p) to accept a suffix
	specifier G to print GUIDs: %pG can be used to print grub_guid structs.
	This does not interfere with the -Wformat checking of gcc. Note that
	the data type is not checked though (%p accepts void *).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-01  Oliver Steffen  <osteffen@redhat.com>

	guid: Unify GUID types
	There are 3 implementations of a GUID in GRUB. Replace them with
	a common one, placed in types.h.

	It uses the "packed" flavor of the GUID structs, the alignment attribute
	is dropped, since it is not required.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-06-01  Oliver Steffen  <osteffen@redhat.com>

	efi: Add grub_efi_set_variable_with_attributes()
	Add a function to the EFI module that allows setting EFI variables
	with specific attributes.

	This is useful for marking variables as volatile, for example.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-25  Alec Brown  <alec.r.brown@oracle.com>

	kern/efi/mm: Fix use-after-free in finish boot services
	In grub-core/kern/efi/mm.c, grub_efi_finish_boot_services() has an instance
	where the memory for the variable finish_mmap_buf is freed, but on the next
	iteration of a while loop, grub_efi_get_memory_map() uses finish_mmap_buf. To
	prevent this, we can set finish_mmap_buf to NULL after the free.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-25  Ard Biesheuvel  <ardb@kernel.org>

	efi: Handle NULL return value when getting loaded image protocol
	The EFI spec mandates that the handle produced by the LoadImage boot
	service has a LoadedImage protocol instance installed on it, but for
	robustness, we should still deal with a NULL return value from the
	helper routine that obtains this protocol pointer.

	If this happens, don't try to start the image but unload it and return
	an error.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-25  Ard Biesheuvel  <ardb@kernel.org>

	efi: Use generic EFI loader for x86_64 and i386
	Switch the x86 based EFI platform builds to the generic EFI loader,
	which exposes the initrd via the LoadFile2 protocol instead of the
	x86-specific setup header. This will launch the Linux kernel via its EFI
	stub, which performs its own initialization in the EFI boot services
	context before calling ExitBootServices() and performing the bare metal
	Linux boot.

	Given that only Linux kernel versions v5.8 and later support this initrd
	loading method, the existing x86 loader is retained as a fallback, which
	will also be used for Linux kernels built without the EFI stub. In this
	case, GRUB calls ExitBootServices() before entering the Linux kernel,
	and all EFI related information is provided to the kernel via struct
	boot_params in the setup header, as before.

	Note that this means that booting EFI stub kernels older than v5.8 is
	not supported even when not using an initrd at all. Also, the EFI
	handover protocol, which has no basis in the UEFI specification, is not
	implemented.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-25  Ard Biesheuvel  <ardb@kernel.org>

	efi: Remove x86_64 call wrappers
	The call wrappers are no longer needed now that GCC can generate
	function calls using MS calling convention, so let's get rid of them.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-25  Ard Biesheuvel  <ardb@kernel.org>

	efi: Drop all uses of efi_call_XX() wrappers
	Now that GCC can generate function calls using the correct calling
	convention for us, we can stop using the efi_call_XX() wrappers, and
	just dereference the function pointers directly.

	This avoids the untyped variadic wrapper routines, which means better
	type checking for the method calls.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-25  Ard Biesheuvel  <ardb@kernel.org>

	efi: Add calling convention annotation to all prototypes
	UEFI mandates MS calling convention on x86_64, which was not supported
	on GCC when UEFI support was first introduced into GRUB. However, now we
	can use the ms_abi function type attribute to annotate functions and
	function pointers as adhering to the MS calling convention, and the
	compiler will generate the correct instruction sequence for us.

	So let's add the appropriate annotation to all the function prototypes.
	This will allow us to drop the special call wrappers in a subsequent patch.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-25  Ard Biesheuvel  <ardb@kernel.org>

	efi: Make EFI PXE protocol methods non-callable
	The grub_efi_pxe_t struct definition has placeholders for the various
	protocol method pointers, given that they are never called in the code,
	and the prototypes have been omitted, and therefore do not comply with
	the UEFI spec.

	So let's convert them into void* pointers, so they cannot be called
	inadvertently.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-25  Alec Brown  <alec.r.brown@oracle.com>

	loader/multiboot_elfxx: Check program header offset doesn't exceed constraints
	In grub-core/loader/multiboot_elfxx.c, we need to make sure that the program
	header offset is less than the file size along with the MULTIBOOT_SEARCH
	constant. We can do so by setting the variable phlimit to the minimum value of
	the two limits and check it each time we change program header index to insure
	that the program header offset isn't outside of the limits.

	Fixes: CID 314029
	Fixes: CID 314038

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-25  Alec Brown  <alec.r.brown@oracle.com>

	loader/multiboot_elfxx: Check section header region before allocating memory
	In grub-core/loader/multiboot_elfxx.c, space is being allocated for the section
	header region, but isn't verifying if the region is within the file's size.
	Before calling grub_calloc(), we can add a conditional to check if the section
	header region is smaller than the file size.

	Fixes: CID 314029
	Fixes: CID 314038

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-25  Alec Brown  <alec.r.brown@oracle.com>

	loader/multiboot_elfxx: Check program memory isn't larger than allocated memory size
	In grub-core/loader/multiboot_elfxx.c, the code is filling an area of memory
	with grub_memset() but doesn't check if there is space in the allocated memory
	before doing so. To make sure we aren't zeroing memory past the allocated memory
	region, we need to check that the offset into the allocated memory region plus
	the memory size of the program is smaller than the allocated memory size.

	Fixes: CID 314029
	Fixes: CID 314038

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-25  WANG Xuerui  <git@xen0n.name>

	kern/loongarch64/dl_helper: Avoid undefined behavior when popping from an empty reloc stack
	The return value of grub_loongarch64_stack_pop() is unsigned, so -1 should
	not be used in the first place. Replacing with 0 is enough to avoid the
	UB in this edge case.

	Technically though, proper error handling is needed throughout the
	management of the reloc stack, so no unexpected behavior will happen
	even in case of malformed object code input (right now, pushes become
	no-ops when the stack is full, and garbage results if the stack does not
	contain enough operands for an op). The refactor would touch some more
	places so would be best done in a separate series.

	Fixes: CID 407777
	Fixes: CID 407778

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-25  Peter Zijlstra (Intel)  <peterz@infradead.org>

	pci: Rename GRUB_PCI_CLASS_*
	Glenn suggested to rename the existing PCI_CLASS defines to have
	explicit class and subclass names.

	Suggested-by: Glenn Washburn <development@efficientek.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-25  Peter Zijlstra (Intel)  <peterz@infradead.org>

	term/serial: Add support for PCI serial devices
	Loosely based on early_pci_serial_init() from Linux, allow GRUB to make
	use of PCI serial devices.

	Specifically, my Alderlake NUC exposes the Intel AMT SoL UART as a PCI
	enumerated device but doesn't include it in the EFI tables.

	Tested and confirmed working on a "Lenovo P360 Tiny" with Intel AMT
	enabled. This specific machine has (from lspci -vv):

	00:16.3 Serial controller: Intel Corporation Device 7aeb (rev 11) (prog-if 02 [16550])
	        DeviceName: Onboard - Other
	        Subsystem: Lenovo Device 330e
	        Control: I/O+ Mem+ BusMaster- SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR- FastB2B- DisINTx-
	        Status: Cap+ 66MHz+ UDF- FastB2B+ ParErr- DEVSEL=fast >TAbort- <TAbort- <MAbort- >SERR- <PERR- INTx-
	        Interrupt: pin D routed to IRQ 19
	        Region 0: I/O ports at 40a0 [size=8]
	        Region 1: Memory at b4224000 (32-bit, non-prefetchable) [size=4K]
	        Capabilities: [40] MSI: Enable- Count=1/1 Maskable- 64bit+
	                Address: 0000000000000000  Data: 0000
	        Capabilities: [50] Power Management version 3
	                Flags: PMEClk- DSI+ D1- D2- AuxCurrent=0mA PME(D0-,D1-,D2-,D3hot-,D3cold-)
	                Status: D0 NoSoftRst+ PME-Enable- DSel=0 DScale=0 PME-
	        Kernel driver in use: serial

	From which the following config (/etc/default/grub) gets a working
	serial setup:

	GRUB_CMDLINE_LINUX="console=tty0 earlyprintk=pciserial,00:16.3,115200 console=ttyS0,115200"
	GRUB_SERIAL_COMMAND="serial --port=0x40a0 --speed=115200"
	GRUB_TERMINAL="serial console"

	Documentation is added to note that serial devices found on the PCI bus will
	be exposed as "pci,XX:XX.X" and how to find serial terminal logical names.
	Also, some minor documentation improvements were added.

	This can be tested in QEMU by adding a pci-serial device, e.g. using the option
	"-device pci-serial".

	Tested-by: Glenn Washburn <development@efficientek.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-fs-tester: Avoid failing some file system tests due to file system filling up
	On some systems /usr/share/dict/american-english can be larger than the
	available space on the filesystem being tested (e.g. vfat12a). This
	causes a failure of the filesystem test and is not a real test failure.
	Instead, use dd to copy at most 1 MiB of data to the filesystem, which is
	enough for our purposes and will not fill any of the tested filesystems.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Glenn Washburn  <development@efficientek.com>

	docs: Command-line and menu entry commands are now separated
	The menu entry commands now have their own section. Change the wording in
	the section that they were in to reflect this.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Roger Pau Monné  <roger.pau@citrix.com>

	lib/relocator: Always enforce the requested alignment in malloc_in_range()
	On failure to allocate from grub_relocator_firmware_alloc_region() in
	malloc_in_range() the function would stop enforcing the alignment, and
	the following was returned:

	  lib/relocator.c:431: trying to allocate in 0x200000-0xffbf9fff aligned 0x200000 size 0x406000
	  lib/relocator.c:1197: allocated: 0x74de2000+0x406000
	  lib/relocator.c:1407: allocated 0x74de2000/0x74de2000

	Fix this by making sure that target always contains a suitably aligned
	address. After the change the return from the function is:

	  lib/relocator.c:431: trying to allocate in 0x200000-0xffb87fff aligned 0x200000 size 0x478000
	  lib/relocator.c:1204: allocated: 0x74c00000+0x478000
	  lib/relocator.c:1414: allocated 0x74c00000/0x74c00000

	Fixes: 3a5768645c05 (First version of allocation from firmware)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Benjamin Herrenschmidt  <benh@kernel.crashing.org>

	term/ns8250: Fix incorrect usage of access_size
	The access_size is part of a union, so doesn't technically exist for
	a PIO port (i.e., not MMIO), but we set it anyways.

	This doesn't cause a bug today because the other leg of the union
	doesn't have anything overlapping with it now, but it's bad, I will
	punish myself for writing it that way :-) In the meantime, fix this
	and actually name the struct inside the union for clarity of intent
	and to avoid such issue in the future.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Ákos Nagy  <nagyakos@outlook.com>

	util/grub-install-common: Fix the key of the --core-compress option
	Commit f23bc6510 (Transform -C option to grub-mkstandalone to
	--core-compress available in all grub-install flavours.) declared
	a new long option for specifying the compression method to use for
	the core image.

	However, the option key has not been replaced in the parser function,
	it still expects the old one formerly used by grub-mkstandalone.
	Because of this the option is not recognized by any of the utils for
	which it is listed as supported.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Lidong Chen  <lidong.chen@oracle.com>

	fs/hfsplus: Set grub_errno to prevent NULL pointer access
	When an invalid node size is detected in grub_hfsplus_mount(), data
	pointer is freed. Thus, file->data is not set. The code should also
	set the grub_errno when that happens to indicate an error and to avoid
	accessing the uninitialized file->data in grub_file_close().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Lidong Chen  <lidong.chen@oracle.com>

	fs/hfsplus: Prevent out of bound access in catalog file
	A corrupted hfsplus can have a catalog key that is out of range. This
	can lead to out of bound access when advancing the pointer to access
	catalog file info. The valid range of a catalog key is specified in
	HFS Plus Technical Note TN1150 [1].

	[1] https://developer.apple.com/library/archive/technotes/tn/tn1150.html

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Lidong Chen  <lidong.chen@oracle.com>

	fs/hfsplus: Validate btree node size
	The invalid btree node size can cause crashes when parsing the btree.
	The fix is to ensure the btree node size is within the valid range
	defined in the HFS Plus technical note, TN1150 [1].

	[1] https://developer.apple.com/library/archive/technotes/tn/tn1150.html

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Glenn Washburn  <development@efficientek.com>

	INSTALL: Use exfat-utils package instead of exfatprogs
	The exfat-utils package is an older package complementing exfat-fuse, and
	was the only exfat tools for a long time. The exfat filesystem testing code
	was written with these tools in mind. A newer project exfatprogs appears to
	be of better quality and functionality and was written to complement the
	somewhat new exfat kernel module. Ideally we should be using the newer
	exfatprogs. However, the command line interface for mkfs.exfat is different
	between the two. So we can't use the exfatprogs tools until the test scripts
	have been updated to account for this. Recommend installing exfat-utils
	instead of exfatprogs for now.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Glenn Washburn  <development@efficientek.com>

	INSTALL: Document that building grub-mkfont requires xfonts-unifont
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Renaud Métrich  <rmetrich@redhat.com>

	net/dns: Fix lookup error when no IPv6 is returned
	When trying to resolve DNS names into IP addresses, the DNS code fails
	from time to time with the following error:
	-------- 8< ---------------- 8< ---------------- 8< ---------------- 8< --------
	error: ../../grub-core/net/dns.c:688:no DNS record found.
	-------- 8< ---------------- 8< ---------------- 8< ---------------- 8< --------

	This happens when both IPv4 and IPv6 queries are performed against the
	DNS server (e.g. 8.8.8.8) but there is no IP returned for IPv6 query, as
	shown below:
	-------- 8< ---------------- 8< ---------------- 8< ---------------- 8< --------
	grub> net_del_dns 192.168.122.1
	grub> net_add_dns 8.8.8.8
	grub> net_nslookup ipv4.test-ipv6.com
	error: ../../grub-core/net/dns.c:688:no DNS record found.
	grub> net_nslookup ipv4.test-ipv6.com
	216.218.228.115
	-------- 8< ---------------- 8< ---------------- 8< ---------------- 8< --------

	The root cause is the code exiting prematurely when the data->addresses
	buffer has been allocated in recv_hook(), even if there was no address
	returned last time recv_hook() executed.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Renaud Métrich  <rmetrich@redhat.com>

	net/dns: Add debugging messages in recv_hook() function
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	net/dns: Simplify error handling of recv_hook() function
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Renaud Métrich  <rmetrich@redhat.com>

	net/dns: Fix removal of DNS server
	When deleting the DNS server, we get the following error message:
	-------- 8< ---------------- 8< ---------------- 8< ---------------- 8< --------
	grub> net_del_dns 192.168.122.1
	error: ../../grub-core/net/dns.c:646:no DNS reply received.
	-------- 8< ---------------- 8< ---------------- 8< ---------------- 8< --------

	This happens because the implementation is broken, it does a "add"
	internally instead of a "delete".

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Xiaotian Wu  <wuxiaotian@loongson.cn>

	tests: Add LoongArch to various test cases
	I ran the test suite on a 3A5000 desktop, a LoongArch architecture machine,
	using Archlinux for LoongArch distro, see https://github.com/loongarchlinux.

	Some software versions are:
	* linux 6.3.0-rc4
	* gcc 13.0.1 20230312
	* binutils 2.40
	* qemu 7.2.0

	The test results of running "make check" with qemu 7.2 are as follows:

	=================================
	   GRUB 2.11: ./test-suite.log
	=================================

	  # TOTAL: 85
	  # PASS:  73
	  # SKIP:  8
	  # XFAIL: 0
	  # FAIL:  2
	  # XPASS: 0
	  # ERROR: 2

	.. contents:: :depth: 2

	ERROR: f2fs_test
	================

	mount: /tmp/grub-fs-tester.20230418175640563815408.f2fs.UDs/f2fs_rw: unknown filesystem type 'f2fs'.
	       dmesg(1) may have more information after failed mount system call.
	MOUNT FAILED.
	ERROR f2fs_test (exit status: 99)

	FAIL: hfs_test
	==============

	recode: Request `utf8..macroman' is erroneous
	mkfs.hfs: name required with -v option
	FAIL hfs_test (exit status: 1)

	ERROR: zfs_test
	===============

	zpool not installed; cannot test zfs.
	ERROR zfs_test (exit status: 99)

	SKIP: pata_test
	===============

	SKIP pata_test (exit status: 77)

	SKIP: ahci_test
	===============

	SKIP ahci_test (exit status: 77)

	SKIP: uhci_test
	===============

	SKIP uhci_test (exit status: 77)

	SKIP: ohci_test
	===============

	SKIP ohci_test (exit status: 77)

	SKIP: ehci_test
	===============

	SKIP ehci_test (exit status: 77)

	SKIP: fddboot_test
	==================

	SKIP fddboot_test (exit status: 77)

	SKIP: netboot_test
	==================

	SKIP netboot_test (exit status: 77)

	SKIP: pseries_test
	==================

	SKIP pseries_test (exit status: 77)

	FAIL: grub_func_test
	====================

	WARNING: Image format was not specified for '/tmp/grub-shell.HeTAD8Ty3U/grub.iso' and probing guessed raw.
	         Automatically detecting the format is dangerous for raw images, write operations on block 0 will be restricted.
	         Specify the 'raw' format explicitly to remove the restrictions.
	Functional test failure: shift_test:
	...
	gfxterm_menu_640x480xi16:3 failed: 0xce34981e vs 0xd9f04953
	 tests/video_checksum.c:checksum:615: assert failed: 0 Checksum
	gfxterm_menu_640x480xi16:2 failed: 0xa8fb749d vs 0xbf3fa5d0
	 tests/video_checksum.c:checksum:615: assert failed: 0 Checksum
	gfxterm_menu_640x480xi16:1 failed: 0xce34981e vs 0xd9f04953
	gfxterm_menu: FAIL
	...
	videotest_checksum:
	videotest_checksum: PASS
	exfctest:
	exfctest: PASS
	TEST FAILURE
	FAIL grub_func_test (exit status: 1)

	We got 2 errors:

	* f2fs_test
	The kernel uses 16k pages, causing failures when loading the f2fs kernel module,
	see https://github.com/torvalds/linux/blob/master/fs/f2fs/super.c#L4670
	This error can be ignored.

	* zfs_test
	zfs does not support the LoongArch architecture and is not compatible with the
	6.3 kernel.
	This error can be ignored.

	We got 2 failures:

	* hfs_test
	I use recode 3.7.14-1 on Archlinux, running `recode -l` gives no output `MacRoman`,
	so we get this error.
	On Linux systems that support LoongArch, there is currently no need to use HFS,
	so this failure can be ignored.

	* grub_func_test
	I don't know the reason for this failure. I guess it may be related to qemu's edk2.
	In the previous review, I was told that the failure here is the expected behavior.
	So, we can ignore this failure.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Xiaotian Wu  <wuxiaotian@loongson.cn>

	tests: Fix timezone inconsistency in squashfs_test
	The image timestamp was not returned in UTC, but the following logic
	expected and used UTC.

	This patch fixes the test failure like described below:

	  unsquashfs -s /tmp/grub-fs-tester.20230407111703613257436.squash4_gzip.9R4/squash4_gzip_512_4096_1_0.img
	  grep '^Creation'
	  awk '{print $6 " " $7 " " $8 " " $9 " " $10; }'
	  FSTIME='Fri Apr 7 11:17:05 2023'
	  date -d 'Fri Apr 7 11:17:05 2023' -u '+%Y-%m-%d %H:%M:%S'
	  FSTIME='2023-04-07 11:17:05'
	  date -d '2023-04-07 11:17:05 UTC -1 second' -u '+%Y-%m-%d %H:%M:%S'
	  FSTIMEM1='2023-04-07 11:17:04'
	  date -d '2023-04-07 11:17:05 UTC -2 second' -u '+%Y-%m-%d %H:%M:%S'
	  FSTIMEM2='2023-04-07 11:17:03'
	  date -d '2023-04-07 11:17:05 UTC -3 second' -u '+%Y-%m-%d %H:%M:%S'
	  FSTIMEM3='2023-04-07 11:17:02'
	  grep -F 'Last modification time 2023-04-07 11:17:05'
	  echo 'Device loop0: Filesystem type squash4 - Last modification time 2023-04-07 03:17:05 Friday - Sector size 512B - Total size 10680KiB'
	  echo 'Device loop0: Filesystem type squash4 - Last modification time 2023-04-07 03:17:05 Friday - Sector size 512B - Total size 10680KiB'
	  grep -F 'Last modification time 2023-04-07 11:17:04'
	  echo 'Device loop0: Filesystem type squash4 - Last modification time 2023-04-07 03:17:05 Friday - Sector size 512B - Total size 10680KiB'
	  grep -F 'Last modification time 2023-04-07 11:17:03'
	  echo 'Device loop0: Filesystem type squash4 - Last modification time 2023-04-07 03:17:05 Friday - Sector size 512B - Total size 10680KiB'
	  grep -F 'Last modification time 2023-04-07 11:17:02'
	  echo FSTIME FAIL

	Reviewed-by: Glenn Washburn <development@efficientek.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Xiaotian Wu  <wuxiaotian@loongson.cn>

	loongarch: Add to build system
	This patch adds LoongArch to the GRUB build system and various tools,
	so GRUB can be built on LoongArch as a UEFI application.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Xiaotian Wu  <wuxiaotian@loongson.cn>

	loongarch: Add auxiliary files
	Add support for manipulating architectural cache and timers, and EFI
	memory maps.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Xiaotian Wu  <wuxiaotian@loongson.cn>

	loongarch: Add support for ELF psABI v2.00 relocations
	A new set of relocation types was added in the LoongArch ELF psABI v2.00
	spec [1], [2] to replace the stack-based scheme in v1.00. Toolchain
	support is available from binutils 2.40 and gcc 13 onwards.

	This patch adds support for the new relocation types, that are simpler
	to handle (in particular, stack operations are gone). Support for the
	v1.00 relocs are kept for now, for compatibility with older toolchains.

	[1] https://github.com/loongson/LoongArch-Documentation/pull/57
	[2] https://loongson.github.io/LoongArch-Documentation/LoongArch-ELF-ABI-EN.html#_appendix_revision_history

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Xiaotian Wu  <wuxiaotian@loongson.cn>

	loongarch: Add support for ELF psABI v1.00 relocations
	This patch adds support of the stack-based LoongArch relocations
	throughout GRUB, including tools, dynamic linkage, and support for
	conversion of ELF relocations into PE ones. A stack machine is required
	to handle these per the spec [1] (see the R_LARCH_SOP types), of which
	a simple implementation is included.

	These relocations are produced by binutils 2.38 and 2.39, while the newer
	v2.00 relocs require more recent toolchain (binutils 2.40+ & gcc 13+, or
	LLVM 16+). GCC 13 has not been officially released as of early 2023, so
	support for v1.00 relocs are expected to stay relevant for a while.

	[1] https://loongson.github.io/LoongArch-Documentation/LoongArch-ELF-ABI-EN.html#_relocations

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Xiaotian Wu  <wuxiaotian@loongson.cn>

	loongarch: Add early startup code
	On entry, we need to save the system table pointer as well as our image
	handle. Add an early startup file that saves them and then brings us
	into our main function.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Xiaotian Wu  <wuxiaotian@loongson.cn>

	loongarch: Add setjmp implementation
	This patch adds a setjmp implementation for LoongArch.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Xiaotian Wu  <wuxiaotian@loongson.cn>

	elf: Add LoongArch definitions
	Add ELF e_machine ID [1] and relocations types [2] for LoongArch to
	the current in-repo definitions.

	[1] https://loongson.github.io/LoongArch-Documentation/LoongArch-ELF-ABI-EN.html#_e_machine_identifies_the_machine
	[2] https://loongson.github.io/LoongArch-Documentation/LoongArch-ELF-ABI-EN.html#_relocations

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-17  Xiaotian Wu  <wuxiaotian@loongson.cn>

	pe: Add LoongArch definitions
	Add PE machine types [1] and relocation types [2] for LoongArch to
	the current in-repo definitions.

	[1] https://learn.microsoft.com/en-us/windows/win32/debug/pe-format#machine-types
	[2] https://learn.microsoft.com/en-us/windows/win32/debug/pe-format#base-relocation-types

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-16  Chris Coulson  <chris.coulson@canonical.com>

	font: Try opening fonts from the bundled memdisk
	GRUB since 93a786a00 (kern/efi/sb: Enforce verification of font files)
	has enforced verification of font files in secure boot mode. In order to
	continue to be able to load some default fonts, vendors may bundle them
	with their signed EFI image by adding them to the built-in memdisk.

	This change makes the font loader try loading fonts from the memdisk
	before the prefix path when attempting to load a font file by specifying
	its filename, which avoids having to make changes to GRUB configurations
	in order to accommodate memdisk bundled fonts. It expects the directory
	structure to be the same as fonts stored in the prefix path,
	i.e. /fonts/<name>.pf2.

	Reviewed-by: Steve McIntyre <93sam@debian.org>
	Tested-by: Steve McIntyre <93sam@debian.org>
	Reviewed-by: Robbie Harwood <rharwood@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-16  Robbie Harwood  <rharwood@redhat.com>
	    Aaron Miller  <aaronmiller@fb.com>
	    Peter Jones  <pjones@redhat.com>

	net: Read bracketed IPv6 addrs and port numbers
	Allow specifying port numbers for http and tftp paths and allow IPv6
	addresses to be recognized with brackets around them, which is required
	to specify a port number.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-16  Robbie Harwood  <rharwood@redhat.com>

	Revert "net/http: Allow use of non-standard TCP/IP ports"
	The notation introduced in ac8a37dda (net/http: Allow use of non-standard
	TCP/IP ports) contradicts that used in downstream distributions including
	Fedora, RHEL, Debian, Ubuntu, and others. Revert it and apply the downstream
	notation which was originally proposed to the GRUB in 2016.

	This reverts commit ac8a37dda (net/http: Allow use of non-standard TCP/IP ports).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-05-16  Riku Viitanen  <riku.viitanen@protonmail.com>

	term/at_keyboard: Add timeout to fix hang on HP EliteBooks
	This fixes the GRUB on Coreboot on HP EliteBooks by implementing
	a 200 ms timeout. The GRUB used to hang.

	Fixes: https://ticket.coreboot.org/issues/141

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-04-13  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-fs-tester: Add missing redirect to /dev/null
	In filesystem timestamp test, a check is done to verify that the timestamp
	for a file as reported in Linux by the filesystem is within a few seconds
	of the timestamp as reported by GRUB. This is done by grepping the output
	of GRUB's ls command for the timestamp as reported by the filesystem in
	Linux and for each of 3 seconds past that timestamp. All of these checks
	except one redirect the output of grep to /dev/null. Fix this exception
	to behave as the other checks.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-04-13  Mukesh Kumar Chaurasiya  <mchauras@linux.vnet.ibm.com>

	disk: Replace transform_sector() function with grub_disk_to_native_sector()
	The transform_sector() function is not very clear in what it's doing
	and confusing. The GRUB already has a function which is doing the same
	thing in a very self explanatory way, i.e., grub_disk_to_native_sector().
	So, it's much better to use self explanatory one than transform_sector().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-04-13  Thomas Schmitt  <scdbackup@gmx.net>

	tests: Add test for iso9660 delayed CE hop
	The ISO filesystem image iso9660_early_ce.iso exposes the unusual
	situation that the Rock Ridge name entry of its only file is located
	after a CE entry which points to the next continuation area.

	The correct behavior is to read the Rock Ridge name and to only then
	load the next continuation area. If GRUB performs this correctly, then
	the name "RockRidgeName:x" will be read and reported by grub-fstest.
	If GRUB wrongly performs the CE hop immediately when encountering the CE
	entry, then the dull ISO 9660 name "rockridg" will not be overridden and
	be put out by grub-fstest.

	Tested-by: Lidong Chen <lidong.chen@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-04-13  Thomas Schmitt  <scdbackup@gmx.net>

	fs/iso9660: Delay CE hop until end of current SUSP area
	The SUSP specs demand that the reading of the next SUSP area which is
	depicted by a CE entry shall be delayed until reading of the current
	SUSP area is completed. Up to now GRUB immediately ends reading of the
	current area and loads the new one. So, buffer the parameters of a found
	CE entry and perform checks and reading of new data only after the
	reader loop has ended.

	Tested-by: Lidong Chen <lidong.chen@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-29  Avnish Chouhan  <avnish@linux.vnet.ibm.com>

	kern/ieee1275/init: Extended support in Vec5
	This patch enables multiple options in Vec5 which are required and
	solves the boot issues seen on some machines which are looking for
	these specific options.

	1. LPAR: Client program supports logical partitioning and
	   associated hcall()s.
	2. SPLPAR: Client program supports the Shared
	   Processor LPAR Option.
	3. DYN_RCON_MEM: Client program supports the
	   “ibm,dynamic-reconfiguration-memory” property and it may be
	   presented in the device tree.
	4. LARGE_PAGES: Client supports pages larger than 4 KB.
	5. DONATE_DCPU_CLS: Client supports donating dedicated processor cycles.
	6. PCI_EXP: Client supports PCI Express implementations
	   utilizing Message Signaled Interrupts (MSIs).

	7. CMOC: Enables the Cooperative Memory Over-commitment Option.
	8. EXT_CMO: Enables the Extended Cooperative Memory Over-commit Option.

	9. ASSOC_REF: Enables “ibm,associativity” and
	   “ibm,associativity-reference-points” properties.
	10. AFFINITY: Enables Platform Resource Reassignment Notification.
	11. NUMA: Supports NUMA Distance Lookup Table Option.

	12. HOTPLUG_INTRPT: Supports Hotplug Interrupts.
	13. HPT_RESIZE: Enable Hash Page Table Resize Option.

	14. MAX_CPU: Defines maximum number of CPUs supported.

	15. PFO_HWRNG: Supports Random Number Generator.
	16. PFO_HW_COMP: Supports Compression Engine.
	17. PFO_ENCRYPT: Supports Encryption Engine.

	18. SUB_PROCESSORS: Supports Sub-Processors.

	19. DY_MEM_V2: Client program supports the “ibm,dynamic-memory-v2” property in the
	    “ibm,dynamic-reconfiguration-memory” node and it may be presented in the device tree.
	20. DRC_INFO: Client program supports the “ibm,drc-info” property definition and it may be
	    presented in the device tree.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-29  Avnish Chouhan  <avnish@linux.vnet.ibm.com>

	kern/ieee1275/init: Convert plain numbers to constants in Vec5
	This patch converts the plain numbers used in Vec5 properties to constants.

	1. LPAR: Client program supports logical partitioning and
	   associated hcall()s.
	2. SPLPAR: Client program supports the Shared
	   Processor LPAR Option.
	3. CMO: Enables the Cooperative Memory Over-commitment Option.
	4. MAX_CPU: Defines maximum number of CPUs supported.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-29  Robbie Harwood  <rharwood@redhat.com>

	loader/emu/linux: Work around systemctl kexec returning
	Per systemctl(1), it "is asynchronous; it will return after the reboot
	operation is enqueued, without waiting for it to complete". This differs
	from kexec(8), which calls reboot(2) and therefore does not return.

	When not using fallback, this confusingly results in:

	  error trying to perform 'systemctl kexec': 0
	  Aborted. Press any key to exit.

	on screen for a bit, followed by successful kexec.

	To reduce the likelihood of hitting this case, add a delay on successful
	return. Ultimately, the systemd interface is racy: we can't avoid it
	entirely unless we never fallback on success.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-29  Michael Chang  <mchang@suse.com>

	tpm: Disable the tpm verifier if the TPM device is not present
	When the tpm module is loaded, the verifier reads entire file into
	memory, measures it and uses verified content as a backing buffer for
	file accesses. However, this process may result in high memory
	utilization for file operations, sometimes causing a system to run out
	of memory which may finally lead to boot failure. To address this issue,
	among others, the commit 887f98f0d (mm: Allow dynamically requesting
	additional memory regions) have optimized memory management by
	dynamically allocating heap space to maximize memory usage and reduce
	threat of memory exhaustion. But in some cases problems may still arise,
	e.g., when large ISO images are mounted using loopback or when dealing
	with embedded systems with limited memory resources.

	Unfortunately current implementation of the tpm module doesn't allow
	elimination of the back buffer once it is loaded. Even if the TPM device
	is not present or it has been explicitly disabled. This may unnecessary
	allocate a lot memory. To solve this issue, a patch has been developed
	to detect the TPM status at module load and skip verifier registration
	if the device is missing or deactivated. This prevents allocation of
	memory for the back buffer, avoiding wasting memory when no real measure
	boot functionality is performed. Disabling the TPM device in the system
	can reduce memory usage in the GRUB. It is useful in scenarios where
	high memory utilization is a concern and measurements of loaded
	artifacts are not necessary.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-29  Glenn Washburn  <development@efficientek.com>

	INSTALL: Document programs and packages needed for using gdb_grub script
	Now that the gdb_grub script uses the Python API in GDB, a GDB with Python
	support must be used. Note that this means a GDB with version greater than
	7.0 must be used. This should not be an issue since that was released over
	a decade ago. Also, the minimum version of Python must be 3.5, which was
	released around 8 years ago.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-29  Atish Patra  <atishp@rivosinc.com>

	RISC-V: Use common linux loader
	RISC-V doesn't have to do anything very different from other architectures
	to loader EFI stub linux kernel. As a result, just use the common linux
	loader instead of defining a RISC-V specific linux loader.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-29  Atish Patra  <atishp@rivosinc.com>

	efi: Remove arch specific image headers for RISC-V, ARM64 and ARM
	The arch specific image header details are not very useful as most of
	the GRUB just looks at the PE/COFF spec parameters (PE32 magic and
	header offset).

	Remove the arch specific images headers and define a generic arch
	headers that provide enough PE/COFF fields for the GRUB to parse
	kernel images correctly.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-29  Atish Patra  <atishp@rivosinc.com>

	loader/efi: Move ARM64 linux loader to common code
	ARM64 linux loader code is written in such a way that it can be reused
	across different architectures without much change. Move it to common
	code so that RISC-V doesn't have to define a separate loader.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-14  Alec Brown  <alec.r.brown@oracle.com>

	util/grub-module-verifierXX: Add module_size parameter to functions for sanity checking
	In grub-module-verifierXX.c, the function grub_module_verifyXX() performs an
	initial check that the ELF section headers are within the module's size, but
	doesn't check if the sections being accessed have contents that are within the
	module's size. In particular, we need to check that sh_offset and sh_size are
	less than the module's size. However, for some section header types we don't
	need to make these checks. For the type SHT_NULL, the section header is marked
	as inactive and the rest of the members within the section header have undefined
	values, so we don't need to check for sh_offset or sh_size. In the case of the
	type SHT_NOBITS, sh_offset has a conceptual offset which may be beyond the
	module size. Also, this type's sh_size may have a non-zero size, but a section
	of this type will take up no space in the module. This can all be checked in the
	function get_shdr(), but in order to do so, the parameter module_size must be
	added to functions so that the value of the module size can be used in
	get_shdr() from grub_module_verifyXX().

	Also, had to rework some for loops to ensure the index passed to get_shdr() is
	within bounds.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-14  Glenn Washburn  <development@efficientek.com>

	gdb: Add extra early initialization symbols for i386-pc
	Add symbols for boot.image, disk.image, and lzma_decompress.image if the
	target is i386-pc. This is only done for i386-pc because that is the only
	target that uses the images. By loading the symbols for these images,
	these images can be more easily debugged by allowing the setting of break-
	points in that code and to see easily get the value of data symbols.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-14  Glenn Washburn  <development@efficientek.com>

	gdb: Modify gdb prompt when running gdb_grub script
	This will let users know that the GDB session is using the GRUB gdb scripts.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-14  Glenn Washburn  <development@efficientek.com>

	gdb: Allow running user-defined commands at GRUB start
	A new command, run_on_start, for things to do before GRUB starts executing.
	Currently, this is setting up the loading of module symbols as they are
	loaded and allowing user-defined script to be run if a command named
	"onstart" exists.

	On some platforms, notably x86, software breakpoints set in GDB before
	the GRUB image is loaded will be cleared when the image is loaded. This
	is because the breakpoints work by overwriting the memory of the break-
	point location with a special instruction which when hit will cause the
	debugger to stop execution. Just before execution is resumed by the
	debugger, the original instruction bytes are put back. When a breakpoint
	is set before the GRUB image is loaded, the special debugger instruction
	will be written to memory and when the GRUB image is loaded by the
	firmware, which has no knowledge of the debugger, the debugger instruction
	is overwritten. To the GDB user, GDB will show the breakpoint as set, but
	it will never be hit. Furthermore, GDB now becomes confused, such that
	even deleting and re-setting the breakpoint after the GRUB image is loaded
	will not allow for a working breakpoint.

	To work around this, in run_on_start, first a watchpoint is set on _start,
	which will be triggered when the firmware starts loading the GRUB image.
	When the _start watchpoint is hit, the current breakpoints are saved to a
	file and then deleted by GDB before they can be overwritten by the firmware
	and confuse GDB. Then a temporary software breakpoint is set on _start,
	which will get triggered when the firmware hands off to GRUB to execute. In
	that breakpoint load the previously saved and deleted breakpoints now that
	there is no worry of them getting overwritten by the firmware. This is
	needed for runtime_load_module to work when it is run before the GRUB image
	is loaded.

	Note that watchpoints are generally types of hardware breakpoints on x86, so
	its deleted as soon as it gets triggered so that a minimal set of hardware
	breakpoints are used, allowing more for the user.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-14  Glenn Washburn  <development@efficientek.com>

	gdb: Add functions to make loading from dynamically positioned targets easier
	Many targets, such as EFI, load GRUB at addresses that are determined at
	runtime. So the load addresses in kernel.exec will almost certainly be
	wrong. Given the address of the start of the text segment, these
	functions will tell GDB to load the symbols at the proper locations. It
	is left up to the user to determine how to get the text address of the
	loaded GRUB image.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-14  Glenn Washburn  <development@efficientek.com>

	gdb: Replace module symbol loading implementation with Python one
	Remove gmodule.pl and rewrite as a python in gdb_helper.py. This removes
	Perl dependency for the GRUB GDB script, but adds Python as a dependency.
	This is more desirable because Python is tightly integrated with GDB and
	can do things not even available to GDB native scripting language. GDB must
	be built with Python, however this is not a major limitation because every
	major distro non-end-of-life versions build GDB with Python support. And GDB
	has had support for Python since around 7.1-ish, which is about a decade.

	This re-implementation has an added feature. If there is a user defined
	command named "onload_<module name>", then that command will be executed
	after the symbols for the specified module are loaded. When debugging a
	module it can be desirable to set break points on code in the module.
	This is difficult in GRUB because, at GDB start, the module is not loaded
	and on EFI platforms its not known ahead of time where the module will
	be loaded. So allow users to create an "onload_<modname>" command which
	will be run when the module with name "modname" is loaded.

	Another addition is a new convenience function is defined
	$is_user_command(), which returns true if its string argument is
	the name of a user-defined command.

	A secondary benefit of these changes is that the script does not write
	temporary files and has better error handling capabilities.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-14  Glenn Washburn  <development@efficientek.com>

	gdb: Only connect to remote target once when first sourced
	The gdb_grub script was originally meant to be run once when GDB first
	starts up via the -x argument. So it runs commands unconditionally
	assuming that the script has not been run before. Its nice to be able
	to source the script again when developing the script to modify/add
	commands. So only run the commands not defined in user-defined commands,
	if a variable $runonce has already been set and when those commands have
	been run to set $runonce.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-14  Glenn Washburn  <development@efficientek.com>

	gdb: Conditionally run GDB script logic for dynamically or statically positioned GRUB
	There are broadly two classes of targets to consider when loading symbols
	for GRUB, targets that determine where to load GRUB at runtime
	(dynamically positioned) and those that do not (statically positioned).
	For statically positioned targets, symbol loading is determined at link
	time, so nothing more needs to be known to load the symbols. For
	dynamically positioned targets, such as EFI targets, at runtime symbols
	should be offset by an amount that depends on where the runtime chose to
	load GRUB.

	It is important to not load symbols statically for dynamic targets
	because then when subsequently loading the symbols correctly one must
	take care to remove the existing static symbols, otherwise there will be
	two sets of symbols and GDB seems to prefer the ones loaded first (i.e.
	the static ones).

	Use autoconf variables to generate a gdb_grub for a particular target,
	which conditionally run startup code depending on if the target uses
	static or dynamic loading.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-14  Glenn Washburn  <development@efficientek.com>

	gdb: Move runtime module loading into runtime_load_module
	By moving this code into a function, it can be run re-utilized while gdb is
	running, not just when loading the script. This will also be useful in
	some following changes which will make a separate script path for targets
	which statically vs dynamically position GRUB code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-07  Michael Chang  <mchang@suse.com>

	osdep/devmapper/getroot: Fix build error on 32-bit host
	The gcc build has failed for 32-bit host (e.g. i386-emu and arm-emu)
	due to mismatch between format specifier and data type.

	../grub-core/osdep/devmapper/getroot.c: In function
	'grub_util_pull_devmapper':

	../grub-core/osdep/devmapper/getroot.c:265:75: error: format '%lu'
	expects argument of type 'long unsigned int', but argument 2 has type
	'int' [-Werror=format=]

	../grub-core/osdep/devmapper/getroot.c:276:80: error: format '%lu'
	expects argument of type 'long unsigned int', but argument 2 has type
	'int' [-Werror=format=]

	This patch fixes the problem by casting the type of calculated offset to
	grub_size_t and use platform PRIuGRUB_SIZE as format specifier.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-07  Stefan Berger  <stefanb@linux.ibm.com>

	commands/ieee1275/ibmvtpm: Add support for trusted boot using a vTPM 2.0
	Add support for trusted boot using a vTPM 2.0 on the IBM IEEE1275
	PowerPC platform. With this patch grub now measures text and binary data
	into the TPM's PCRs 8 and 9 in the same way as the x86_64 platform
	does.

	This patch requires Daniel Axtens's patches for claiming more memory.

	Note: The tpm_init() function cannot be called from GRUB_MOD_INIT() since
	it does not find the device nodes upon module initialization and
	therefore the call to tpm_init() must be deferred to grub_tpm_measure().

	For vTPM support to work on PowerVM, system driver levels 1010.30
	or 1020.00 are required.

	Note: Previous versions of firmware levels with the 2hash-ext-log
	API call have a bug that, once this API call is invoked, has the
	effect of disabling the vTPM driver under Linux causing an error
	message to be displayed in the Linux kernel log. Those users will
	have to update their machines to the firmware levels mentioned
	above.

	Cc: Eric Snowberg <eric.snowberg@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Nageswara R Sastry <rnsastry@linux.ibm.com>
	Reviewed-by: Robbie Harwood <rharwood@redhat.com>

2023-03-07  Daniel Axtens  <dja@axtens.net>

	commands/memtools: Add memtool module with memory allocation stress-test
	When working on memory, it's nice to be able to test your work.

	Add a memtest module. When compiled with --enable-mm-debug, it exposes
	3 commands:

	 * lsmem - print all allocations and free space in all regions
	 * lsfreemem - print free space in all regions

	 * stress_big_allocs - stress test large allocations:
	  - how much memory can we allocate in one chunk?
	  - how many 1MB chunks can we allocate?
	  - check that gap-filling works with a 1MB aligned 900kB alloc + a
	     100kB alloc.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Nageswara R Sastry <rnsastry@linux.ibm.com>
	Reviewed-by: Robbie Harwood <rharwood@redhat.com>

2023-03-07  Diego Domingos  <diegodo@linux.vnet.ibm.com>

	ieee1275: Implement vec5 for cas negotiation
	As a legacy support, if the vector 5 is not implemented, Power Hypervisor will
	consider the max CPUs as 64 instead 256 currently supported during
	client-architecture-support negotiation.

	This patch implements the vector 5 and set the MAX CPUs to 256 while setting the
	others values to 0 (default).

	Acked-by: Daniel Axtens <dja@axtens.net>
	Tested-by: Nageswara R Sastry <rnsastry@linux.ibm.com>
	Reviewed-by: Robbie Harwood <rharwood@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-07  Daniel Axtens  <dja@axtens.net>

	ieee1275: Support runtime memory claiming
	On powerpc-ieee1275, we are running out of memory trying to verify
	anything. This is because:

	 - we have to load an entire file into memory to verify it. This is
	   difficult to change with appended signatures.
	 - We only have 32MB of heap.
	 - Distro kernels are now often around 30MB.

	So we want to be able to claim more memory from OpenFirmware for our heap
	at runtime.

	There are some complications:

	 - The grub mm code isn't the only thing that will make claims on
	   memory from OpenFirmware:

	    * PFW/SLOF will have claimed some for their own use.

	    * The ieee1275 loader will try to find other bits of memory that we
	      haven't claimed to place the kernel and initrd when we go to boot.

	    * Once we load Linux, it will also try to claim memory. It claims
	      memory without any reference to /memory/available, it just starts
	      at min(top of RMO, 768MB) and works down. So we need to avoid this
	      area. See arch/powerpc/kernel/prom_init.c as of v5.11.

	 - The smallest amount of memory a ppc64 KVM guest can have is 256MB.
	   It doesn't work with distro kernels but can work with custom kernels.
	   We should maintain support for that. (ppc32 can boot with even less,
	   and we shouldn't break that either.)

	 - Even if a VM has more memory, the memory OpenFirmware makes available
	   as Real Memory Area can be restricted. Even with our CAS work, an LPAR
	   on a PowerVM box is likely to have only 512MB available to OpenFirmware
	   even if it has many gigabytes of memory allocated.

	What should we do?

	We don't know in advance how big the kernel and initrd are going to be,
	which makes figuring out how much memory we can take a bit tricky.

	To figure out how much memory we should leave unused, I looked at:

	 - an Ubuntu 20.04.1 ppc64le pseries KVM guest:
	    vmlinux: ~30MB
	    initrd:  ~50MB

	 - a RHEL8.2 ppc64le pseries KVM guest:
	    vmlinux: ~30MB
	    initrd:  ~30MB

	So to give us a little wriggle room, I think we want to leave at least
	128MB for the loader to put vmlinux and initrd in memory and leave Linux
	with space to satisfy its early allocations.

	Allow other space to be allocated at runtime.

	Tested-by: Stefan Berger <stefanb@linux.ibm.com>
	Tested-by: Nageswara R Sastry <rnsastry@linux.ibm.com>
	Reviewed-by: Robbie Harwood <rharwood@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-03-07  Daniel Axtens  <dja@axtens.net>

	ieee1275: Drop len -= 1 quirk in heap_init
	This was apparently "required by some firmware": commit dc9468500919
	(2007-02-12  Hollis Blanchard  <hollis@penguinppc.org>).

	It's not clear what firmware that was, and what platform from 14 years ago
	which exhibited the bug then is still both in use and buggy now.

	It doesn't cause issues on qemu (mac99 or pseries) or under PFW for Power8.

	I don't have access to old Mac hardware, but if anyone feels especially
	strongly we can put it under some feature flag. I really want to disable
	it under pseries because it will mess with region merging.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Nageswara R Sastry <rnsastry@linux.ibm.com>
	Reviewed-by: Robbie Harwood <rharwood@redhat.com>

2023-03-07  Daniel Axtens  <dja@axtens.net>

	ieee1275: Request memory with ibm, client-architecture-support
	On PowerVM, the first time we boot a Linux partition, we may only get
	256MB of real memory area, even if the partition has more memory.

	This isn't enough to reliably verify a kernel. Fortunately, the Power
	Architecture Platform Reference (PAPR) defines a method we can call to ask
	for more memory: the broad and powerful ibm,client-architecture-support
	(CAS) method.

	CAS can do an enormous amount of things on a PAPR platform: as well as
	asking for memory, you can set the supported processor level, the interrupt
	controller, hash vs radix mmu, and so on.

	If:

	 - we are running under what we think is PowerVM (compatible property of /
	   begins with "IBM"), and

	 - the full amount of RMA is less than 512MB (as determined by the reg
	   property of /memory)

	then call CAS as follows: (refer to the Linux on Power Architecture
	Reference, LoPAR, which is public, at B.5.2.3):

	 - Use the "any" PVR value and supply 2 option vectors.

	 - Set option vector 1 (PowerPC Server Processor Architecture Level)
	   to "ignore".

	 - Set option vector 2 with default or Linux-like options, including a
	   min-rma-size of 512MB.

	 - Set option vector 3 to request Floating Point, VMX and Decimal Floating
	   point, but don't abort the boot if we can't get them.

	 - Set option vector 4 to request a minimum VP percentage to 1%, which is
	   what Linux requests, and is below the default of 10%. Without this,
	   some systems with very large or very small configurations fail to boot.

	This will cause a CAS reboot and the partition will restart with 512MB
	of RMA. Importantly, grub will notice the 512MB and not call CAS again.

	Notes about the choices of parameters:

	 - A partition can be configured with only 256MB of memory, which would
	   mean this request couldn't be satisfied, but PFW refuses to load with
	   only 256MB of memory, so it's a bit moot. SLOF will run fine with 256MB,
	   but we will never call CAS under qemu/SLOF because /compatible won't
	   begin with "IBM".)

	 - unspecified CAS vectors take on default values. Some of these values
	   might restrict the ability of certain hardware configurations to boot.
	   This is why we need to specify the VP percentage in vector 4, which is
	   in turn why we need to specify vector 3.

	Finally, we should have enough memory to verify a kernel, and we will
	reach Linux. One of the first things Linux does while still running under
	OpenFirmware is to call CAS with a much fuller set of options (including
	asking for 512MB of memory). Linux includes a much more restrictive set of
	PVR values and processor support levels, and this CAS invocation will likely
	induce another reboot. On this reboot grub will again notice the higher RMA,
	and not call CAS. We will get to Linux again, Linux will call CAS again, but
	because the values are now set for Linux this will not induce another CAS
	reboot and we will finally boot all the way to userspace.

	On all subsequent boots, everything will be configured with 512MB of RMA,
	so there will be no further CAS reboots from grub. (phyp is super sticky
	with the RMA size - it persists even on cold boots. So if you've ever booted
	Linux in a partition, you'll probably never have grub call CAS. It'll only
	ever fire the first time a partition loads grub, or if you deliberately lower
	the amount of memory your partition has below 512MB.)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Nageswara R Sastry <rnsastry@linux.ibm.com>
	Reviewed-by: Robbie Harwood <rharwood@redhat.com>

2023-02-28  Khem Raj  <raj.khem@gmail.com>

	RISC-V: Handle R_RISCV_CALL_PLT reloc
	GNU assembler starting 2.40 release always generates R_RISCV_CALL_PLT
	reloc for call in assembler [1], similarly LLVM does not make
	distinction between R_RISCV_CALL_PLT and R_RISCV_CALL [2].

	Fixes "grub-mkimage: error: relocation 0x13 is not implemented yet.".

	[1] https://sourceware.org/git/?p=binutils-gdb.git;a=commit;h=70f35d72ef04cd23771875c1661c9975044a749c
	[2] https://reviews.llvm.org/D132530

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-28  John Paul Adrian Glaubitz  <glaubitz@physik.fu-berlin.de>

	osdep/hurd/getroot: Remove unused variables in grub_util_find_hurd_root_device()
	Found during a test build on Debian/hurd-i386 with --disable-werror enabled:

	  In file included from grub-core/osdep/getroot.c:12:
	  grub-core/osdep/hurd/getroot.c: In function ‘grub_util_find_hurd_root_device’:
	  grub-core/osdep/hurd/getroot.c:126:13: error: unused variable ‘next’ [-Werror=unused-variable]
	    126 |       char *next;
	        |             ^~~~
	  grub-core/osdep/hurd/getroot.c:125:14: error: unused variable ‘size’ [-Werror=unused-variable]
	    125 |       size_t size;
	        |              ^~~~

	Fixes: e981b0a24 (osdep/hurd/getroot: Use "part:" qualifier)

	Reviewed-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-28  Glenn Washburn  <development@efficientek.com>

	gdb: If no modules have been loaded, do not try to load module symbols
	This prevents load_all_modules from failing when called before any
	modules have been loaded. Failures in GDB user-defined functions cause
	any function which called them to also fail.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-28  Glenn Washburn  <development@efficientek.com>

	gdb: Prevent wrapping when writing to .segments.tmp
	GDB logging is redirected to write .segments.tmp, which means that GDB
	will wrap lines longer than what it thinks is the screen width
	(typically 80 characters). When wrapping does occur it causes gmodule.pl
	to misbehave. So disable line wrapping by using GDB's "with" command so
	that its guaranteed to return the width to the previous value upon
	command completion.

	Also disable command tracing when dumping the module sections because that
	output will go to .segments.tmp and thus cause gmodule.pl to misbehave.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-28  Glenn Washburn  <development@efficientek.com>

	gdb: Fix redirection issue in dump_module_sections
	An error in any GDB command causes it to immediately abort with an error,
	this includes any command that calls that command. This leads to an issue
	in dump_module_sections where an error causes the command to exit without
	turning off file redirection. The user then ends up with a GDB command
	line where commands output nothing to the console.

	Instead do the work of dump_module_sections in the command
	dump_module_sections_helper and run the command using GDB's pipe command
	which does the redirection and undoes the redirection when it finishes
	regardless of any errors in the command.

	Also, remove .segments.tmp file prior to loading modules in case one was
	left from a previous run.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-28  Glenn Washburn  <development@efficientek.com>

	efi: Allow expression as func argument to efi_call_* macros on all platforms
	On EFI platforms where EFI calls do not require a wrapper (notably i386-efi
	and arm64-efi), the func argument needs to be wrapped in parenthesis to
	allow valid syntax when func is an expression which evaluates to a function
	pointer. On EFI platforms that do need a wrapper, this was never an issue
	because func is passed to the C function wrapper as an argument and thus
	does not need parenthesis to be evaluated.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-28  Jeremy Szu  <jeremy.szu@canonical.com>

	loader/i386/linux: Correct wrong initrd address for debug
	The "addr" is used to request the memory with specific ranges but the real
	loadable address come from the relocator. Thus, print the final retrieved
	addresses, virtual and physical, for initrd.

	On the occasion migrate to PRIxGRUB_ADDR and PRIxGRUB_SIZE format specifiers.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-28  Glenn Washburn  <development@efficientek.com>

	INSTALL: Document that the functional test requires the package xfonts-unifont
	Reviewed-by: Thomas Schmitt <scdbackup@gmx.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-28  Glenn Washburn  <development@efficientek.com>

	tests: Return hard error for functional test when unicode.pf2 does not exist
	The functional test requires unicode.pf2 to run successfully, so
	explicitly have the test return ERROR when its not found.

	Tested-by: Thomas Schmitt <scdbackup@gmx.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-28  Glenn Washburn  <development@efficientek.com>

	tests: grub_cmd_cryptomount should hard error when pre-requisites are not met
	Tests should be SKIP'd only when they do not apply to a particular target.
	Hard errors are for when the test should run but can not be setup properly.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-28  Glenn Washburn  <development@efficientek.com>

	tests: Add pathological iso9660 filesystem tests
	These are not added to grub-fs-tester because they are not generated and
	none of the filesystem tests are run on these ISOs. The test is to run the
	command "ls /" on the ISO, and a failure is determined if the command
	times out, has non-zero return value or has any output.

	Tested-by: Thomas Schmitt <scdbackup@gmx.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-14  Mukesh Kumar Chaurasiya  <mchauras@linux.vnet.ibm.com>

	osdep/linux/hostdisk: Modify sector by sysfs as disk sector
	The disk sector size provided by sysfs file system considers the sector
	size of 512 irrespective of disk sector size, thus causing the read by
	the GRUB to an incorrect offset from what was originally intended.

	Considering the 512 sector size of sysfs data the actual sector needs to
	be modified corresponding to disk sector size.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-14  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-fs-tester: Use shell variable instead of autoconf
	By using a shell variable that is set once by the expansion of an autoconf
	variable, the resulting script is more readable.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-14  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-fs-tester: Remove unused variable
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-14  Alec Brown  <alec.r.brown@oracle.com>

	net/bootp: Fix unchecked return value
	In the function send_dhcp_packet(), added an error check for the return
	value of grub_netbuff_push().

	Fixes: CID 404614

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-02  Zhang Boyang  <zhangboyang.id@gmail.com>

	mm: Avoid complex heap growth math in hot path
	We do a lot of math about heap growth in hot path of grub_memalign().
	However, the result is only used if out of memory is encountered, which
	is seldom.

	This patch moves these calculations away from hot path. These
	calculations are now only done if out of memory is encountered. This
	change can also help compiler to optimize integer overflow checks away.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-02  Zhang Boyang  <zhangboyang.id@gmail.com>

	mm: Preallocate some space when adding new regions
	When grub_memalign() encounters out-of-memory, it will try
	grub_mm_add_region_fn() to request more memory from system firmware.
	However, it doesn't preallocate memory space for future allocation
	requests. In extreme cases, it requires one call to
	grub_mm_add_region_fn() for each memory allocation request. This can
	be very slow.

	This patch introduces GRUB_MM_HEAP_GROW_EXTRA, the minimal heap growth
	granularity. The new region size is now set to the bigger one of its
	original value and GRUB_MM_HEAP_GROW_EXTRA. Thus, it will result in some
	memory space preallocated if current allocations request is small.

	The value of GRUB_MM_HEAP_GROW_EXTRA is set to 1MB. If this value is
	smaller, the cost of small memory allocations will be higher. If this
	value is larger, more memory will be wasted and it might cause
	out-of-memory on machines with small amount of RAM.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-02  Zhang Boyang  <zhangboyang.id@gmail.com>

	mm: Adjust new region size to take management overhead into account
	When grub_memalign() encounters out-of-memory, it will try
	grub_mm_add_region_fn() to request more memory from system firmware.
	However, the size passed to it doesn't take region management overhead
	into account. Adding a memory area of "size" bytes may result in a heap
	region of less than "size" bytes really available. Thus, the new region
	may not be adequate for current allocation request, confusing
	out-of-memory handling code.

	This patch introduces GRUB_MM_MGMT_OVERHEAD to address the region
	management overhead (e.g. metadata, padding). The value of this new
	constant must be large enough to make sure grub_memalign(align, size)
	always succeeds after a successful call to
	  grub_mm_init_region(addr, size + align + GRUB_MM_MGMT_OVERHEAD),
	for any given addr and size (assuming no integer overflow).

	The size passed to grub_mm_add_region_fn() is now correctly adjusted,
	thus if grub_mm_add_region_fn() succeeded, current allocation request
	can always succeed.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-02  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell: Add $GRUB_QEMU_OPTS to run.sh to easily see unofficial QEMU arguments
	When re-running a failed test, even the non-standard grub-shell QEMU
	arguments should be preserved in the run.sh to more precisely replay
	the failed test run.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-02  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell: Create run.sh in working directory for easily running test again
	Now it becomes trivial to re-run a test from the output in its working
	directory. This also makes it easy to send a reproducible failing test to
	the mailing list. This has allowed a refactor so that the duplicated code
	to call QEMU has be condensed (e.g. the use of timeout and file descriptor
	redirection). The run.sh script will pass any arguments given to QEMU.
	This allows QEMU to be easily started in a state ready for GDB to be
	attached.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-02  Glenn Washburn  <development@efficientek.com>

	tests: Allow turning on shell tracing from environment variables
	This allows turning on shell tracing for grub-shell and grub-fs-tester
	when its not practical or not possible to use command line arguments
	(e.g. from "make check"). Turn on tracing when the envvar is an integer
	greater than 1, since these can generate a lot of output. Since this
	change uses the environment variables to set the default value for debug
	in grub-shell, this allows enabling grub-shell's debug mode which will
	preserve various generated output files that are helpful for debugging
	tests.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-02  Glenn Washburn  <development@efficientek.com>

	misc: Move *printf function declarations to same location
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-02  Thomas Schmitt  <scdbackup@gmx.net>

	fs/iso9660: Prevent skipping CE or ST at start of continuation area
	If processing of a SUSP CE entry leads to a continuation area which
	begins by entry CE or ST, then these entries were skipped without
	interpretation. In case of CE this would lead to premature end of
	processing the SUSP entries of the file. In case of ST this could
	cause following non-SUSP bytes to be interpreted as SUSP entries.

	Tested-by: Lidong Chen <lidong.chen@oracle.com>
	Reviewed-by: Thomas Schmitt <scdbackup@gmx.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-02  Lidong Chen  <lidong.chen@oracle.com>

	fs/iso9660: Incorrect check for entry boundary
	An SL entry consists of the entry info and the component area.
	The entry info should take up 5 bytes instead of sizeof(*entry).
	The area after the first 5 bytes is the component area. It is
	incorrect to use the sizeof(*entry) to check the entry boundary.

	Reviewed-by: Thomas Schmitt <scdbackup@gmx.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-02  Lidong Chen  <lidong.chen@oracle.com>

	fs/iso9660: Avoid reading past the entry boundary
	Added a check for the SP entry data boundary before reading it.

	Reviewed-by: Thomas Schmitt <scdbackup@gmx.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-02  Lidong Chen  <lidong.chen@oracle.com>

	fs/iso9660: Prevent read past the end of system use area
	In the code, the for loop advanced the entry pointer to the next entry before
	checking if the next entry is within the system use area boundary. Another
	issue in the code was that there is no check for the size of system use area.
	For a corrupted system, the size of system use area can be less than the size
	of minimum SUSP entry size (4 bytes). These can cause buffer overrun. The fixes
	added the checks to ensure the read is valid and within the boundary.

	Reviewed-by: Thomas Schmitt <scdbackup@gmx.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-02  Lidong Chen  <lidong.chen@oracle.com>

	fs/iso9660: Add check to prevent infinite loop
	There is no check for the end of block when reading
	directory extents. It resulted in read_node() always
	read from the same offset in the while loop, thus
	caused infinite loop. The fix added a check for the
	end of the block and ensure the read is within directory
	boundary.

	Reviewed-by: Thomas Schmitt <scdbackup@gmx.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-01  Pierre-Louis Bonicoli  <pierre-louis.bonicoli@libregerbil.fr>

	grub-fs-tester: Add LUKS1 and LUKS2 support
	The logical sector size used by LUKS1 is 512 bytes and LUKS2 uses 512 to
	4069 bytes. The default password used is "pass", but can be overridden
	by setting the PASS environment variable. The device mapper name is set
	to the name of the temp directory so that its easy to correlate device
	mapper name with a particular test run. Also since this name is unique
	per test run, multiple simultaneous test runs are allowed.

	Note that cryptsetup is passing the --disable-locks parameter to allow
	cryptsetup run successfully when /run/lock/cryptsetup is not accessible.
	Since the device mapper name is unique per test run, there is no need to
	worry about locking the device to serialize access.

	Tested-by: Glenn Washburn <development@efficientek.com>
	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-01  Josselin Poiret  <dev@jpoiret.xyz>

	osdep/devmapper/getroot: Set up cheated LUKS2 cryptodisk mount from DM parameters
	This lets a LUKS2 cryptodisk have its cipher and hash filled out,
	otherwise they wouldn't be initialized if cheat mounted.

	Tested-by: Glenn Washburn <development@efficientek.com>
	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-01  Josselin Poiret  <dev@jpoiret.xyz>

	osdep/devmapper/getroot: Have devmapper recognize LUKS2
	Changes UUID comparisons so that LUKS1 and LUKS2 are both recognized
	as being LUKS cryptodisks.

	Tested-by: Glenn Washburn <development@efficientek.com>
	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-02-01  Fabian Vogt  <fvogt@suse.de>

	disk/cryptodisk: When cheatmounting, use the sector info of the cheat device
	When using grub-probe with cryptodisk, the mapped block device from the host
	is used directly instead of decrypting the source device in GRUB code.
	In that case, the sector size and count of the host device needs to be used.
	This is especially important when using LUKS2, which does not assign
	total_sectors and log_sector_size when scanning, but only later when the
	segments in the JSON area are evaluated. With an unset log_sector_size,
	grub_device_open() complains.

	This fixes grub-probe failing with
	"error: sector sizes of 1 bytes aren't supported yet.".

	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Tested-by: Glenn Washburn <development@efficientek.com>
	Reviewed-by: Glenn Washburn <development@efficientek.com>
	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Daniel Axtens  <dja@axtens.net>

	fs/f2fs: Fix off-by-one error in nat journal entries check
	Oops. You're allowed to have up to n = NAT_JOURNAL_ENTRIES entries
	_inclusive_, because the loop below uses i < n, not i <= n. D'oh.

	Fixes: 4bd9877f6216 (fs/f2fs: Do not read past the end of nat journal entries)

	Reported-by: программист нект <programmer11180@programist.ru>
	Tested-by: программист нект <programmer11180@programist.ru>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Nicholas Vinson  <nvinson234@gmail.com>

	gentpl.py: Remove .interp section from .img files
	When building .img files, a .interp section from the .image files will
	sometimes be copied into the .img file. This additional section pushes
	the .img file beyond the 512-byte limit and causes grub-install to fail
	to run for i386-pc platforms.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Glenn Washburn  <development@efficientek.com>

	tests: Add cryptomount functional test
	The grub_cmd_cryptomount make check test performs some functional testing
	of cryptomount and by extension the underlying cryptodisk infrastructure.

	A utility test script named grub-shell-luks-tester is created to handle the
	complexities of the testing, making it simpler to add new test cases in
	grub_cmd_cryptomount.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell: Add halt_cmd variable to testcase namespace
	This allows test case scripts to use the appropriate halt command for
	the built architecture to end execution early. Otherwise, test case
	scripts have no way to know the appropriate mechanism for halting the
	test case early.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell: Trim line should always be matched from the beginning of the line
	When turning on shell tracing the trim line will be output before we
	actually want to start the trim. However, in this case the trim line never
	starts from the beginning of the line. So start trimming from the correct
	line by matching from the beginning of the line.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell: Allow specifying non-default trim line contents
	This will be useful for tests that have unwanted output from setup. This is
	not documented because its only intended to be internal at the moment. Also,
	--no-trim is allowed to explicitly turn off trim.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell: Only cleanup working directory file if QEMU does not fail or timeout
	This keeps the generated files to aid in diagnosing the source of the failure.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell: Set exit status to QEMU exit status
	This allows us to test if unexpected output in test scripts is because of
	a bug in GRUB, because there was an error in QEMU, or QEMU was killed due
	to a timeout.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Glenn Washburn  <development@efficientek.com>

	io/gzio: Remove confusing, out-dated comment
	The "transparent" parameter to grub_gzio_open() was removed in 2010, fc2ef1172c
	(* grub-core/io/gzio.c (grub_gzio_open): Removed "transparent" parameter.)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Glenn Washburn  <development@efficientek.com>

	efi: Fix spacing
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	misc: Fix spacing
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	misc: Spelling fixes
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	gdb: Unregister gdbstub_break command when unloading module
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Glenn Washburn  <development@efficientek.com>

	tests: Fix help test to reflect updated help output
	Commit f5759a878 (normal/help: Add paging instructions to normal and help
	prompts) changed the output of the help command, which broke the help
	test. This change allows the test to pass.

	On the occasion do s/outpu/output/.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Benjamin Herrenschmidt  <benh@kernel.crashing.org>

	term/serial: Improve detection of duplicate serial ports
	We currently rely on some pretty fragile comparison by name to
	identify whether a serial port being configured is identical

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Benjamin Herrenschmidt  <benh@kernel.crashing.org>

	term/serial: Avoid double lookup of serial ports
	The various functions to add a port used to return port->name, and
	the callers would immediately iterate all registered ports to "find"
	the one just created by comparing that return value with ... port->name.

	This is a waste of cycles and code. Instead, have those functions
	return "port" directly.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Benjamin Herrenschmidt  <benh@kernel.crashing.org>

	term/serial: Replace usage of memcmp() with strncmp()
	We are comparing strings after all.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Benjamin Herrenschmidt  <benh@kernel.crashing.org>

	term/serial: Add ability to specify MMIO ports via "serial" command
	This adds the ability to explicitly add an MMIO based serial port
	via the "serial" command. The syntax is:

	  serial --port=mmio,<hex_address>{.b,.w,.l,.q}

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Benjamin Herrenschmidt  <benh@amazon.com>

	term/ns8250: Support more MMIO access sizes
	It is common for PCI based UARTs to use larger than one byte access
	sizes. This adds support for this and uses the information present
	in SPCR accordingly.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Benjamin Herrenschmidt  <benh@amazon.com>

	term/ns8250: Use ACPI SPCR table when available to configure serial
	"serial auto" is now equivalent to just "serial" and will use the
	SPCR to discover the port if present, otherwise defaults to "com0"
	as before.

	This allows to support MMIO ports specified by ACPI which is needed
	on AWS EC2 "metal" instances, and will enable GRUB to pickup the
	port configuration specified by ACPI in other cases.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Benjamin Herrenschmidt  <benh@amazon.com>

	term/ns8250: Add configuration parameter when adding ports
	This will allow ports to be added with a pre-set configuration.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Benjamin Herrenschmidt  <benh@kernel.crashing.org>

	term/ns8250: Move base clock definition to a header
	And while at it, unify it as clock frequency in Hz, to match the value in
	grub_serial_config struct and do the division by 16 in one common place.

	This will simplify adding SPCR support.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-19  Benjamin Herrenschmidt  <benh@amazon.com>

	term/ns8250: Add base support for MMIO UARTs
	This adds the ability for the driver to access UARTs via MMIO instead
	of PIO selectively at runtime, and exposes a new function to add an
	MMIO port.

	In an ideal world, MMIO accessors would be generic and have architecture
	specific memory barriers. However, existing drivers don't have them and
	most of those "bare metal" drivers tend to be for x86 which doesn't need
	them. If necessary, those can be added later.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-18  Benjamin Herrenschmidt  <benh@kernel.crashing.org>

	acpi: Add SPCR and generic address definitions
	This adds the definition of the two ACPI tables according to the spec.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-18  Benjamin Herrenschmidt  <benh@kernel.crashing.org>

	kern/acpi: Export a generic grub_acpi_find_table()
	And convert grub_acpi_find_fadt() to use it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-10  Maxim Fomin  <maxim@fomin.one>

	kern/fs: Fix possible integer overflow in i386-pc mode with large partitions
	The i386-pc mode supports MBR partition scheme where maximum partition
	size is 2 TiB. In case of large partitions left shift expression with
	unsigned long int "length" object may cause integer overflow making
	calculated partition size less than true value. This issue is fixed by
	increasing the size of "length" integer type.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-10  Glenn Washburn  <development@efficientek.com>

	commands/cmp: Only return success when both files have the same contents
	This allows the cmp command to be used in GRUB scripts to conditionally
	run commands based on whether two files are the same.

	The command is now quiet by default and the -v switch can be given to enable
	verbose mode, the previous behavior.

	Update documentation accordingly.

	Suggested-by: Li Gen <ligenlive@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-10  Glenn Washburn  <development@efficientek.com>

	docs: Remove text about cryptodisk UUIDs no being able to use dashes
	This was fixed here: 3cf2e848bc (disk/cryptodisk: Allows UUIDs to be compared
	in a dash-insensitive manner).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-10  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell: Add GRUB output logfile with grub-shell --debug
	This allows seeing full QEMU output of grub-shell, which can be invaluable
	when debugging failing tests.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-10  Marek Marczykowski-Górecki  <marmarek@invisiblethingslab.com>

	templates/linux_xen: Fix detecting XSM policy
	The xenpolicy variable was left set from previous function call. This
	resulted in all-but-first menu entries including XSM policy, even if it
	did not exist.

	Fix this by initializing the xenpolicy variable.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-10  Zhang Boyang  <zhangboyang.id@gmail.com>

	font: Reject fonts with negative max_char_width or max_char_height
	If max_char_width or max_char_height are negative wrong values can be propagated
	by grub_font_get_max_char_width() or grub_font_get_max_char_height(). Prevent
	this from happening.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-10  Zhang Boyang  <zhangboyang.id@gmail.com>

	font: Assign null_font to unknown_glyph
	Like glyphs in ascii_font_glyph[], assign null_font to
	unknown_glyph->font in order to prevent grub_font_get_*() from
	dereferencing NULL pointer.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-10  Zhang Boyang  <zhangboyang.id@gmail.com>

	font: Check return value of grub_malloc() in ascii_glyph_lookup()
	There is a problem in ascii_glyph_lookup(). It doesn't check the return
	value of grub_malloc(). If memory can't be allocated, then NULL pointer
	will be written to.

	This patch fixes the problem by fallbacking to unknown_glyph when
	grub_malloc() returns NULL.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-10  Maxim Fomin  <maxim@fomin.one>

	disk/plainmount: Support plain encryption mode
	This patch adds support for plain encryption mode, plain dm-crypt, via
	new module/command named "plainmount".

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Glenn Washburn <development@efficientek.com>

2023-01-10  Pete Batard  <pete@akeo.ie>

	util/grub-mkrescue: Search by file UUID rather than partition UUID for EFI boot
	The final piece needed to add UEFI file system transposition support is to
	ensure the boot media can be located regardless of how the boot partition
	was instantiated. Especially, we do not want to be reliant on brittle
	partition UUIDs, as these only work if a boot media is duplicated at the
	block level and not at the file system level.

	To accomplish this for EFI boot, we now create a UUID file in a .disk/
	directory, that can then be searched for.

	Note: The switch from make_image_fwdisk_abs() to make_image_abs() is
	needed in order to use the search functionality.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-10  Pete Batard  <pete@akeo.ie>

	util/grub-mkrescue: Preserve a copy of the EFI bootloaders on the ISO 9660 file system
	To enable file system transposition support for UEFI, we also must ensure that
	there exists a copy of the EFI bootloaders, that are currently embedded in the
	efi.img for xorriso, at their expected UEFI location on the ISO 9660 file system.

	This is accomplished by removing the use of a temporary directory to create the
	efi/ content, to instead place it at the root of the ISO 9660 content.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2023-01-10  Pete Batard  <pete@akeo.ie>

	util/grub-mkrescue: Add support for FAT and NTFS on EFI boot
	In order to add file system transposition support for UEFI, i.e. the ability
	to copy the content of an grub-mkrescue ISO 9660 image onto user-formatted
	media, and have that boot on UEFI systems, the first thing we need to do is
	add support for the file systems that are natively handled by UEFI. This
	mandatorily includes FAT, but we also include NTFS as the latter is also
	commonly supported on modern x64 platforms.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  t.feng  <fengtao40@huawei.com>

	util/bash-completion: Disable SC2120 shellcheck warning
	SC2120 (warning): function references arguments, but none are ever passed.

	In grub-completion.bash.in line 63:
	__grub_get_options_from_help () {
	^-- SC2120 (warning)
	     local prog

	     if [ $# -ge 1 ]; then
	         prog="$1"

	The arg of __grub_get_options_from_help() is optional. So, the current
	code meets the exception and does not need to be modified. Ignoring the
	warning then.

	More: https://github.com/koalaman/shellcheck/wiki/SC2120

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  t.feng  <fengtao40@huawei.com>

	util/bash-completion: Fix SC2155 shellcheck warning
	SC2155 (warning): Declare and assign separately to avoid masking return values.

	The exit status of the command is overridden by the exit status of the
	creation of the local variable.

	In grub-completion.bash.in line 115:
	    local config_file=$(__grub_dir)/grub.cfg
	          ^---------^ SC2155 (warning)

	In grub-completion.bash.in line 126:
	    local grub_dir=$(__grub_dir)
	          ^------^ SC2155 (warning)

	More: https://github.com/koalaman/shellcheck/wiki/SC2155

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  t.feng  <fengtao40@huawei.com>

	util/bash-completion: Fix SC2207 shellcheck warning
	SC2207 (warning): Prefer mapfile or read -a to split
	command output (or quote to avoid splitting).

	In grub-completion.bash.in line 56:
	        COMPREPLY=($(compgen -P "${2-}" -W "${1-}" -S "${4-}" -- "$cur"))
	                   ^-- SC2207 (warning)

	In grub-completion.bash.in line 119:
	        COMPREPLY=( $(compgen \
	                    ^-- SC2207 (warning)

	In grub-completion.bash.in line 128:
	    COMPREPLY=( $( compgen -f -X '!*/*.mod' -- "${grub_dir}/$cur" | {
	                ^-- SC2207 (warning)

	COMPREPLY=($(command)) are doing unquoted command expansion in an array.
	This will invoke the shell's sloppy word splitting and glob expansion.

	If we want to split the output into lines or words, use read -r and
	loops will be better. This prevents the shell from doing unwanted
	splitting and glob expansion, and therefore avoiding problems with
	output containing spaces or special characters.

	More: https://github.com/koalaman/shellcheck/wiki/SC2207

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  t.feng  <fengtao40@huawei.com>

	util/bash-completion: Fix SC2070 shellcheck error
	SC2070 (error): -n doesn't work with unquoted arguments.
	Quote or use [[ ]].
	In grub-completion.bash.in line 130:
	             [ -n $tmp ] && {
	                  ^--^ SC2070 (error)

	More: https://github.com/koalaman/shellcheck/wiki/SC2070

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  Steve McIntyre  <steve@einval.com>

	kern/file: Fix error handling in grub_file_open()
	grub_file_open() calls grub_file_get_device_name(), but doesn't check
	the return. Instead, it checks if grub_errno is set.

	However, nothing initialises grub_errno here when grub_file_open()
	starts. This means that trying to open one file that doesn't exist and
	then trying to open another file that does will (incorrectly) also
	fail to open that second file.

	Let's fix that.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  Jeremy Szu  <jeremy.szu@canonical.com>

	loader/i386/linux: Fix initrd maximum address overflow
	The current i386 initrd is limited under 1 GiB memory and it works with
	most compressed initrds (also initrd_addr_max case reported by kernel).

	addr = (addr_max - aligned_size) & ~0xFFF;

	Above line is used to calculate the reasonable address to store the initrd.

	However, if initrd size is greater than 1 GiB or initrd_addr_max, then it
	will get overflow, especially on x86_64 arch.

	Therefore, add a check point to prevent it overflows as well as having
	a debug log for complex story of initrd addresses.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  Dimitri John Ledkov  <dimitri.ledkov@canonical.com>

	templates: Enable fwsetup on EFI platforms only
	Only perform call to fwsetup if one is on EFI platform. On all other
	platforms fwsetup command does not exists, and thus returns 0 and
	a useless uefi-firmware menu entry gets generated.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  t.feng  <fengtao40@huawei.com>

	fs/xfs: Fix memory leaks in XFS module
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  t.feng  <fengtao40@huawei.com>

	fs/squash4: Fix memory leaks in grub_squash_iterate_dir()
	Fixes: 20dd511c8 (Handle "." and ".." on squashfs)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  t.feng  <fengtao40@huawei.com>

	fs/iso9660: Fix memory leaks in grub_iso9660_susp_iterate()
	Fixes: 99373ce47 (* grub-core/fs/iso9660.c: Remove nested functions)

	Reviewed-by: Thomas Schmitt <scdbackup@gmx.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  t.feng  <fengtao40@huawei.com>

	fs/hfsplus: Fix memory leak in grub_hfsplus_btree_search()
	Fixes: 58ea11d5b (fs/hfsplus: Don't fetch a key beyond the end of the node)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  t.feng  <fengtao40@huawei.com>

	fs/bfs: Fix memory leak in read_bfs_file()
	The l1_entries and l2_entries were not freed at the end of file read.

	Fixes: 5825b3794 (BFS implementation based on the specification)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  t.feng  <fengtao40@huawei.com>

	fs/ntfs: Fix memory leaks in grub_ntfs_read_symlink()
	Fixes: 5773fb641 (Support NTFS reparse points)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  t.feng  <fengtao40@huawei.com>

	fs/minix: Fix memory leaks in grub_minix_lookup_symlink()
	Fixes: a07e6ad01 (* grub-core/fs/minix.c: Remove variable length arrays)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  t.feng  <fengtao40@huawei.com>

	fs/btrfs: Fix memory leak in find_path()
	Fixes: 82591fa6e (Make / in btrfs refer to real root)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  t.feng  <fengtao40@huawei.com>

	fs/affs: Fix memory leaks in grub_affs_create_node()
	The hashtable is not freed if GRUB_AFFS_FILETYPE_HARDLINK and
	grub_disk_read() failed. If grub_affs_create_node() returns non-zero
	the hashtable should be freed too.

	By the way, the hashtable argument is unused in grub_affs_create_node().
	So, we can remove the argument and free it in grub_affs_iterate_dir().
	It allocates the memory and it should be responsible for releasing it.

	This is why commit ebf32bc4e9 (fs/affs: Fix resource leaks) missed
	this memory leak.

	Fixes: ebf32bc4e9 (fs/affs: Fix resource leaks)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  Ryan Cohen  <rcohenprogramming@gmail.com>

	normal/cmdline: Fix two related integer underflows
	An unchecked decrement operation in cl_print() would cause a few
	integers to underflow. Where an output terminal's state is stored in
	cl_term, the values cl_term->ystart and cl_term->pos.y both underflow.

	This can be replicated with the following steps:

	1. Get to the GRUB command line
	2. Hold down the "d" key (or any key that enters a visible character)
	   until it fills the entire row
	3. Press "HOME" and then press "CTRL-k". This will clear every
	   character entered in step 2
	4. Continuously press "CTRL-y" until the terminal scrolls the original
	   prompt ("grub> ") passed the terminal's top row. Now, no prompt
	   should be visible. This step causes cl_term->ystart to underflow
	5. Press "HOME" and then "d" (or any visible character). This can have
	   different visual effects for different systems, but it will always
	   cause cl_term->pos.y to underflow

	On BIOS systems, these underflows cause the output terminal to
	completely stop displaying anything. Characters can still be
	entered and commands can be run, but nothing will display on the
	terminal. From here, you can only get the display working by running
	a command to switch the current output terminal to a different type:

	terminal_output <OTHER_TERMINAL>

	On UEFI systems, these replication steps do not break the output
	terminal. Until you press "ENTER", the cursor stops responding to input,
	but you can press "ENTER" after step 5 and the command line will
	work properly again. This patch is mostly important for BIOS systems
	where the output terminal is rendered unusable after the underflows
	occur.

	This patch adds two checks, one for each variable. It ensures that
	cl_term->ystart does not decrement passed 0. It also ensures that
	cl_term->pos.y does not get set passed the terminal's bottom row.

	When the previously listed replication steps are followed with this
	patch, the terminal's cursor will be set to the top row and the command
	line is still usable, even on BIOS systems.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  Ryan Cohen  <rcohenprogramming@gmail.com>

	term/i386/pc/vga_text: Prevent out-of-bounds writes to VGA text buffer
	Coordinates passed to screen_write_char() did not have any checks to
	ensure they are not out-of-bounds. This adds an if statement to prevent
	out-of-bounds writes to the VGA text buffer.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  Gary Lin  <glin@suse.com>

	loader/linux: Ensure the newc pathname is NULL-terminated
	Per "man 5 cpio", the namesize in the cpio header includes the trailing
	NUL byte of the pathname and the pathname is followed by NUL bytes, but
	the current implementation ignores the trailing NUL byte when making
	the newc header. Although make_header() tries to pad the pathname string,
	the padding won't happen when strlen(name) + sizeof(struct newc_head)
	is a multiple of 4, and the non-NULL-terminated pathname may lead to
	unexpected results.

	Assume that a file is created with 'echo -n aaaa > /boot/test12' and
	loaded by grub2:

	    linux /boot/vmlinuz
	    initrd newc:test12:/boot/test12 /boot/initrd

	The initrd command eventually invoked grub_initrd_load() and sent
	't''e''s''t''1''2' to make_header() to generate the header:

	00000070  30 37 30 37 30 31 33 30  31 43 41 30 44 45 30 30  |070701301CA0DE00|
	00000080  30 30 38 31 41 34 30 30  30 30 30 33 45 38 30 30  |0081A4000003E800|
	00000090  30 30 30 30 36 34 30 30  30 30 30 30 30 31 36 33  |0000640000000163|
	000000a0  37 36 45 34 35 32 30 30  30 30 30 30 30 34 30 30  |76E4520000000400|
	000000b0  30 30 30 30 30 38 30 30  30 30 30 30 31 33 30 30  |0000080000001300|
	000000c0  30 30 30 30 30 30 30 30  30 30 30 30 30 30 30 30  |0000000000000000|
	000000d0  30 30 30 30 30 36 30 30  30 30 30 30 30 30 74 65  |00000600000000te|
	                                                                  ^namesize
	000000e0  73 74 31 32 61 61 61 61  30 37 30 37 30 31 30 30  |st12aaaa07070100|
	                   ^^ end of the pathname

	Since strlen("test12") + sizeof(struct newc_head) is 116 = 29 * 4,
	make_header() didn't pad the pathname, and the file content followed
	"test12" immediately. This violates the cpio format and may trigger such
	error during linux boot:

	    Initramfs unpacking failed: ZSTD-compressed data is trunc

	To avoid the potential problems, this commit counts the trailing NUL byte
	in when calling make_header() and adjusts the initrd size accordingly.

	Now the header becomes

	00000070  30 37 30 37 30 31 33 30  31 43 41 30 44 45 30 30  |070701301CA0DE00|
	00000080  30 30 38 31 41 34 30 30  30 30 30 33 45 38 30 30  |0081A4000003E800|
	00000090  30 30 30 30 36 34 30 30  30 30 30 30 30 31 36 33  |0000640000000163|
	000000a0  37 36 45 34 35 32 30 30  30 30 30 30 30 34 30 30  |76E4520000000400|
	000000b0  30 30 30 30 30 38 30 30  30 30 30 30 31 33 30 30  |0000080000001300|
	000000c0  30 30 30 30 30 30 30 30  30 30 30 30 30 30 30 30  |0000000000000000|
	000000d0  30 30 30 30 30 37 30 30  30 30 30 30 30 30 74 65  |00000700000000te|
	                                                                  ^namesize
	000000e0  73 74 31 32 00 00 00 00  61 61 61 61 30 37 30 37  |st12....aaaa0707|
	                      ^^ end of the pathname

	Besides the trailing NUL byte, make_header() pads 3 more NUL bytes, and
	the user can safely read the pathname without a further check.

	To conform to the cpio format, the headers for "TRAILER!!!" are also
	adjusted to include the trailing NUL byte, not ignore it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  Jagannathan Raman  <jag.raman@oracle.com>

	fs/udf: Validate length of AED in grub_udf_read_block()
	Validate the length of Allocation Extent Descriptor in grub_udf_read_block(),
	based on the details in UDF spec. v2.01 section 2.3.11.

	Fixes: CID 314037

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  Ismael Luceno  <iluceno@suse.de>

	util/grub-install: Ensure a functional /dev/nvram
	This enables an early failure; for i386-ieee1275 and powerpc-ieee1275 on
	Linux, without /dev/nvram the system may be left in an unbootable state.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  Ismael Luceno  <iluceno@suse.de>

	templates: Set defaults using var substitution
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-12-07  Glenn Washburn  <development@efficientek.com>

	tests: Put all generated files into working dir and use better file names
	When running tests there are many invocations of grub-shell, and because
	the output files are all random names in the same tmp directory, it
	becomes more work to figure out which files went with which grub-shell
	invocations. So all generated files from one invocation of grub-shell
	are put into a randomly named directory, so as not to collide with other
	grub-shell invocations. And now that the generated files can be put in
	a location where they will not get stepped on, and they can be named
	sensible names.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Zhang Boyang  <zhangboyang.id@gmail.com>

	normal/charset: Fix an integer overflow in grub_unicode_aglomerate_comb()
	The out->ncomb is a bit-field of 8 bits. So, the max possible value is 255.
	However, code in grub_unicode_aglomerate_comb() doesn't check for an
	overflow when incrementing out->ncomb. If out->ncomb is already 255,
	after incrementing it will get 0 instead of 256, and cause illegal
	memory access in subsequent processing.

	This patch introduces GRUB_UNICODE_NCOMB_MAX to represent the max
	acceptable value of ncomb. The code now checks for this limit and
	ignores additional combining characters when limit is reached.

	Reported-by: Daniel Axtens <dja@axtens.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Zhang Boyang  <zhangboyang.id@gmail.com>

	font: Assign null_font to glyphs in ascii_font_glyph[]
	The calculations in blit_comb() need information from glyph's font, e.g.
	grub_font_get_xheight(main_glyph->font). However, main_glyph->font is
	NULL if main_glyph comes from ascii_font_glyph[]. Therefore
	grub_font_get_*() crashes because of NULL pointer.

	There is already a solution, the null_font. So, assign it to those glyphs
	in ascii_font_glyph[].

	Reported-by: Daniel Axtens <dja@axtens.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Zhang Boyang  <zhangboyang.id@gmail.com>

	font: Harden grub_font_blit_glyph() and grub_font_blit_glyph_mirror()
	As a mitigation and hardening measure add sanity checks to
	grub_font_blit_glyph() and grub_font_blit_glyph_mirror(). This patch
	makes these two functions do nothing if target blitting area isn't fully
	contained in target bitmap. Therefore, if complex calculations in caller
	overflows and malicious coordinates are given, we are still safe because
	any coordinates which result in out-of-bound-write are rejected. However,
	this patch only checks for invalid coordinates, and doesn't provide any
	protection against invalid source glyph or destination glyph, e.g.
	mismatch between glyph size and buffer size.

	This hardening measure is designed to mitigate possible overflows in
	blit_comb(). If overflow occurs, it may return invalid bounding box
	during dry run and call grub_font_blit_glyph() with malicious
	coordinates during actual blitting. However, we are still safe because
	the scratch glyph itself is valid, although its size makes no sense, and
	any invalid coordinates are rejected.

	It would be better to call grub_fatal() if illegal parameter is detected.
	However, doing this may end up in a dangerous recursion because grub_fatal()
	would print messages to the screen and we are in the progress of drawing
	characters on the screen.

	Reported-by: Daniel Axtens <dja@axtens.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Zhang Boyang  <zhangboyang.id@gmail.com>

	font: Fix an integer underflow in blit_comb()
	The expression (ctx.bounds.height - combining_glyphs[i]->height) / 2 may
	evaluate to a very big invalid value even if both ctx.bounds.height and
	combining_glyphs[i]->height are small integers. For example, if
	ctx.bounds.height is 10 and combining_glyphs[i]->height is 12, this
	expression evaluates to 2147483647 (expected -1). This is because
	coordinates are allowed to be negative but ctx.bounds.height is an
	unsigned int. So, the subtraction operates on unsigned ints and
	underflows to a very big value. The division makes things even worse.
	The quotient is still an invalid value even if converted back to int.

	This patch fixes the problem by casting ctx.bounds.height to int. As
	a result the subtraction will operate on int and grub_uint16_t which
	will be promoted to an int. So, the underflow will no longer happen. Other
	uses of ctx.bounds.height (and ctx.bounds.width) are also casted to int,
	to ensure coordinates are always calculated on signed integers.

	Fixes: CVE-2022-3775

	Reported-by: Daniel Axtens <dja@axtens.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Zhang Boyang  <zhangboyang.id@gmail.com>

	fbutil: Fix integer overflow
	Expressions like u64 = u32 * u32 are unsafe because their products are
	truncated to u32 even if left hand side is u64. This patch fixes all
	problems like that one in fbutil.

	To get right result not only left hand side have to be u64 but it's also
	necessary to cast at least one of the operands of all leaf operators of
	right hand side to u64, e.g. u64 = u32 * u32 + u32 * u32 should be
	u64 = (u64)u32 * u32 + (u64)u32 * u32.

	For 1-bit bitmaps grub_uint64_t have to be used. It's safe because any
	combination of values in (grub_uint64_t)u32 * u32 + u32 expression will
	not overflow grub_uint64_t.

	Other expressions like ptr + u32 * u32 + u32 * u32 are also vulnerable.
	They should be ptr + (grub_addr_t)u32 * u32 + (grub_addr_t)u32 * u32.

	This patch also adds a comment to grub_video_fb_get_video_ptr() which
	says it's arguments must be valid and no sanity check is performed
	(like its siblings in grub-core/video/fb/fbutil.c).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Zhang Boyang  <zhangboyang.id@gmail.com>

	kern/efi/sb: Enforce verification of font files
	As a mitigation and hardening measure enforce verification of font
	files. Then only trusted font files can be load. This will reduce the
	attack surface at cost of losing the ability of end-users to customize
	fonts if e.g. UEFI Secure Boot is enabled. Vendors can always customize
	fonts because they have ability to pack fonts into their GRUB bundles.

	This goal is achieved by:

	  * Removing GRUB_FILE_TYPE_FONT from shim lock verifier's
	    skip-verification list.

	  * Adding GRUB_FILE_TYPE_FONT to lockdown verifier's defer-auth list,
	    so font files must be verified by a verifier before they can be loaded.

	Suggested-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Zhang Boyang  <zhangboyang.id@gmail.com>

	font: Fix integer underflow in binary search of char index
	If search target is less than all entries in font->index then "hi"
	variable is set to -1, which translates to SIZE_MAX and leads to errors.

	This patch fixes the problem by replacing the entire binary search code
	with the libstdc++'s std::lower_bound() implementation.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Zhang Boyang  <zhangboyang.id@gmail.com>

	font: Fix integer overflow in BMP index
	The BMP index (font->bmp_idx) is designed as a reverse lookup table of
	char entries (font->char_index), in order to speed up lookups for BMP
	chars (i.e. code < 0x10000). The values in BMP index are the subscripts
	of the corresponding char entries, stored in grub_uint16_t, while 0xffff
	means not found.

	This patch fixes the problem of large subscript truncated to grub_uint16_t,
	leading BMP index to return wrong char entry or report false miss. The
	code now checks for bounds and uses BMP index as a hint, and fallbacks
	to binary-search if necessary.

	On the occasion add a comment about BMP index is initialized to 0xffff.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Zhang Boyang  <zhangboyang.id@gmail.com>

	font: Fix integer overflow in ensure_comb_space()
	In fact it can't overflow at all because glyph_id->ncomb is only 8-bit
	wide. But let's keep safe if somebody changes the width of glyph_id->ncomb
	in the future. This patch also fixes the inconsistency between
	render_max_comb_glyphs and render_combining_glyphs when grub_malloc()
	returns NULL.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Zhang Boyang  <zhangboyang.id@gmail.com>

	font: Remove grub_font_dup_glyph()
	Remove grub_font_dup_glyph() since nobody is using it since 2013, and
	I'm too lazy to fix the integer overflow problem in it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Zhang Boyang  <zhangboyang.id@gmail.com>

	font: Fix several integer overflows in grub_font_construct_glyph()
	This patch fixes several integer overflows in grub_font_construct_glyph().
	Glyphs of invalid size, zero or leading to an overflow, are rejected.
	The inconsistency between "glyph" and "max_glyph_size" when grub_malloc()
	returns NULL is fixed too.

	Fixes: CVE-2022-2601

	Reported-by: Zhang Boyang <zhangboyang.id@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Zhang Boyang  <zhangboyang.id@gmail.com>

	font: Fix size overflow in grub_font_get_glyph_internal()
	The length of memory allocation and file read may overflow. This patch
	fixes the problem by using safemath macros.

	There is a lot of code repetition like "(x * y + 7) / 8". It is unsafe
	if overflow happens. This patch introduces grub_video_bitmap_calc_1bpp_bufsz().
	It is safe replacement for such code. It has safemath-like prototype.

	This patch also introduces grub_cast(value, pointer), it casts value to
	typeof(*pointer) then store the value to *pointer. It returns true when
	overflow occurs or false if there is no overflow. The semantics of arguments
	and return value are designed to be consistent with other safemath macros.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Zhang Boyang  <zhangboyang.id@gmail.com>

	font: Reject glyphs exceeds font->max_glyph_width or font->max_glyph_height
	Check glyph's width and height against limits specified in font's
	metadata. Reject the glyph (and font) if such limits are exceeded.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  t.feng  <fengtao40@huawei.com>

	loader/multiboot_elfxx: Fix memory leak
	The commit eb33e61b3 (multiboot: fix memory leak) did not fix all
	issues. Fix all of them right now.

	Fixes: eb33e61b3 (multiboot: fix memory leak)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Damian Szuberski  <szuberskidamian@gmail.com>

	docs: Correct GRUB_DISABLE_LINUX_PARTUUID documentation
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Arsen Arsenović  <arsen@aarsen.me>

	osdep/unix/getroot: Pass -P to zpool status
	zpool status by default prints basenames of VDEVs, which means that GRUB
	would have to go around guessing to see whether a VDEV exists. Instead,
	it'd be more robust to simply tell zpool to give us full paths to VDEVs
	via -P.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Robbie Harwood  <rharwood@redhat.com>

	normal/help: Add paging instructions to normal and help prompts
	This is not an ideal solution, as interactive users must always run
	a command in order to get the behavior they want, but it avoids
	problematic interactions between prompting and sourcing files.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Robbie Harwood  <rharwood@redhat.com>

	commands/tpm: Don't propagate measurement failures to the verifiers layer
	Currently if an EFI firmware fails to do a TPM measurement for a file,
	the error will be propagated to the verifiers framework which will
	prevent it to be opened. This mean that buggy firmwares will lead to
	the system not booting because files won't be allowed to be loaded. But
	a failure to do a TPM measurement isn't expected to be a fatal error
	that causes the system to be unbootable.

	To avoid this, don't return errors from .write and .verify_string
	callbacks and just print a debug message in the case of a TPM
	measurement failure. Add an environment variable, tpm_fail_fatal, to
	restore the previous behavior.

	Also-authored-by: Javier Martinez Canillas <javierm@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Robbie Harwood  <rharwood@redhat.com>

	kern/env: Add function for retrieving variables as booleans
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Robbie Harwood  <rharwood@redhat.com>

	types: Make bool generally available
	Add an include on stdbool.h, making the bool type generally available
	within the GRUB without needing to add a file-specific include every
	time it would be used.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Raymund Will  <rw@suse.com>

	loader: Add support for grub-emu to kexec Linux menu entries
	The GRUB emulator is used as a debugging utility but it could also be
	used as a user-space bootloader if there is support to boot an operating
	system.

	The Linux kernel is already able to (re)boot another kernel via the
	kexec boot mechanism. So the grub-emu tool could rely on this feature
	and have linux and initrd commands that are used to pass a kernel,
	initramfs image and command line parameters to kexec for booting
	a selected menu entry.

	By default the systemctl kexec option is used so systemd can shutdown
	all of the running services before doing a reboot using kexec. But if
	this is not present, it can fall back to executing the kexec user-space
	tool directly. The ability to force a kexec-reboot when systemctl kexec
	fails must only be used in controlled environments to avoid possible
	filesystem corruption and data loss.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-11-14  Denton Liu  <liu.denton@gmail.com>

	templates: Introduce GRUB_TOP_LEVEL_* vars
	A user may wish to use an image that is not sorted as the "latest"
	version as the top-level entry. For example, in Arch Linux, if a user
	has the LTS and regular kernels installed, "/boot/vmlinuz-linux-lts"
	gets sorted as the "latest" compared to "/boot/vmlinuz-linux", meaning
	the LTS kernel becomes the top-level entry. However, a user may wish to
	use the regular kernel as the top-level default with the LTS only
	existing as a backup.

	This need can be seen in Arch Linux's AUR with two user-submitted
	packages[0][1] providing an update hook which patches /etc/grub.d/10_linux
	to move the desired kernel to the top-level. This patch serves to solve
	this in a more generic way.

	Introduce the GRUB_TOP_LEVEL, GRUB_TOP_LEVEL_XEN and GRUB_TOP_LEVEL_OS_PROBER
	variables to allow users to specify the top-level entry.

	Create grub_move_to_front() as a helper function which moves entries to
	the front of a list. This function does the heavy lifting of moving
	the menu entry to the front in each script.

	In 10_netbsd, since there isn't an explicit list variable, extract the
	items that are being iterated through into a list so that we can
	optionally apply grub_move_to_front() to the list before the loop.

	[0]: https://aur.archlinux.org/packages/grub-linux-default-hook
	[1]: https://aur.archlinux.org/packages/grub-linux-rt-default-hook

	Reviewed-by: Oskari Pirhonen <xxc3ncoredxx@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-27  Alec Brown  <alec.r.brown@oracle.com>

	video/readers: Add artificial limit to image dimensions
	In grub-core/video/readers/jpeg.c, the height and width of a JPEG image don't
	have an upper limit for how big the JPEG image can be. In Coverity, this is
	getting flagged as an untrusted loop bound. This issue can also seen in PNG and
	TGA format images as well but Coverity isn't flagging it. To prevent this, the
	constant IMAGE_HW_MAX_PX is being added to include/grub/bitmap.h, which has
	a value of 16384, to act as an artificial limit and restrict the height and
	width of images. This value was picked as it is double the current max
	resolution size, which is 8K.

	Fixes: CID 292450

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-27  Daniel Axtens  <dja@axtens.net>

	disk/diskfilter: Don't make a RAID array with more than 1024 disks
	This is "belt and braces" with commit 12e20a6a695f (disk/diskfilter:
	Check calloc() result for NULL): we end up trying to use too much memory
	in situations like corrupted Linux software RAID setups purporting to
	use a huge number of disks. Simply refuse to permit such configurations.

	1024 is a bit arbitrary, yes, and I feel a bit like I'm tempting fate
	here, but I think 1024 disks in an array (that GRUB has to read to boot!)
	should be enough for anyone.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-27  Ard Biesheuvel  <ardb@kernel.org>

	arm64/efi/linux: Ignore FDT unless we need to modify it
	Now that we implemented support for the LoadFile2 protocol for initrd
	loading, there is no longer a need to pass the initrd parameters via
	the device tree. This means that when the LoadFile2 protocol is being
	used, there is no reason to update the device tree in the first place,
	and so we can ignore it entirely.

	The only remaining reason to deal with the devicetree is if we are
	using the "devicetree" command to load one from disk, so tweak the
	logic in grub_fdt_install() to take that into account.

	Reviewed-by: Leif Lindholm <quic_llindhol@quicinc.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-27  Ard Biesheuvel  <ardb@kernel.org>

	arm64/efi/linux: Implement LoadFile2 initrd loading protocol for Linux
	Recent Linux kernels will invoke the LoadFile2 protocol installed on
	a well-known vendor media path to load the initrd if it is exposed by
	the firmware. Using this method is preferred for two reasons:
	  - the Linux kernel is in charge of allocating the memory, and so it can
	    implement any placement policy it wants (given that these tend to
	    change between kernel versions),
	  - it is no longer necessary to modify the device tree provided by the
	    firmware.

	So let's install this protocol when handling the "initrd" command if
	such a recent kernel was detected (based on the PE/COFF image version),
	and defer loading the initrd contents until the point where the kernel
	invokes the LoadFile2 protocol.

	Reviewed-by: Heinrich Schuchardt <heinrich.schuchardt@canonical.com>
	Tested-by: Ilias Apalodimas <ilias.apalodimas@linaro.org>
	Reviewed-by: Ilias Apalodimas <ilias.apalodimas@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-27  Ard Biesheuvel  <ardb@kernel.org>

	efi/efinet: Don't close connections at fini_hw() time
	When GRUB runs on top of EFI firmware, it only has access to block and
	network device abstractions exposed by the firmware, and it is up to the
	firmware to quiesce the underlying hardware when exiting boot services
	and handing over to the OS.

	This is especially important for network devices, to prevent incoming
	packets from being DMA'd straight into memory after the OS has taken
	over but before it has managed to reconfigure the network hardware.

	GRUB handles this by means of the grub_net_fini_hw() preboot hook, which
	is executed before calling into the booted image. This means that all
	network devices disappear or become inoperable before the EFI stub
	executes on EFI targeted builds. This is problematic as it prevents the
	EFI stub from calling back into GRUB provided protocols such as
	LoadFile2 for the initrd, which we will provide in a subsequent patch.

	So add a flag that indicates to the network core that EFI network
	devices should not be closed when grub_net_fini_hw() is called.

	Reviewed-by: Heinrich Schuchardt <heinrich.schuchardt@canonical.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-27  Ard Biesheuvel  <ardb@kernel.org>

	loader/arm64/linux: Account for COFF headers appearing at unexpected offsets
	The way we load the Linux and PE/COFF image headers depends on a fixed
	placement of the COFF header at offset 0x40 into the file. This is
	a reasonable default, given that this is where Linux emits it today.
	However, in order to comply with the PE/COFF spec, which allows this
	header to appear anywhere in the file, let's ensure that we read the
	header from where it actually appears in the file if it is not located
	at offset 0x40.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-27  Ard Biesheuvel  <ardb@kernel.org>

	arm/linux: Unify ARM/arm64 vs Xen PE/COFF header handling
	Xen has its own version of the image header, to account for the
	additional PE/COFF header fields. Since we are adding references to
	those in the shared EFI loader code, update the common definitions
	and drop the Xen specific one which no longer has a purpose.

	Since in both cases, the call to grub_arch_efi_linux_check_image() is
	preceded by a load of the image header, let's move the load into that
	function, and rename it to grub_arch_efi_linux_load_image_header().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-27  Ard Biesheuvel  <ardb@kernel.org>

	efi: Move MS-DOS stub out of generic PE header definition
	The PE/COFF spec permits the COFF signature and file header to appear
	anywhere in the file, and the actual offset is recorded in 4 byte
	little endian field at offset 0x3c of the image.

	When GRUB is emitted as a PE/COFF binary, we reuse the 128 byte MS-DOS
	stub (even for non-x86 architectures), putting the COFF signature and
	file header at offset 0x80. However, other PE/COFF images may use
	different values, and non-x86 Linux kernels use an offset of 0x40
	instead.

	So let's get rid of the grub_pe32_header struct from pe32.h, given that
	it does not represent anything defined by the PE/COFF spec. Instead,
	introduce a minimal struct grub_msdos_image_header type based on the
	PE/COFF spec's description of the image header, and use the offset
	recorded at file position 0x3c to discover the actual location of the PE
	signature and the COFF image header.

	The remaining fields are moved into a struct grub_pe_image_header,
	which we will use later to access COFF header fields of arbitrary
	images (and which may therefore appear at different offsets)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-27  Jagannathan Raman  <jag.raman@oracle.com>

	kern/buffer: Handle NULL input pointer in grub_buffer_free()
	The grub_buffer_free() should handle NULL input pointer, similar to
	grub_free(). If the pointer is not referencing any memory location,
	grub_buffer_free() need not perform any function.

	Fixes: CID 396931

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-27  Jagannathan Raman  <jag.raman@oracle.com>

	fs/zfs/zfs: Update dangling dn_new pointer in dnode_get_path()
	The dnode_get_path() traverses dnode structures to locate the dnode leaf
	of a given path. When the leaf is a symlink to another path, it restarts
	the traversal either from root or from a different path. In such cases,
	dn_new must be re-initialized

	Passes "make check".

	Fixes: CID 86750

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-27  Darren Kenny  <darren.kenny@oracle.com>

	build: Update to reflect minimum clang version 8.0
	After doing some validation with clang from versions 3.8 and up, the
	builds prior to version 8.0.0 fail due to the use of safemath functions
	at link time.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-27  Darren Kenny  <darren.kenny@oracle.com>

	configure: Fix building with clang
	Building the current code with clang and the latest gnulib fails due to
	the use of a variable-length-array (vla) warning, which turns in to an
	error due to the presence of the -Werror during the build.

	The gnulib team stated that their code should not be built with -Werror.

	At present, the only way to do this is for the complete code-base, by
	using the --disable-werror option to configure.

	Rather than doing this, and failing to gain any benefit that it provides,
	instead, if building with clang, this patch makes it possible to specifically
	not error on vlas, while retaining the -Werror functionality otherwise.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-27  Darren Kenny  <darren.kenny@oracle.com>

	gnulib: Provide abort() implementation for gnulib
	The recent gnulib updates require an implementation of abort(), but the
	current macro provided by changeset:

	  cd37d3d3916c gnulib: Drop no-abort.patch

	to config.h.in does not work with the clang compiler since it doesn't
	provide a __builtin_trap() implementation, so this element of the
	changeset needs to be reverted, and replaced.

	After some discussion with Vladimir 'phcoder' Serbinenko and Daniel Kiper
	it was suggested to bring back in the change from the changeset:

	  db7337a3d353 * grub-core/gnulib/regcomp.c (regerror): ...

	Which implements abort() as an inline call to grub_abort(), but since
	that was made static by changeset:

	  a8f15bceeafe * grub-core/kern/misc.c (grub_abort): Make static

	it is also necessary to revert the specific part that makes it a static
	function too.

	Another implementation of abort() was found in grub-core/kern/compiler-rt.c
	which needs to also be removed to be consistent.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-27  Alec Brown  <alec.r.brown@oracle.com>

	disk/cryptodisk: Fix unintentional integer overflow
	In the function grub_cryptodisk_endecrypt(), a for loop is incrementing the
	variable i by (1U << log_sector_size). The variable i is of type grub_size_t
	which is a 64-bit unsigned integer on x86_64 architecture. On the other hand, 1U
	is a 32-bit unsigned integer. By performing a left shift on a 32-bit value and
	assigning it to a 64-bit variable, the 64-bit variable may have incorrect values
	in the high 32-bits if the shift has an overflow. To avoid this, we replace 1U
	with (grub_size_t)1.

	Fixes: CID 307788

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-27  Zhang Boyang  <zhangboyang.id@gmail.com>

	mm: Try invalidate disk caches last when out of memory
	Every heap grow will cause all disk caches invalidated which decreases
	performance severely. This patch moves disk cache invalidation code to
	the last of memory squeezing measures. So, disk caches are released only
	when there are no other ways to get free memory.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Patrick Steinhardt <ps@pks.im>

2022-10-27  Qiumiao Zhang  <zhangqiumiao1@huawei.com>

	util/grub-mkfont: Use valid conversion specifiers in printf() and fprintf()
	For printf()/fprintf() functions, unsigned integers should use %u as the
	valid conversion specifier instead of %d.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-27  Chris Coulson  <chris.coulson@canonical.com>

	efi: Compile kernel.img with -fshort-wchar on all EFI targets
	The stack check logs a console message on failure, and the EFI API expects
	a NULL terminated UCS-2 string. In order to define a UCS-2 string literal,
	kernel.img on amd64 and i386 EFI targets is built with -fshort-wchar.

	Also compile kernel.img on other EFI targets with -fshort-wchar.

	Fixes: 37ddd94 (kern/efi/init: Log a console error during a stack check failure)

	Reported-by: Glenn Washburn <development@efficientek.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-11  Benjamin Herrenschmidt  <benh@kernel.crashing.org>

	normal/menu: Add Ctrl-L to refresh the menu
	This is useful on cloud instances with remote serial ports as it can be
	difficult to connect "fast enough" to get the initial menu display

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-11  Michael Chang  <mchang@suse.com>

	util/grub-install: Set point of no return for powerpc-ieee1275 install
	The point of no return is used to define a point where no change should
	be reverted in a wake of fatal error that consequently aborts the
	process. The powerpc-ieee1275 install apparently missed this point of no
	return definition that newly installed modules could be inadvertently
	reverted after successful image embedding so that boot failure is
	incurred due to inconsistent state.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-11  Daniel Axtens  <dja@axtens.net>

	disk/diskfilter: Check calloc() result for NULL
	With wildly corrupt inputs, we can end up trying to calloc a very
	large amount of memory, which will fail and give us a NULL pointer.
	We need to check that to avoid a crash. (And, even if we blocked
	such inputs, it is good practice to check the results of allocations
	anyway.)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-11  Glenn Washburn  <development@efficientek.com>

	disk/cryptodisk: Allows UUIDs to be compared in a dash-insensitive manner
	A user can now specify UUID strings with dashes, instead of having to remove
	dashes. This is backwards-compatibility preserving and also fixes a source
	of user confusion over the inconsistency with how UUIDs are specified
	between file system UUIDs and cryptomount UUIDs. Since cryptsetup, the
	reference implementation for LUKS, displays and generates UUIDs with dashes
	there has been additional confusion when using the UUID strings from
	cryptsetup as exact input into GRUB does not find the expected cryptodisk.

	A new function grub_uuidcasecmp() is added that is general enough to be used
	other places where UUIDs are being compared.

	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-11  Glenn Washburn  <development@efficientek.com>

	kern/corecmd: Quote variable values when displayed by the set command
	Variable values may contain spaces at the end or newlines. However, when
	displayed without quotes this is not obvious and can lead to confusion as
	to the actual contents of variables. Also for some variables grub_env_get()
	returns a NULL pointer instead of a pointer to an empty string and
	previously would be printed as "var=(null)". Now such variables will be
	displayed as "var=''".

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-11  Samuel Thibault  <samuel.thibault@ens-lyon.org>

	templates: Add support for acpi on Hurd
	This adds acpi as bootstrap module whenever it is available. This opens the
	path for proper IRQ routing for fully-userland disk drivers.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-11  Peter Jones  <pjones@redhat.com>

	util/grub-module-verifierXX: Enable running standalone checkers
	Allow treating util/grub-module-verifierXX.c as a file you can build
	directly so syntax checkers like vim's "syntastic" plugin, which uses
	"gcc -x c -fsyntax-only" to build it, will work.

	One still has to do whatever setup is required to make it pick the
	right include dirs, which -I options we use, etc., but this makes
	it so you can do the checking on the file you're editing, rather
	than on a different file.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-04  Tuan Phan  <tphan@ventanamicro.com>

	kern/compiler-rt: Fix __clzsi2() logic
	Fix the incorrect return value of __clzsi2() function.

	Fixes: e795b90 (RISC-V: Add libgcc helpers for clz)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-04  Daniel Axtens  <dja@axtens.net>

	efi: Increase default memory allocation to 32 MiB
	We have multiple reports of things being slower with a 1 MiB initial static
	allocation, and a report (more difficult to nail down) of a boot failure
	as a result of the smaller initial allocation.

	Make the initial memory allocation 32 MiB.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-04  Christian Hesse  <mail@eworm.de>

	templates: Filter C.UTF-8 locale for translation
	In addition to C locale there is also C.UTF-8 locale now. Filter that as
	well, by using ${grub_lang}, which contains a stripped value.
	This fixes the following message and resulting boot failure:

	    error: file `/boot/grub/locale/C.gmo' not found.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-04  Steve McIntyre  <steve@einval.com>

	tests: Explicitly unset SOURCE_DATE_EPOCH before running fs tests
	In some filesystem utils like mksquashfs, they will silently change
	behaviour and cause timestamps to unexpectedly change. Build
	environments like Debian's set SOURCE_DATE_EPOCH in the environment,
	so remove it. Reproducible builds are good and useful for shipped
	artifacts, but this causes build-time tests to fail.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-04  Heinrich Schuchardt  <heinrich.schuchardt@canonical.com>

	commands/efi/lsefisystab: Short text for EFI_CONFORMANCE_PROFILES_TABLE
	The EFI_CONFORMANCE_PROFILES_TABLE_GUID is used for a table of GUIDs for conformance
	profiles (cf. UEFI specification 2.10, 4.6.5 EFI_CONFORMANCE_PROFILE_TABLE).

	The lsefisystab command is used to display installed EFI configuration tables.
	Currently it only shows the GUID but not a short text for the table.

	Provide a short text for the EFI_CONFORMANCE_PROFILES_TABLE_GUID.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-04  Theodore Ts'o  <tytso@mit.edu>

	fs/ext2: Ignore the large_dir incompat feature
	Recently, ext4 added the large_dir feature, which adds support for
	a 3 level htree directory support.

	The GRUB supports existing file systems with htree directories by
	ignoring their existence, and since the index nodes for the hash tree
	look like deleted directory entries (by design), the GRUB can simply do
	a brute force O(n) linear search of directories. The same is true for
	3 level deep htrees indicated by large_dir feature flag.

	Hence, it is safe for the GRUB to ignore the large_dir incompat feature.

	Fixes: https://savannah.gnu.org/bugs/?61606

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-04  Glenn Washburn  <development@efficientek.com>

	disk/loopback: Support transparent decompression of backing file
	A new option is added to the loopback command, -D or --decompress, which
	when specified transparently decompresses the backing file. This allows
	compressed images to be used as if they were uncompressed.

	Add documentation to support this change.

	Suggested-by: Li Gen <ligenlive@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-04  Glenn Washburn  <development@efficientek.com>

	configure: Add -DGRUB_HAS_PCI when compiling C/C++ files on targets that support PCI
	The list of targets that support PCI is in gentpl.py. However, there is no
	support for generating makefile script from a .def file that will apply
	globally to the makefile, but on a per target basis. So instead, use
	gentpl.py in configure to get the list of targets and check if the current
	build target is one of them. If it is, set the automake conditional
	COND_HAVE_PCI. Then in conf/Makefile.common add -DGRUB_HAS_PCI for the
	platform if COND_HAVE_PCI is true.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-04  Li Gen  <ligenlive@gmail.com>

	commands/read: Fix overflow in grub_getline()
	Store returned value from grub_getkey() in int instead of char to
	prevent throwing away the extended bits. This was a problem because,
	for instance, the left arrow key press would return
	(GRUB_TERM_EXTENDED | 0x4b), which would have the GRUB_TERM_EXTENDED
	thrown away leaving 0x4b or 'K'. These extended keys should either
	work as intended or do nothing. This change has them do nothing,
	instead of inserting a key not pressed by the user.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-04  Li Gen  <ligenlive@gmail.com>

	efi: Correct function prototype for register_key_notify() method of grub_efi_simple_text_input_ex_interface
	The register_key_notify() method should have an output parameter which is
	a pointer to the unique handle assigned to the registered notification.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-04  Masahiro Matsuya  <mmatsuya@redhat.com>

	net/drivers/ieee1275/ofnet: Fix incorrect netmask
	The netmask configured in firmware is not respected on ppc64 (big endian).
	When 255.255.252.0 is set as netmask in firmware, the following is the
	value of bootpath string in grub_ieee1275_parse_bootpath():

	  /vdevice/l-lan@30000002:speed=auto,duplex=auto,192.168.88.10,,192.168.89.113,192.168.88.1,5,5,255.255.252.0,512

	The netmask in this bootpath is not a problem, since it's a value specified
	in firmware. But the value of subnet_mask.ipv4 was set with 0xfffffc00, and
	__builtin_ctz(~grub_le_to_cpu32(subnet_mask.ipv4)) returned 16 (not 22).
	As a result, 16 was used for netmask wrongly:

	  1111 1111 1111 1111 1111 1100 0000 0000 # subnet_mask.ipv4(=0xfffffc00)
	  0000 0000 1111 1100 1111 1111 1111 1111 # grub_le_to_cpu32(subnet_mask.ipv4)
	  1111 1111 0000 0011 0000 0000 0000 0000 # ~grub_le_to_cpu32(subnet_mask.ipv4)

	and the count of zero with __builtin_ctz() can be 16. This patch changes
	it as below:

	  1111 1111 1111 1111 1111 1100 0000 0000 # subnet_mask.ipv4(=0xfffffc00)
	  0000 0000 1111 1100 1111 1111 1111 1111 # grub_le_to_cpu32(subnet_mask.ipv4)
	  1111 1111 1111 1111 1111 1100 0000 0000 # grub_be_to_cpu32(subnet_mask.ipv4)
	  0000 0000 0000 0000 0000 0011 1111 1111 # ~grub_be_to_cpu32(subnet_mask.ipv4)

	The count of zero with __builtin_clz() can be 22 (clz counts the number
	of one bits preceding the most significant zero bit).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-10-04  Ross Philipson  <ross.philipson@oracle.com>

	loader/i386/bsd: Initialize BSD relocator state variables
	Numerous register fields in the relocator state are simply not
	used depending on the relocator. This causes Coverity to flag
	these fields but there is no real bug here. Simply initializing
	the variable to {0} solves the issue. Fixed in the else case too
	for consistency.

	Fixes: CID 396932

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-20  Andrea G. Monaco  <andrea.monaco@autistici.org>

	docs: Add a link to environment variables
	This is trivial, but it might save some time to beginners.

	Reviewed-by: Glenn Washburn <development@efficientek.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-20  Robbie Harwood  <rharwood@redhat.com>

	docs: Fix mismatched brackets in halt command
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	docs: Document fwsetup command
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-20  Robbie Harwood  <rharwood@redhat.com>

	efi: Don't display a uefi-firmware entry if it's not supported
	Add a new --is-supported option to commands/efi/efifwsetup and
	conditionalize display on it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-20  Javier Martinez Canillas  <javierm@redhat.com>

	commands/efi/efifwsetup: Print an error if boot to firmware setup is not supported
	The "fwsetup" command is only registered if the firmware supports booting
	to the firmware setup UI. But it could be possible that the GRUB config
	already contains a "fwsetup" entry, because it was generated in a machine
	that has support for this feature.

	To prevent users getting an error like:

	    error: ../../grub-core/script/function.c:109:can't find command `fwsetup'.

	if it is not supported by the firmware, let's just always register the
	command but print a more accurate message if the firmware doesn't
	support this option.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-20  Javier Martinez Canillas  <javierm@redhat.com>

	templates: Check for EFI at runtime instead of config generation time
	The 30_uefi-firmware template checks if an OsIndicationsSupported UEFI var
	exists and EFI_OS_INDICATIONS_BOOT_TO_FW_UI bit is set, to decide whether
	a "fwsetup" menu entry would be added or not to the GRUB menu.

	But this has the problem that it will only work if the configuration file
	was created on an UEFI machine that supports booting to a firmware UI.

	This for example doesn't support creating GRUB config files when executing
	on systems that support both UEFI and legacy BIOS booting. Since creating
	the config file from legacy BIOS wouldn't allow to access the firmware UI.

	To prevent this, make the template to unconditionally create the grub.cfg
	snippet but check at runtime if was booted through UEFI to decide if this
	entry should be added. That way it won't be added when booting with BIOS.

	There's no need to check if EFI_OS_INDICATIONS_BOOT_TO_FW_UI bit is set,
	since that's already done by the "fwsetup" command when is executed.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-20  Robbie Harwood  <rharwood@redhat.com>

	efi: Make all grub_efi_guid_t variables static
	This is believed to result in smaller code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-20  Robbie Harwood  <rharwood@redhat.com>

	commands/efi/efifwsetup: Add missing grub_free()s
	Each call of grub_efi_get_variable() needs a grub_free().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-19  Jagannathan Raman  <jag.raman@oracle.com>

	fs/zfs/zfs: Pass pointer to dnode_end_t instead of value to fill_fs_info()
	Coverity reports that dnode_end_t argument of fill_fs_info() is too
	large to pass-by-value. Therefore, replace the argument with a pointer.

	Fixes: CID 73631

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-19  Patrick Steinhardt  <ps@pks.im>

	disk/luks2: Fix decoding of digests and salts with escaped chars
	It was reported in the #grub IRC channel on Libera that decryption of
	LUKS2 partitions fails with errors about invalid digests and/or salts.
	In all of these cases, what failed was decoding the Base64
	representation of these, where the encoded data contained invalid
	characters.

	As it turns out, the root cause is that json-c, which is used by
	cryptsetup to read and write the JSON header, will escape some
	characters by prepending a backslash when writing JSON strings by
	default. Most importantly, json-c also escapes the forward slash, which
	is part of the Base64 alphabet. Because GRUB doesn't know to unescape
	such characters, decoding this string will rightfully fail.

	Interestingly, this issue has until now only been reported by users of
	Ubuntu 18.04. And a bit of digging in fact reveals that cryptsetup has
	changed the logic in a054206d (Suppress useless slash escaping in json
	lib, 2018-04-20), which has been released with cryptsetup v2.0.3. Ubuntu
	18.04 is still shipping with cryptsetup v2.0.2 though, which explains
	why this is not a more frequent issue.

	Fix the issue by using our new grub_json_unescape() helper function
	that handles unescaping for us.

	Reported-by: Afdal
	Reviewed-by: Daniel Kiper <dkiper@net-space.pl>

2022-08-19  Patrick Steinhardt  <ps@pks.im>

	lib/json/json: Add function to unescape JSON-encoded strings
	JSON strings require certain characters to be encoded, either by using
	a single reverse solidus character "\" for a set of popular characters,
	or by using a Unicode representation of "\uXXXXX". The jsmn library
	doesn't handle unescaping for us, so we must implement this functionality
	for ourselves.

	Add a new function grub_json_unescape() that takes a potentially
	escaped JSON string as input and returns a new unescaped string.

	Reviewed-by: Daniel Kiper <dkiper@net-space.pl>

2022-08-19  Nikita Ermakov  <arei@altlinux.org>

	loader: Drop argv[] argument in grub_initrd_load()
	In the case of an error grub_initrd_load() uses argv[] to print the
	filename that caused the error. It is also possible to obtain the
	filename from the file handles and there is no need to duplicate that
	information in argv[], so let's drop it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-19  Alec Brown  <alec.r.brown@oracle.com>

	loader: Update error conditionals to use enums
	In grub-core/loader/i386/bsdXX.c and grub-core/loader/multiboot_elfxx.c, error
	conditionals are simplified to statements such as "if (err)". Even though the
	assumption that non-zero values give errors is correct, it would be clearer and
	more consistent to compare these conditionals to GRUB_ERR_NONE.

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-19  Alec Brown  <alec.r.brown@oracle.com>

	util/grub-module-verifierXX: Changed get_shnum() return type
	In util/grub-module-verifierXX.c, the function get_shnum() returns the variable
	shnum, which is of the type Elf_Word. In the function, shnum can be obtained by
	the e_shnum member of an Elf_Ehdr or the sh_size member of an Elf_Shdr. The
	sh_size member can either be grub_uint32_t or grub_uint64_t, depending on the
	architecture, but Elf_Word is only grub_uint32_t. To account for when sh_size is
	grub_uint64_t, we can set shnum to have type Elf_Shnum and have get_shnum()
	return an Elf_Shnum.

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-19  Alec Brown  <alec.r.brown@oracle.com>

	elf: Validate number of elf program header table entries
	In bsdXX.c and multiboot_elfxx.c, e_phnum is used to obtain the number of
	program header table entries, but it wasn't being checked if the value was
	there.

	According to the elf(5) manual page,
	"If the number of entries in the program header table is larger than or equal to
	PN_XNUM (0xffff), this member holds PN_XNUM (0xffff) and the real number of
	entries in the program header table is held in the sh_info member of the
	initial entry in section header table.  Otherwise, the sh_info member of the
	initial entry contains the value zero."

	Since this check wasn't being made, grub_elfXX_get_phnum() is being added to
	elfXX.c to make this check and use e_phnum if it doesn't have PN_XNUM as a
	value, else use sh_info. We also need to make sure e_phnum isn't greater than
	PN_XNUM and sh_info isn't less than PN_XNUM.

	Note that even though elf.c and elfXX.c are located in grub-core/kern, they are
	compiled as modules and don't need the EXPORT_FUNC() macro to define the functions
	in elf.h.

	Also, changed casts of phnum to match variables being set as well as dropped
	casts when unnecessary.

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-19  Alec Brown  <alec.r.brown@oracle.com>

	elf: Validate elf section header table index for section name string table
	In multiboot_elfxx.c, e_shstrndx is used to obtain the section header table
	index of the section name string table, but it wasn't being checked if the value
	was there.

	According to the elf(5) manual page,
	"If the index of section name string table section is larger than or equal to
	SHN_LORESERVE (0xff00), this member holds SHN_XINDEX (0xffff) and the real
	index of the section name string table section is held in the sh_link member of
	the initial entry in section header table. Otherwise, the sh_link member of the
	initial entry in section header table contains the value zero."

	Since this check wasn't being made, grub_elfXX_get_shstrndx() is being added to
	elfXX.c to make this check and use e_shstrndx if it doesn't have SHN_XINDEX as a
	value, else use sh_link. We also need to make sure e_shstrndx isn't greater than
	or equal to SHN_LORESERVE and sh_link isn't less than SHN_LORESERVE.

	Note that even though elf.c and elfXX.c are located in grub-core/kern, they are
	compiled as modules and don't need the EXPORT_FUNC() macro to define the functions
	in elf.h.

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-19  Alec Brown  <alec.r.brown@oracle.com>

	elf: Validate number of elf section header table entries
	In bsdXX.c and multiboot_elfxx.c, e_shnum is used to obtain the number of
	section header table entries, but it wasn't being checked if the value was
	there.

	According to the elf(5) manual page,
	"If the number of entries in the section header table is larger than or equal to
	SHN_LORESERVE (0xff00), e_shnum holds the value zero and the real number of
	entries in the section header table is held in the sh_size member of the initial
	entry in section header table. Otherwise, the sh_size member of the initial
	entry in the section header table holds the value zero."

	Since this check wasn't being made, grub_elfXX_get_shnum() is being added to
	elfXX.c to make this check and use whichever member doesn't have a value of
	zero. If both are zero, then we must return an error. We also need to make sure
	that e_shnum doesn't have a value greater than or equal to SHN_LORESERVE and
	sh_size isn't less than SHN_LORESERVE.

	In order to get this function to work, the type ElfXX_Shnum is being added where
	Elf32_Shnum defines Elf32_Word and Elf64_Shnum defines Elf64_Xword. This new
	type is needed because if shnum obtains a value from sh_size, sh_size could be
	of type El32_Word for Elf32_Shdr structures or Elf64_Xword for Elf64_Shdr
	structures.

	Note that even though elf.c and elfXX.c are located in grub-core/kern, they are
	compiled as modules and don't need the EXPORT_FUNC() macro to define the functions
	in elf.h.

	For a few smaller changes, changed casts of shnum to match variables being set
	as well as dropped casts when unnecessary and fixed spacing errors in bsdXX.c.
	Also, shnum is an unsigned integer and is compared to int i in multiboot_elfxx.c,
	it should be unsigned to match shnum.

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-19  Mauricio Faria de Oliveira  <mfo@canonical.com>

	templates/linux_xen: Properly order the multiple initrd files
	The linux_xen template orders the "early" initrd file(s) _first_
	(i.e., before the "real" initrd files) and that seems reasonable,
	as microcode updates usually come first.

	However, this usually breaks Linux boot with initrd under Xen
	because Xen assumes the real initrd is the first multiboot[2]
	module after the kernel, passing its address over to Linux in
	Xen's start_info struct.

	So, if a microcode-only initrd (i.e., without init/userspace)
	is found by grub-mkconfig, it ends up considered as a normal
	initrd by the Linux kernel, which cannot do anything with it
	(as it has no other files) and panic()s unable to mount root
	if it depends on a initrd to do that (e.g., root=UUID=...).

	...

	Well, since Xen doesn't actually use the provided microcode
	by default / unless the 'ucode=<module number|scan>' option
	is enabled, this isn't used in the general case (and breaks).

	Additionally, if an user enables the 'ucode=' option, that
	either specifies which module is to be used for microcode,
	or scans all modules (regardless of being first) for that.

	Thus, for Xen:
	- it is *not required* to have microcode first,
	- but it is *required* to have real initrd first

	So, fix it by ordering the real initrd before early initrd(s).

	After:

	    # touch /boot/xen /boot/microcode.cpio
	    # grub-mkconfig 2>/dev/null | grep -P '^\t(multiboot|module)'
	            multiboot      /boot/xen ...
	            module  /boot/vmlinuz-5.4.0-122-generic ...
	            module  --nounzip   /boot/initrd.img-5.4.0-122-generic
	            module  --nounzip   /boot/microcode.cpio

	...

	Corner case specific to Xen implementation details:

	It is actually _possible_ to have a microcode initrd first,
	but that requires a non-default option (so can't rely on it),
	and it turns out to be inconsistent with its counterpart
	(really shouldn't rely on it, as it may get confusing; below).

	'ucode=1' does manually specify the first module is microcode
	_AND_ clears its bit in the module bitmap. The next module is
	now the 'new first', and gets passed to Linux as initrd. Good.

	'ucode=scan' checks all modules for microcode, but does _NOT_
	clear a bit if it finds one (reasonable, as it can find that
	prepended in a "real" initrd anyway, which needs to be used).
	The first module still gets passed to Linux as initrd. Bad.

	Fixes: e86f6aafb8de (grub-mkconfig/20_linux_xen: Support multiple early initrd images)

	Acked-by: Juergen Gross <jgross@suse.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-19  Mauricio Faria de Oliveira  <mfo@canonical.com>

	templates/linux_xen: Properly load multiple initrd files
	The linux_xen template can put multiple initrd files in the
	same multiboot[2] module[2] command, which is against specs.

	This causes ONLY the _first_ initrd file to be loaded; other
	files just have filenames in a "cmdline" string of the first
	initrd file and are NOT loaded.

	Fix this by inserting a module[2] command per initrd file.

	Before:

	    # touch /boot/xen /boot/microcode.cpio
	    # grub-mkconfig 2>/dev/null | grep -P '^\t(multiboot|module)'
	            multiboot       /boot/xen ...
	            module  /boot/vmlinuz-5.4.0-122-generic ...
	            module  --nounzip   /boot/microcode.cpio /boot/initrd.img-5.4.0-122-generic

	After:

	    # touch /boot/xen /boot/microcode.cpio
	    # grub-mkconfig 2>/dev/null | grep -P '^\t(multiboot|module)'
	            multiboot      /boot/xen ...
	            module  /boot/vmlinuz-5.4.0-122-generic ...
	            module  --nounzip   /boot/microcode.cpio
	            module  --nounzip   /boot/initrd.img-5.4.0-122-generic

	Cause:

	The code was copied from the linux template, which is *apparently*
	equivalent.. but its initrd command grub_cmd_initrd() *supports*
	multiple files (see grub_initrd_init()), while module/module2 in
	grub_cmd_module() *does not* (see grub_multiboot[2]_add_module()).

	See commit e86f6aafb8de (grub-mkconfig/20_linux_xen: Support multiple early initrd images):
	    'This is basically a copy of a698240d "grub-mkconfig/10_linux:
	     Support multiple early initrd images" ...'

	Specs:

	Both multiboot and multiboot2 specifications mention support for
	'multiple boot modules' (struct/tag used for kernel/initrd files):

	    "Boot loaders don’t have to support multiple boot modules,
	     but they are strongly encouraged to" [1,2]

	However, there is a 1:1 relationship between boot modules and files,
	more or less clearly; note the usage of singular/plural "module(s)".
	(Multiboot2, clearly: "One tag appears per module".)

	  Multiboot [1]:

	    "the ‘mods’ fields indicate ... what boot modules
	     were loaded ..., and where they can be found.
	     ‘mods_count’ contains the number of modules loaded"

	    "The first two fields contain the start and end addresses
	     of the boot module itself."

	  Multiboot2 [2]:

	    "This tag indicates ... what boot module was loaded ...,
	     and where it can be found."

	    "The ‘mod_start’ and ‘mod_end’ contain the start and end
	     physical addresses of the boot module itself."

	    "One tag appears per module.
	     This tag type may appear multiple times."

	And both clearly mention the 'string' field of a boot module,
	which is to be used by the operating system, not boot loader:

	     "The ‘string’ field provides an arbitrary string to be
	      associated with that particular boot module ...
	      its exact use is specific to the operating system."

	Links:

	[1] https://www.gnu.org/software/grub/manual/multiboot/multiboot.html
	    3.3 Boot information format

	[2] https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html
	    3.6.6 Modules

	Fixes: e86f6aafb8de (grub-mkconfig/20_linux_xen: Support multiple early initrd images)

	Acked-by: Juergen Gross <jgross@suse.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-19  Glenn Washburn  <development@efficientek.com>

	misc: Add cast in grub_strncasecmp() to drop sign when calling grub_tolower()
	Note this cast was fixed in grub_strcasecmp() in commit ce41ab7aab
	(* grub-core/kern/misc.c (grub_strcmp): Use unsigned comparison as per
	common usage and preffered in several parts of code.), but this commit
	omitted fixing it in grub_strncasecmp().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-19  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell: Only show grub-mkrescue output if it returns an error
	The previous behavior ignored an error and the output from grub-mkrescue.
	This made it difficult to discover that grub-mkrescue was the reason that
	tests which rely on grub-shell were failing. Even after discovering
	grub-mkrescue was the culprit, there was no output to indicate why it was
	failing. It turns out that grub-mkrescue is a thin wrapper around xorriso.
	So if you do not have xorriso installed it will fail with an error message
	about not being able to find xorriso.

	This change will allow grub-mkrescue output to be written to stderr, only
	if grub-mkrescue fails. If grub-mkrescue succeeds, there will be no output
	from grub-mkrescue so as not to interfere with the functioning of tests.
	This change should have no effect on the running of tests or other uses of
	grub-shell as it only modifies the error path.

	Also, if grub-mkrescue fails, the script exits early. Since grub-shell
	needs the ISO image created by grub-mkresue to boot the QEMU instance,
	a failure here should be considered fatal.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-19  Ard Biesheuvel  <ardb@kernel.org>

	loader/arm64/linux: Remove magic number header field check
	The "ARM\x64" magic number in the file header identifies an image as one
	that implements the bare metal boot protocol, allowing the loader to
	simply move the file to a suitably aligned address in memory, with
	sufficient headroom for the trailing .bss segment (the required memory
	size is described in the header as well).

	Note of this matters for GRUB, as it only supports EFI boot. EFI does
	not care about this magic number, and nor should GRUB: this prevents us
	from booting other PE linux images, such as the generic EFI zboot
	decompressor, which is a pure PE/COFF image, and does not implement the
	bare metal boot protocol.

	So drop the magic number check.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-19  Darren Kenny  <darren.kenny@oracle.com>

	util/grub-install-common: Confirm directory creation in grub_install_mkdir_p()
	Because grub_util_mkdir() is implemented to not return a value on any
	platform, grub_instal_mkdir_p() can test for success by confirming that
	the directory requested exists after attempting to create it, otherwise
	it should fail with an error and exit.

	While fixing this, a flaw in the logic was shown, where the first match
	of the path separator, which almost always was the first character in
	the path (e.g. /boot/grub2) would result in creating a directory with an
	empty name (i.e. ""). To avoid that, it should skip the handling of the
	path separator where p is pointing to the first character.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-19  Darren Kenny  <darren.kenny@oracle.com>

	util: Ignore return value for grub_util_mkdir() on all platforms
	Coverity signaled 2 issues where the return value of grub_util_mkdir()
	was not being tested.

	The Windows variant of this code defines the function as having no
	return value (void), but the UNIX variants all are mapped using a macro
	to the libc mkdir() function, which returns an int value.

	To be consistent, the mapping should cast to void to for these too.

	Fixes: CID 73583
	Fixes: CID 73617

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-19  Glenn Washburn  <development@efficientek.com>

	disk/cryptodisk: Support encrypted volumes using detached headers on a partition
	Update the read hook to take into account encrypted volumes on a partition.
	GRUB disk read hooks supply an absolute sector number at which the read is
	started from. If the encrypted volume is in a partition, the sector number
	given to the read hook will be offset by the number of the sector at the
	start of the partition. The read hook then needs to subtract the partition
	start from the supplied sector to get the correct start sector for the read
	into the detached header file.

	Reported-by: brutser <brutser@perso.be>
	Tested-by: brutser <brutser@perso.be>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-10  Glenn Washburn  <development@efficientek.com>

	tests/util/grub-shell: Use shell variable instead of autoconf
	By using shell variable that are set once by the expansion of an autoconf
	variable, the resulting shell script is more easily moved and modified
	from the build/install directory it was generated for. The resulting
	script is more readable as well.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-10  Stefan Agner  <stefan@agner.ch>

	Makefile: Make grub_fstest.pp depend on config-util.h
	If you build with "make -j25", sometimes you see:

	  /build/output_generic_x86_64/host/bin/x86_64-buildroot-linux-gnu-gcc -E -DHAVE_CONFIG_H -I. -I..  -Wall -W -DGRUB_UTIL=1 -D_FILE_OFFSET_BITS=64 -I./include -DGRUB_FILE=\"util/grub-fstest.c\" -I. -I.. -I. -I.. -I../include -I./include -I../grub-core/lib/libgcrypt-grub/src/ -I./grub-core/lib/gnulib -I../grub-core/lib/gnulib  -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -Os -fno-stack-protector -D_FILE_OFFSET_BITS=64 \
	    -D'GRUB_MOD_INIT(x)=@MARKER@x@' ../util/grub-fstest.c ../grub-core/kern/emu/hostfs.c ../grub-core/disk/host.c ../grub-core/osdep/init.c > grub_fstest.pp || (rm -f grub_fstest.pp; exit 1)
	  config.status: creating config-util.h
	  ../grub-core/kern/emu/hostfs.c:20:10: fatal error: config-util.h: No such file or directory
	     20 | #include <config-util.h>
	        |          ^~~~~~~~~~~~~~~
	  compilation terminated.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-10  Qiumiao Zhang  <zhangqiumiao1@huawei.com>

	util/grub-mkfont: Fix resource leaks
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-10  Peter Jones  <pjones@redhat.com>

	kern/i386/tsc_pmtimer: Make pmtimer tsc calibration not take 51 seconds to fail
	On my laptop running at 2.4GHz, if I run a VM where tsc calibration
	using pmtimer will fail presuming a broken pmtimer, it takes ~51 seconds
	to do so (as measured with the stopwatch on my phone), with a tsc delta
	of 0x1cd1c85300, or around 125 billion cycles.

	If instead of trying to wait for 5-200ms to show up on the pmtimer, we
	try to wait for 5-200us, it decides it's broken in ~0x2626aa0 TSCs, aka
	~2.4 million cycles, or more or less instantly.

	Additionally, this reading the pmtimer was returning 0xffffffff anyway,
	and that's obviously an invalid return. I've added a check for that and
	0 so we don't bother waiting for the test if what we're seeing is dead
	pins with no response at all.

	If "debug" includes "pmtimer", you will see one of the following three
	outcomes. If pmtimer gives all 0 or all 1 bits, you will see:

	  pmtimer: 0xffffff bad_reads: 1
	  pmtimer: 0xffffff bad_reads: 2
	  pmtimer: 0xffffff bad_reads: 3
	  pmtimer: 0xffffff bad_reads: 4
	  pmtimer: 0xffffff bad_reads: 5
	  pmtimer: 0xffffff bad_reads: 6
	  pmtimer: 0xffffff bad_reads: 7
	  pmtimer: 0xffffff bad_reads: 8
	  pmtimer: 0xffffff bad_reads: 9
	  pmtimer: 0xffffff bad_reads: 10
	  timer is broken; giving up.

	This outcome was tested using qemu+kvm with UEFI (OVMF) firmware and
	these options: -machine pc-q35-2.10 -cpu Broadwell-noTSX

	If pmtimer gives any other bit patterns but is not actually marching
	forward fast enough to use for clock calibration, you will see:

	  pmtimer delta is 0x0 (1904 iterations)
	  tsc delta is implausible: 0x2626aa0

	This outcome was tested using GRUB patched to not ignore bad reads using
	qemu+kvm with UEFI (OVMF) firmware, and these options:
	-machine pc-q35-2.10 -cpu Broadwell-noTSX

	If pmtimer actually works, you'll see something like:

	  pmtimer delta is 0xdff
	  tsc delta is 0x278756

	This outcome was tested using qemu+kvm with UEFI (OVMF) firmware, and
	these options: -machine pc-i440fx-2.4 -cpu Broadwell-noTSX

	I've also tested this outcome on a real Intel Xeon E3-1275v3 on an Intel
	Server Board S1200V3RPS using the SDV.RP.B8 "Release" build here:
	https://www.intel.com/content/www/us/en/download/674448/firmware-update-for-the-intel-server-board-s1200rp-uefi-development-kit-release-vb8.html

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-10  Glenn Washburn  <development@efficientek.com>

	disk/luks2: Continue trying all keyslots even if there are some failures
	luks2_get_keyslot() can fail for a variety of reasons that do not necessarily
	mean the next keyslot should not be tried (e.g. a new kdf type). So always
	try the next slot. This will make GRUB more resilient to non-spec json data
	that 3rd party systems may add. We do not care if some of the keyslots are
	unusable, only if there is at least one that is.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-08-10  Glenn Washburn  <development@efficientek.com>

	efi: Add efitextmode command for getting/setting the text mode resolution
	This command is meant to behave similarly to the "mode" command of the EFI
	Shell application. In addition to allowing mode selection by giving the
	number of columns and rows as arguments, the command allows specifying the
	mode number to select the mode. Also supported are the arguments "min" and
	"max", which set the mode to the minimum and maximum mode respectively as
	calculated by the columns * rows of that mode.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-27  Robbie Harwood  <rharwood@redhat.com>

	fs/fat: Don't error when mtime is 0
	In the wild, we occasionally see valid ESPs where some file modification
	times are 0. For instance:

	    ├── [Dec 31  1979]  EFI
	    │   ├── [Dec 31  1979]  BOOT
	    │   │   ├── [Dec 31  1979]  BOOTX64.EFI
	    │   │   └── [Dec 31  1979]  fbx64.efi
	    │   └── [Jun 27 02:41]  fedora
	    │       ├── [Dec 31  1979]  BOOTX64.CSV
	    │       ├── [Dec 31  1979]  fonts
	    │       ├── [Mar 14 03:35]  fw
	    │       │   ├── [Mar 14 03:35]  fwupd-359c1169-abd6-4a0d-8bce-e4d4713335c1.cap
	    │       │   ├── [Mar 14 03:34]  fwupd-9d255c4b-2d88-4861-860d-7ee52ade9463.cap
	    │       │   └── [Mar 14 03:34]  fwupd-b36438d8-9128-49d2-b280-487be02d948b.cap
	    │       ├── [Dec 31  1979]  fwupdx64.efi
	    │       ├── [May 10 10:47]  grub.cfg
	    │       ├── [Jun  3 12:38]  grub.cfg.new.new
	    │       ├── [May 10 10:41]  grub.cfg.old
	    │       ├── [Jun 27 02:41]  grubenv
	    │       ├── [Dec 31  1979]  grubx64.efi
	    │       ├── [Dec 31  1979]  mmx64.efi
	    │       ├── [Dec 31  1979]  shim.efi
	    │       ├── [Dec 31  1979]  shimx64.efi
	    │       └── [Dec 31  1979]  shimx64-fedora.efi
	    └── [Dec 31  1979]  FSCK0000.REC

	    5 directories, 17 files

	This causes grub-probe failure, which in turn causes grub-mkconfig
	failure. They are valid filesystems that appear intact, and the Linux
	FAT stack is able to mount and manipulate them without complaint.

	The check for mtime of 0 has been present since
	20def1a3c3952982395cd7c3ea7e78638527962b (fat: support file
	modification times).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-27  Robbie Harwood  <rharwood@redhat.com>

	kern/fs: The grub_fs_probe() should dprint errors from filesystems
	When filesystem detection fails, all that's currently debug-logged is
	a series of messages like:

	    grub-core/kern/fs.c:56:fs: Detecting ntfs...
	    grub-core/kern/fs.c:76:fs: ntfs detection failed.

	repeated for each filesystem. Any messages provided to grub_error() by
	the filesystem are lost, and one has to break out gdb to figure out what
	went wrong.

	With this change, one instead sees:

	    grub-core/kern/fs.c:56:fs: Detecting fat...
	    grub-core/osdep/hostdisk.c:357:hostdisk: reusing open device
	    `/path/to/device'
	    grub-core/kern/fs.c:77:fs: error: invalid modification timestamp for /.
	    grub-core/kern/fs.c:79:fs: fat detection failed.

	in the debug prints.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-27  Robbie Harwood  <rharwood@redhat.com>

	util/grub-probe: Document the behavior of multiple -v
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-27  Ross Philipson  <ross.philipson@oracle.com>

	lib/relocator: Initialize local relocator subchunk struct to all zeros
	The way the code is written the tofree variable would never be passed to
	the free_subchunk() function uninitialized. Coverity cannot determine
	this and flags the situation as "Using uninitialized value...". The fix
	is just to initialize the local struct.

	Fixes: CID 314016

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Tested-by: Alec Brown <alec.r.brown@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-27  Lu Ken  <ken.lu@intel.com>

	efi/tpm: Add EFI_CC_MEASUREMENT_PROTOCOL support
	The EFI_CC_MEASUREMENT_PROTOCOL abstracts the measurement for virtual firmware
	in confidential computing environment. It is similar to the EFI_TCG2_PROTOCOL.
	It was proposed by Intel and ARM and approved by UEFI organization.

	It is defined in Intel GHCI specification: https://cdrdv2.intel.com/v1/dl/getContent/726790 .
	The EDKII header file is available at https://github.com/tianocore/edk2/blob/master/MdePkg/Include/Protocol/CcMeasurement.h .

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-27  Lu Ken  <ken.lu@intel.com>

	commands/efi/tpm: Use grub_strcpy() instead of grub_memcpy()
	The event description is a string, so using grub_strcpy() is cleaner than
	using grub_memcpy().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-27  Lu Ken  <ken.lu@intel.com>

	commands/efi/tpm: Refine the status of log event
	1. Use macro GRUB_ERR_NONE instead of hard code 0.
	2. Keep lowercase of the first char for the status string of log event.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-12  Nicholas Vinson  <nvinson234@gmail.com>

	configure: Warn if stack protector is not allowed
	Introduce ERROR_PLATFORM_NOT_SUPPORT_SSP environment variable to treat
	the "--enable-stack-protector is only supported on EFI platforms" message
	as a warning instead of an error. If ERROR_PLATFORM_NOT_SUPPORT_SSP is
	set to "no" (case-insensitive), then the message will be printed as
	a warning. Otherwise, it prints as an error. The default behavior is to
	print the message as an error.

	For any wrapper build script that has some variation of:

	    for p in SELECTED_GRUB_PLATFORMS; do    \
	        configure --enable-stack-protector  \
	            --with-platform${P} ... || die; \
	    done
	    make

	The GRUB will fail to build if SELECTED_GRUB_PLATFORMS contains a platform
	that does not support SSP.

	Such wrapper scripts need to work-around this issue by modifying the
	above for-loop, so it conditionally passes --enable-stack-protector to
	configure for the proper GRUB platform(s).

	However, if the above example is modified to have to conditionally pass
	in --enable-stack-protector, its behavior is effectively the same as the
	proposed change. Additionally, The list of SSP supported platforms is
	now in 2 places. One in the configure script and one in the build wrapper
	script. If the second list is not properly maintained it could mistakenly
	disable SSP for a platform that later gained support for it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-12  Darren Kenny  <darren.kenny@oracle.com>

	util/grub-mkfont: Fix tainted loop boundary issues with substitutions
	With gsub substitutions the offsets should be validated against the
	number of glyphs in a font face and the memory allocated for the gsub
	substitution data.

	Both the number of glyphs and the last address in the allocated data are
	passed in to process_cursive(), where the number of glyphs validates the end
	of the range.

	Enabling memory allocation validation uses two macros, one to simply check the
	address against the allocated space, and the other to check that the number of
	items of a given size doesn't extend outside of the allocated space.

	Fixes: CID 73770
	Fixes: CID 314040

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-12  Glenn Washburn  <development@efficientek.com>

	efi: Add missing header from include/grub/efi/console_control.h
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-04  Glenn Washburn  <development@efficientek.com>

	disk: Replace code that calculates the log of sector size with grub_log2ull()
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-04  Mathieu Desnoyers  <mathieu.desnoyers@efficios.com>

	templates: Remove unused version comparison functions
	There are no users left of version_find_latest(), version_test_gt(), and
	version_test_numeric(). Remove those unused helper functions. Using
	those helper functions is what caused the quadratic sorting performance
	issues in the first place, so removing them is a net win.

	Reviewed-by: Robbie Harwood <rharwood@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-04  Mathieu Desnoyers  <mathieu.desnoyers@efficios.com>

	templates/kfreebsd: Fix quadratic algorithm for sorting menu items
	The current implementation of the 10_kfreebsd script implements its menu
	items sorting in bash with a quadratic algorithm, calling "sed", "sort",
	"head", and "grep" to compare versions between individual lines, which
	is annoyingly slow for kernel developers who can easily end up with
	50-100 kernels in their boot partition.

	This fix is ported from the 10_linux script, which has a similar
	quadratic code pattern.

	Cc: debian-bsd@lists.debian.org
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-04  Mathieu Desnoyers  <mathieu.desnoyers@efficios.com>

	templates/hurd: Fix quadratic algorithm for sorting menu items
	The current implementation of the 10_hurd script implements its menu
	items sorting in bash with a quadratic algorithm, calling "sed", "sort",
	"head", and "grep" to compare versions between individual lines, which
	is annoyingly slow for kernel developers who can easily end up with
	50-100 kernels in their boot partition.

	This fix is ported from the 10_linux script, which has a similar
	quadratic code pattern.

	Cc: Samuel Thibault <samuel.thibault@ens-lyon.org>
	Tested-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-04  Mathieu Desnoyers  <mathieu.desnoyers@efficios.com>

	templates/linux_xen: Fix quadratic algorithm for sorting menu items
	The current implementation of the 20_linux_xen script implements its
	menu items sorting in bash with a quadratic algorithm, calling "sed",
	"sort", "head", and "grep" to compare versions between individual lines,
	which is annoyingly slow for kernel developers who can easily end up
	with 50-100 kernels in their boot partition.

	This fix is ported from the 10_linux script, which has a similar
	quadratic code pattern.

	Cc: xen-devel@lists.xenproject.org
	Tested-by: Jason Andryuk <jandryuk@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-04  Mathieu Desnoyers  <mathieu.desnoyers@efficios.com>

	templates/linux: Fix quadratic algorithm for sorting menu items
	The current implementation of the 10_linux script implements its menu
	items sorting in bash with a quadratic algorithm, calling "sed", "sort",
	"head", and "grep" to compare versions between individual lines, which
	is annoyingly slow for kernel developers who can easily end up with
	50-100 kernels in /boot.

	As an example, on a Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz, running:

	  /usr/sbin/grub-mkconfig > /dev/null

	With 44 kernels in /boot, this command takes 10-15 seconds to complete.
	After this fix, the same command runs in 5 seconds.

	With 116 kernels in /boot, this command takes 40 seconds to complete.
	After this fix, the same command runs in 8 seconds.

	For reference, the quadratic algorithm here is:

	while [ "x$list" != "x" ] ; do      <--- outer loop
	  linux=`version_find_latest $list`
	    version_find_latest()
	      for i in "$@" ; do            <--- inner loop
	        version_test_gt()
	          fork+exec sed
	            version_test_numeric()
	              version_sort
	                fork+exec sort
	              fork+exec head -n 1
	              fork+exec grep
	  list=`echo $list | tr ' ' '\n' | fgrep -vx "$linux" | tr '\n' ' '`
	    tr
	    fgrep
	    tr

	So all commands executed under version_test_gt() are executed
	O(n^2) times where n is the number of kernel images in /boot.

	Here is the improved algorithm proposed:
	  - Prepare a list with all the relevant information for ordering by a single
	    sort(1) execution. This is done by renaming ".old" suffixes by " 1" and
	    by suffixing all other files with " 2", thus making sure the ".old" entries
	    will follow the non-old entries in reverse-sorted-order.
	  - Call version_reverse_sort on the list (sort -r -V): A single execution of
	    sort(1). For instance, GNU coreutils' sort will reverse-sort the list in
	    O(n*log(n)) with a merge sort.
	  - Replace the " 1" suffixes by ".old", and remove the " 2" suffixes.
	  - Iterate on the reverse-sorted list to output each menu entry item.

	Therefore, the algorithm proposed has O(n*log(n)) complexity with GNU
	coreutils' sort compared to the prior O(n^2) complexity. Moreover, the
	constant time required for each list entry is much less because sorting
	is done within a single execution of sort(1) rather than requiring
	O(n^2) executions of sed(1), sort(1), head(1), and grep(1) in
	sub-shells.

	Reviewed-by: Robbie Harwood <rharwood@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-04  Glenn Washburn  <development@efficientek.com>

	docs: Add documentation on detached header option to cryptomount
	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-04  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Add support for using detached header files
	Using the disk read hook mechanism, setup a read hook on the source disk
	which will read from the given header file during the scan and recovery
	cryptodisk backend functions. Disk read hooks are executed after the data
	has been read from the disk. This is okay, because the read hook is given
	the read buffer before its sent back to the caller. In this case, the hook
	can then overwrite the data read from the disk device with data from the
	header file sent in as the read hook data. This is transparent to the
	read caller. Since the callers of this function have just opened the
	source disk, there are no current read hooks, so there's no need to
	save/restore them nor consider if they should be called or not.

	This hook assumes that the header is at the start of the volume, which
	is not the case for some formats (e.g. GELI). So GELI will return an
	error if a detached header is specified. It also can only be used
	with formats where the detached header file can be written to the
	first blocks of the volume and the volume could still be unlocked.
	So the header file can not be formatted differently from the on-disk
	header. If these assumpts are not met, detached header file processing
	must be specially handled in the cryptodisk backend module.

	The hook will be called potentially many times by a backend. This is fine
	because of the assumptions mentioned and the read hook reads from absolute
	offsets and is stateless.

	Also add a --header (short -H) option to cryptomount which takes a file
	argument.

	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-04  Glenn Washburn  <development@efficientek.com>

	disk: Allow read hook callback to take read buffer to potentially modify it
	It will be desirable in the future to allow having the read hook modify the
	data passed back from a read function call on a disk or file. This adds that
	infrastructure and has no impact on code flow for existing uses of the read
	hook. Also changed is that now when the read hook callback is called it can
	also indicate what error code should be sent back to the read caller.

	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-04  Glenn Washburn  <development@efficientek.com>

	docs: Document undocumented variables
	Document the variables net_<interface>_clientid, net_<interface>_clientuuid,
	lockdown, and shim_lock in the list of special environment variables.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-07-04  Patrick Steinhardt  <ps@pks.im>

	kern/efi/mm: Implement runtime addition of pages
	Adjust the interface of grub_efi_mm_add_regions() to take a set of
	GRUB_MM_ADD_REGION_* flags, which most notably is currently only the
	GRUB_MM_ADD_REGION_CONSECUTIVE flag. This allows us to set the function
	up as callback for the memory subsystem and have it call out to us in
	case there's not enough pages available in the current heap.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Patrick Steinhardt <ps@pks.im>

2022-07-04  Patrick Steinhardt  <ps@pks.im>

	kern/efi/mm: Pass up errors from add_memory_regions()
	The function add_memory_regions() is currently only called on system
	initialization to allocate a fixed amount of pages. As such, it didn't
	need to return any errors: in case it failed, we cannot proceed anyway.
	This will change with the upcoming support for requesting more memory
	from the firmware at runtime, where it doesn't make sense anymore to
	fail hard.

	Refactor the function to return an error to prepare for this. Note that
	this does not change the behaviour when initializing the memory system
	because grub_efi_mm_init() knows to call grub_fatal() in case
	grub_efi_mm_add_regions() returns an error.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Patrick Steinhardt <ps@pks.im>

2022-07-04  Patrick Steinhardt  <ps@pks.im>

	kern/efi/mm: Extract function to add memory regions
	In preparation of support for runtime-allocating additional memory
	region, this patch extracts the function to retrieve the EFI memory
	map and add a subset of it to GRUB's own memory regions.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Patrick Steinhardt <ps@pks.im>

2022-07-04  Patrick Steinhardt  <ps@pks.im>

	kern/efi/mm: Always request a fixed number of pages on init
	When initializing the EFI memory subsystem, we will by default request
	a quarter of the available memory, bounded by a minimum/maximum value.
	Given that we're about to extend the EFI memory system to dynamically
	request additional pages from the firmware as required, this scaling of
	requested memory based on available memory will not make a lot of sense
	anymore.

	Remove this logic as a preparatory patch such that we'll instead defer
	to the runtime memory allocator. Note that ideally, we'd want to change
	this after dynamic requesting of pages has been implemented for the EFI
	platform. But because we'll need to split up initialization of the
	memory subsystem and the request of pages from the firmware, we'd have
	to duplicate quite some logic at first only to remove it afterwards
	again. This seems quite pointless, so we instead have patches slightly
	out of order.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Patrick Steinhardt <ps@pks.im>

2022-07-04  Patrick Steinhardt  <ps@pks.im>

	mm: Allow dynamically requesting additional memory regions
	Currently, all platforms will set up their heap on initialization of the
	platform code. While this works mostly fine, it poses some limitations
	on memory management on us. Most notably, allocating big chunks of
	memory in the gigabyte range would require us to pre-request this many
	bytes from the firmware and add it to the heap from the beginning on
	some platforms like EFI. As this isn't needed for most configurations,
	it is inefficient and may even negatively impact some usecases when,
	e.g., chainloading. Nonetheless, allocating big chunks of memory is
	required sometimes, where one example is the upcoming support for the
	Argon2 key derival function in LUKS2.

	In order to avoid pre-allocating big chunks of memory, this commit
	implements a runtime mechanism to add more pages to the system. When
	a given allocation cannot be currently satisfied, we'll call a given
	callback set up by the platform's own memory management subsystem,
	asking it to add a memory area with at least "n" bytes. If this
	succeeds, we retry searching for a valid memory region, which should
	now succeed.

	If this fails, we try asking for "n" bytes, possibly spread across
	multiple regions, in hopes that region merging means that we end up
	with enough memory for things to work out.

	Tested-by: Stefan Berger <stefanb@linux.ibm.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Patrick Steinhardt <ps@pks.im>

2022-07-04  Patrick Steinhardt  <ps@pks.im>

	mm: Drop unused unloading of modules on OOM
	In grub_memalign(), there's a commented section which would allow for
	unloading of unneeded modules in case where there is not enough free
	memory available to satisfy a request. Given that this code is never
	compiled in, let's remove it together with grub_dl_unload_unneeded().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Patrick Steinhardt <ps@pks.im>

2022-07-04  Daniel Axtens  <dja@axtens.net>

	mm: Debug support for region operations
	This is handy for debugging. Enable with "set debug=regions".

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Patrick Steinhardt <ps@pks.im>

2022-07-04  Daniel Axtens  <dja@axtens.net>

	mm: When adding a region, merge with region after as well as before
	On x86_64-efi (at least) regions seem to be added from top down. The mm
	code will merge a new region with an existing region that comes
	immediately before the new region. This allows larger allocations to be
	satisfied that would otherwise be the case.

	On powerpc-ieee1275, however, regions are added from bottom up. So if
	we add 3x 32MB regions, we can still only satisfy a 32MB allocation,
	rather than the 96MB allocation we might otherwise be able to satisfy.

	  * Define 'post_size' as being bytes lost to the end of an allocation
	    due to being given weird sizes from firmware that are not multiples
	    of GRUB_MM_ALIGN.

	  * Allow merging of regions immediately _after_ existing regions, not
	    just before. As with the other approach, we create an allocated
	    block to represent the new space and the pass it to grub_free() to
	    get the metadata right.

	Tested-by: Stefan Berger <stefanb@linux.ibm.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Patrick Steinhardt <ps@pks.im>

2022-06-29  Daniel Axtens  <dja@axtens.net>

	mm: Assert that we preserve header vs region alignment
	grub_mm_region_init() does:

	  h = (grub_mm_header_t) (r + 1);

	where h is a grub_mm_header_t and r is a grub_mm_region_t.

	Cells are supposed to be GRUB_MM_ALIGN aligned, but while grub_mm_dump
	ensures this vs the region header, grub_mm_region_init() does not.

	It's better to be explicit than implicit here: rather than changing
	grub_mm_region_init() to ALIGN_UP(), require that the struct is
	explicitly a multiple of the header size.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Patrick Steinhardt <ps@pks.im>

2022-06-28  Daniel Axtens  <dja@axtens.net>

	tests: Only pass SeaBIOS fw_opt for x86 non-EFI platforms
	This breaks the tests on pseries - just restrict it to x86 platforms
	that don't specify an EFI.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Darren Kenny  <darren.kenny@oracle.com>

	fs/btrfs: Fix more fuzz issues related to chunks
	The corpus was generating issues in grub_btrfs_read_logical() when
	attempting to iterate over stripe entries in the superblock's
	bootmapping.

	In most cases the reason for the failure was that the number of stripes
	in chunk->nstripes exceeded the possible space statically allocated in
	superblock bootmapping space. Each stripe entry in the bootmapping block
	consists of a grub_btrfs_key followed by a grub_btrfs_chunk_stripe.

	Another issue that came up was that while calculating the chunk size,
	in an earlier piece of code in that function, depending on the data
	provided in the btrfs file system, it would end up calculating a size
	that was too small to contain even 1 grub_btrfs_chunk_item, which is
	obviously invalid too.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Darren Kenny  <darren.kenny@oracle.com>

	fs/btrfs: Fix more ASAN and SEGV issues found with fuzzing
	The fuzzer is generating btrfs file systems that have chunks with
	invalid combinations of stripes and substripes for the given RAID
	configurations.

	After examining the Linux kernel fs/btrfs/tree-checker.c code, it
	appears that sub-stripes should only be applied to RAID10, and in that
	case there should only ever be 2 of them.

	Similarly, RAID single should only have 1 stripe, and RAID1/1C3/1C4
	should have 2. 3 or 4 stripes respectively, which is what redundancy
	corresponds.

	Some of the chunks ended up with a size of 0, which grub_malloc() still
	returned memory for and in turn generated ASAN errors later when
	accessed.

	While it would be possible to specifically limit the number of stripes,
	a more correct test was on the combination of the chunk item, and the
	number of stripes by the size of the chunk stripe structure in
	comparison to the size of the chunk itself.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Darren Kenny  <darren.kenny@oracle.com>

	fs/btrfs: Fix several fuzz issues with invalid dir item sizing
	According to the btrfs code in Linux, the structure of a directory item
	leaf should be of the form:

	  |struct btrfs_dir_item|name|data|

	in GRUB the name len and data len are in the grub_btrfs_dir_item
	structure's n and m fields respectively.

	The combined size of the structure, name and data should be less than
	the allocated memory, a difference to the Linux kernel's struct
	btrfs_dir_item is that the grub_btrfs_dir_item has an extra field for
	where the name is stored, so we adjust for that too.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Sudhakar Kuppusamy  <sudhakar@linux.ibm.com>

	fs/f2fs: Do not copy file names that are too long
	A corrupt f2fs file system might specify a name length which is greater
	than the maximum name length supported by the GRUB f2fs driver.

	We will allocate enough memory to store the overly long name, but there
	are only F2FS_NAME_LEN bytes in the source, so we would read past the end
	of the source.

	While checking directory entries, do not copy a file name with an invalid
	length.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Sudhakar Kuppusamy  <sudhakar@linux.ibm.com>

	fs/f2fs: Do not read past the end of nat bitmap
	A corrupt f2fs filesystem could have a block offset or a bitmap
	offset that would cause us to read beyond the bounds of the nat
	bitmap.

	Introduce the nat_bitmap_size member in grub_f2fs_data which holds
	the size of nat bitmap.

	Set the size when loading the nat bitmap in nat_bitmap_ptr(), and
	catch when an invalid offset would create a pointer past the end of
	the allocated space.

	Check against the bitmap size in grub_f2fs_test_bit() test bit to avoid
	reading past the end of the nat bitmap.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Sudhakar Kuppusamy  <sudhakar@linux.ibm.com>

	fs/f2fs: Do not read past the end of nat journal entries
	A corrupt f2fs file system could specify a nat journal entry count
	that is beyond the maximum NAT_JOURNAL_ENTRIES.

	Check if the specified nat journal entry count before accessing the
	array, and throw an error if it is too large.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	net/http: Error out on headers with LF without CR
	In a similar vein to the previous patch, parse_line() would write
	a NUL byte past the end of the buffer if there was an HTTP header
	with a LF rather than a CRLF.

	RFC-2616 says:

	  Many HTTP/1.1 header field values consist of words separated by LWS
	  or special characters. These special characters MUST be in a quoted
	  string to be used within a parameter value (as defined in section 3.6).

	We don't support quoted sections or continuation lines, etc.

	If we see an LF that's not part of a CRLF, bail out.

	Fixes: CVE-2022-28734

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	net/http: Fix OOB write for split http headers
	GRUB has special code for handling an http header that is split
	across two packets.

	The code tracks the end of line by looking for a "\n" byte. The
	code for split headers has always advanced the pointer just past the
	end of the line, whereas the code that handles unsplit headers does
	not advance the pointer. This extra advance causes the length to be
	one greater, which breaks an assumption in parse_line(), leading to
	it writing a NUL byte one byte past the end of the buffer where we
	reconstruct the line from the two packets.

	It's conceivable that an attacker controlled set of packets could
	cause this to zero out the first byte of the "next" pointer of the
	grub_mm_region structure following the current_line buffer.

	Do not advance the pointer in the split header case.

	Fixes: CVE-2022-28734

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	net/http: Do not tear down socket if it's already been torn down
	It's possible for data->sock to get torn down in tcp error handling.
	If we unconditionally tear it down again we will end up doing writes
	to an offset of the NULL pointer when we go to tear it down again.

	Detect if it has been torn down and don't do it again.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	net/tftp: Avoid a trivial UAF
	Under tftp errors, we print a tftp error message from the tftp header.
	However, the tftph pointer is a pointer inside nb, the netbuff. Previously,
	we were freeing the nb and then dereferencing it. Don't do that, use it
	and then free it later.

	This isn't really _bad_ per se, especially as we're single-threaded, but
	it trips up fuzzers.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	net/tftp: Prevent a UAF and double-free from a failed seek
	A malicious tftp server can cause UAFs and a double free.

	An attempt to read from a network file is handled by grub_net_fs_read(). If
	the read is at an offset other than the current offset, grub_net_seek_real()
	is invoked.

	In grub_net_seek_real(), if a backwards seek cannot be satisfied from the
	currently received packets, and the underlying transport does not provide
	a seek method, then grub_net_seek_real() will close and reopen the network
	protocol layer.

	For tftp, the ->close() call goes to tftp_close() and frees the tftp_data_t
	file->data. The file->data pointer is not nulled out after the free.

	If the ->open() call fails, the file->data will not be reallocated and will
	continue point to a freed memory block. This could happen from a server
	refusing to send the requisite ack to the new tftp request, for example.

	The seek and the read will then fail, but the grub_file continues to exist:
	the failed seek does not necessarily cause the entire file to be thrown
	away (e.g. where the file is checked to see if it is gzipped/lzio/xz/etc.,
	a read failure is interpreted as a decompressor passing on the file, not as
	an invalidation of the entire grub_file_t structure).

	This means subsequent attempts to read or seek the file will use the old
	file->data after free. Eventually, the file will be close()d again and
	file->data will be freed again.

	Mark a net_fs file that doesn't reopen as broken. Do not permit read() or
	close() on a broken file (seek is not exposed directly to the file API -
	it is only called as part of read, so this blocks seeks as well).

	As an additional defence, null out the ->data pointer if tftp_open() fails.
	That would have lead to a simple null pointer dereference rather than
	a mess of UAFs.

	This may affect other protocols, I haven't checked.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	net/dns: Don't read past the end of the string we're checking against
	I don't really understand what's going on here but fuzzing found
	a bug where we read past the end of check_with. That's a C string,
	so use grub_strlen() to make sure we don't overread it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	net/dns: Fix double-free addresses on corrupt DNS response
	grub_net_dns_lookup() takes as inputs a pointer to an array of addresses
	("addresses") for the given name, and pointer to a number of addresses
	("naddresses"). grub_net_dns_lookup() is responsible for allocating
	"addresses", and the caller is responsible for freeing it if
	"naddresses" > 0.

	The DNS recv_hook will sometimes set and free the addresses array,
	for example if the packet is too short:

	      if (ptr + 10 >= nb->tail)
		{
		  if (!*data->naddresses)
		    grub_free (*data->addresses);
		  grub_netbuff_free (nb);
		  return GRUB_ERR_NONE;
		}

	Later on the nslookup command code unconditionally frees the "addresses"
	array. Normally this is fine: the array is either populated with valid
	data or is NULL. But in these sorts of error cases it is neither NULL
	nor valid and we get a double-free.

	Only free "addresses" if "naddresses" > 0.

	It looks like the other use of grub_net_dns_lookup() is not affected.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	net/netbuff: Block overly large netbuff allocs
	A netbuff shouldn't be too huge. It's bounded by MTU and TCP segment
	reassembly. If we are asked to create one that is unreasonably big, refuse.

	This is a hardening measure: if we hit this code, there's a bug somewhere
	else that we should catch and fix.

	This commit:
	  - stops the bug propagating any further.
	  - provides a spot to instrument in e.g. fuzzing to try to catch these bugs.

	I have put instrumentation (e.g. __builtin_trap() to force a crash) here and
	have not been able to find any more crashes.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	net/ip: Do IP fragment maths safely
	We can receive packets with invalid IP fragmentation information. This
	can lead to rsm->total_len underflowing and becoming very large.

	Then, in grub_netbuff_alloc(), we add to this very large number, which can
	cause it to overflow and wrap back around to a small positive number.
	The allocation then succeeds, but the resulting buffer is too small and
	subsequent operations can write past the end of the buffer.

	Catch the underflow here.

	Fixes: CVE-2022-28733

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	normal/charset: Fix array out-of-bounds formatting unicode for display
	In some cases attempting to display arbitrary binary strings leads
	to ASAN splats reading the widthspec array out of bounds.

	Check the index. If it would be out of bounds, return a width of 1.
	I don't know if that's strictly correct, but we're not really expecting
	great display of arbitrary binary data, and it's certainly not worse than
	an OOB read.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	video/readers/jpeg: Block int underflow -> wild pointer write
	Certain 1 px wide images caused a wild pointer write in
	grub_jpeg_ycrcb_to_rgb(). This was caused because in grub_jpeg_decode_data(),
	we have the following loop:

	for (; data->r1 < nr1 && (!data->dri || rst);
	     data->r1++, data->bitmap_ptr += (vb * data->image_width - hb * nc1) * 3)

	We did not check if vb * width >= hb * nc1.

	On a 64-bit platform, if that turns out to be negative, it will underflow,
	be interpreted as unsigned 64-bit, then be added to the 64-bit pointer, so
	we see data->bitmap_ptr jump, e.g.:

	0x6180_0000_0480 to
	0x6181_0000_0498
	     ^
	     ~--- carry has occurred and this pointer is now far away from
	          any object.

	On a 32-bit platform, it will decrement the pointer, creating a pointer
	that won't crash but will overwrite random data.

	Catch the underflow and error out.

	Fixes: CVE-2021-3697

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	video/readers/jpeg: Refuse to handle multiple start of streams
	An invalid file could contain multiple start of stream blocks, which
	would cause us to reallocate and leak our bitmap. Refuse to handle
	multiple start of streams.

	Additionally, fix a grub_error() call formatting.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	video/readers/jpeg: Do not reallocate a given huff table
	Fix a memory leak where an invalid file could cause us to reallocate
	memory for a huffman table we had already allocated memory for.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	video/readers/jpeg: Abort sooner if a read operation fails
	Fuzzing revealed some inputs that were taking a long time, potentially
	forever, because they did not bail quickly upon encountering an I/O error.

	Try to catch I/O errors sooner and bail out.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	video/readers/png: Sanity check some huffman codes
	ASAN picked up two OOB global reads: we weren't checking if some code
	values fit within the cplens or cpdext arrays. Check and throw an error
	if not.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	video/readers/png: Avoid heap OOB R/W inserting huff table items
	In fuzzing we observed crashes where a code would attempt to be inserted
	into a huffman table before the start, leading to a set of heap OOB reads
	and writes as table entries with negative indices were shifted around and
	the new code written in.

	Catch the case where we would underflow the array and bail.

	Fixes: CVE-2021-3696

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	video/readers/png: Drop greyscale support to fix heap out-of-bounds write
	A 16-bit greyscale PNG without alpha is processed in the following loop:

	      for (i = 0; i < (data->image_width * data->image_height);
		   i++, d1 += 4, d2 += 2)
		{
		  d1[R3] = d2[1];
		  d1[G3] = d2[1];
		  d1[B3] = d2[1];
		}

	The increment of d1 is wrong. d1 is incremented by 4 bytes per iteration,
	but there are only 3 bytes allocated for storage. This means that image
	data will overwrite somewhat-attacker-controlled parts of memory - 3 bytes
	out of every 4 following the end of the image.

	This has existed since greyscale support was added in 2013 in commit
	3ccf16dff98f (grub-core/video/readers/png.c: Support grayscale).

	Saving starfield.png as a 16-bit greyscale image without alpha in the gimp
	and attempting to load it causes grub-emu to crash - I don't think this code
	has ever worked.

	Delete all PNG greyscale support.

	Fixes: CVE-2021-3695

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	video/readers/png: Refuse to handle multiple image headers
	This causes the bitmap to be leaked. Do not permit multiple image headers.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	video/readers/png: Abort sooner if a read operation fails
	Fuzzing revealed some inputs that were taking a long time, potentially
	forever, because they did not bail quickly upon encountering an I/O error.

	Try to catch I/O errors sooner and bail out.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Daniel Axtens  <dja@axtens.net>

	kern/file: Do not leak device_name on error in grub_file_open()
	If we have an error in grub_file_open() before we free device_name, we
	will leak it.

	Free device_name in the error path and null out the pointer in the good
	path once we free it there.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Julian Andres Klode  <julian.klode@canonical.com>

	kern/efi/sb: Reject non-kernel files in the shim_lock verifier
	We must not allow other verifiers to pass things like the GRUB modules.
	Instead of maintaining a blocklist, maintain an allowlist of things
	that we do not care about.

	This allowlist really should be made reusable, and shared by the
	lockdown verifier, but this is the minimal patch addressing
	security concerns where the TPM verifier was able to mark modules
	as verified (or the OpenPGP verifier for that matter), when it
	should not do so on shim-powered secure boot systems.

	Fixes: CVE-2022-28735

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Chris Coulson  <chris.coulson@canonical.com>

	loader/efi/chainloader: Use grub_loader_set_ex()
	This ports the EFI chainloader to use grub_loader_set_ex() in order to fix
	a use-after-free bug that occurs when grub_cmd_chainloader() is executed
	more than once before a boot attempt is performed.

	Fixes: CVE-2022-28736

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Chris Coulson  <chris.coulson@canonical.com>

	commands/boot: Add API to pass context to loader
	Loaders rely on global variables for saving context which is consumed
	in the boot hook and freed in the unload hook. In the case where a loader
	command is executed twice, calling grub_loader_set() a second time executes
	the unload hook, but in some cases this runs when the loader's global
	context has already been updated, resulting in the updated context being
	freed and potential use-after-free bugs when the boot hook is subsequently
	called.

	This adds a new API, grub_loader_set_ex(), which allows a loader to specify
	context that is passed to its boot and unload hooks. This is an alternative
	to requiring that loaders call grub_loader_unset() before mutating their
	global context.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Chris Coulson  <chris.coulson@canonical.com>

	loader/efi/chainloader: Simplify the loader state
	The chainloader command retains the source buffer and device path passed
	to LoadImage(), requiring the unload hook passed to grub_loader_set() to
	free them. It isn't required to retain this state though - they aren't
	required by StartImage() or anything else in the boot hook, so clean them
	up before grub_cmd_chainloader() finishes.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Jagannathan Raman  <jag.raman@oracle.com>

	fs/zfs/zfs: zfs_mount() - avoid pointer downcasting
	Coverity reports that while loopis in the following functions uses
	tainted data as boundary:
	  zfs_mount() -> check_mos_features() -> dnode_get() -> zfs_log2()
	  zfs_mount() -> grub_memmove()

	The defect type is "Untrusted loop bound" caused as a result of
	"tainted_data_downcast". Coverity does not like the pointer downcast
	here and we need to address it.

	We believe Coverity flags pointer downcast for the following two
	reasons:
	1. External data: The pointer downcast could indicate that the source is
	  external data, which we need to further sanitize - such as verifying its
	  limits. In this case, the data is read from an external source, which is
	  a disk. But, zio_read(), which reads the data from the disk, sanitizes it
	  using a checksum. checksum is the best facility that ZFS offers to verify
	  external data, and we don't believe a better way exists. Therefore, no
	  further action is possible for this.

	2. Corruption due to alignment: downcasting a pointer from a strict type
	  to less strict type could result in data corruption. For example, the
	  following cast would corrupt because uint32_t is 4-byte aligned, and
	  won't be able to point to 0x1003 which is not 4-byte aligned.
	    uint8_t *ptr = 0x1003;
	    uint32_t *word = ptr; (incorrect, alignment issues)

	  This patch converts the "osp" pointer in zfs_mount() from a "void" type
	  to "objset_phys_t" type to address this issue.

	We are not sure if there are any other reasons why Coverity flags the
	downcast. However, the fix for alignment issue masks/suppresses any
	other issues from showing up.

	Fixes: CID 314023

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Jagannathan Raman  <jag.raman@oracle.com>

	fs/zfs/zfs: make_mdn() - avoid pointer downcasting
	Coverity reports that the while loop in the following function uses
	tainted data as boundary:
	  fill_fs_info() -> dnode_get() -> zfs_log2()

	The tainted originated from:
	  fill_fs_info() -> make_mdn()

	The defect type is "Untrusted loop bound" caused as a result of
	"tainted_data_downcast". Coverity does not like the pointer downcast
	here and we need to address it.

	We believe Coverity flags pointer downcast for the following two
	reasons:
	1. External data: The pointer downcast could indicate that the source is
	  external data, which we need to further sanitize - such as verifying its
	  limits. In this case, the data is read from an external source, which is
	  a disk. But, zio_read(), which reads the data from the disk, sanitizes it
	  using a checksum. checksum is the best facility that ZFS offers to verify
	  external data, and we don't believe a better way exists. Therefore, no
	  further action is possible for this.

	2. Corruption due to alignment: downcasting a pointer from a strict type
	  to less strict type could result in data corruption. For example, the
	  following cast would corrupt because uint32_t is 4-byte aligned, and
	  won't be able to point to 0x1003 which is not 4-byte aligned.
	    uint8_t *ptr = 0x1003;
	    uint32_t *word = ptr; (incorrect, alignment issues)

	This patch converts the "osp" pointer in make_mdn() from a "void" type
	to "objset_phys_t" type to address the issue.

	We are not sure if there are any other reasons why Coverity flags the
	downcast. However, the fix for alignment issue masks/suppresses any
	other issues from showing up.

	Fixes: CID 314020

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Alec Brown  <alec.r.brown@oracle.com>

	util/grub-module-verifierXX: Add e_shoff check in get_shdr()
	In util/grub-module-verifierXX.c, the function get_shdr() is used to obtain the
	section header at a given index but isn't checking that there is an offset for
	the section header table. To validate that there is, we can check that e_shoff
	isn't 0.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>

2022-06-07  Alec Brown  <alec.r.brown@oracle.com>

	grub-core/loader/i386/bsdXX: Avoid downcasting (char *) to (Elf_Shdr *)
	In bsdXX.c, a couple of untrusted loop bound and untrusted allocation size bugs
	were flagged by Coverity in the functions grub_openbsd_find_ramdisk() and
	grub_freebsd_load_elfmodule(). These bugs were flagged by coverity because the
	variable shdr was downcasting from a char pointer to an Elf_Shdr pointer
	whenever it was used to set the base value in for loops. To avoid this, we need
	to set shdr as an Elf_Shdr pointer where it is initialized.

	In the function read_headers(), the function is reading elf section header data
	from a file and passing it to the variable shdr as data for a char pointer. If
	we switch the type of shdr to an Elf_Shdr pointer in read_headers() as well as
	other functions, then we won't need to downcast to an Elf_Shdr pointer. By doing
	this, the issue becomes masked from Coverity's view. In the following patches,
	we check limits to ensure the data isn't tainted.

	Also, switched use of (char *) to (grub_uint8_t *) to give a better indication
	of pointer arithmetic and not suggest use of a C string.

	Fixes: CID 314018
	Fixes: CID 314030
	Fixes: CID 314031
	Fixes: CID 314039

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>

2022-06-07  Stefan Agner  <stefan@agner.ch>

	disk/efi/efidisk: Pass buffers with higher alignment
	Some devices report IoAlign values but seem to require buffers with
	higher alignment.

	The UEFI specification is saying: "IoAlign values of 0 and 1 mean that
	the buffer can be placed anywhere in memory. Otherwise, IoAlign must
	be a power of 2, and the requirement is that the start address of
	a buffer must be evenly divisible by IoAlign with no remainder."

	Some devices report IoAlign of 2, however seem to require 4 bytes
	aligned buffers. It seems that this got misinterpreted by some vendors
	assuming IoAlign is 2^IoAlign. There is also such a hint in an example
	in earlier versions of the Driver Writer's Guide:

	  ScsiPassThruMode.IoAlign = 2; // Data must be alligned on 4-byte boundary

	Some devices report no alignment requirements at all but seem to read
	corrupted data or report read errors when passing unaligned buffers.

	Work around by using an alignment of at least BlockSize (typically 512
	bytes) in any case. If IoAlign (interpreted as per UEFI specification)
	requests a higher alignment than BlockSize, follow IoAlign still.

	Note: The problem has only noticed with compressed squashfs. It seems
	that ext4 (and presumably other file system drivers) pass buffers with
	a higher alignment already.

	Acked-by: Heinrich Schuchardt <heinrich.schuchardt@canaonical.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Samuel Thibault  <samuel.thibault@ens-lyon.org>

	osdep/hurd/getroot: Use "part:" qualifier
	When using userland drivers such as rumpdisk, we'd rather make ext2fs use
	parted-based libstore partitioning support. That can be used for kernelland
	drivers as well, so we can just make GRUB always use the "part:" qualifier
	to switch ext2fs to it.

	grub_util_find_hurd_root_device() then has to understand this syntax and
	translate it into the /dev/ entry name.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Glenn Washburn  <development@efficientek.com>

	docs: Add documentation on keyfile option to cryptomount
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	disk/cryptodisk: Use enum constants as indexes into cryptomount option array
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  John Lane  <john@lane.uk.net>

	disk/cryptodisk: Add options to cryptomount to support keyfiles
	Add the options --key-file, --keyfile-offset, and --keyfile-size to
	cryptomount and code to put read the requested key file data and pass
	via the cargs struct. Note, key file data is for all intents and purposes
	equivalent to a password given to cryptomount. So there is no need to
	enable support for key files in the various crypto backends (e.g. LUKS1)
	because the key data is passed just as if it were a password.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Denis 'GNUtoo' Carikli  <GNUtoo@cyberdimension.org>

	disk/geli: Unify grub_cryptodisk_dev function names
	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	disk/luks: Unify grub_cryptodisk_dev function names
	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Glenn Washburn  <development@efficientek.com>

	util/probe: Remove unused header includes
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	commands/macbless: Remove whitespace between N_ macro and open parenthesis
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Glenn Washburn  <development@efficientek.com>

	tests: Add /sbin and /usr/sbin to path in partmap test
	The partmap test requires no elevated privileges. However, it uses parted
	which can be used as a normal user, but is usually located in /sbin or
	/usr/bin (eg. on Debian systems). Whereas the normal user does not usually
	have /sbin or /usr/sbin added to their path, thus parted will not be found
	causing the test to abort. Add /sbin and /usr/sbin to the path for the
	partmap test so that the test can run successfully as an unprivileged user.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-06-07  Glenn Washburn  <development@efficientek.com>

	tests: Show host determined fs UUID when hfs UUID test fails
	On failure, the hfs test should show both the host and GRUB determined fs
	UUID. Prior to this change, both outputs where generated by GRUB, which is
	less helpful in determining the cause of failure.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-05-24  Glenn Washburn  <development@efficientek.com>

	docs: Add section for general undocumented commands
	The section is an itemized list of commands that are not listed else where
	in the command sections.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-05-24  Glenn Washburn  <development@efficientek.com>

	docs: Add under documented loader commands to beginning of loader section
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-05-24  Glenn Washburn  <development@efficientek.com>

	docs: Create command section for loader commands
	Move loader commands documented in the general commands list into the
	loader command section.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-05-24  Glenn Washburn  <development@efficientek.com>

	docs: Markup loader commands with @command tag
	Also, add period to terminate sentence.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-05-24  Glenn Washburn  <development@efficientek.com>

	docs: Make note of i386-pc specific usage of halt command
	The --no-apm option is only available on the i396-pc target.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-05-24  Glenn Washburn  <development@efficientek.com>

	docs: Make note that sendkey is only available on i386-pc
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	docs: Fix spelling typo and remove unnecessary spaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-05-24  Glenn Washburn  <development@efficientek.com>

	net/net: Fix incorrect condition for calling grub_net_tcp_retransmit()
	The commit 848724273e4 (net/net: Avoid unnecessary calls to
	grub_net_tcp_retransmit()) needs to have its condition inverted to avoid
	unnecessary calls to grub_net_tcp_retransmit(). As it is, it creates many
	unnecessary calls and does not call grub_net_tcp_retransmit() when needed.
	The call to grub_net_tcp_retransmit() should only be made when
	grub_net_cards does _not_ equal NULL, meaning that there are potentially
	network cards that need TCP retransmission.

	Fixes: 848724273e4 (net/net: Avoid unnecessary calls to grub_net_tcp_retransmit())

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-05-24  Oskari Pirhonen  <xxc3ncoredxx@gmail.com>

	templates: Improve initramfs detection
	Add detection for initramfs of the form *.img.old. For example, Gentoo's
	sys-kernel/genkernel installs it as initramfs-*.img and moves any existing
	one to initramfs-*.img.old.

	Apply the same scheme to initrd-*.img and initrd-*.gz files for consistency.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-05-24  Samuel Thibault  <samuel.thibault@ens-lyon.org>

	osdep/hurd: Support device entries with @/dev/disk: qualifier
	Those are used with non-bootstrap disk drivers, for which libstore has to
	open /dev/disk before calling device_open on it instead of on the device
	master port. Normally in that case all /dev/ entries also have the @/dev/disk:
	qualifier, so we can just drop it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-05-24  Darren Kenny  <darren.kenny@oracle.com>

	grub-mkimage: Creating aarch64 images from x86 host is broken
	A recent fix that made appears to have broken the ability to create an
	aarch64 boot image on a x86-based host.

	This was due to an overzealous testing of the architecture when building
	grub-mkimage and removing the code that build an ARM image when not built
	on ARM.

	On the occasion remove redundant break.

	Fixes: 8541f319 (grub-mkimage: Only check aarch64 relocations when built for aarch64)

	Tested-by: Selva Ganesan <selvaganesan89@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-05-24  Icenowy Zheng  <uwu@icenowy.me>

	grub-install: Allow to install to non-EFI ESP when --force
	Although the EFI specification enforces support for FAT ESP, it's free
	for EFI implementations to implement support for ESPs with other formats
	(e.g. ext4, ntfs, etc), and at least U-Boot EFI will support ext4 ESP if
	U-Boot is built with ext4 support. In some situations a GRUB installation
	on such a non-FAT ESP could be useful (e.g. a NTFS-based USB disk that
	can dual boot a Windows installation media and a Linux LiveCD).

	As this is advanced and implementation-dependent behavior, let grub-install
	allow this kind of installation, but only when --force is specified.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-26  Qiumiao Zhang  <zhangqiumiao1@huawei.com>

	net: Fix NULL pointer dereference when parsing ICMP6_ROUTER_ADVERTISE messages
	During UEFI PXE boot in IPv6 network, if the DHCP server adopts stateful
	automatic configuration, then the client receives a ICMP6_ROUTER_ADVERTISE
	multicast message from the server. This may be received without the interface
	having a configured network address, so orig_inf will be NULL, which can lead
	to a NULL dereference when creating the default route. Actually, in this case,
	the client obtains the default route through DHCPv6 instead of RA messages.
	So if orig_inf == NULL and route_inf == NULL, we should not set the
	default route.

	Fixes: https://savannah.gnu.org/bugs/?62072

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-26  Glenn Washburn  <development@efficientek.com>

	tests: Ensure that loopback devices and zfs devices are cleaned up
	ZFS file systems are not unmounted using umount, but instead by exporting
	them. So export the ZFS file system that has the same label as the one that
	was created during the test, if such one exists. This is required to delete
	the loopback device that uses the ZFS image file. Otherwise the added code
	to delete all loopback devices setup during the test run will never be able
	to finish because the loopback device can not be deleted while in use.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-26  Glenn Washburn  <development@efficientek.com>

	tests: Ensure that mountpoints are unmounted before exiting
	When all tests complete successfully, filesystems mounted by grub-fs-tester
	will be unmounted before exiting. However, on certain test failures the
	tester will exit with a failure code and not unmount previously mounted
	filesystems. Now keep track of mounts and umounts and run an exit handler
	on exit or process interruption that will umount all mounts that haven't
	already been unmounted.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-20  Glenn Washburn  <development@efficientek.com>

	docs: Use correct list format
	Using "*" to prefix list items leads to undesirable display output for
	at least the generation of the html documentation. Use the @itemize and
	@item directives to get itemized list output.

	Also fix some wording and punctuation issues.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-20  Glenn Washburn  <development@efficientek.com>

	docs: Clarify meaning of "list" and "cond" for "if" and "while" commands respectively
	It is not clear from the documentation what a "list" is in the context
	of the "if" command. Note that its a list of simple commands separated
	by a ";" and that only the exit status of the last command matters.
	The same is true for the "cond" parameter to the "while" command.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-20  Glenn Washburn  <development@efficientek.com>

	docs: Add note that drivemap is only available on i386-pc
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-20  Glenn Washburn  <development@efficientek.com>

	tests: Give grub-fs-tester temp directory a better name
	Instead of "tmp" the name is prefixed by the name of the scripts (e.g.
	grub-fs-tester). A timestamp is added in the name to allow for easily
	seeing a chronological sorting of runs and the name of the filesystem
	being tested. The random component is set to the minimal possible,
	3 characters, because the timestamp should provide enough uniqueness.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-20  Glenn Washburn  <development@efficientek.com>

	tests: Disable blkid cache usage
	Using the blkid cache can cause issues when running many file system tests
	in parallel. We do not need it, as its only there to improve performance,
	and using the cache does not provide significant performance improvements.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-20  Glenn Washburn  <development@efficientek.com>

	configure: Fix default -O2 being added when CFLAGS not set
	Autoconf will set a default CFLAGS of "-g -O2" if CFLAGS is not set.
	CFLAGS was defaulted to "" early in configure to prevent this. A recent
	commit ad9ccf660 (configure: Fix various new autotools warnings) added
	AC_USE_SYSTEM_EXTENSIONS, which pulls in the autoconf CFLAGS check,
	before we default CFLAGS and thus setting the autoconf default for
	CFLAGS. Move the default setting of CFLAGS to before AC_USE_SYSTEM_EXTENSIONS
	so that autoconf will see CFLAGS as set and not give it a default.

	CFLAGS is also moved above AC_CONFIG_AUX_DIR, because CFLAGS should be
	defaulted to "" as soon as possible to catch any autoconf macros that try
	to use some other default. Regardless, this currently has no effect as that
	macro does not consider the CFLAGS variable.

	Reviewed-by: Robbie Harwood <rharwood@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-20  Darren Kenny  <darren.kenny@oracle.com>

	video/readers/jpeg: Fix possible invalid loop boundary condition
	The value of next_marker is adjusted based on the word sized value
	read from data->file.

	The updated next_marker value should reference a location in the file
	just beyond the huffman table, and as such should not have a value
	larger than the size of the file.

	Fixes: CID 73657

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-20  Michael Chang  <mchang@suse.com>

	lib/reed_solomon: Fix array subscript 0 is outside array bounds
	The grub_absolute_pointer() is a compound expression that can only work
	within a function. We are out of luck here when the pointer variables
	require global definition due to ATTRIBUTE_TEXT that have to use fully
	initialized global definition because of the way linkers work.

	  static gf_single_t * const gf_powx ATTRIBUTE_TEXT = (void *) 0x100000;

	For the reason given above, use GCC diagnostic pragmas to suppress the
	array-bounds warning.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-20  Michael Chang  <mchang@suse.com>

	build: Fix -Werror=array-bounds array subscript 0 is outside array bounds
	The GRUB is failing to build with GCC-12 in many places like this:

	  In function 'init_cbfsdisk',
	      inlined from 'grub_mod_init' at ../../grub-core/fs/cbfs.c:391:3:
	  ../../grub-core/fs/cbfs.c:345:7: error: array subscript 0 is outside array bounds of 'grub_uint32_t[0]' {aka 'unsigned int[]'} [-Werror=array-bounds]
	    345 |   ptr = *(grub_uint32_t *) 0xfffffffc;
	        |   ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	This is caused by GCC regression in 11/12 [1]. In a nut shell, the
	warning is about detected invalid accesses at non-zero offsets to NULL
	pointers. Since hardwired constant address is treated as NULL plus an
	offset in the same underlying code, the warning is therefore triggered.

	Instead of inserting #pragma all over the places where literal pointers
	are accessed to avoid diagnosing array-bounds, we can try to borrow the
	idea from Linux kernel that the absolute_pointer() macro [2][3] is used
	to disconnect a pointer using literal address from it's original object,
	hence GCC won't be able to make assumptions on the boundary while doing
	pointer arithmetic. With that we can greatly reduce the code we have to
	cover up by making initial literal pointer assignment to use the new
	wrapper but not having to track everywhere literal pointers are
	accessed. This also makes code looks cleaner.

	Please note the grub_absolute_pointer() macro requires to be invoked in
	a function as long as it is compound expression. Some global variables
	with literal pointers has been changed to local ones in order to use
	grub_absolute_pointer() to initialize it. The shuffling is basically done
	in a selective and careful way that the variable's scope doesn't matter
	being local or global, for example, the global variable must not get
	modified at run time throughout. For the record, here's the list of
	global variables got shuffled in this patch:

	  grub-core/commands/i386/pc/drivemap.c:int13slot
	  grub-core/term/i386/pc/console.c:bios_data_area
	  grub-core/term/ns8250.c:serial_hw_io_addr

	[1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99578
	[2] https://elixir.bootlin.com/linux/v5.16.14/source/include/linux/compiler.h#L180
	[3] https://elixir.bootlin.com/linux/v5.16.14/source/include/linux/compiler-gcc.h#L31

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-20  Michael Chang  <mchang@suse.com>

	util/mkimage: Fix dangling pointer may be used error
	The warning is real as long as dangling pointer to tmp_ may be used if
	o32 and o64 are both NULL. However that is not going to happen and can
	be ignored safely because the PE_OHDR is being used in a context that
	either o32 or o64 must have been properly initialized. Sadly compiler
	seems not to always optimize that unused tmp_ away so explicit
	suppression remain needed here.

	  ../util/mkimage.c: In function 'grub_install_generate_image':
	  ../util/mkimage.c:1422:41: error: dangling pointer to 'tmp_' may be used [-Werror=dangling-pointer=]
	   1422 |         PE_OHDR (o32, o64, header_size) = grub_host_to_target32 (header_size);
	  ../util/mkimage.c:857:28: note: 'tmp_' declared here
	    857 |   __typeof__((o64)->field) tmp_;                \
	        |                            ^~~~

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-20  Chad Kimes  <chkimes@github.com>

	net/drivers/efi/efinet: Configure VLAN from UEFI device used for PXE
	This patch handles automatic configuration of VLAN when booting from PXE
	on UEFI hardware.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-20  Chad Kimes  <chkimes@github.com>

	kern/efi/efi: Print VLAN info in EFI device path
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-20  Chad Kimes  <chkimes@github.com>

	net/net: Add net_set_vlan command
	Previously there was no way to set the 802.1Q VLAN identifier, despite
	support for vlantag in the net module. The only location vlantag was
	being populated was from PXE boot and only for Open Firmware hardware.
	This commit allows users to manually configure VLAN information for any
	interface.

	Example usage:
	  grub> net_ls_addr
	  efinet1 00:11:22:33:44:55 192.0.2.100
	  grub> net_set_vlan efinet1 100
	  grub> net_ls_addr
	  efinet1 00:11:22:33:44:55 192.0.2.100 vlan100
	  grub> net_set_vlan efinet1 0
	  efinet1 00:11:22:33:44:55 192.0.2.100

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-20  Chad Kimes  <chkimes@github.com>

	net/net: Add vlan information to net_ls_addr output
	Example output:
	  grub> net_ls_addr
	  efinet1 00:11:22:33:44:55 192.0.2.100 vlan100

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Chris Coulson  <chris.coulson@canonical.com>

	kern/efi/init: Log a console error during a stack check failure
	The initial implementation of the stack protector just busy looped
	in __stack_chk_fail in order to reduce the amount of code being
	executed after the stack has been compromised because of a lack of
	firmware memory protections. With future firmware implementations
	incorporating memory protections such as W^X, call in to boot services
	when an error occurs in order to log a message to the console before
	automatically rebooting the machine.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Alec Brown  <alec.r.brown@oracle.com>

	loader/i386/xnu: Fix uninitialized scalar variable
	In the function grub_xnu_boot(), struct grub_relocator32_state state is called
	but isn't being initialized. This results in the members grub_uint32_t ebx,
	grub_uint32_t ecx, grub_uint32_t edx, grub_uint32_t edi, and grub_uint32_t esi
	being filled with junk data from the stack since none of them are being set to
	any values. We can prevent this by setting state to {0}.

	Fixes: CID 375035

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Alec Brown  <alec.r.brown@oracle.com>

	loader/i386/xnu: Fix uninitialized scalar variable
	In the function grub_xnu_boot_resume(), struct grub_relocator32_state state is
	called but isn't being initialized. This results in the members grub_uint32_t
	ebx, grub_uint32_t ecx, grub_uint32_t edx, grub_uint32_t esi, and grub_uint32_t
	edi being filled with junk data from the stack since none of them are being set
	to any values. We can prevent this by setting state to {0}.

	Fixes: CID 375031

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Alec Brown  <alec.r.brown@oracle.com>

	loader/i386/pc/linux: Fix uninitialized scalar variable
	In the function grub_linux16_boot(), struct grub_relocator16_state state is
	called but isn't being initialized. This results in the members grub_uint32_t
	ebx, grub_uint32_t edx, grub_uint32_t esi, and grub_uint32_t ebp being filled
	with junk data from the stack since none of them are being set to any values.
	We can prevent this by setting state to {0}.

	Fixes: CID 375028

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Alec Brown  <alec.r.brown@oracle.com>

	loader/i386/bsd: Fix uninitialized scalar variable
	In the function grub_netbsd_setup_video(), struct grub_netbsd_btinfo_framebuf
	params is called but isn't being initialized. The member grub_uint8_t
	reserved[16] isn't set to any values and is instead filled with junk data from
	the stack. We can prevent this by setting params to {0}.

	Fixes: CID 375026

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Alec Brown  <alec.r.brown@oracle.com>

	net/net: Fix uninitialized scalar variable
	In the function grub_net_ipv6_get_link_local(), grub_net_network_level_address_t
	addr is called but isn't being initialized. This results in the member
	grub_dns_option_t option being filled with junk data from the stack. We can
	prevent this by setting the option member in addr to 0.

	Fixes: CID 375033

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Alec Brown  <alec.r.brown@oracle.com>

	net/bootp: Fix uninitialized scalar variable
	In the function grub_net_configure_by_dhcp_ack(),
	grub_net_network_level_address_t addr is called but isn't being initialized.
	This results in the member grub_dns_option_t option being filled with junk data
	from the stack. To prevent this, we can set the option member in addr to 0.

	Fixes: CID 375036

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Alec Brown  <alec.r.brown@oracle.com>

	net/arp: Fix uninitialized scalar variable
	In the function grub_net_arp_receive(), grub_net_network_level_address_t
	sender_addr and target_addr are being called but aren't being initialized.
	In both of these structs, each member is being set to a value except for
	grub_dns_option_t option. This results in this member being filled with junk
	data from the stack. To prevent this, we can set the option member in both
	structs to 0.

	Fixes: CID 375030

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Glenn Washburn  <development@efficientek.com>

	net/tcp: Only call grub_get_time_ms() when there are sockets to potentially retransmit for
	If the machine has network cards found, but there are no tcp open sockets
	(because the user doesn't use the network to boot), then grub_net_tcp_retransmit()
	should be a noop. Thus GRUB doesn't need to call grub_get_time_ms(), which
	does a call into firmware on powerpc-ieee1275, and probably other targets.
	So only call grub_get_time_ms() if there are tcp sockets.

	Aside from improving performance, its also useful to stay out of the firmware
	as much as possible when debugging via QEMU because its a pain to get back
	in to GRUB execution. grub_net_tcp_retransmit() can get called very frequently
	via grub_net_poll_cards_idle() when GRUB is waiting for a keypress
	(grub_getkey_noblock() calls grub_net_poll_cards_idle()). This can be annoying
	when debugging an issue in GRUB on PowerPC in QEMU with GDB when GRUB is waiting
	for a keypress because interrupting via GDB nearly always lands in the OpenBIOS
	firmware's milliseconds call.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Glenn Washburn  <development@efficientek.com>

	net/net: Avoid unnecessary calls to grub_net_tcp_retransmit()
	In grub_net_poll_cards_idle_real(), only call grub_net_tcp_retransmit() if there
	are network cards found. If there are no network card found, there can be no
	tcp sockets to transmit on. So no need to go through that logic.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Glenn Washburn  <development@efficientek.com>

	net/net: Unset grub_net_poll_cards_idle when net module has been unloaded
	This looks like it was a copy/paste error. If the net module is unloaded,
	grub_net_poll_cards_idle should be NULL so that GRUB does not try to call
	a function which now doesn't exist.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Glenn Washburn  <development@efficientek.com>

	INSTALL: Add information on using --build when cross-compiling
	The autoconf 2.65 manual [1] strongly recommends specifying the --build
	option when the --host is used. Add this to the example and add a note
	that this is recommended.

	[1] https://www.gnu.org/software/autoconf/manual/autoconf-2.65/html_node/Hosts-and-Cross_002dCompilation.html

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Glenn Washburn  <development@efficientek.com>

	configure: Whitespace changes to improve readability
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Glenn Washburn  <development@efficientek.com>

	configure: Remove unused CFLAGS definitions
	These CFLAGS definitions are reset below them before they have a change to
	affect anything. The exception is the *-emu case, which is put in the next
	if block, which is the only place its used before getting reset.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Glenn Washburn  <development@efficientek.com>

	configure: Remove dead code
	It appears as though the intent of this code is to define abort() and main()
	symbols for some configure tests. However, it never gets used because the if
	is only entered when not building for *-emu, but the next if block only runs
	when building for *-emu. And the if block after that unconditionally resets
	CFLAGS. So this code can have no effect.

	Additionally, s/aclocal.m4/acinclude.m4/ and move grub_ASM_USCORE to put
	with other marcos defined in acinclude.m4.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Glenn Washburn  <development@efficientek.com>

	configure: Sort AM_CONDITIONALs alphabetically
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Glenn Washburn  <development@efficientek.com>

	configure: Allow HOST_CC to override CC
	According to the INSTALL, "The HOST_* variables override not prefixed
	variables". This change makes it so, instead of previous behavior, which
	was to ignore the HOST_CC environment variable.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Glenn Washburn  <development@efficientek.com>

	gdb: Add malloc and free symbols to kernel.exec to improve gdb functionality
	Add linker flags when linking kernel.exec to have malloc and free point to
	grub_malloc() and grub_free() respectively. Some gdb functionality depends on
	gdb locating the symbols "malloc" and "free", such as dynamically creating
	strings for arguments to injected function calls. A trivial example would
	the gdb command 'p strlen("astring")'. Make sure not to do this on emu
	platforms, or an infinite loop occurs because emu has a special
	grub_malloc() that calls malloc().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Renaud Métrich  <rmetrich@redhat.com>

	commands/search: Add new --efidisk-only option for EFI systems
	When using "search" on EFI systems, we sometimes want to exclude devices
	that are not EFI disks, e.g. md, lvm. This is typically used when
	wanting to chainload when having a software raid (md) for EFI partition:
	with no option, "search --file /EFI/redhat/shimx64.efi" sets root envvar
	to "md/boot_efi" which cannot be used for chainloading since there is no
	effective EFI device behind.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Renaud Métrich  <rmetrich@redhat.com>

	commands/search: Refactor --no-floppy option to have something generic
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Hans de Goede  <hdegoede@redhat.com>

	kern/main: Suppress the "Welcome to GRUB!" message in EFI builds
	GRUB EFI builds are now often used in combination with flicker-free
	boot, but this breaks with upstream GRUB because the "Welcome to GRUB!"
	message will kick the EFI fb into text mode and show the msg, breaking
	the flicker-free experience.

	EFI systems are so fast, that when the menu or the countdown are
	enabled the message will be immediately overwritten, so in these cases
	not printing the message does not matter.

	And in case when the timeout_style is set to TIMEOUT_STYLE_HIDDEN,
	the user has asked GRUB to be quiet (for example to allow flickfree
	boot) and thus the message should not be printed.

	Reviewed-by: Robbie Harwood <rharwood@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-04-04  Hans de Goede  <hdegoede@redhat.com>

	normal/menu: Don't show "Booting `%s'" msg when auto-booting with TIMEOUT_STYLE_HIDDEN
	When the user has asked the menu code to be hidden/quiet and the current
	entry is being autobooted because the timeout has expired don't show
	the "Booting `%s'" msg.

	This is necessary to let flicker-free boots really be flicker free,
	otherwise the "Booting `%s'" msg will kick the EFI fb into text mode
	and show the msg, breaking the flicker-free experience.

	Reviewed-by: Robbie Harwood <rharwood@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-21  Hans de Goede  <hdegoede@redhat.com>

	term/efi/console: Do not set cursor until the first text output
	To allow flickerfree boot the EFI console code does not call
	grub_efi_set_text_mode(1) until some text is actually output. Depending
	on if the output text is because of an error loading, e.g. the .cfg
	file, or because of showing the menu the cursor needs to be on or off
	when the first text is shown. So far the cursor was hardcoded to being
	on, but this is causing drawing artifacts + slow drawing of the menu as
	reported here: https://bugzilla.redhat.com/show_bug.cgi?id=1946969
	Handle the cursorstate in the same way as the colorstate to fix this,
	when no text has been output yet, just cache the cursorstate and then
	use the last set value when the first text is output.

	Fixes: 2d7c3abd871f (efi/console: Do not set text-mode until we actually need it)
	Fixes: https://bugzilla.redhat.com/show_bug.cgi?id=1946969

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-21  Hans de Goede  <hdegoede@redhat.com>

	term/efi/console: Do not set colorstate until the first text output
	GRUB_MOD_INIT(normal) does an unconditional:

	  grub_env_set ("color_normal", "light-gray/black");

	which triggers a grub_term_setcolorstate() call. The original version
	of the "efi/console: Do not set text-mode until we actually need it" patch,
	https://lists.gnu.org/archive/html/grub-devel/2018-03/msg00125.html,
	protected against this by caching the requested state in
	grub_console_setcolorstate() and then only applying it when the first
	text output actually happens. During refactoring to move the
	grub_console_setcolorstate() up higher in the grub-core/term/efi/console.c
	file the code to cache the color-state + bail early was accidentally dropped.
	Restore the cache the color-state + bail early behavior from the original.

	Fixes: 2d7c3abd871f (efi/console: Do not set text-mode until we actually need it)

	Cc: Javier Martinez Canillas <javierm@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-21  Darren Kenny  <darren.kenny@oracle.com>

	kern/rescue_parser: Ensure that parser allocated memory is not leaked
	While it would appear unlikely that the memory allocated in *argv in
	grub_parser_split_cmdline() would be leaked, we should try ensure that
	it doesn't leak by calling grub_free() before we return from
	grub_rescue_parse_line().

	To avoid a possible double-free, grub_parser_split_cmdline() is being
	changed to assign *argv = NULL when we've called grub_free() in the fail
	section.

	Fixes: CID 96680

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-21  Darren Kenny  <darren.kenny@oracle.com>

	grub-mkimage: Only check aarch64 relocations when built for aarch64
	Coverity flagged the switch checks for R_AARCH64_* as being logically
	dead code, since it could never happen on x86 due to the masking of the
	values earlier in the code.

	A check for building on __arm__ (which gcc and clang define) and for
	MKIMAGE_ELF64 (which GRUB defines) has been added to avoid this dead
	code being built in.

	Fixes: CID 158599

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-21  Daniel Kiper  <daniel.kiper@oracle.com>

	lib/posix_wrap/errno.h: Add __set_errno() macro
	$ ./configure --target=x86_64-w64-mingw32 --with-platform=efi --host=x86_64-w64-mingw32
	$ make

	[...]

	cat syminfo.lst | sort | gawk -f ./genmoddep.awk > moddep.lst || (rm -f moddep.lst; exit 1)
	__imp__errno in regexp is not defined

	This happens because grub-core/lib/gnulib/malloc/dynarray_resize.c and
	grub-core/lib/gnulib/malloc/dynarray_emplace_enlarge.c (both are used by
	regexp module) from the latest Gnulib call __set_errno() which originally
	sets errno variable (Windows builds add __imp__ prefix). Of course it is
	not defined and grub_errno should be used instead.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-21  Robbie Harwood  <rharwood@redhat.com>

	configure: Fix various new autotools warnings
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-21  Robbie Harwood  <rharwood@redhat.com>

	gnulib: Handle warnings introduced by updated gnulib
	- Fix type of size variable in luks2_verify_key()
	- Avoid redefinition of SIZE_MAX and ATTRIBUTE_ERROR
	- Work around gnulib's int types on older compilers

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-21  Robbie Harwood  <rharwood@redhat.com>

	gnulib: Update gnulib version and drop most gnulib patches
	In addition to the changes carried in our gnulib patches, several
	Coverity and code hygiene fixes that were previously downstream are also
	included in this 3-year gnulib increment.

	Unfortunately, fix-width.patch is retained.

	Bump minimum autoconf version from 2.63 to 2.64 and automake from 1.11
	to 1.14, as required by gnulib.

	Sync bootstrap script itself with gnulib.

	Update regexp module for new dynarray dependency.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-21  Robbie Harwood  <rharwood@redhat.com>

	gnulib: Drop no-abort.patch
	Originally added in commit db7337a3d (grub-core/lib/posix_wrap/stdlib.h
	(abort): Removed), this patched out all relevant invocations of abort()
	in gnulib. While it was not documented why at the time, testing suggests
	that there's no abort() implementation available for gnulib to use.

	gnulib's position is that the use of abort() is correct here, since it
	happens when input violates a "shall" from POSIX. Additionally, the
	code in question is probably not reachable. Since abort() is more
	friendly to user-space, they prefer to make no change, so we can just
	carry a define instead (suggested by Paul Eggert).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-21  Robbie Harwood  <rharwood@redhat.com>

	gnulib: Drop fix-base64.patch
	Originally added in commit 9fbdec2f (bootstrap: Add gnulib's base64
	module) and subsequently modified in commit 552c9fd08 (gnulib: Fix build
	of base64 when compiling with memory debugging), fix-base64.patch
	handled two problems we have using gnulib, which are exercised by the
	base64 module but not directly caused by it.

	First, GRUB defines its own bool type, while gnulib expects the
	equivalent of stdbool.h to be present. Rather than patching gnulib,
	instead use gnulib's stdbool module to provide a bool type if needed
	(suggested by Simon Josefsson).

	Second, our config.h doesn't always inherit config-util.h, which is
	where gnulib-related options like _GL_ATTRIBUTE_CONST end up.
	fix-base64.h worked around this by defining the attribute away, but this
	workaround is better placed in config.h itself, not a gnulib patch.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-21  Robbie Harwood  <rharwood@redhat.com>

	config: Where present, ensure config-util.h precedes config.h
	gnulib defines go in config-util.h, and we need to know whether to
	provide duplicates in config.h or not.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-21  Robbie Harwood  <rharwood@redhat.com>

	config.h.in: Use visual indentation
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-14  Robbie Harwood  <rharwood@redhat.com>

	INSTALL: Drop mention of libusb
	The commit 9d25b0da9 (Remove emu libusb support.) dropped use of libusb,
	but did not remove mention of it from INSTALL file.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-14  Daniel Kiper  <daniel.kiper@oracle.com>

	INSTALL: Add more cross-compiling Debian packages
	The mingw-w64-tools is especially important because with out it some
	Windows builds may fail due to lack of proper pkg-config.

	Reviewed-by: Robbie Harwood <rharwood@redhat.com>

2022-03-14  Daniel Kiper  <daniel.kiper@oracle.com>

	configure: Drop ${grub_coredir} unneeded references
	These are probably stray references left after earlier removals.

	Reviewed-by: Robbie Harwood <rharwood@redhat.com>

2022-03-14  Daniel Kiper  <daniel.kiper@oracle.com>

	conf/i386-cygwin-img-ld: Do not discard .data and .edata sections
	$ ./configure --target=i686-w64-mingw32 --with-platform=efi --host=i686-w64-mingw32

	[...]

	checking if __bss_start is defined by the compiler... no
	checking if edata is defined by the compiler... no
	checking if _edata is defined by the compiler... no
	configure: error: none of __bss_start, edata or _edata is defined

	This happens on machines with quite recent ld due to an error:

	  `edata' referenced in section `.text' of /tmp/cc72w9E4.o: defined in discarded section `.data' of conftest.exe
	  collect2: error: ld returned 1 exit status

	So, we have to tell linker to not discard .data and .edata sections.
	The trick comes from ld documentation:

	  3.6.7 Output Section Discarding

	  The linker will not normally create output sections with no contents.
	  This is for convenience when referring to input sections that may or may
	  not be present in any of the input files. For example:

	  .foo : { *(.foo) }

	  will only create a ‘.foo’ section in the output file if there is a
	  ‘.foo’ section in at least one input file, and if the input sections are
	  not all empty. Other link script directives that allocate space in an
	  output section will also create the output section. So too will
	  assignments to dot even if the assignment does not create space, except
	  for ‘. = 0’, ‘. = . + 0’, ‘. = sym’, ‘. = . + sym’ and ‘. = ALIGN (. !=
	  0, expr, 1)’ when ‘sym’ is an absolute symbol of value 0 defined in the
	  script. This allows you to force output of an empty section with ‘. = .’.

	This change does not impact generated binaries because the
	conf/i386-cygwin-img-ld.sc linker script is used only when
	you run configure.

	Reviewed-by: Robbie Harwood <rharwood@redhat.com>

2022-03-14  Daniel Kiper  <daniel.kiper@oracle.com>

	commands/i386/pc/sendkey: Fix "writing 1 byte into a region of size 0" build error
	Latest GCC may complain in that way:

	  commands/i386/pc/sendkey.c: In function ‘grub_sendkey_postboot’:
	  commands/i386/pc/sendkey.c:223:21: error: writing 1 byte into a region of size 0 [-Werror=stringop-overflow=]
	    223 |   *((char *) 0x41a) = 0x1e;
	        |   ~~~~~~~~~~~~~~~~~~^~~~~~

	The volatile keyword addition helps and additionally assures us the
	compiler will not optimize out fixed assignments.

	Reviewed-by: Robbie Harwood <rharwood@redhat.com>

2022-03-14  Daniel Kiper  <daniel.kiper@oracle.com>

	loader/i386/bsd: Initialize ptr variable in grub_bsd_add_meta()
	Latest GCC may complain in that way:

	  In file included from ../include/grub/disk.h:31,
	                   from ../include/grub/file.h:26,
	                   from ../include/grub/loader.h:23,
	                   from loader/i386/bsd.c:19:
	  loader/i386/bsd.c: In function ‘grub_cmd_openbsd’:
	  ../include/grub/misc.h:71:10: error: ‘ptr’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
	     71 |   return grub_memmove (dest, src, n);
	        |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~
	  loader/i386/bsd.c:266:9: note: ‘ptr’ was declared here
	    266 |   void *ptr;
	        |         ^~~

	So, let's fix it by assigning NULL to ptr in grub_bsd_add_meta().

	Reviewed-by: Robbie Harwood <rharwood@redhat.com>

2022-03-14  Daniel Kiper  <daniel.kiper@oracle.com>

	osdep/windows/platform: Disable gcc9 -Waddress-of-packed-member
	$ ./configure --target=x86_64-w64-mingw32 --with-platform=efi --host=x86_64-w64-mingw32
	$ make

	[...]

	In file included from grub-core/osdep/platform.c:4:
	grub-core/osdep/windows/platform.c: In function ‘grub_install_register_efi’:
	grub-core/osdep/windows/platform.c:382:41: error: taking address of packed member of ‘struct grub_efi_file_path_device_path’ may result in an unaligned pointer value [-Werror=address-of-packed-member]
	  382 |   path16_len = grub_utf8_to_utf16 (filep->path_name,
	      |                                    ~~~~~^~~~~~~~~~~

	Disable the -Wadress-of-packaed-member diagnostic for grub_utf8_to_utf16()
	call which contains filep->path_name reference. It seems safe because the
	structure is defined according to the UEFI spec and we hope authors did not
	make any mistake... :-)

	This fix is similar to the fix in the commit 8e8723a6b
	(f2fs: Disable gcc9 -Waddress-of-packed-member).

	Reviewed-by: Robbie Harwood <rharwood@redhat.com>

2022-03-14  Glenn Washburn  <development@efficientek.com>

	po: Un-transliterate the %zu format code
	Commit 45bffae13 (util/resolve: Bail with error if moddep.lst file line is
	too long) uses the %zu format specifier which has not been used in
	any translated strings yet. So the sed scripts used for transliterating
	certain languages need to be updated otherwise creation of the message
	indexes will fail on an unknown format code. This is essentially the same
	issue fixed for the %m format code in commit 2e246b6f (po: Fix replacement
	of %m in sed programs).

	Also reorder transliteration lines to be more lexicographically ordered.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-14  Daniel Axtens  <dja@axtens.net>

	net: Check against nb->tail in grub_netbuff_pull()
	GRUB netbuff structure members track 2 different things: the extent of memory
	allocated for the packet, and the extent of memory currently being worked on.

	This works out in the structure as follows:

	  nb->head: beginning of the allocation
	  nb->data: beginning of the working data
	  nb->tail: end of the working data
	  nb->end:  end of the allocation

	The head and end pointers are set in grub_netbuff_alloc() and do not change.
	The data and tail pointers are initialised to point at start of the
	allocation (that is, head == data == tail initially), and are then
	manipulated by grub_netbuff_*() functions. Key functions are as follows:

	  - grub_netbuff_put():     "put" more data into the packet - advance nb->tail
	  - grub_netbuff_unput():   trim the tail of the packet - retract nb->tail
	  - grub_netbuff_pull():    "consume" some packet data - advance nb->data
	  - grub_netbuff_reserve(): reserve space for future headers - advance nb->data and nb->tail
	  - grub_netbuff_push():    "un-consume" data to allow headers to be written - retract nb->data

	Each of those functions does some form of error checking. For example,
	grub_netbuff_put() does not allow nb->tail to exceed nb->end, and
	grub_netbuff_push() does not allow nb->data to be before nb->head.

	However, grub_netbuff_pull()'s error checking is a bit weird. It advances nb->data
	and checks that it does not exceed nb->end. That allows you to get into the
	situation where nb->data > nb->tail, which should not be.

	Make grub_netbuff_pull() check against both nb->tail and nb->end. In theory just
	checking against ->tail should be sufficient but the extra check should be
	cheap and seems like good defensive practice.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-14  Fabian Vogt  <fvogt@suse.de>

	grub-mount: Add support for libfuse3
	The libfuse 3.0.0 got released in 2016, with some API changes compared to 2.x.
	This commit introduces support for 3.x while keeping it compatible with 2.6
	as a fallback still.

	To detect fuse3, switch configure over to use pkg-config, which is simpler yet
	more reliable than looking for library and header manually. Also set
	FUSE_USE_VERSION that way, as it depends on the used libfuse version.

	Now that the CFLAGS are read from pkg-config, use just <fuse.h>, which works
	with 2.x as well as 3.x and is recommended by libfuse upstream.

	One behavior change of libfuse3 is that FUSE_ATOMIC_O_TRUNC is set by default,
	which means that open with O_TRUNC is passed as-is instead of calling the
	truncate operation. With libfuse2, truncate failed with -ENOSYS and that was
	returned to the application. To make O_TRUNC fail with libfuse3, return -EROFS
	explicitly if writing was requested.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-14  Elyes Haouas  <ehaouas@noos.fr>

	include: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	util: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	video: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	tests: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	term: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	script: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	partmap: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	osdep: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	normal: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	net: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	loader: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	lib: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	kern: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	io: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	gfxmenu: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	gfxmenu: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	fs: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	font: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	disk: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	commands: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	bus: Remove trailing whitespaces
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-07  Chad Kimes  <chkimes@github.com>

	net/ethernet: Fix VLAN networking on little-endian systems
	VLAN configuration seems to have never worked on little-endian systems.
	This is likely because VLANTAG_IDENTIFIER is not byte-swapped before
	copying into the net buffer, nor is inf->vlantag. We can resolve this by
	using grub_cpu_to_be16{_compile_time}() and its inverse when copying
	VLAN info to/from the net buffer.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-07  Heinrich Schuchardt  <heinrich.schuchardt@canonical.com>

	commands/efi/lsefisystab: Short text EFI_IMAGE_SECURITY_DATABASE_GUID
	The EFI_IMAGE_SECURITY_DATABASE_GUID is used for the image execution
	information table (cf. UEFI specification 2.9, 32.5.3.1 Using The Image
	Execution Information Table).

	The lsefisystab command is used to display installed EFI configuration
	tables. Currently it only shows the GUID but not a short text for the
	table.

	Provide a short text for the EFI_IMAGE_SECURITY_DATABASE_GUID.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-07  Glenn Washburn  <development@efficientek.com>

	tests: Fix whitespace formatting
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-07  Peter Jones  <pjones@redhat.com>

	ChangeLog: Retire ChangeLog-2015
	ChangeLog-2015 has been untouched for over 7 years now, and any
	information in it is purely for historical purposes. At the same time,
	grepping for code winds up matching this file quite a bit, almost never
	accomplishing anything other than cluttering up your grep results. We
	don't need this in the main repo, and "git show" will find it if you're
	looking at the old history of commits on some file.

	This patch deletes it and the Makefile.am rule to distribute it.

	Reviewed-by: Daniel Axtens <dja@axtens.net>
	Reviewed-by: Robbie Harwood <rharwood@redhat.com>
	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-07  Peter Levine  <plevine457@gmail.com>

	templates: Properly handle multiple initrd paths in 30_os-prober
	os-prober now effectively handles multiple paths passed to initrd, but
	grub-mkconfig still truncates off any subsequent space-delimited paths.

	Support proper parsing of space-delimited initrd paths passed from
	os-prober for distributions, like Manjaro, that require it.

	Fixes: https://savannah.gnu.org/bugs/?47681

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-07  Samuel Thibault  <samuel.thibault@ens-lyon.org>

	templates: Add support for pci-arbiter and rumpdisk on Hurd
	This adds pci-arbiter and rumpdisk as bootstrap modules whenever they are
	available. This opens the path for fully-userland disk support.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-07  Glenn Washburn  <development@efficientek.com>

	mm: Temporarily disable grub_mm_debug while calling grub_vprintf() in grub_printf()
	To prevent infinite recursion when grub_mm_debug is on, disable it when
	calling grub_vprintf(). One such call loop is:
	  grub_vprintf() -> parse_printf_args() -> parse_printf_arg_fmt() ->
	    grub_debug_calloc() -> grub_printf() -> grub_vprintf().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-07  Glenn Washburn  <development@efficientek.com>

	mm: Export grub_mm_dump() and grub_mm_dump_free()
	These functions may be useful within modules as well. Export them so that
	modules can use them.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-07  Glenn Washburn  <development@efficientek.com>

	configure: Properly handle MM_DEBUG
	Define MM_DEBUG in config.h when --enable-mm-debug is passed to configure.
	It was being defined in config-util.h which only gets used when building
	GRUB utilities for the host side. The enabling of debugging for memory
	management in include/grub/mm.h explicitly does not happen when compiling
	for the GRUB utilities. So this debugging code effectively could never be
	enabled. Note, that MM_DEBUG is defined in an #if directive because the
	enabling of debugging checks if MM_DEBUG is defined, not what its value is.
	So even if MM_DEBUG were defined to nothing, the debugging code would
	still be enabled.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-07  Fangrui Song  <maskray@google.com>

	configure: Replace -Wl,-r,-d with -Wl,-r and add -fno-common
	In GNU ld and ld.lld, -d is used with -r to allocate space to COMMON symbols.
	This behavior is presumably to work around legacy projects which inspect
	relocatable output by themselves and do not handle COMMON symbols. The GRUB
	does not do this.

	See https://github.com/llvm/llvm-project/issues/53660
	-d is quite useless and ld.lld 15.0.0 will make -d no-op.

	COMMON symbols have special symbol resolution semantics which can cause surprise
	(see https://maskray.me/blog/2022-02-06-all-about-common-symbols). GCC<10 and
	Clang<11 defaulted to -fcommon. Just use -fno-common to avoid COMMON symbols.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-07  Glenn Washburn  <development@efficientek.com>

	tests: Add check-native and check-nonnative make targets
	This allows for testing only tests that run directly on the build machine or
	only tests that run in a virtualized environment. When testing multiple
	targets on the same build machine the native tests only need to be run once
	for all targets. Whereas, the nonnative tests must be run for each target
	because the test is potentially compiled differently for each target.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-07  Renaud Métrich  <rmetrich@redhat.com>

	commands/search: Fix bug stopping iteration when --no-floppy is used
	When using --no-floppy and a floppy was encountered, iterate_device()
	was returning 1, causing the iteration to stop instead of continuing.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-03-07  Glenn Washburn  <development@efficientek.com>

	Revert "iee1275/datetime: Fix off-by-1 error."
	This is causing the test grub_cmd_date() to fail because the returned
	date is one day more than it should be.

	This reverts commit 607d66116 (iee1275/datetime: Fix off-by-1 error.).

	Tested-by: Daniel Axtens <dja@axtens.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-08  Glenn Washburn  <development@efficientek.com>

	tests: Remove $((BASE#NUM)) bashism in grub-fs-tester
	This bashism allows converting NUM in base BASE to decimal. Its not needed
	because the only place its used is to convert from hexidecimal and this can
	also be done with the more portable $((0xHEXNUM)) syntax.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-08  Glenn Washburn  <development@efficientek.com>

	tests: Skip pata_test on i386-efi
	In comparison to other i386 targets, on i386-efi the Q35 QEMU machine type
	is used to do the testing to be able to make use of the EFI firmware in
	QEMU. On the Q35 machine type there is no way to use ATA to communicate with
	an IDE, only AHCI.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-08  Glenn Washburn  <development@efficientek.com>

	tests: Do not remove image file on error in pata_test
	The image file can be useful in debugging an issue when the test fails.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-08  Alec Brown  <alec.r.brown@oracle.com>

	util/grub-module-verifierXX: Validate elf section header table index for section name string table
	In grub-module-verifierXX.c, the function find_section() uses the value from
	grub_target_to_host16 (e->e_shstrndx) to obtain the section header table index
	of the section name string table, but it wasn't being checked if the value was
	there.

	According to the elf(5) manual page,
	"If the index of section name string table section is larger than or equal
	to SHN_LORESERVE (0xff00), this member holds SHN_XINDEX (0xffff) and the real
	index of the section name string table section is held in the sh_link member of
	the initial entry in section header table. Otherwise, the sh_link member of the
	initial entry in section header table contains the value zero."

	Since this check wasn't being made, the function get_shstrndx() is being added
	to make this check and use e_shstrndx if it doesn't have SHN_XINDEX as a value,
	else use sh_link. We also need to make sure e_shstrndx isn't greater than or
	equal to SHN_LORESERVE and sh_link isn't less than SHN_LORESERVE.

	Note that it may look as though the argument *arch isn't being used, it's
	actually required in order to use the macros grub_target_to_host*(x) which are
	unwinded to grub_target_to_host*_real(arch, (x)) based on defines earlier in
	the file.

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-08  Alec Brown  <alec.r.brown@oracle.com>

	util/grub-module-verifierXX: Validate number of elf section header table entries
	In grub-module-verifierXX.c, grub_target_to_host16 (e->e_shnum) is used to
	obtain the number of section header table entries, but it wasn't being
	checked if the value was there.

	According to the elf(5) manual page,
	"If the number of entries in the section header table is larger than or equal
	to SHN_LORESERVE (0xff00), e_shnum holds the value zero and the real number of
	entries in the section header table is held in the sh_size member of the intial
	entry in section header table. Otherwise, the sh_size member of the initial
	entry in the section header table holds the value zero."

	Since this check wasn't being made, the function get_shnum() is being added to
	make this check and use whichever member doesn't have a value of zero. If both
	are zero, then we must return an error. We also need to make sure that e_shnum
	doesn't have a value greater than or equal to SHN_LORESERVE and sh_size isn't
	less than SHN_LORESERVE.

	Note that it may look as though the argument *arch isn't being used, it's
	actually required in order to use the macros grub_target_to_host*(x) which are
	unwinded to grub_target_to_host*_real(arch, (x)) based on defines earlier in
	the file.

	Fixes: CID 314021
	Fixes: CID 314027
	Fixes: CID 314033

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-08  Alec Brown  <alec.r.brown@oracle.com>

	util/grub-module-verifierXX: Add function to calculate section headers
	Added the function get_shdr() which returns the section header at a given index
	parameter passed into this function. This helps traverse the section header
	table and reduces repeated calls to lengthy equations used to obtain section
	headers.

	Note that it may look as though the argument *arch isn't being used, it's
	actually required in order to use the macros grub_target_to_host*(x) which are
	unwinded to grub_target_to_host*_real(arch, (x)) based on defines earlier in the
	file.

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-08  Alec Brown  <alec.r.brown@oracle.com>

	fs/affs: Fix resource leaks
	In commit 178ac5107389 (affs: Fix memory leaks), fixes were made to
	grub_affs_iterate_dir() to prevent memory leaks from occurring after it
	returns without freeing node. However, there were still some instances
	where node was causing a memory leak when the function returns after
	calling grub_affs_create_node(). In this function, new memory is
	allocated to node but doesn't get freed until the hook() function is
	called near the end. Before hook() is called, node should be freed in
	grub_affs_create_node() before returning out of it.

	Fixes: 178ac5107389 (affs: Fix memory leaks)
	Fixes: CID 73759

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-08  Heinrich Schuchardt  <heinrich.schuchardt@canonical.com>

	RISC-V: Adjust -march flags for binutils 2.38
	As of version 2.38 binutils defaults to ISA specification version
	2019-12-13. This version of the specification has has separated the
	the csr read/write (csrr*/csrw*) instructions and the fence.i from
	the I extension and put them into separate Zicsr and Zifencei
	extensions.

	This implies that we have to adjust the -march flag passed to the
	compiler accordingly.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-08  Heinrich Schuchardt  <heinrich.schuchardt@canonical.com>

	efi: Correct struct grub_efi_boot_services
	The UEFI specification defines that the EFI_BOOT_SERVICES.Exit(() service may return
	EFI_SUCCESS or EFI_INVALID_PARAMETER. So it cannot be __attribute__((noreturn)).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-08  Glenn Washburn  <development@efficientek.com>

	conf/Makefile.common: Order alphabetically variables
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-08  Stephen Balousek  <sbalousek@wickedloop.com>

	net/http: Allow use of non-standard TCP/IP ports
	Allow the use of HTTP servers listening on ports other 80. This is done
	with an extension to the http notation:

	  (http[,server[,port]])

	 - or -

	  (http[,server[:port]])

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-08  Glenn Washburn  <development@efficientek.com>

	Makefile: Only look for @MARKER@ at the start of a line when generating libgrub_a_init.lst
	Under certain conditions libgrub.pp gets generated with a such that it
	contains a bunch of CPP defines, at least one of which contains "@MARKER@".
	This line should not be used when generating libgrub_a_init.lst, otherwise
	we get compiler errors like:

	  libgrub_a_init.c:22:18: error: stray ‘#’ in program
	     22 | extern void grub_#define_init (void);
	        |                  ^
	  libgrub_a_init.c:22:19: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘define_init’
	     22 | extern void grub_#define_init (void);
	        |                   ^~~~~~~~~~~
	  libgrub_a_init.c:23:18: error: stray ‘#’ in program
	     23 | extern void grub_#define_fini (void);
	        |                  ^
	  libgrub_a_init.c:23:19: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘define_fini’
	     23 | extern void grub_#define_fini (void);
	        |                   ^~~~~~~~~~~
	  ...

	When generating libgrub_a_init.lst only lines starting with "@MARKER@"
	are desired.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-08  Glenn Washburn  <development@efficientek.com>

	gentpl.py: Fix issue where sometimes marker files have CPP defines
	When generating video.lst, modules whose marker file contains the string
	VIDEO_LIST_MARKER are selected. But when the marker file contains the CPP
	defines, one of the defines is VIDEO_LIST_MARKER and is present in all
	marker files, so they are all selected. By removing the defines, the correct
	modules are selected.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-08  Glenn Washburn  <development@efficientek.com>

	util/resolve: Bail with error if moddep.lst file line is too long
	The code reads each line into a buffer of size 1024 and does not check if
	the line is longer. So a line longer than 1024 will be read as a valid line
	followed by an invalid line. Then an error confusing to the user is sent
	with the test "invalid line format". But the line format is perfectly fine,
	the problem is in GRUB's parser. Check if we've hit a line longer than the
	size of the buffer, and if so send a more correct and reasonable error.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-08  Glenn Washburn  <development@efficientek.com>

	util/resolve: Do not read past the end of the array in read_dep_list()
	If the last non-NULL byte of "buf" is not a white-space character (such as
	when a read line is longer than the size of "buf"), then "p" will eventually
	point to the byte after the last byte in "buf". After which "p" will be
	dereferenced in the while conditional leading to an out of bounds read. Make
	sure that "p" is inside "buf" before dereferencing it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-07  Glenn Washburn  <development@efficientek.com>

	kern/misc: Allow selective disabling of debug facility names
	Sometimes you only know which debug logging facility names you want to
	turn off, not necessarily all the ones you want enabled. This patch allows
	the debug string to contain facility names in the $debug variable which are
	prefixed with a "-" to disable debug log messages for that conditional. Say
	you want all debug logging on except for btrfs and scripting, then do:
	"set debug=all,-btrfs,-scripting"

	Note, that only the last occurrence of the facility name with or without a
	leading "-" is considered. So simply appending ",-facilityname" to the
	$debug variable will disable that conditional. To illustrate, the command
	"set debug=all,-btrfs,-scripting,btrfs" will enable btrfs.

	Also, add documentation explaining this new behavior.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2022-02-07  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Fix Coverity use after free bug
	The Coverity output is:

	  *** CID 366905:  Memory - illegal accesses  (USE_AFTER_FREE)
	  /grub-core/disk/cryptodisk.c: 1064 in grub_cryptodisk_scan_device_real()
	  1058      cleanup:
	  1059       if (askpass)
	  1060         {
	  1061           cargs->key_len = 0;
	  1062           grub_free (cargs->key_data);
	  1063         }
	  >>>     CID 366905:  Memory - illegal accesses  (USE_AFTER_FREE)
	  >>>     Using freed pointer "dev".
	  1064       return dev;
	  1065     }
	  1066
	  1067     #ifdef GRUB_UTIL
	  1068     #include <grub/util/misc.h>
	  1069     grub_err_t

	Here the "dev" variable can point to a freed cryptodisk device if the
	function grub_cryptodisk_insert() fails. This can happen only on a OOM
	condition, but when this happens grub_cryptodisk_insert() calls grub_free on
	the passed device. Since grub_cryptodisk_scan_device_real() assumes that
	grub_cryptodisk_insert() is always successful, it will return the device,
	though the device was freed.

	Change grub_cryptodisk_insert() to not free the passed device on failure.
	Then on grub_cryptodisk_insert() failure, free the device pointer. This is
	done by going to the label "error", which will call cryptodisk_close() to
	free the device and set the device pointer to NULL, so that a pointer to
	freed memory is not returned.

	Fixes: CID 366905

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Daniel Axtens  <dja@axtens.net>

	mm: Document grub_mm_init_region()
	The grub_mm_init_region() does some things that seem magical, especially
	around region merging. Make it a bit clearer.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Daniel Axtens  <dja@axtens.net>

	mm: Document grub_free()
	The grub_free() possesses a surprising number of quirks, and also
	uses single-letter variable names confusingly to iterate through
	the free list.

	Document what's going on.

	Use prev and cur to iterate over the free list.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Daniel Axtens  <dja@axtens.net>

	mm: grub_real_malloc(): Make small allocs comment match code
	Small allocations move the region's *first pointer. The comment
	says that this happens for allocations under 64K. The code says
	it's for allocations under 32K. Commit 45bf8b3a7549 changed the
	code intentionally: make the comment match.

	Fixes: 45bf8b3a7549 (* grub-core/kern/mm.c (grub_real_malloc): Decrease cut-off of moving the)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Daniel Axtens  <dja@axtens.net>

	mm: Clarify grub_real_malloc()
	When iterating through the singly linked list of free blocks,
	grub_real_malloc() uses p and q for the current and previous blocks
	respectively. This isn't super clear, so swap to using prev and cur.

	This makes another quirk more obvious. The comment at the top of
	grub_real_malloc() might lead you to believe that the function will
	allocate from *first if there is space in that block.

	It actually doesn't do that, and it can't do that with the current
	data structures. If we used up all of *first, we would need to change
	the ->next of the previous block to point to *first->next, but we
	can't do that because it's a singly linked list and we don't have
	access to *first's previous block.

	What grub_real_malloc() actually does is set *first to the initial
	previous block, and *first->next is the block we try to allocate
	from. That allows us to keep all the data structures consistent.

	Document that.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Daniel Axtens  <dja@axtens.net>

	mm: Document GRUB internal memory management structures
	I spent more than a trivial quantity of time figuring out pre_size and
	whether a memory region's size contains the header cell or not.

	Document the meanings of all the properties. Hopefully now no-one else
	has to figure it out!

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Michael Chang  <mchang@suse.com>

	fs/btrfs: Use full btrfs bootloader area
	Up to now GRUB can only embed to the first 64 KiB before primary
	superblock of btrfs, effectively limiting the GRUB core size. That
	could consequently pose restrictions to feature enablement like
	advanced zstd compression.

	This patch attempts to utilize full unused area reserved by btrfs for
	the bootloader outlined in the document [1]:

	  The first 1MiB on each device is unused with the exception of primary
	  superblock that is on the offset 64KiB and spans 4KiB.

	Apart from that, adjacent sectors to superblock and first block group
	are not used for embedding in case of overflow and logged access to
	adjacent sectors could be useful for tracing it up.

	This patch has been tested to provide out of the box support for btrfs
	zstd compression with which GRUB has been installed to the partition.

	[1] https://btrfs.wiki.kernel.org/index.php/Manpage/btrfs(5)#BOOTLOADER_SUPPORT

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Glenn Washburn  <development@efficientek.com>

	tests: Refactor building xorriso command for iso9660 tests
	The iso9660 tests test creating isos with different combinations of
	Joliet, Rock Ridge, and ISO 9660 conformance level. Refactor xorriso
	argument generation for more readability and extensibility.

	Reviewed-by: Thomas Schmitt <scdbackup@gmx.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Improve handling of partition name in cryptomount password prompt
	Call grub_partition_get_name() unconditionally to initialize the part
	variable. Then part will only be NULL when grub_partition_get_name() errors.
	Note that when source->partition is NULL, then grub_partition_get_name()
	returns an allocated empty string. So no comma or partition will be printed,
	as desired.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Move global variables into grub_cryptomount_args struct
	Note that cargs.search_uuid does not need to be initialized in various parts
	of the cryptomount argument parsing, just once when cargs is declared with
	a struct initializer. The previous code used a global variable which would
	retain the value across cryptomount invocations.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Refactor password input out of crypto dev modules into cryptodisk
	The crypto device modules should only be setting up the crypto devices and
	not getting user input. This has the added benefit of simplifying the code
	such that three essentially duplicate pieces of code are merged into one.

	Add documentation of passphrase option for cryptomount as it is now usable.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Add infrastructure to pass data from cryptomount to cryptodisk modules
	Previously, the cryptomount arguments were passed by global variable and
	function call argument, neither of which are ideal. This change passes data
	via a grub_cryptomount_args struct, which can be added to over time as
	opposed to continually adding arguments to the cryptodisk scan and
	recover_key.

	As an example, passing a password as a cryptomount argument is implemented.
	However, the backends are not implemented, so testing this will return a not
	implemented error.

	Also, add comments to cryptomount argument parsing to make it more obvious
	which argument states are being handled.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Improve cryptomount -u error message
	When a cryptmount is specified with a UUID, but no cryptodisk backends find
	a disk with that UUID, return a more detailed message giving telling the
	user that they might not have a needed cryptobackend module loaded.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Improve error messaging in cryptomount invocations
	Update such that "cryptomount -u UUID" will not print two error messages
	when an invalid passphrase is given and the most relevant error message
	will be displayed.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Return failure in cryptomount when no cryptodisk modules are loaded
	This displays an error notifying the user that they'll want to load
	a backend module to make cryptomount useful.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Refactor to discard have_it global
	The global "have_it" was never used by the crypto-backends, but was used to
	determine if a crypto-backend successfully mounted a cryptodisk with a given
	UUID. This is not needed however, because grub_device_iterate() will return
	1 if and only if grub_cryptodisk_scan_device() returns 1. And
	grub_cryptodisk_scan_device() will now only return 1 if a search_uuid has
	been specified and a cryptodisk was successfully setup by a crypto-backend or
	a cryptodisk of the requested UUID is already open.

	To implement this grub_cryptodisk_scan_device_real() is modified to return
	a cryptodisk or NULL on failure and having the appropriate grub_errno set to
	indicated failure. Note that grub_cryptodisk_scan_device_real() will fail now
	with a new errno GRUB_ERR_BAD_MODULE when none of the cryptodisk backend
	modules succeed in identifying the source disk.

	With this change grub_device_iterate() will return 1 when a crypto device is
	successfully decrypted or when the source device has already been successfully
	opened. Prior to this change, trying to mount an already successfully opened
	device would trigger an error with the message "no such cryptodisk found",
	which is at best misleading. The mount should silently succeed in this case,
	which is what happens with this patch.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Glenn Washburn  <development@efficientek.com>

	luks2: Add debug message to align with luks and geli modules
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	configure: Fix misspelled variable BUILD_LDFAGS -> BUILD_LDFLAGS
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Michael Chang  <mchang@suse.com>

	grub-mkconfig: Restore umask for the grub.cfg
	The commit ab2e53c8a (grub-mkconfig: Honor a symlink when generating
	configuration by grub-mkconfig) has inadvertently discarded umask for
	creating grub.cfg in the process of running grub-mkconfig. The resulting
	wrong permission (0644) would allow unprivileged users to read GRUB
	configuration file content. This presents a low confidentiality risk
	as grub.cfg may contain non-secured plain-text passwords.

	This patch restores the missing umask and sets the creation file mode
	to 0600 preventing unprivileged access.

	Fixes: CVE-2021-3981

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Heinrich Schuchardt  <heinrich.schuchardt@canonical.com>

	efi: Create the grub_efi_close_protocol() library function
	Create a library function for CloseProtocol() and use it for the SNP driver.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Heinrich Schuchardt  <heinrich.schuchardt@canonical.com>

	efinet: Correct closing of SNP protocol
	In the context of the implementation of the EFI_LOAD_FILE2_PROTOCOL for
	the initial ramdisk it was observed that opening the SNP protocol failed.
	https://lists.gnu.org/archive/html/grub-devel/2021-10/msg00020.html
	This is due to an incorrect call to CloseProtocol().

	The first parameter of CloseProtocol() is the handle, not the interface.

	We call OpenProtocol() with ControllerHandle == NULL. Hence we must also
	call CloseProtcol() with ControllerHandel == NULL.

	Each call of OpenProtocol() for the same network card handle is expected to
	return the same interface pointer. If we want to close the protocol which
	we opened non-exclusively when searching for a card, we have to do this
	before opening the protocol exclusively.

	As there is no guarantee that we successfully open the protocol add checks
	in the transmit and receive functions.

	Reported-by: Andreas Schwab <schwab@linux-m68k.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Colin Watson  <cjwatson@debian.org>

	minilzo: Update to minilzo-2.10
	minilzo fails to build on a number of Debian release architectures
	(armel, mips64el, mipsel, ppc64el) with errors such as:

	  ../../grub-core/lib/minilzo/minilzo.c: In function 'lzo_memops_get_le16':
	  ../../grub-core/lib/minilzo/minilzo.c:3479:11: error: dereferencing type-punned pointer will break strict-aliasing rules [-Werror=strict-aliasing]
	   3479 |         * (lzo_memops_TU2p) (lzo_memops_TU0p) (dd) = * (const lzo_memops_TU2p) (const lzo_memops_TU0p) (ss); \
	        |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	  ../../grub-core/lib/minilzo/minilzo.c:3530:5: note: in expansion of macro 'LZO_MEMOPS_COPY2'
	   3530 |     LZO_MEMOPS_COPY2(&v, ss);
	        |     ^~~~~~~~~~~~~~~~

	The latest upstream version is 2.10, so updating to it seems like a good
	idea on general principles, and it fixes builds on all the above
	architectures.

	The update procedure documented in the GRUB Developers Manual worked; I
	just updated the version numbers to make it clear that it's been
	executed recently.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Glenn Washburn  <development@efficientek.com>

	docs: Add documentation on packages for building documentation
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Glenn Washburn  <development@efficientek.com>

	docs: Fix broken links in development docs
	Use the Git Book as a reference for documentation on Git as no other link
	was provided. Other links were broken because they used @url instead of
	@uref and needed a comma separator between link and link text.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Glenn Washburn  <development@efficientek.com>

	docs: Update development docs to include information on running test suite
	Add a section with minimal description on setting up and running the test
	suite with a link to the INSTALL documentation which is a little more
	detailed in terms of package requirements.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Glenn Washburn  <development@efficientek.com>

	docs: Add sentence on where Debian packages can be searched for online
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-12-23  Qu Wenruo  <wqu@suse.com>

	fs/btrfs: Make extent item iteration to handle gaps
	The GRUB btrfs implementation can't handle two very basic btrfs
	file layouts:

	1. Mixed inline/regualr extents
	   # mkfs.btrfs -f test.img
	   # mount test.img /mnt/btrfs
	   # xfs_io -f -c "pwrite 0 1k" -c "sync" -c "falloc 0 4k" \
		       -c "pwrite 4k 4k" /mnt/btrfs/file
	   # umount /mnt/btrfs
	   # ./grub-fstest ./grub-fstest --debug=btrfs ~/test.img hex "/file"

	   Such mixed inline/regular extents case is not recommended layout,
	   but all existing tools and kernel can handle it without problem.

	2. NO_HOLES feature
	   # mkfs.btrfs -f test.img -O no_holes
	   # mount test.img /mnt/btrfs
	   # xfs_io -f -c "pwrite 0 4k" -c "pwrite 8k 4k" /mnt/btrfs/file
	   # umount /mnt/btrfs
	   # ./grub-fstest ./grub-fstest --debug=btrfs ~/test.img hex "/file"

	   NO_HOLES feature is going to be the default mkfs feature in the incoming
	   v5.15 release, and kernel has support for it since v4.0.

	The way GRUB btrfs code iterates through file extents relies on no gap
	between extents.

	If any gap is hit, then GRUB btrfs will error out, without any proper
	reason to help debug the bug.

	This is a bad assumption, since a long long time ago btrfs has a new
	feature called NO_HOLES to allow btrfs to skip the padding hole extent
	to reduce metadata usage.

	The NO_HOLES feature is already stable since kernel v4.0 and is going to
	be the default mkfs feature in the incoming v5.15 btrfs-progs release.

	When there is a extent gap, instead of error out, just try next item.

	This is still not ideal, as kernel/progs/U-boot all do the iteration
	item by item, not relying on the file offset continuity.

	But it will be way more time consuming to correct the whole behavior than
	starting from scratch to build a proper designed btrfs module for GRUB.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-11-22  Alec Brown  <alec.r.brown@oracle.com>

	disk/ldm: Fix resource leak
	Commit 23e39f50ca7a (disk/ldm: Make sure comp data is freed before exiting from
	make_vg()) fixed several spots in make_vg() where comp data was leaking memory
	when an error was being handled but missed one. To avoid leaking memory, comp
	should be freed when an error is being handled after comp has been successfully
	allocated memory in the for loop.

	Fixes: 23e39f50ca7a (disk/ldm: Make sure comp data is freed before exiting from make_vg())
	Fixes: CID 73804

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-11-22  Alec Brown  <alec.r.brown@oracle.com>

	commands/probe: Fix resource leaks
	Commit 1fc860bb76bb (commands/probe: Fix a resource leak when probing disks),
	missed other cases where grub_device_close() should be called before a return
	statement is called. Also found that grub_disk_close() wasn't being called when
	an error is being returned. To avoid conflict with grub_errno, grub_error_push()
	should be called before either grub_device_close() or grub_disk_close() is
	called and grub_error_pop() should be called before grub_errno is returned.

	Fixes: 1fc860bb76bb (commands/probe: Fix a resource leak when probing disks)
	Fixes: CID 292443

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-11-22  Michael Chang  <mchang@suse.com>

	templates: Filter out POSIX locale for translation
	The POSIX locale is default or native operating system's locale
	identical to the C locale, so no translation to human speaking languages
	are provided. For this reason we should filter out LANG=POSIX as well as
	LANG=C upon generating grub.cfg to avoid looking up for it's gettext's
	message catalogs that will consequently result in an unpleasant message:

	  error: file `/boot/grub/locale/POSIX.gmo' not found

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-11-02  Darren Kenny  <darren.kenny@oracle.com>

	io/gzio: Fix possible use of uninitialized variable in huft_build()
	In huft_build() it is possible to reach the for loop where "r" is being
	assigned to "q[j]" without "r.v" ever being initialized.

	Fixes: CID 314024

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-11-02  Darren Kenny  <darren.kenny@oracle.com>

	fs/zfs/zfs: Fix possible insecure use of chunk size in zap_leaf_array_get()
	In zap_leaf_array_get() the chunk size passed in is considered tainted
	by Coverity, and is being used before it is tested for validity. To fix
	this the assignment of "la" is moved until after the test of the value
	of "chunk".

	Fixes: CID 314014

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-11-02  Darren Kenny  <darren.kenny@oracle.com>

	util/grub-mkfont: Fix memory leak in write_font_pf2()
	In the function write_font_pf2() memory is allocated for font_name to
	construct a new name, but it is not released before returning from the
	function, leaking the allocated memory.

	Fixes: CID 314015

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-11-02  Darren Kenny  <darren.kenny@oracle.com>

	util/grub-fstest: Fix resource leaks in cmd_cmp()
	In the function cmd_cmp() within the while loop, srcnew and destnew are
	being allocated but are never freed either before leaving scope or in
	the recursive calls being made to cmd_cmp().

	Fixes: CID 314032
	Fixes: CID 314045

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-11-02  Darren Kenny  <darren.kenny@oracle.com>

	util/grub-mkrescue: Fix memory leak in write_part()
	In the function write_part(), the value of inname is not used beyond
	the grub_util_fopen() call, so it should be freed to avoid leakage.

	Fixes: CID 314028

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-11-02  Darren Kenny  <darren.kenny@oracle.com>

	util/grub-install-common: Fix memory leak in copy_all()
	The copy_all() function skips a section of code using continue, but
	fails to free the memory in srcf first, leaking it.

	Fixes: CID 314026

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-11-02  Robbie Harwood  <rharwood@redhat.com>

	kern/dl: Print module name on license check failure
	Prior to this change, the GRUB would only indicate that the check had
	been failed, but not by what module. This made it difficult to track
	down either the problem module, or debug the false positive further.

	Before performing the license check, resolve the module name so that
	it can be printed if the license check fails.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-25  Glenn Washburn  <development@efficientek.com>

	kern/misc: Add debug log condition to log output
	Adding the conditional to debug log messages allows the GRUB user to
	construct the $debug variable without needing to consult the source to
	find the conditional (especially useful for situations where the source
	is not readily available).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-25  Glenn Washburn  <development@efficientek.com>

	tests: In partmap_test, use ${parted} variable when checking for binary
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-25  Glenn Washburn  <development@efficientek.com>

	tests: Test aborts due to missing requirements should be marked as error instead of skipped
	Many tests abort due to not being root or missing tools, for instance mkfs
	commands for file system tests. The tests are exited with code 77, which
	means they were skipped. A skipped test is a test that should not be run,
	e.g. a test specific to ARM64 should not be run on an x86 build. These aborts
	are actually a hard error, code 99. That means that the test could not be
	completed, but not because what was supposed to be tested failed, e.g. in
	these cases where a missing tool prevents the running of a test.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-25  Glenn Washburn  <development@efficientek.com>

	tests: Boot PowerPC using PMU instead of CUDA for power management
	A recent refactoring of CUDA command code has exposed a bug in OpenBIOS [1]
	which was causing system powerdown and system reset to fail, thus causing
	the QEMU instance to hang. This in turn caused the grub-shell command to
	timeout causing it to return an error code when the test actually completed
	successfully.

	Since it could be a while before the patch fixing this issue in OpenBIOS
	filters down to the average distro, switch to PMU to allow powerdowns and
	reboots to work as expected.

	[1] https://gitlab.com/qemu-project/qemu/-/issues/624

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Kees Cook  <kees@ubuntu.com>

	osdep/linux: Fix md array device enumeration
	GET_ARRAY_INFO's info.nr_disks does not map to GET_DISK_INFO's
	disk.number, which is an internal kernel index. If an array has had drives
	added, removed, etc., there may be gaps in GET_DISK_INFO's results. But
	since the consumer of devicelist cannot tolerate gaps (it expects to walk
	a NULL-terminated list of device name strings), the devicelist index (j)
	must be tracked separately from the disk.number index (i).

	As part of this, since GRUB wants to only examine active (i.e. present
	and non-failed) disks, the count of remaining disks (remaining) must be
	tracked separately from the devicelist index (j).

	Additionally, drop a line with empty spaces only.

	Fixes: 49de079bbe1c (... (grub_util_raid_getmembers): Handle "removed" disks)
	Fixes: 2b00217369ac (... Added support for RAID and LVM)
	Fixes: https://bugs.launchpad.net/ubuntu/+source/grub2/+bug/1912043
	Fixes: https://savannah.gnu.org/bugs/index.php?59887

	Reviewed-by: Petr Vorel <pvorel@suse.cz>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Glenn Washburn  <development@efficientek.com>

	docs: Add fuller accounting of "make check" prerequisites
	Many of the prerequisites for exercising the full "make check" test suite
	have not been documented. This adds them along with a note that some tests
	require elevated privileges to run.

	Add an incomplete list of cross compiling toolchain packages for Debian
	and trusted sources for other distros.

	Add statement at the start of the document to clarify that package names
	are from Debian 11.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Glenn Washburn  <development@efficientek.com>

	tests: Do not delete filesystem images on error
	The filesystem images created for the filesystem test can be useful when
	debugging why a filesystem test failed. So, keep them around and let the
	user clean them up.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Glenn Washburn  <development@efficientek.com>

	tests: Output list of devices when partmap fails
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Glenn Washburn  <development@efficientek.com>

	tests: Skip HFS test only when mac_roman module is not loaded and not loadable
	Allow the HFS tests to not be skipped if the mac_roman modules is loaded in
	the kernel, but not accessible to modprobe.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Glenn Washburn  <development@efficientek.com>

	tests: Change FAT volume label to be with in the valid character range
	The ";", semi-colon, character is not a valid character for a FAT filesystem
	label. This test used to succeed because prior to v4.2 of dosfstools
	mkfs.vfat did not enforce the character restrictions for volume labels. So,
	change the volume label string to be valid but contain symbol characters to
	test odd volume labels.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Glenn Washburn  <development@efficientek.com>

	tests: Only test MINIX3 volumes of 1 KiB block size
	Apparently there used to be a -B option for mkfs.minix to create a volume
	with a specified block size. This version is hard to come by and does not
	appear to be available in Debian distributions. So, remove support for
	testing a variety of blocks sizes for MINIX3. This allows the MINIX tests
	to run because they were being skipped due to not finding a mkfs.minix with
	the -B option.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Glenn Washburn  <development@efficientek.com>

	tests: mkfs.btrfs now supports only 4 KiB sector sizes and above
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	tests: Disable ReiserFS tests for old format because newer kernels do not support them
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	tests: mkreiserfs only supports 4096 block size
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	tests: Rename variable filtime -> filetime as its meant to be
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Glenn Washburn  <development@efficientek.com>

	tests: Use @BUILD_SHEBANG@ autoconf var instead of literal shell
	This bring this test in line with the rest of the test scripts.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Glenn Washburn  <development@efficientek.com>

	tests: Exit with skipped exit code when test not performed
	These tests were not performed and therefore did not pass, nor fail. This
	fixes misleading test exit code where, for instance, the pseries_test will
	pass on i386-pc, which is not a pseries architecture.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Glenn Washburn  <development@efficientek.com>

	tests: A failure of mktemp should cause the test script to exit with code 99
	A test exiting with code 99 means that there was an error in the test itself
	and not a failure in the thing being tested (also known as a hard error).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Glenn Washburn  <development@efficientek.com>

	tests: Make setup errors in grub-fs-tester hard errors
	When a test program fails because it failed to setup the test properly, this
	does not indicate a failure in what is attempting to be tested because the
	test is never run. So exit with a hard error exit status to note this
	difference. This will allow easier detection of tests that are not actually
	being run and those that are really failing.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Glenn Washburn  <development@efficientek.com>

	tests: Do not occlude grub-shell return code
	The script grub-shell does the bulk of the testing. If it returns an error
	code, that means that the test failed and the test should immediately exit
	with that error code. When grub-shell is used as a non-terminating command
	in a pipeline, e.g. when data needs to be extracted from its output, its
	error code will be occluded by the last command in the pipeline. Refactor
	tests so that the shell will error with the exit code of grub-shell by
	breaking up pipelines such that grub-shell is always the last command in
	the pipeline that it is used in.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Glenn Washburn  <development@efficientek.com>

	tests: Do not occlude subshell error codes when used as input to the test command
	When using the output of a subshell as input, its error code is ignored in
	the context of "set -e". Many test scripts use grub-shell in a subshell with
	output used as an argument to the test command to test for expected output.
	Refactor these tests so that the subshell output goes to a shell variable,
	so that if the subshell errors the script will immediately exit with an
	error code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Glenn Washburn  <development@efficientek.com>

	tests: Add set -e to missing tests
	This helps to ensure that error codes do not get ignored.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Glenn Washburn  <development@efficientek.com>

	tests: When checking squashfs fstime, use superblock last modified time
	Currently, the filesystem timestamp check in grub-fs-tester uses the
	squashfs image file's last modified timestamp and checks to see if that
	time stamp is within 3 seconds of the superblock timestamp as determined by
	grub. The image file's timestamp could be more than 3 seconds off if
	mksquashfs takes more than 3 seconds to generate the image, as is the case
	on a virtual machine. Instead use squashfs tools to get the filesystem
	timestamp directly.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-14  Glenn Washburn  <development@efficientek.com>

	tests: Fix partmap_test for arm*-efi, disk numbering has changed
	Perhaps using a newer UEFI firmware is the reason for the created test disk
	showing up as hd2 instead of hd3.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-04  Nikolai Kostrigin  <nickel@altlinux.org>

	docs/grub-dev: Fix typos
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-04  Michael Chang  <mchang@suse.com>

	build: Fix build error with binutils 2.36
	The following procedure to build xen/pvgrub is broken.

	  git clone https://git.savannah.gnu.org/git/grub.git
	  cd grub
	  ./bootstrap
	  mkdir build-xen
	  cd build-xen
	  ../configure --with-platform=xen
	  make

	It fails with the message:

	  /usr/lib64/gcc/x86_64-suse-linux/10/../../../../x86_64-suse-linux/bin/ld:
	  section .note.gnu.property VMA [0000000000400158,0000000000400187]
	  overlaps section .bss VMA [000000000000f000,000000000041e1af]

	The most significant factor is that new assembler (GNU as) generates the
	.note.gnu.property section as default. This note section overlaps with
	.bss because it doesn't reposition with -Wl,-Ttext,0 with which the base
	address of .text section is set, rather the address of .note.gnu.property
	is calculated for some reason from 0x400000 where the ELF executable
	defaults to start.

	Using -Ttext-segment doesn't help either, though it is said to set the
	address of the first byte of the text segment according to "man ld".
	What it actually does is to override the default 0x400000, aka the image
	base address, to something else. The entire process can be observed in
	the default linker script used by gcc [1]. Therefore we can't expect it
	to achieve the same thing as -Ttext given that the first segment where
	.text resides is offset by SIZEOF_HEADERS plus some sections may be
	preceding it within the first segment. The end result is .text always
	has to start with non-zero address with -Wl,-Ttext-segment,0 if using
	default linker script.

	It is also worth mentioning that binutils upstream apparently doesn't
	seem to consider this as a bug [2] and proposed to use -Wl,-Ttext-segment,0
	which is not fruitful as what has been tested by Gentoo [3].

	As long as GRUB didn't use ISA information encoded in .note.gnu.property,
	we can safely drop it via -Wa,-mx86-used-note=no assembler option to
	fix the linker error above.

	This is considered a better approach than using custom linker script to
	drop the .note.gnu.property section because object file manipulation can
	also be hampered one way or the other in that linker script may not be
	helpful. See also this commit removing the section in the process of objcopy.

	  6643507ce build: Fix GRUB i386-pc build with Ubuntu gcc

	[1] In /usr/lib64/ldscripts/elf_x86_64.x or use 'gcc -Wl,--verbose ...'
	    PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000));
	    . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
	[2] https://sourceware.org/bugzilla/show_bug.cgi?id=27377
	[3] https://bugs.gentoo.org/787221

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-04  Michael Chang  <mchang@suse.com>

	disk/diskfilter: Use nodes in logical volume's segment as member device
	Currently the grub_diskfilter_memberlist() function returns all physical
	volumes added to a volume group to which a logical volume (LV) belongs.
	However, this is suboptimal as it doesn't fit the intended behavior of
	returning underlying devices that make up the LV. To give a clear
	picture, the result should be identical to running commands below to
	display the logical volumes with underlying physical volumes in use.

	  localhost:~ # lvs -o lv_name,vg_name,devices /dev/system/root
	    LV   VG     Devices
	    root system /dev/vda2(512)

	  localhost:~ # lvdisplay --maps /dev/system/root
	    --- Logical volume ---
	      ...
	    --- Segments ---
	    Logical extents 0 to 4604:
	      Type                linear
	      Physical volume     /dev/vda2
	      Physical extents    512 to 5116

	As shown above, we can know system-root LV uses only /dev/vda2 to
	allocate it's extents, or we can say that /dev/vda2 is the member device
	comprising the system-root LV.

	It is important to be precise on the member devices, because that helps
	to avoid pulling in excessive dependency. Let's use an example to
	demonstrate why it is needed.

	  localhost:~ # findmnt /
	  TARGET SOURCE                  FSTYPE OPTIONS
	  /      /dev/mapper/system-root ext4   rw,relatime

	  localhost:~ # pvs
	    PV               VG     Fmt  Attr PSize    PFree
	    /dev/mapper/data system lvm2 a--  1020.00m    0
	    /dev/vda2        system lvm2 a--    19.99g    0

	  localhost:~ # cryptsetup status /dev/mapper/data
	  /dev/mapper/data is active and is in use.
	    type:    LUKS1
	    cipher:  aes-xts-plain64
	    keysize: 512 bits
	    key location: dm-crypt
	    device:  /dev/vdb
	    sector size:  512
	    offset:  4096 sectors
	    size:    2093056 sectors
	    mode:    read/write

	  localhost:~ # vgs
	    VG     #PV #LV #SN Attr   VSize  VFree
	    system   2   3   0 wz--n- 20.98g    0

	  localhost:~ # lvs -o lv_name,vg_name,devices
	    LV   VG     Devices
	    data system /dev/mapper/data(0)
	    root system /dev/vda2(512)
	    swap system /dev/vda2(0)

	We can learn from above that /dev/mapper/data is an encrypted volume and
	also gets assigned to volume group "system" as one of it's physical
	volumes. And also it is not used by root device, /dev/mapper/system-root,
	for allocating extents, so it shouldn't be taking part in the process of
	setting up GRUB to access root device.

	However, running grub-install reports error as volume group "system"
	contains encrypted volume.

	  error: attempt to install to encrypted disk without cryptodisk
	  enabled. Set `GRUB_ENABLE_CRYPTODISK=y' in file `/etc/default/grub'.

	Certainly we can enable GRUB_ENABLE_CRYPTODISK=y and move on, but that
	is not always acceptable since the server may need to be booted unattended.
	Additionally, typing passphrase for every system startup can be a big
	hassle of which most users would like to avoid.

	This patch solves the problem by returning exact physical volume, /dev/vda2,
	rightly used by system-root from the example above, thus grub-install will
	not error out because the excessive encrypted device to boot the root device
	is not configured.

	Tested-by: Olav Reinert <seroton10@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-04  Krzysztof Nowicki  <krzysztof.a.nowicki@gmail.com>

	fs/ext2: Fix handling of missing sparse extent leafs
	When a file on ext4 is stored as sparse the data belonging to
	zero-filled blocks is not written to storage and the extent map is
	missing entries for these blocks. Such case can happen both for depth
	0 extents (leafs) as well as higher-level tables.

	Consider a scenario of a file which has a zero-filled beginning (e.g.
	ISO image). In such case real data starts at block 8. If such a file is
	stored using 2-level extent structure the extent list in the inode will
	be depth 1 and will have an entry to a depth 0 (leaf) extent header for
	blocks 8-n.

	Unfortunately existing GRUB2 ext2 driver is only able to handle missing
	entries in leaf extent tables, for which the grub_ext2_read_block()
	function returns 0. In case the whole leaf extent list is missing for
	a block the function fails with "invalid extent" error.

	The fix for this problem relies on the grub_ext4_find_leaf() helper
	function to distinguish two error cases: missing extent and error
	walking through the extent tree. The existing error message is raised
	only for the latter case, while for the missing leaf extent zero is
	returned from grub_ext2_read_block() indicating a sparse block.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-04  Daniel Axtens  <dja@axtens.net>

	powerpc: Drop Open Hack'Ware - remove GRUB_IEEE1275_FLAG_NO_ANSI
	Open Hack'Ware was the only user.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-04  Daniel Axtens  <dja@axtens.net>

	powerpc: Drop Open Hack'Ware - remove GRUB_IEEE1275_FLAG_CANNOT_INTERPRET
	Open Hack'Ware was the only user.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-04  Daniel Axtens  <dja@axtens.net>

	powerpc: Drop Open Hack'Ware - remove GRUB_IEEE1275_FLAG_CANNOT_SET_COLORS
	Open Hack'Ware was the only user.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-04  Daniel Axtens  <dja@axtens.net>

	powerpc: Drop Open Hack'Ware - remove GRUB_IEEE1275_FLAG_FORCE_CLAIM
	Open Hack'Ware was the only user. It added a lot of complexity.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-10-04  Daniel Axtens  <dja@axtens.net>

	powerpc: Drop Open Hack'Ware
	Open Hack'Ware was an alternative firmware of powerpc under QEMU.

	The last commit to any Open Hack'Ware repo I can find is from 2014 [1].

	Open Hack'Ware was used for the QEMU "prep" machine type, which was
	deprecated in QEMU in commit 54c86f5a4844 (hw/ppc: deprecate the
	machine type 'prep', replaced by '40p') in QEMU v3.1, and had reportedly
	been broken for years before without anyone noticing. Support was removed
	in February 2020 by commit b2ce76a0730e (hw/ppc/prep: Remove the
	deprecated "prep" machine and the OpenHackware BIOS).

	Open Hack'Ware's limitations require some messy code in GRUB. This
	complexity is not worth carrying any more.

	Remove detection of Open Hack'Ware. We will clean up the feature flags
	in following commits.

	[1]: https://github.com/qemu/openhackware and
	     https://repo.or.cz/w/openhackware.git are QEMU submodules. They have
	     only small changes on top of OHW v0.4.1, which was imported into
	     QEMU SCM in 2010. I can't find anything resembling an official repo
	     any more.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-09-20  Glenn Washburn  <development@efficientek.com>

	docs/grub: Improve search documentation, by adding short options and section on hints
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-09-20  Glenn Washburn  <development@efficientek.com>

	fs/udf: Fix regression which is preventing symlink access
	This code was broken by commit 3f05d693 (malloc: Use overflow checking
	primitives where we do complex allocations), which added overflow
	checking in many areas. The problem here is that the changes update the
	local variable sz, which was already in use and which was not updated
	before the change. So the code using sz was getting a different value of
	than it would have previously for the same UDF image. This causes the
	logic getting the destination of the symlink to not realize that its
	gotten the full destination, but keeps trying to read past the end of
	the destination. The bytes after the end are generally NULL padding
	bytes, but that's not a valid component type (ECMA-167 14.16.1.1). So
	grub_udf_read_symlink() branches to error logic, returning NULL, instead
	of the symlink destination path.

	The result of this bug is that the UDF filesystem tests were failing in
	the symlink test with the grub-fstest error message:

	  grub-fstest: error: cannot open `(loop0)/sym': invalid symlink.

	This change stores the result of doubling sz in another local variable s,
	so as not to modify sz. Also remove unnecessary grub_add(), which increased
	the output by 1, presumably to account for a NULL byte. This isn't needed
	because an output buffer of size twice sz is already guaranteed to be more
	than enough to contain the path components converted to UTF-8. The value of
	sz contains at least 4 bytes for the path component header (ECMA-167 14.16.1),
	which means that 2 * 4 bytes are allocated but will not be used for UTF-8
	characters, so the NULL byte is accounted for.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-09-20  Chris Vogel  <chris@z9.de>

	templates: Add GRUB_CMDLINE_LINUX_RECOVERY
	When generating grub.cfg using grub-mkconfig and the scripts 10_linux and
	20_linux_xen there is no way to add kernel command line parameters _only_ to
	the recovery entries generated.

	This is needed to e.g. start a debug shell in installations using systemd
	using the kernel command line parameter "systemd.debug-shell" or to recover
	in a system with encrypted root in situations where the decryption of the
	root filesystem per crypttab in the intiramfs image is broken and the recovery
	entry should contain information how to decrypt the rootfs (cryptopts=).

	This patch does not change the default behaviour of the GRUB if
	GRUB_CMDLINE_LINUX_RECOVERY is not set.

	If GRUB_CMDLINE_LINUX_RECOVERY is set and the generated recovery entry should
	include the kernel parameter "single" the parameter must be explicitly included
	in GRUB_CMDLINE_LINUX_RECOVERY.

	As far as I know all credits for the idea and the initial implementation go to
	Kyle Ranking of Purism.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-09-20  Michael Chang  <mchang@suse.com>

	emu: Fix executable stack marking
	The gcc by default assumes executable stack is required if the source
	object file doesn't have .note.GNU-stack section in place. If any of the
	source objects doesn't incorporate the GNU-stack note, the resulting
	program will have executable stack flag set in PT_GNU_STACK program
	header to instruct program loader or kernel to set up the executable
	stack when program loads to memory.

	Usually the .note.GNU-stack section will be generated by gcc
	automatically if it finds that executable stack is not required. However
	it doesn't take care of generating .note.GNU-stack section for those
	object files built from assembler sources. This leads to unnecessary
	risk of security of exploiting the executable stack because those
	assembler sources don't actually require stack to be executable to work.

	The grub-emu and grub-emu-lite are found to flag stack as executable
	revealed by execstack tool.

	 $ mkdir -p build-emu && cd build-emu
	 $ ../configure --with-platform=emu && make
	 $ execstack -q grub-core/grub-emu grub-core/grub-emu-lite
	 X grub-core/grub-emu
	 X grub-core/grub-emu-lite

	This patch will add the missing GNU-stack note to the assembler source
	used by both utilities, therefore the result doesn't count on gcc
	default behavior and the executable stack is disabled.

	 $ execstack -q grub-core/grub-emu grub-core/grub-emu-lite
	 - grub-core/grub-emu
	 - grub-core/grub-emu-lite

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-09-13  Thomas Schmitt  <scdbackup@gmx.net>

	tests: Keep grub-fs-tester ziso9660 from failing for wrong reasons
	The test for the ability to decompress zisofs encoded files is supposed
	to fail due to the lack of this ability in GRUB. But it fails early with
	  xorriso : FAILURE : -volid: Text too long (1650 > 32)
	because "ziso9660" is not in the list of filesystems which accept at most
	32 bytes in their FSLABEL. If this is fixed, the test returns false
	success because the xorriso run does not produce any zisofs compressed
	files. The problem is in the sequence of native xorriso commands used.
	The command -set_filter_r applies only to the files which are already
	inserted into the emerging ISO filesystem. In the current sequence no
	files have been inserted yet by command -add when the last of two
	-set_filter_r commands is executed. After this is corrected, xorriso
	refuses to work because the global settings of command -zisofs can be
	made only before command -set_filter_r has attached zisofs filters to
	the data files in the emerging ISO. Further: A bug in xorriso causes
	a false warning about FSLABEL being too long for Joliet. Shortcomings
	of Joliet cause warnings about symbolic links. Such warnings might
	distract from the actual reason why the test is expected to fail.

	So, add "ziso9660" to the 32-byte FSLABEL list.

	Fix the xorriso run to produce compressed files which for now cause
	righteous failure of the test. Do this by removing a surplus group of
	-set_filter_r and -zisofs commands, by moving the other such group
	behind -add, and by swapping -set_filter_r and -zisofs.

	Remove the -as mkisofs options which produce a Joliet filesystem tree.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-09-13  Glenn Washburn  <development@efficientek.com>

	commands/read: Add silent mode to read command to suppress input echo
	This conforms to the behavior of the -s option of the Bash read command.

	docs/grub: Document the -s option for the read command.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-09-13  Glenn Washburn  <development@efficientek.com>

	kern/fs: Allow number of blocks in block list to be optional, defaulting length to device length
	This is primarily useful to do something like "loopback newdev (dev)8+" to
	create a device that skips the first 4 KiB, which may contain a container
	header, e.g. a non-standard RAID1 header, that GRUB does not recognize. This
	would allow that container data to be potentially accessed up to the end of
	container, which may be necessary for some layouts that store data at the
	end. There is currently not a good way to programmatically get the number
	of sectors on a disk to set the appropriate length of the blocklist.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-09-06  Petr Vorel  <pvorel@suse.cz>

	autogen.sh: Detect python
	It helps to avoid an error on distros which has only python3 binary:
	  ./autogen.sh: line 20: python: command not found

	Use python3 as the default as python2 is EOL since Jan 2020. However,
	check also for python which is on most distros, if not all, python2
	because code still works on python2.

	Although it should not be needed keep the possibility to define PYTHON
	variable.

	For detection use "command -v" which is POSIX and supported on all
	common shells (bash, zsh, dash, busybox sh, mksh) instead requiring
	"which" as an extra dependency (usable on containers).

	Update the INSTALL file too.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-09-06  Petr Vorel  <pvorel@suse.cz>

	bootstrap: Require GNU patch
	The bootstrap.conf uses patch, let's require it.

	Better than multiple messages:
	  ./bootstrap.conf: line 84: patch: command not found

	Mention it also in the INSTALL file.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-09-06  Thomas Schmitt  <scdbackup@gmx.net>

	tests: Let xorriso fixely assume UTF-8 as local character set
	The iso9660_test fails if the effective locale is not UTF-8. This happens
	because xorriso needs to convert file names and FSLABEL to UCS-2 when
	preparing a Joliet tree. The grub-fs-tester obviously intends to use UTF-8
	as character set, but xorriso assumes by default the result of nl_langinfo(3)
	with item CODESET. So, override the result of nl_langinfo(CODESET) by options
	of xorriso -as mkisofs.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-09-06  Fangrui Song via Grub-devel  <grub-devel@gnu.org>

	configure: Check for -falign-jumps=1 beside -falign-loops=1
	The Clang does not support -falign-jumps and only recently gained support
	for -falign-loops. The -falign-jumps=1 should be tested beside
	-fliang-loops=1 to avoid passing unrecognized options to the Clang:

	  clang-14: error: optimization flag '-falign-jumps=1' is not supported [-Werror,-Wignored-optimization-argument]

	The -falign-functions=1 is supported by GCC 5.1.0/Clang 3.8.0. So, just
	add the option unconditionally.

	Acked-by: Paul Menzel <pmenzel@molgen.mpg.de>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-09-06  Fangrui Song via Grub-devel  <grub-devel@gnu.org>

	configure: Remove obsoleted -malign-{jumps, loops, functions}
	The GCC warns "cc1: warning: ‘-malign-loops’ is obsolete, use ‘-falign-loops’".
	The Clang silently ignores -malign-{jumps,loops,functions}.

	The preferred -falign-* forms have been supported since GCC 3.2. So, just
	remove -malign-{jumps,loops,functions}.

	Acked-by: Paul Menzel <pmenzel@molgen.mpg.de>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-09-06  Erwan Velu  <erwanaliasr1@gmail.com>

	fs/xfs: Fix unreadable filesystem with v4 superblock
	The commit 8b1e5d193 (fs/xfs: Add bigtime incompat feature support)
	introduced the bigtime support by adding some features in v3 inodes.
	This change extended grub_xfs_inode struct by 76 bytes but also changed
	the computation of XFS_V2_INODE_SIZE and XFS_V3_INODE_SIZE. Prior this
	commit, XFS_V2_INODE_SIZE was 100 bytes. After the commit it's 84 bytes
	XFS_V2_INODE_SIZE becomes 16 bytes too small.

	As a result, the data structures aren't properly aligned and the GRUB
	generates "attempt to read or write outside of partition" errors when
	trying to read the XFS filesystem:

	                             GNU GRUB  version 2.11
		....
		grub> set debug=efi,gpt,xfs
		grub> insmod part_gpt
		grub> ls (hd0,gpt1)/
		partmap/gpt.c:93: Read a valid GPT header
		partmap/gpt.c:115: GPT entry 0: start=4096, length=1953125
		fs/xfs.c:931: Reading sb
		fs/xfs.c:270: Validating superblock
		fs/xfs.c:295: XFS v4 superblock detected
		fs/xfs.c:962: Reading root ino 128
		fs/xfs.c:515: Reading inode (128) - 64, 0
		fs/xfs.c:515: Reading inode (739521961424144223) - 344365866970255880, 3840
		error: attempt to read or write outside of partition.

	This commit change the XFS_V2_INODE_SIZE computation by subtracting 76
	bytes instead of 92 bytes from the actual size of grub_xfs_inode struct.
	This 76 bytes value comes from added members:
		20 grub_uint8_t   unused5
		 1 grub_uint64_t  flags2
	        48 grub_uint8_t   unused6

	This patch explicitly splits the v2 and v3 parts of the structure.
	The unused4 is still ending of the v2 structures and the v3 starts
	at unused5. Thanks to this we will avoid future corruptions of v2
	or v3 inodes.

	The XFS_V2_INODE_SIZE is returning to its expected size and the
	filesystem is back to a readable state:

	                      GNU GRUB  version 2.11
		....
		grub> set debug=efi,gpt,xfs
		grub> insmod part_gpt
		grub> ls (hd0,gpt1)/
		partmap/gpt.c:93: Read a valid GPT header
		partmap/gpt.c:115: GPT entry 0: start=4096, length=1953125
		fs/xfs.c:931: Reading sb
		fs/xfs.c:270: Validating superblock
		fs/xfs.c:295: XFS v4 superblock detected
		fs/xfs.c:962: Reading root ino 128
		fs/xfs.c:515: Reading inode (128) - 64, 0
		fs/xfs.c:515: Reading inode (128) - 64, 0
		fs/xfs.c:931: Reading sb
		fs/xfs.c:270: Validating superblock
		fs/xfs.c:295: XFS v4 superblock detected
		fs/xfs.c:962: Reading root ino 128
		fs/xfs.c:515: Reading inode (128) - 64, 0
		fs/xfs.c:515: Reading inode (128) - 64, 0
		fs/xfs.c:515: Reading inode (128) - 64, 0
		fs/xfs.c:515: Reading inode (131) - 64, 768
		efi/ fs/xfs.c:515: Reading inode (3145856) - 1464904, 0
		grub2/ fs/xfs.c:515: Reading inode (132) - 64, 1024
		grub/ fs/xfs.c:515: Reading inode (139) - 64, 2816
		grub>

	Fixes: 8b1e5d193 (fs/xfs: Add bigtime incompat feature support)

	Tested-by: Carlos Maiolino <cmaiolino@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-09-06  Heinrich Schuchardt  <heinrich.schuchardt@canonical.com>

	libgcrypt: Avoid -Wempty-body in rijndael do_setkey()
	Avoid a warning

	  lib/libgcrypt-grub/cipher/rijndael.c:229:9:
	  warning: suggest braces around empty body in an ‘if’ statement [-Wempty-body]
	    229 |         ;
	        |         ^

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-09-06  Heinrich Schuchardt  <heinrich.schuchardt@canonical.com>

	libgcrypt: Avoid -Wsign-compare in rijndael do_setkey()
	Avoid a warning

	  lib/libgcrypt-grub/cipher/rijndael.c:352:21: warning:
	  comparison of integer expressions of different signedness:
	  ‘int’ and ‘unsigned int’ [-Wsign-compare]
	    352 |       for (i = 0; i < keylen; i++)
	        |

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-09-06  Wouter van Kesteren  <woutershep@gmail.com>

	commands/setpci: Honor write mask argument
	In the case that one passes a write mask with ":" the write_mask is
	obtained from grub_strtoul() and then promptly overwritten by 0xffffffff
	three lines later.

	This appears to have been so since the initial version of setpci in 2009.
	I'm surprised no one else has hit this issue in the past 12 years...

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-07-22  Jeff Mahoney  <jeffm@suse.com>

	osdep/linux/hostdisk: Use stat() instead of udevadm for partition lookup
	The sysfs_partition_path() calls udevadm to resolve the sysfs path for
	a block device. That can be accomplished by stating the device node
	and using the major/minor to follow the symlinks in /sys/dev/block/.

	This cuts the execution time of grub-mkconfig to somewhere near 55% on
	system without LVM (which uses libdevmapper instead sysfs_partition_path()).

	Remove udevadm call as it does not help us more than calling stat() directly.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-07-22  Petr Vorel  <pvorel@suse.cz>

	osdep: Introduce include/grub/osdep/major.h and use it
	... to factor out fix for glibc 2.25 introduced in 7a5b301e3 (build: Use
	AC_HEADER_MAJOR to find device macros).

	Note: Once glibc 2.25 is old enough and this fix is not needed also
	AC_HEADER_MAJOR in configure.ac should be removed.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-07-22  Daniel Axtens  <dja@axtens.net>

	ieee1275: Drop HEAP_MAX_ADDR and HEAP_MIN_SIZE constants
	The HEAP_MAX_ADDR is confusing. Currently it is set to 32MB, except on
	ieee1275 on x86, where it is 64MB.

	There is a comment which purports to explain it:

	  /* If possible, we will avoid claiming heap above this address, because it
	     seems to cause relocation problems with OSes that link at 4 MiB */

	This doesn't make a lot of sense when the constants are well above 4MB
	already. It was not always this way. Prior to commit 7b5d0fe4440c
	(Increase heap limit) in 2010, HEAP_MAX_SIZE and HEAP_MAX_ADDR were
	indeed 4MB. However, when the constants were increased the comment was
	left unchanged.

	It's been over a decade. It doesn't seem like we have problems with
	claims over 4MB on powerpc or x86 ieee1275. The SPARC does things
	completely differently and never used the constant.

	Drop the constant and the check.

	The only use of HEAP_MIN_SIZE was to potentially override the
	HEAP_MAX_ADDR check. It is now unused. Remove it too.

	Tested-by: Stefan Berger <stefanb@linux.ibm.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-07-22  Marius Bakke  <marius@gnu.org>

	tests/ahci: Change "ide-drive" deprecated QEMU device name to "ide-hd"
	The "ide-drive" device was removed in QEMU 6.0. The "ide-hd" has been
	available for more than 10 years now in QEMU. Thus there shouldn't be
	any need for backwards compatible names.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-07-22  Javier Martinez Canillas  <javierm@redhat.com>

	fs/ext2: Ignore checksum seed incompat feature
	This incompat feature is used to denote that the filesystem stored its
	metadata checksum seed in the superblock. This is used to allow tune2fs
	changing the UUID on a mounted metdata_csum filesystem without having
	to rewrite all the disk metadata. However, the GRUB doesn't use the
	metadata checksum at all. So, it can just ignore this feature if it
	is enabled. This is consistent with the GRUB filesystem code in general
	which just does a best effort to access the filesystem's data.

	The checksum seed incompat feature has to be removed from the ignore
	list if the support for metadata checksum verification is added to the
	GRUB ext2 driver later.

	Suggested-by: Eric Sandeen <esandeen@redhat.com>
	Suggested-by: Lukas Czerner <lczerner@redhat.com>
	Reviewed-by: Lukas Czerner <lczerner@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-06-08  Glenn Washburn  <development@efficientek.com>

	zfs: Use grub_uint64_t instead of 1ULL in BF64_*CODE() macros
	The underlying type of 1ULL does not change across architectures but
	grub_uint64_t does. This allows using the BF64_*CODE() macros as
	arguments to format string functions that use the PRI* format string
	macros that also vary with architecture.

	Change the grub_error() call, where this was previously an issue and
	temporarily fixed by casting and using a format string literal code,
	to now use PRI* macros and remove casting.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-06-08  Daniel Kiper  <daniel.kiper@oracle.com>

	Bump version to 2.11
	Skip versions between 2.07 and 2.10 to avoid leading zeros in minor
	version number. This way version parsing in scripts should be easier.

	Release 2.06

2021-06-08  Daniel Kiper  <daniel.kiper@oracle.com>

	SECURITY: Add SECURITY file
	The SECURITY file describes the GRUB project security policy.

	It is based on https://github.com/wireapp/wire/blob/master/SECURITY.md

2021-06-08  Daniel Kiper  <daniel.kiper@oracle.com>

	MAINTAINERS: Add MAINTAINERS file
	The MAINTAINERS file provides basic information about the GRUB project
	and its maintainers.

2021-06-01  Dimitri John Ledkov  <xnox@ubuntu.com>

	grub-install: Add backup and restore
	Refactor clean_grub_dir() to create a backup of all the files, instead
	of just irrevocably removing them as the first action. If available,
	register atexit() handler to restore the backup if errors occur before
	point of no return, or remove the backup if everything was successful.
	If atexit() is not available, the backup remains on disk for manual
	recovery.

	Some platforms defined a point of no return, i.e. after modules & core
	images were updated. Failures from any commands after that stage are
	ignored, and backup is cleaned up. For example, on EFI platforms update
	is not reverted when efibootmgr fails.

	Extra care is taken to ensure atexit() handler is only invoked by the
	parent process and not any children forks. Some older GRUB codebases
	can invoke parent atexit() hooks from forks, which can mess up the
	backup.

	This allows safer upgrades of MBR & modules, such that
	modules/images/fonts/translations are consistent with MBR in case of
	errors. For example accidental grub-install /dev/non-existent-disk
	currently clobbers and upgrades modules in /boot/grub, despite not
	actually updating any MBR.

	This patch only handles backup and restore of files copied to /boot/grub.
	This patch does not perform backup (or restoration) of MBR itself or
	blocklists. Thus when installing i386-pc platform, corruption may still
	occur with MBR and blocklists which will not be attempted to be
	automatically recovered.

	Also add modinfo.sh and *.efi to the cleanup/backup/restore code path,
	to ensure it is also cleaned, backed up and restored.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-06-01  Dimitri John Ledkov  <xnox@ubuntu.com>

	osdep/unix/exec: Avoid atexit() handlers when child execvp() fails
	The functions grub_util_exec_pipe() and grub_util_exec_pipe_stderr()
	currently call execvp(). If the call fails for any reason, the child
	currently calls exit(127). This in turn executes the parents
	atexit() handlers from the forked child, and then the same handlers
	are called again from parent. This is usually not desired, and can
	lead to deadlocks, and undesired behavior. So, change the exit() calls
	to _exit() calls to avoid calling atexit() handlers from child.

	Fixes: e75cf4a58 (unix exec: avoid atexit handlers when child exits)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-06-01  Jan (janneke) Nieuwenhuizen  <janneke@gnu.org>

	lib/i386/relocator64: Build fixes for i386
	This fixes cross-compiling to x86 (e.g., the Hurd) from x86-linux of

	    grub-core/lib/i386/relocator64.S

	This file has six sections that only build with a 64-bit assembler,
	yet only the first two sections had support for a 32-bit assembler.
	This patch completes this for the remaining sections.

	To reproduce, update the GRUB source description in your local Guix
	archive and run

	   ./pre-inst-env guix build --system=i686-linux --target=i586-pc-gnu grub

	or install an x86 cross-build environment on x86-linux (32-bit!) and
	configure to cross build and make, e.g., do something like

	    ./configure \
	       CC_FOR_BUILD=gcc \
	       --build=i686-unknown-linux-gnu \
	       --host=i586-pc-gnu
	    make

	Additionally, remove a line with redundant spaces.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-06-01  Javier Martinez Canillas  <javierm@redhat.com>

	fs/xfs: Add needsrepair incompat feature support
	The XFS now has an incompat feature flag to indicate that a filesystem
	needs to be repaired. The Linux kernel refuses to mount the filesystem
	that has it set and only the xfs_repair tool is able to clear that flag.

	The GRUB doesn't have the concept of mounting filesystems and just
	attempts to read the files. But it does some sanity checking before
	attempting to read from the filesystem. Among the things which are tested,
	is if the super block only has set of incompatible features flags that
	are supported by GRUB. If it contains any flags that are not listed as
	supported, reading the XFS filesystem fails.

	Since the GRUB doesn't attempt to detect if the filesystem is inconsistent
	nor replays the journal, the filesystem access is a best effort. For this
	reason, ignore if the filesystem needs to be repaired and just print a debug
	message. That way, if reading or booting fails later, the user is able to
	figure out that the failures can be related to broken XFS filesystem.

	Suggested-by: Eric Sandeen <esandeen@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-06-01  Carlos Maiolino  <cmaiolino@redhat.com>

	fs/xfs: Add bigtime incompat feature support
	The XFS filesystem supports a bigtime feature to overcome y2038 problem.
	This patch makes the GRUB able to support the XFS filesystems with this
	feature enabled.

	The XFS counter for the bigtime enabled timestamps starts at 0, which
	translates to GRUB_INT32_MIN (Dec 31 20:45:52 UTC 1901) in the legacy
	timestamps. The conversion to Unix timestamps is made before passing the
	value to other GRUB functions.

	For this to work properly, GRUB requires an access to flags2 field in the
	XFS ondisk inode. So, the grub_xfs_inode structure has been updated to
	cover full ondisk inode.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-06-01  Carlos Maiolino  <cmaiolino@redhat.com>

	fs: Use 64-bit type for filesystem timestamp
	Some filesystems nowadays use 64-bit types for timestamps. So, update
	grub_dirhook_info struct to use an grub_int64_t type to store mtime.
	This also updates the grub_unixtime2datetime() function to receive
	a 64-bit timestamp argument and do 64-bit-safe divisions.

	All the remaining conversion from 32-bit to 64-bit should be safe, as
	32-bit to 64-bit attributions will be implicitly casted. The most
	critical part in the 32-bit to 64-bit conversion is in the function
	grub_unixtime2datetime() where it needs to deal with the 64-bit type.
	So, for that, the grub_divmod64() helper has been used.

	These changes enables the GRUB to support dates beyond y2038.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-05-28  Javier Martinez Canillas  <javierm@redhat.com>

	types: Define PRI{x,d}GRUB_INT{32,64}_T format specifiers
	There are already PRI*_T constants defined for unsigned integers but not
	for signed integers. Add format specifiers for the latter.

	Suggested-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-05-28  Tianjia Zhang  <tianjia.zhang@linux.alibaba.com>

	kern/efi/sb: Remove duplicate efi_shim_lock_guid variable
	The efi_shim_lock_guid local variable and shim_lock_guid global variable
	have the same GUID value. Only the latter is retained.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-05-10  Javier Martinez Canillas  <javierm@redhat.com>

	util/mkimage: Fix wrong PE32+ section sizes for some arches
	The commit f60ba9e5945 (util/mkimage: Refactor section setup to use a helper)
	added a helper function to setup PE sections. But it also changed how the
	raw data offsets were calculated since all the section sizes are aligned.
	However, for some platforms, i.e ia64-efi and arm64-efi, the kernel image
	size is not aligned using the section alignment. This leads to the situation
	in which the mods section offset in its PE section header does not match its
	real placement in the PE file. So, finally the GRUB is not able to locate
	and load built-in modules.

	The problem surfaces on ia64-efi and arm64-efi because both platforms
	require additional relocation data which is added behind .bss section.
	So, we have to add some padding behind this extra data to make the
	beginning of mods section properly aligned in the PE file. Fix it by
	aligning the kernel_size to the section alignment. That makes the sizes
	and offsets in the PE section headers to match relevant sections in the
	PE32+ binary file.

	Reported-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
	Tested-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-05-10  Daniel Kiper  <daniel.kiper@oracle.com>

	term/terminfo: Fix the terminfo command help and documentation
	Additionally, fix the terminfo spelling mistake in
	the GRUB development documentation.

	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>

2021-05-10  Daniel Kiper  <daniel.kiper@oracle.com>

	i18n: Align N_() formatting with the rest of GRUB code
	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>

2021-05-10  Daniel Kiper  <daniel.kiper@oracle.com>

	i18n: Format large integers before the translation message - take 2
	This is an additional fix which has been missing from the commit 837fe48de
	(i18n: Format large integers before the translation message).

	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>

2021-04-13  Miguel Ángel Arruga Vivas  <rosen644835@gmail.com>

	i18n: Format large integers before the translation message
	The GNU gettext only supports the ISO C99 macros for integral
	types. If there is a need to use unsupported formatting macros,
	e.g. PRIuGRUB_UINT64_T, according to [1] the number to a string
	conversion should be separated from the code printing message
	requiring the internationalization. So, the function grub_snprintf()
	is used to print the numeric values to an intermediate buffer and
	the internationalized message contains a string format directive.

	[1] https://www.gnu.org/software/gettext/manual/html_node/Preparing-Strings.html#No-string-concatenation

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-04-12  Daniel Axtens  <dja@axtens.net>

	video/fb/fbfill: Use unsigned integers for width/height
	Since commit 7ce3259f67ac (video/fb/fbfill: Fix potential integer
	overflow), clang builds of grub-emu have failed with messages like:

	  /usr/bin/ld: libgrubmods.a(libgrubmods_a-fbfill.o): in function `grub_video_fbfill_direct24':
	  fbfill.c:(.text+0x28e): undefined reference to `__muloti4'

	This appears to be due to a weird quirk in how clang compiles

	  grub_mul(dst->mode_info->bytes_per_pixel, width, &rowskip)

	which is grub_mul(unsigned int, int, &grub_size_t).

	It looks like clang somewhere promotes everything to 128-bit maths
	before ultimately reducing down to 64 bit for grub_size_t. I think
	this is because width is signed, and indeed converting width to an
	unsigned int makes the problem go away.

	This conversion also makes more sense generally:
	  - the caller of all the fbfill_directN functions is
	    grub_video_fb_fill_dispatch() and it takes width and height as
	    unsigned ints already,
	  - it doesn't make sense to fill a negative width or height.

	Convert the width and height arguments and associated loop counters
	to unsigned ints.

	Fixes: 7ce3259f67ac (video/fb/fbfill: Fix potential integer overflow)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-04-12  Glenn Washburn  <development@efficientek.com>

	docs: Conform badmem and cutmem description indentations with other commands
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	docs: Add note to cryptomount that UUIDs should be specified without dashes
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-04-12  Aru Sahni  <aru@arusahni.net>

	templates: Fix user-facing typo with an incorrect use of "it's"
	Since the possessive form of "it" is being used, the apostrophe must be omitted.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-04-12  Colin Watson  <cjwatson@debian.org>

	buffer: Sync up out-of-range error message
	The messages associated with other similar GRUB_ERR_OUT_OF_RANGE errors
	were lacking the trailing full stop. Syncing up the strings saves a small
	amount of precious core image space on i386-pc.

	  DOWN: obj/i386-pc/grub-core/kernel.img (31740 > 31708) - change: -32
	  DOWN: i386-pc core image (biosdisk ext2 part_msdos) (27453 > 27452) - change: -1
	  DOWN: i386-pc core image (biosdisk ext2 part_msdos diskfilter mdraid09) (32367 > 32359) - change: -8

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-04-12  Glenn Washburn  <development@efficientek.com>

	usb/usbhub: Use GRUB_USB_MAX_CONF macro instead of literal in hub for maximum configs
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-04-12  Daniel Drake  <drake@endlessm.com>

	fs/minix: Avoid mistakenly probing ext2 filesystems
	The ext2 (and ext3, ext4) filesystems write the number of free inodes to
	location 0x410.

	On a MINIX filesystem, that same location is used for the MINIX superblock
	magic number.

	If the number of free inodes on an ext2 filesystem is equal to any
	of the four MINIX superblock magic values plus any multiple of 65536,
	GRUB's MINIX filesystem code will probe it as a MINIX filesystem.

	In the case of an OS using ext2 as the root filesystem, since there will
	ordinarily be some amount of file creation and deletion on every bootup,
	it effectively means that this situation has a 1:16384 chance of being hit
	on every reboot.

	This will cause GRUB's filesystem probing code to mistakenly identify an
	ext2 filesystem as MINIX. This can be seen by e.g. "search --label"
	incorrectly indicating that no such ext2 partition with matching label
	exists, whereas in fact it does.

	After spotting the rough cause of the issue I was facing here, I borrowed
	much of the diagnosis/explanation from meierfra who found and investigated
	the same issue in util-linux in 2010:

	  https://bugs.launchpad.net/ubuntu/+source/util-linux/+bug/518582

	This was fixed in util-linux by having the MINIX code check for the
	ext2 magic. Do the same here.

	Reviewed-by: Derek Foreman <derek@endlessos.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-12  Daniel Kiper  <daniel.kiper@oracle.com>

	Release 2.06~rc1

2021-03-11  Ard Biesheuvel  <ard.biesheuvel@arm.com>

	arm/linux: Fix ARM Linux header layout
	The hdr_offset member of the ARM Linux image header appears at
	offset 0x3c, matching the PE/COFF spec's placement of the COFF
	header offset in the MS-DOS header. We're currently off by four,
	so fix that.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Glenn Washburn  <development@efficientek.com>

	style: Format string macro should have a space between quotes
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Glenn Washburn  <development@efficientek.com>

	grub/err: Do compile-time format string checking on grub_error()
	This should help prevent format string errors and thus improve the quality
	of error reporting.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Glenn Washburn  <development@efficientek.com>

	fs/zfs/zfs: Use format code "%llu" for 64-bit uint bp->blk_prop in grub_error()
	This is a temporary, less-intrusive change to get the build to success with
	compiler format string checking turned on. There is a better fix which
	addresses this issue, but it needs more testing. Use this change so that
	format string checking on grub_error() can be turned on until the better
	change is fully tested.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Glenn Washburn  <development@efficientek.com>

	fs/hfsplus: Use format code PRIuGRUB_UINT64_T for 64-bit typed fileblock in grub_error()
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Glenn Washburn  <development@efficientek.com>

	dl/elf: Use format code PRIxGRUB_UINT64_T for 64-bit arg in grub_error()
	The macro ELF_R_TYPE does not change the underlying type. Here its argument
	is a 64-bit Elf64_Xword. Make sure the format code matches.

	For the RISC-V architecture, rel->r_info could be either Elf32_Xword or
	Elf64_Xword depending on if 32 or 64-bit RISC-V is being built. So cast
	to 64-bit value regardless.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Glenn Washburn  <development@efficientek.com>

	disk/ata: Use format code PRIxGRUB_UINT64_T for 64-bit uint argument in grub_error()
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Glenn Washburn  <development@efficientek.com>

	loader/i386/pc/linux: Use PRI* macros to get correct format string code across architectures
	Also remove casting of format string args so that the architecture dependent
	type is preserved.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Glenn Washburn  <development@efficientek.com>

	kern/efi/mm: Format string error in grub_error()
	The second format string argument, GRUB_EFI_MAX_USABLE_ADDRESS, is a macro
	to a number literal. However, depending on what the target architecture, the
	type can be 32 or 64 bits. Cast to a 64-bit integer. Also, change the
	format string literals "%llx" to use PRIxGRUB_UINT64_T.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Glenn Washburn  <development@efficientek.com>

	commands/pgp: Format code for grub_error() is incorrect
	The format code is for a 32-bit int, but the argument, keyid, is declared as
	a 64 bit int. The comment above says keyid is 32-bit. I'm not sure if the
	comment or declaration is wrong, so force the display of a 64-bit int for now.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Glenn Washburn  <development@efficientek.com>

	grub_error: Use format code PRIuGRUB_SIZE for variables of type grub_size_t
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Glenn Washburn  <development@efficientek.com>

	disk/dmraid_nvidia: Format string error in grub_error()
	The grub_error() has a format string expecting two arguments, but only one
	provided. According to the comments in the struct grub_nv_super definition,
	the version field looks like a version number where major.minor is encoded
	as each a byte in the two-byte short.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Glenn Washburn  <development@efficientek.com>

	video/bochs: grub_error() format string add missing format code
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Glenn Washburn  <development@efficientek.com>

	parttool/msdospart: grub_error() missing format string argument
	Its obvious from the error message that the variable named "type" was
	accidentally omitted.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Glenn Washburn  <development@efficientek.com>

	misc: Format string for grub_error() should be a literal
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Philip Müller  <philm@manjaro.org>

	templates: Properly disable the os-prober by default
	This patch does the following:
	 - really disables os-prober by default in the util/grub-mkconfig.in
	   by setting GRUB_DISABLE_OS_PROBER to true,
	 - fixes the logic in the util/grub.d/30_os-prober.in,
	 - updates the grub_warn() lines.

	Reason for the code shuffling in the util/grub-mkconfig.in:

	  The default was GRUB_DISABLE_OS_PROBER=false if you don't set
	  GRUB_DISABLE_OS_PROBER at all. To prevent os-prober from starting we
	  have to set it by default to true and shuffle GRUB_DISABLE_OS_PROBER to
	  code section, which is executed by the script. However we still give an
	  option to the user to overwrite it with false, if he wants to execute
	  os-prober after all.

	Fixes: e3464147 (templates: Disable the os-prober by default)

	Reported-by: Didier Spaier <didier@slint.fr>
	Reported-by: Lennart Sorensen <lsorense@csclub.uwaterloo.ca>
	Reported-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Michael Chang  <mchang@suse.com>

	kern/efi/sb: Add chainloaded image as shim's verifiable object
	While attempting to dual boot Microsoft Windows with UEFI chainloader,
	it failed with below error when UEFI Secure Boot was enabled:

	  error ../../grub-core/kern/verifiers.c:119:verification requested but
	  nobody cares: /EFI/Microsoft/Boot/bootmgfw.efi.

	It is a regression, as previously it worked without any problem.

	It turns out chainloading PE image has been locked down by commit
	578c95298 (kern: Add lockdown support). However, we should consider it
	as verifiable object by shim to allow booting in UEFI Secure Boot mode.
	The chainloaded PE image could also have trusted signature created by
	vendor with their pubkey cert in db. For that matters it's usage should
	not be locked down under UEFI Secure Boot, and instead shim should be
	allowed to validate a PE binary signature before running it.

	Fixes: 578c95298 (kern: Add lockdown support)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Glenn Washburn  <development@efficientek.com>

	disk/pata: Suppress error message "no device connected"
	This error message comes from the grub_print_error() in
	grub_pata_device_initialize(), which does not pass on the error, and is
	raised in check_device(). The function check_device() needs to return this
	as an error because check_device() is also used in grub_pata_open(), which
	does pass on this error to indicate that the device can not be used.

	This is actually not an error when displayed by grub_pata_device_initialize()
	because it just indicates that there are no pata devices seen. This may be
	confusing to end users who do not have pata devices yet are loading the
	pata module (perhaps implicitly via nativedisk). This also causes unnecessary
	output which may need to be accounted for in functional testing.

	Instead print to the debug log when check_device() raises this "error" and
	pop the error from the error stack. If there is another error on the stack
	then print the error stack as those should be real errors.

	Acked-by: Paul Menzel <pmenzel@molgen.mpg.de>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-10  Yi Zhao  <yi.zhao@windriver.com>

	fs/ext2: Fix a file not found error when a symlink filesize is equal to 60
	We encountered a file not found error when the symlink filesize is
	equal to 60:

	  $ ls -l initrd
	  lrwxrwxrwx 1 root root 60 Jan  6 16:37 initrd -> secure-core-image-initramfs-5.10.2-yoctodev-standard.cpio.gz

	When booting, we got the following error in the GRUB:

	  error: file `/initrd' not found

	The root cause is that the size of diro->inode.symlink is equal to 60
	and a symlink name has to be terminated with NUL there. So, if the
	symlink filesize is exactly 60 then it is also stored in a separate
	block rather than in the inode itself.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Tianjia Zhang  <tianjia.zhang@linux.alibaba.com>

	loader/i386/linux: Do not use grub_le_to_cpu32() for relocatable variable
	The relocatable variable is defined as grub_uint8_t. Relevant
	member in setup_header structure is also defined as one byte
	in Linux boot protocol. By semantic definition it is a bool type.
	It is not appropriate to treat it as a four bytes. This patch
	fixes the issue.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Tianjia Zhang  <tianjia.zhang@linux.alibaba.com>

	loader/i386/linux: Remove redundant code from in grub_cmd_linux()
	The preferred_address has been assigned to GRUB_LINUX_BZIMAGE_ADDR
	during initialization in grub_cmd_linux(). The assignment here
	is redundant and should be removed.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Heinrich Schuchardt  <xypron.glpk@gmx.de>

	efi: The device-tree must be in EfiACPIReclaimMemory
	According to the Embedded Base Boot Requirements (EBBR) specification the
	device-tree passed to Linux as a configuration table must reside in
	EfiACPIReclaimMemory.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Heinrich Schuchardt  <xypron.glpk@gmx.de>

	commands/efi/lsefisystab: Add short text for EFI_RT_PROPERTIES_TABLE_GUID
	UEFI specification 2.8 errata B introduced the EFI_RT_PROPERTIES_TABLE
	describing the services available at runtime.

	The lsefisystab command is used to display installed EFI configuration
	tables. Currently it only shows the GUID but not a short text for the
	new table.

	Provide a short text for the EFI_RT_PROPERTIES_TABLE_GUID.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Petr Vorel  <pvorel@suse.cz>

	docs/luks2: Mention key derivation function support
	To give users hint why Argon2, the default in cryptsetup for LUKS2, does
	not work.

	Acked-by: Paul Menzel <pmenzel@molgen.mpg.de>
	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Derek Foreman  <derek@endlessos.org>

	commands/file: Fix array/enum desync
	The commit f1957dc8a (RISC-V: Add to build system) added two entries to
	the options array, but only 1 entry to the enum. This resulted in
	everything after the insertion point being off by one.

	This broke at least the "file --is-hibernated-hiberfil" command.

	Bring the two back in sync by splitting the IS_RISCV_EFI enum entry into
	two, as is done for other architectures.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Marco A Benatto  <mbenatto@redhat.com>

	kern/mm: Fix grub_debug_calloc() compilation error
	Fix compilation error due to missing parameter to
	grub_printf() when MM_DEBUG is defined.

	Fixes: 64e26162e (calloc: Make sure we always have an overflow-checking calloc() available)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Alex Burmashev  <alexander.burmashev@oracle.com>

	templates: Disable the os-prober by default
	The os-prober is enabled by default what may lead to potentially
	dangerous use cases and borderline opening attack vectors. This
	patch disables the os-prober, adds warning messages and updates
	GRUB_DISABLE_OS_PROBER configuration option documentation. This
	way we make it clear that the os-prober usage is not recommended.

	Simplistic nature of this change allows downstream vendors, who
	really want os-prober to be enabled out of the box in their
	relevant products, easily revert to it's old behavior.

	Reported-by: NyankoSec (<nyanko@10x.moe>, https://twitter.com/NyankoSec),
	             working with SSD Secure Disclosure
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Thomas Frauendorfer | Miray Software  <tf@miray.de>

	gfxmenu/gui: Check printf() format in the gui_progress_bar and gui_label
	The gui_progress_bar and gui_label components can display the timeout
	value. The format string can be set through a theme file. This patch
	adds a validation step to the format string.

	If a user loads a theme file into the GRUB without this patch then
	a GUI label with the following settings

	  + label {
	  ...
	  id = "__timeout__"
	  text = "%s"
	  }

	will interpret the current timeout value as string pointer and print the
	memory at that position on the screen. It is not desired behavior.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Thomas Frauendorfer | Miray Software  <tf@miray.de>

	kern/misc: Add function to check printf() format against expected format
	The grub_printf_fmt_check() function parses the arguments of an untrusted
	printf() format and an expected printf() format and then compares the
	arguments counts and arguments types. The arguments count in the untrusted
	format string must be less or equal to the arguments count in the expected
	format string and both arguments types must match.

	To do this the parse_printf_arg_fmt() helper function is extended in the
	following way:

	  1. Add a return value to report errors to the grub_printf_fmt_check().

	  2. Add the fmt_check argument to enable stricter format verification:
	     - the function expects that arguments definitions are always
	       terminated by a supported conversion specifier.
	     - positional parameters, "$", are not allowed, as they cannot be
	       validated correctly with the current implementation. For example
	       "%s%1$d" would assign the first args entry twice while leaving the
	       second one unchanged.
	     - Return an error if preallocated space in args is too small and
	       allocation fails for the needed size. The grub_printf_fmt_check()
	       should verify all arguments. So, if validation is not possible for
	       any reason it should return an error.
	     This also adds a case entry to handle "%%", which is the escape
	     sequence to print "%" character.

	  3. Add the max_args argument to check for the maximum allowed arguments
	     count in a printf() string. This should be set to the arguments count
	     of the expected format. Then the parse_printf_arg_fmt() function will
	     return an error if the arguments count is exceeded.

	The two additional arguments allow us to use parse_printf_arg_fmt() in
	printf() and grub_printf_fmt_check() calls.

	When parse_printf_arg_fmt() is used by grub_printf_fmt_check() the
	function parse user provided untrusted format string too. So, in
	that case it is better to be too strict than too lenient.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Thomas Frauendorfer | Miray Software  <tf@miray.de>

	kern/misc: Add STRING type for internal printf() format handling
	Set printf() argument type for "%s" to new type STRING. This is in
	preparation for a follow up patch to compare a printf() format string
	against an expected printf() format string.

	For "%s" the corresponding printf() argument is dereferenced as pointer
	while all other argument types are defined as integer value. However,
	when validating a printf() format it is necessary to differentiate "%s"
	from "%p" and other integers. So, let's do that.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Thomas Frauendorfer | Miray Software  <tf@miray.de>

	kern/misc: Split parse_printf_args() into format parsing and va_list handling
	This patch is preparing for a follow up patch which will use
	the format parsing part to compare the arguments in a printf()
	format from an external source against a printf() format with
	expected arguments.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Dimitri John Ledkov  <xnox@ubuntu.com>

	shim_lock: Only skip loading shim_lock verifier with explicit consent
	Commit 32ddc42c (efi: Only register shim_lock verifier if shim_lock
	protocol is found and SB enabled) reintroduced CVE-2020-15705 which
	previously only existed in the out-of-tree linuxefi patches and was
	fixed as part of the BootHole patch series.

	Under Secure Boot enforce loading shim_lock verifier. Allow skipping
	shim_lock verifier if SecureBoot/MokSBState EFI variables indicate
	skipping validations, or if GRUB image is built with --disable-shim-lock.

	Fixes: 132ddc42c (efi: Only register shim_lock verifier if shim_lock
	       protocol is found and SB enabled)
	Fixes: CVE-2020-15705
	Fixes: CVE-2021-3418

	Reported-by: Dimitri John Ledkov <xnox@ubuntu.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Dimitri John Ledkov  <xnox@ubuntu.com>

	grub-install-common: Add --sbat option
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Peter Jones  <pjones@redhat.com>

	util/mkimage: Add an option to import SBAT metadata into a .sbat section
	Add a --sbat option to the grub-mkimage tool which allows us to import
	an SBAT metadata formatted as a CSV file into a .sbat section of the
	EFI binary.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Peter Jones  <pjones@redhat.com>

	util/mkimage: Refactor section setup to use a helper
	Add a init_pe_section() helper function to setup PE sections. This makes
	the code simpler and easier to read.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Peter Jones  <pjones@redhat.com>

	util/mkimage: Improve data_size value calculation
	According to "Microsoft Portable Executable and Common Object File Format
	Specification", the Optional Header SizeOfInitializedData field contains:

	  Size of the initialized data section, or the sum of all such sections if
	  there are multiple data sections.

	Make this explicit by adding the GRUB kernel data size to the sum of all
	the modules sizes. The ALIGN_UP() is not required by the PE spec but do
	it to avoid alignment issues.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Peter Jones  <pjones@redhat.com>

	util/mkimage: Reorder PE optional header fields set-up
	This makes the PE32 and PE32+ header fields set-up easier to follow by
	setting them closer to the initialization of their related sections.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Peter Jones  <pjones@redhat.com>

	util/mkimage: Unify more of the PE32 and PE32+ header set-up
	There's quite a bit of code duplication in the code that sets the optional
	header for PE32 and PE32+. The two are very similar with the exception of
	a few fields that have type grub_uint64_t instead of grub_uint32_t.

	Factor out the common code and add a PE_OHDR() macro that simplifies the
	set-up and make the code more readable.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Peter Jones  <pjones@redhat.com>

	util/mkimage: Always use grub_host_to_target32() to initialize PE stack and heap stuff
	This change does not impact final result of initialization itself.
	However, it eases PE code unification in subsequent patches.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Peter Jones  <pjones@redhat.com>

	util/mkimage: Use grub_host_to_target32() instead of grub_cpu_to_le32()
	The latter doesn't take into account the target image endianness. There is
	a grub_cpu_to_le32_compile_time() but no compile time variant for function
	grub_host_to_target32(). So, let's keep using the other one for this case.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Javier Martinez Canillas  <javierm@redhat.com>

	util/mkimage: Remove unused code to add BSS section
	The code is compiled out so there is no reason to keep it.

	Additionally, don't set bss_size field since we do not add a BSS section.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Chris Coulson  <chris.coulson@canonical.com>

	kern/efi: Add initial stack protector implementation
	It works only on UEFI platforms but can be quite easily extended to
	others architectures and platforms if needed.

	Reviewed-by: Marco A Benatto <mbenatto@redhat.com>
	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>

2021-03-02  Chris Coulson  <chris.coulson@canonical.com>

	kern/parser: Fix a stack buffer overflow
	grub_parser_split_cmdline() expands variable names present in the supplied
	command line in to their corresponding variable contents and uses a 1 kiB
	stack buffer for temporary storage without sufficient bounds checking. If
	the function is called with a command line that references a variable with
	a sufficiently large payload, it is possible to overflow the stack
	buffer via tab completion, corrupt the stack frame and potentially
	control execution.

	Fixes: CVE-2020-27749

	Reported-by: Chris Coulson <chris.coulson@canonical.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Chris Coulson  <chris.coulson@canonical.com>

	kern/buffer: Add variable sized heap buffer
	Add a new variable sized heap buffer type (grub_buffer_t) with simple
	operations for appending data, accessing the data and maintaining
	a read cursor.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Chris Coulson  <chris.coulson@canonical.com>

	kern/parser: Refactor grub_parser_split_cmdline() cleanup
	Introduce a common function epilogue used for cleaning up on all
	return paths, which will simplify additional error handling to be
	introduced in a subsequent commit.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Chris Coulson  <chris.coulson@canonical.com>

	kern/parser: Introduce terminate_arg() helper
	process_char() and grub_parser_split_cmdline() use similar code for
	terminating the most recent argument. Add a helper function for this.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Chris Coulson  <chris.coulson@canonical.com>

	kern/parser: Introduce process_char() helper
	grub_parser_split_cmdline() iterates over each command line character.
	In order to add error checking and to simplify the subsequent error
	handling, split the character processing in to a separate function.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Chris Coulson  <chris.coulson@canonical.com>

	kern/parser: Fix a memory leak
	The getline() function supplied to grub_parser_split_cmdline() returns
	a newly allocated buffer and can be called multiple times, but the
	returned buffer is never freed.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	fs/btrfs: Squash some uninitialized reads
	We need to check errors before calling into a function that uses the result.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	fs/btrfs: Validate the number of stripes/parities in RAID5/6
	This prevents a divide by zero if nstripes == nparities, and
	also prevents propagation of invalid values if nstripes ends up
	less than nparities.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	disk/lvm: Do not allow a LV to be it's own segment's node's LV
	This prevents infinite recursion in the diskfilter verification code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	disk/lvm: Sanitize rlocn->offset to prevent wild read
	rlocn->offset is read directly from disk and added to the metadatabuf
	pointer to create a pointer to a block of metadata. It's a 64-bit
	quantity so as long as you don't overflow you can set subsequent
	pointers to point anywhere in memory.

	Require that rlocn->offset fits within the metadata buffer size.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	disk/lvm: Do not overread metadata
	We could reach the end of valid metadata and not realize, leading to
	some buffer overreads. Check if we have reached the end and bail.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	disk/lvm: Do not crash if an expected string is not found
	Clean up a bunch of cases where we could have strstr() fail and lead to
	us dereferencing NULL.

	We'll still leak memory in some cases (loops don't clean up allocations
	from earlier iterations if a later iteration fails) but at least we're
	not crashing.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	disk/lvm: Bail on missing PV list
	There's an if block for the presence of "physical_volumes {", but if
	that block is absent, then p remains NULL and a NULL-deref will result
	when looking for logical volumes.

	It doesn't seem like LVM makes sense without physical volumes, so error
	out rather than crashing.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	disk/lvm: Don't blast past the end of the circular metadata buffer
	This catches at least some OOB reads, and it's possible I suppose that
	if 2 * mda_size is less than GRUB_LVM_MDA_HEADER_SIZE it might catch some
	OOB writes too (although that hasn't showed up as a crash in fuzzing yet).

	It's a bit ugly and I'd appreciate better suggestions.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	disk/lvm: Don't go beyond the end of the data we read from disk
	We unconditionally trusted offset_xl from the LVM label header, even if
	it told us that the PV header/disk locations were way off past the end
	of the data we read from disk.

	Require that the offset be sane, fixing an OOB read and crash.

	Fixes: CID 314367, CID 314371

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	io/gzio: Zero gzio->tl/td in init_dynamic_block() if huft_build() fails
	If huft_build() fails, gzio->tl or gzio->td could contain pointers that
	are no longer valid. Zero them out.

	This prevents a double free when grub_gzio_close() comes through and
	attempts to free them again.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	io/gzio: Catch missing values in huft_build() and bail
	In huft_build(), "v" is a table of values in order of bit length.
	The code later (when setting up table entries in "r") assumes that all
	elements of this array corresponding to a code are initialized and less
	than N_MAX. However, it doesn't enforce this.

	With sufficiently manipulated inputs (e.g. from fuzzing), there can be
	elements of "v" that are not filled. Therefore a lookup into "e" or "d"
	will use an uninitialized value. This can lead to an invalid/OOB read on
	those values, often leading to a crash.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	io/gzio: Add init_dynamic_block() clean up if unpacking codes fails
	init_dynamic_block() didn't clean up gzio->tl and td in some error
	paths. This left td pointing to part of tl. Then in grub_gzio_close(),
	when tl was freed the storage for td would also be freed. The code then
	attempts to free td explicitly, performing a UAF and then a double free.

	Explicitly clean up tl and td in the error paths.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	io/gzio: Bail if gzio->tl/td is NULL
	This is an ugly fix that doesn't address why gzio->tl comes to be NULL.
	However, it seems to be sufficient to patch up a bunch of NULL derefs.

	It would be good to revisit this in future and see if we can have
	a cleaner solution that addresses some of the causes of the unexpected
	NULL pointers.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	fs/nilfs2: Properly bail on errors in grub_nilfs2_btree_node_lookup()
	We just introduced an error return in grub_nilfs2_btree_node_lookup().
	Make sure the callers catch it.

	At the same time, make sure that grub_nilfs2_btree_node_lookup() always
	inits the index pointer passed to it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	fs/nilfs2: Don't search children if provided number is too large
	NILFS2 reads the number of children a node has from the node. Unfortunately,
	that's not trustworthy. Check if it's beyond what the filesystem permits and
	reject it if so.

	This blocks some OOB reads. I'm not sure how controllable the read is and what
	could be done with invalidly read data later on.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	fs/nilfs2: Reject too-large keys
	NILFS2 has up to 7 keys, per the data structure. Do not permit array
	indices in excess of that.

	This catches some OOB reads. I don't know how controllable the invalidly
	read data is or if that could be used later in the program.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	fs/jfs: Catch infinite recursion
	It's possible with a fuzzed filesystem for JFS to keep getblk()-ing
	the same data over and over again, leading to stack exhaustion.

	Check if we'd be calling the function with exactly the same data as
	was passed in, and if so abort.

	I'm not sure what the performance impact of this is and am open to
	better ideas.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	fs/jfs: Limit the extents that getblk() can consider
	getblk() implicitly trusts that treehead->count is an accurate count of
	the number of extents. However, that value is read from disk and is not
	trustworthy, leading to OOB reads and crashes. I am not sure to what
	extent the data read from OOB can influence subsequent program execution.

	Require callers to pass in the maximum number of extents for which
	they have storage.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	fs/jfs: Do not move to leaf level if name length is negative
	Fuzzing JFS revealed crashes where a negative number would be passed
	to le_to_cpu16_copy(). There it would be cast to a large positive number
	and the copy would read and write off the end of the respective buffers.

	Catch this at the top as well as the bottom of the loop.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	fs/sfs: Fix over-read of root object name
	There's a read of the name of the root object that assumes that the name
	is nul-terminated within the root block. This isn't guaranteed - it seems
	SFS would require you to read multiple blocks to get a full name in general,
	but maybe that doesn't apply to the root object.

	Either way, figure out how much space is left in the root block and don't
	over-read it. This fixes some OOB reads.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	fs/hfs: Disable under lockdown
	HFS has issues such as infinite mutual recursion that are simply too
	complex to fix for such a legacy format. So simply do not permit
	it to be loaded under lockdown.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	fs/hfsplus: Don't use uninitialized data on corrupt filesystems
	Valgrind identified the following use of uninitialized data:

	  ==2782220== Conditional jump or move depends on uninitialised value(s)
	  ==2782220==    at 0x42B364: grub_hfsplus_btree_search (hfsplus.c:566)
	  ==2782220==    by 0x42B21D: grub_hfsplus_read_block (hfsplus.c:185)
	  ==2782220==    by 0x42A693: grub_fshelp_read_file (fshelp.c:386)
	  ==2782220==    by 0x42C598: grub_hfsplus_read_file (hfsplus.c:219)
	  ==2782220==    by 0x42C598: grub_hfsplus_mount (hfsplus.c:330)
	  ==2782220==    by 0x42B8C5: grub_hfsplus_dir (hfsplus.c:958)
	  ==2782220==    by 0x4C1AE6: grub_fs_probe (fs.c:73)
	  ==2782220==    by 0x407C94: grub_ls_list_files (ls.c:186)
	  ==2782220==    by 0x407C94: grub_cmd_ls (ls.c:284)
	  ==2782220==    by 0x4D7130: grub_extcmd_dispatcher (extcmd.c:55)
	  ==2782220==    by 0x4045A6: execute_command (grub-fstest.c:59)
	  ==2782220==    by 0x4045A6: fstest (grub-fstest.c:433)
	  ==2782220==    by 0x4045A6: main (grub-fstest.c:772)
	  ==2782220==  Uninitialised value was created by a heap allocation
	  ==2782220==    at 0x483C7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
	  ==2782220==    by 0x4C0305: grub_malloc (mm.c:42)
	  ==2782220==    by 0x42C21D: grub_hfsplus_mount (hfsplus.c:239)
	  ==2782220==    by 0x42B8C5: grub_hfsplus_dir (hfsplus.c:958)
	  ==2782220==    by 0x4C1AE6: grub_fs_probe (fs.c:73)
	  ==2782220==    by 0x407C94: grub_ls_list_files (ls.c:186)
	  ==2782220==    by 0x407C94: grub_cmd_ls (ls.c:284)
	  ==2782220==    by 0x4D7130: grub_extcmd_dispatcher (extcmd.c:55)
	  ==2782220==    by 0x4045A6: execute_command (grub-fstest.c:59)
	  ==2782220==    by 0x4045A6: fstest (grub-fstest.c:433)
	  ==2782220==    by 0x4045A6: main (grub-fstest.c:772)

	This happens when the process of reading the catalog file goes sufficiently
	wrong that there's an attempt to read the extent overflow file, which has
	not yet been loaded. Keep track of when the extent overflow file is
	fully loaded and refuse to use it before then.

	The load valgrind doesn't like is btree->nodesize, and that's then used
	to allocate a data structure. It looks like there are subsequently a lot
	of reads based on that pointer so OOB reads are likely, and indeed crashes
	(albeit difficult-to-replicate ones) have been observed in fuzzing.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	fs/hfsplus: Don't fetch a key beyond the end of the node
	Otherwise you get a wild pointer, leading to a bunch of invalid reads.
	Check it falls inside the given node.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	fs/fshelp: Catch impermissibly large block sizes in read helper
	A fuzzed HFS+ filesystem had log2blocksize = 22. This gave
	log2blocksize + GRUB_DISK_SECTOR_BITS = 31. 1 << 31 = 0x80000000,
	which is -1 as an int. This caused some wacky behavior later on in
	the function, leading to out-of-bounds writes on the destination buffer.

	Catch log2blocksize + GRUB_DISK_SECTOR_BITS >= 31. We could be stricter,
	but this is the minimum that will prevent integer size weirdness.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	term/gfxterm: Don't set up a font with glyphs that are too big
	Catch the case where we have a font so big that it causes the number of
	rows or columns to be 0. Currently we continue and allocate a
	virtual_screen.text_buffer of size 0. We then try to use that for glpyhs
	and things go badly.

	On the emu platform, malloc() may give us a valid pointer, in which case
	we'll access heap memory which we shouldn't. Alternatively, it may give us
	NULL, in which case we'll crash. For other platforms, if I understand
	grub_memalign() correctly, we will receive a valid but small allocation
	that we will very likely later overrun.

	Prevent the creation of a virtual screen that isn't at least 40 cols
	by 12 rows. This is arbitrary, but it seems that if your width or height
	is half a standard 80x24 terminal, you're probably going to struggle to
	read anything anyway.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	video/readers/jpeg: Don't decode data before start of stream
	When a start of stream marker is encountered, we call grub_jpeg_decode_sos()
	which allocates space for a bitmap.

	When a restart marker is encountered, we call grub_jpeg_decode_data() which
	then fills in that bitmap.

	If we get a restart marker before the start of stream marker, we will
	attempt to write to a bitmap_ptr that hasn't been allocated. Catch this
	and bail out. This fixes an attempt to write to NULL.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	video/readers/jpeg: Catch OOB reads/writes in grub_jpeg_decode_du()
	The key line is:

	  du[jpeg_zigzag_order[pos]] = val * (int) data->quan_table[qt][pos];

	jpeg_zigzag_order is grub_uint8_t[64].

	I don't understand JPEG decoders quite well enough to explain what's
	going on here. However, I observe sometimes pos=64, which leads to an
	OOB read of the jpeg_zigzag_order global then an OOB write to du.
	That leads to various unpleasant memory corruption conditions.

	Catch where pos >= ARRAY_SIZE(jpeg_zigzag_order) and bail.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	video/readers/jpeg: Catch files with unsupported quantization or Huffman tables
	Our decoder only supports 2 quantization tables. If a file asks for
	a quantization table with index > 1, reject it.

	Similarly, our decoder only supports 4 Huffman tables. If a file asks
	for a Huffman table with index > 3, reject it.

	This fixes some out of bounds reads. It's not clear what degree of control
	over subsequent execution could be gained by someone who can carefully
	set up the contents of memory before loading an invalid JPEG file.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	kern/misc: Always set *end in grub_strtoull()
	Currently, if there is an error in grub_strtoull(), *end is not set.
	This differs from the usual behavior of strtoull(), and also means that
	some callers may use an uninitialized value for *end.

	Set *end unconditionally.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	commands/menuentry: Fix quoting in setparams_prefix()
	Commit 9acdcbf32542 (use single quotes in menuentry setparams command)
	says that expressing a quoted single quote will require 3 characters. It
	actually requires (and always did require!) 4 characters:

	  str: a'b => a'\''b
	  len:  3  => 6 (2 for the letters + 4 for the quote)

	This leads to not allocating enough memory and thus out of bounds writes
	that have been observed to cause heap corruption.

	Allocate 4 bytes for each single quote.

	Commit 22e7dbb2bb81 (Fix quoting in legacy parser.) does the same
	quoting, but it adds 3 as extra overhead on top of the single byte that
	the quote already needs. So it's correct.

	Fixes: 9acdcbf32542 (use single quotes in menuentry setparams command)
	Fixes: CVE-2021-20233

	Reported-by: Daniel Axtens <dja@axtens.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	script/execute: Don't crash on a "for" loop with no items
	The following crashes the parser:

	  for x in; do
	  0
	  done

	This is because grub_script_arglist_to_argv() doesn't consider the
	possibility that arglist is NULL. Catch that explicitly.

	This avoids a NULL pointer dereference.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	lib/arg: Block repeated short options that require an argument
	Fuzzing found the following crash:

	  search -hhhhhhhhhhhhhf

	We didn't allocate enough option space for 13 hints because the
	allocation code counts the number of discrete arguments (i.e. argc).
	However, the shortopt parsing code will happily keep processing
	a combination of short options without checking if those short
	options require an argument. This means you can easily end writing
	past the allocated option space.

	This fixes a OOB write which can cause heap corruption.

	Fixes: CVE-2021-20225

	Reported-by: Daniel Axtens <dja@axtens.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	script/execute: Avoid crash when using "$#" outside a function scope
	"$#" represents the number of arguments to a function. It is only
	defined in a function scope, where "scope" is non-NULL. Currently,
	if we attempt to evaluate "$#" outside a function scope, "scope" will
	be NULL and we will crash with a NULL pointer dereference.

	Do not attempt to count arguments for "$#" if "scope" is NULL. This
	will result in "$#" being interpreted as an empty string if evaluated
	outside a function scope.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	commands/ls: Require device_name is not NULL before printing
	This can be triggered with:
	  ls -l (0 0*)
	and causes a NULL deref in grub_normal_print_device_info().

	I'm not sure if there's any implication with the IEEE 1275 platform.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Axtens  <dja@axtens.net>

	script/execute: Fix NULL dereference in grub_script_execute_cmdline()
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	util/glue-efi: Fix incorrect use of a possibly negative value
	It is possible for the ftell() function to return a negative value,
	although it is fairly unlikely here, we should be checking for
	a negative value before we assign it to an unsigned value.

	Fixes: CID 73744

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	util/grub-editenv: Fix incorrect casting of a signed value
	The return value of ftell() may be negative (-1) on error. While it is
	probably unlikely to occur, we should not blindly cast to an unsigned
	value without first testing that it is not negative.

	Fixes: CID 73856

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Daniel Kiper  <daniel.kiper@oracle.com>

	util/grub-install: Fix NULL pointer dereferences
	Two grub_device_open() calls does not have associated NULL checks
	for returned values. Fix that and appease the Coverity.

	Fixes: CID 314583

	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>

2021-03-02  Paulo Flabiano Smorigo  <pfsmorigo@canonical.com>

	loader/xnu: Check if pointer is NULL before using it
	Fixes: CID 73654

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Marco A Benatto  <mbenatto@redhat.com>

	loader/xnu: Free driverkey data when an error is detected in grub_xnu_writetree_toheap()
	... to avoid memory leaks.

	Fixes: CID 96640

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	loader/xnu: Fix memory leak
	The code here is finished with the memory stored in name, but it only
	frees it if there curvalue is valid, while it could actually free it
	regardless.

	The fix is a simple relocation of the grub_free() to before the test
	of curvalue.

	Fixes: CID 96646

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	loader/bsd: Check for NULL arg up-front
	The code in the next block suggests that it is possible for .set to be
	true but .arg may still be NULL.

	This code assumes that it is never NULL, yet later is testing if it is
	NULL - that is inconsistent.

	So we should check first if .arg is not NULL, and remove this check that
	is being flagged by Coverity since it is no longer required.

	Fixes: CID 292471

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	gfxmenu/gui_list: Remove code that coverity is flagging as dead
	The test of value for NULL before calling grub_strdup() is not required,
	since the if condition prior to this has already tested for value being
	NULL and cannot reach this code if it is.

	Fixes: CID 73659

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	video/readers/jpeg: Test for an invalid next marker reference from a jpeg file
	While it may never happen, and potentially could be caught at the end of
	the function, it is worth checking up front for a bad reference to the
	next marker just in case of a maliciously crafted file being provided.

	Fixes: CID 73694

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	video/fb/video_fb: Fix possible integer overflow
	It is minimal possibility that the values being used here will overflow.
	So, change the code to use the safemath function grub_mul() to ensure
	that doesn't happen.

	Fixes: CID 73761

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	video/fb/video_fb: Fix multiple integer overflows
	The calculation of the unsigned 64-bit value is being generated by
	multiplying 2, signed or unsigned, 32-bit integers which may overflow
	before promotion to unsigned 64-bit. Fix all of them.

	Fixes: CID 73703, CID 73767, CID 73833

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	video/fb/fbfill: Fix potential integer overflow
	The multiplication of 2 unsigned 32-bit integers may overflow before
	promotion to unsigned 64-bit. We should ensure that the multiplication
	is done with overflow detection. Additionally, use grub_sub() for
	subtraction.

	Fixes: CID 73640, CID 73697, CID 73702, CID 73823

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	video/efi_gop: Remove unnecessary return value of grub_video_gop_fill_mode_info()
	The return value of grub_video_gop_fill_mode_info() is never able to be
	anything other than GRUB_ERR_NONE. So, rather than continue to return
	a value and checking it each time, it is more correct to redefine the
	function to not return anything and remove checks of its return value
	altogether.

	Fixes: CID 96701

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	commands/probe: Fix a resource leak when probing disks
	Every other return statement in this code is calling grub_device_close()
	to clean up dev before returning. This one should do that too.

	Fixes: CID 292443

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Chris Coulson  <chris.coulson@canonical.com>

	commands/hashsum: Fix a memory leak
	check_list() uses grub_file_getline(), which allocates a buffer.
	If the hash list file contains invalid lines, the function leaks
	this buffer when it returns an error.

	Fixes: CID 176635

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	normal/completion: Fix leaking of memory when processing a completion
	It is possible for the code to reach the end of the function without
	freeing the memory allocated to argv and argc still to be 0.

	We should always call grub_free(argv). The grub_free() will handle
	a NULL argument correctly if it reaches that code without the memory
	being allocated.

	Fixes: CID 96672

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	syslinux: Fix memory leak while parsing
	In syslinux_parse_real() the 2 points where return is being called
	didn't release the memory stored in buf which is no longer required.

	Fixes: CID 176634

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	libgcrypt/mpi: Fix possible NULL dereference
	The code in gcry_mpi_scan() assumes that buffer is not NULL, but there
	is no explicit check for that, so we add one.

	Fixes: CID 73757

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	libgcrypt/mpi: Fix possible unintended sign extension
	The array of unsigned char gets promoted to a signed 32-bit int before
	it is finally promoted to a size_t. There is the possibility that this
	may result in the signed-bit being set for the intermediate signed
	32-bit int. We should ensure that the promotion is to the correct type
	before we bitwise-OR the values.

	Fixes: CID 96697

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	affs: Fix memory leaks
	The node structure reference is being allocated but not freed if it
	reaches the end of the function. If any of the hooks had returned
	a non-zero value, then node would have been copied in to the context
	reference, but otherwise node is not stored and should be freed.

	Similarly, the call to grub_affs_create_node() replaces the allocated
	memory in node with a newly allocated structure, leaking the existing
	memory pointed by node.

	Finally, when dir->parent is set, then we again replace node with newly
	allocated memory, which seems unnecessary when we copy in the values
	from dir->parent immediately after.

	Fixes: CID 73759

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	zfsinfo: Correct a check for error allocating memory
	While arguably the check for grub_errno is correct, we should really be
	checking the return value from the function since it is always possible
	that grub_errno was set elsewhere, making this code behave incorrectly.

	Fixes: CID 73668

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	zfs: Fix possible integer overflows
	In all cases the problem is that the value being acted upon by
	a left-shift is a 32-bit number which is then being used in the
	context of a 64-bit number.

	To avoid overflow we ensure that the number being shifted is 64-bit
	before the shift is done.

	Fixes: CID 73684, CID 73695, CID 73764

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Paulo Flabiano Smorigo  <pfsmorigo@canonical.com>

	zfs: Fix resource leaks while constructing path
	There are several exit points in dnode_get_path() that are causing possible
	memory leaks.

	In the while(1) the correct exit mechanism should not be to do a direct return,
	but to instead break out of the loop, setting err first if it is not already set.

	The reason behind this is that the dnode_path is a linked list, and while doing
	through this loop, it is being allocated and built up - the only way to
	correctly unravel it is to traverse it, which is what is being done at the end
	of the function outside of the loop.

	Several of the existing exit points correctly did a break, but not all so this
	change makes that more consistent and should resolve the leaking of memory as
	found by Coverity.

	Fixes: CID 73741

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	zfs: Fix possible negative shift operation
	While it is possible for the return value from zfs_log2() to be zero
	(0), it is quite unlikely, given that the previous assignment to blksz
	is shifted up by SPA_MINBLOCKSHIFT (9) before 9 is subtracted at the
	assignment to epbs.

	But, while unlikely during a normal operation, it may be that a carefully
	crafted ZFS filesystem could result in a zero (0) value to the
	dn_datalbkszsec field, which means that the shift left does nothing
	and assigns zero (0) to blksz, resulting in a negative epbs value.

	Fixes: CID 73608

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	hfsplus: Check that the volume name length is valid
	HFS+ documentation suggests that the maximum filename and volume name is
	255 Unicode characters in length.

	So, when converting from big-endian to little-endian, we should ensure
	that the name of the volume has a length that is between 0 and 255,
	inclusive.

	Fixes: CID 73641

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	disk/cryptodisk: Fix potential integer overflow
	The encrypt and decrypt functions expect a grub_size_t. So, we need to
	ensure that the constant bit shift is using grub_size_t rather than
	unsigned int when it is performing the shift.

	Fixes: CID 307788

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	disk/ldm: Fix memory leak on uninserted lv references
	The problem here is that the memory allocated to the variable lv is not
	yet inserted into the list that is being processed at the label fail2.

	As we can already see at line 342, which correctly frees lv before going
	to fail2, we should also be doing that at these earlier jumps to fail2.

	Fixes: CID 73824

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Paulo Flabiano Smorigo  <pfsmorigo@canonical.com>

	disk/ldm: If failed then free vg variable too
	Fixes: CID 73809

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Marco A Benatto  <mbenatto@redhat.com>

	disk/ldm: Make sure comp data is freed before exiting from make_vg()
	Several error handling paths in make_vg() do not free comp data before
	jumping to fail2 label and returning from the function. This will leak
	memory. So, let's fix all issues of that kind.

	Fixes: CID 73804

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	kern/partition: Check for NULL before dereferencing input string
	There is the possibility that the value of str comes from an external
	source and continuing to use it before ever checking its validity is
	wrong. So, needs fixing.

	Additionally, drop unneeded part initialization.

	Fixes: CID 292444

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	zstd: Initialize seq_t structure fully
	While many compilers will initialize this to zero, not all will, so it
	is better to be sure that fields not being explicitly set are at known
	values, and there is code that checks this fields value elsewhere in the
	code.

	Fixes: CID 292440

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	io/lzopio: Resolve unnecessary self-assignment errors
	These 2 assignments are unnecessary since they are just assigning
	to themselves.

	Fixes: CID 73643

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	gnulib/regcomp: Fix uninitialized re_token
	This issue has been fixed in the latest version of gnulib, so to
	maintain consistency, I've backported that change rather than doing
	something different.

	Fixes: CID 73828

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	gnulib/regexec: Fix possible null-dereference
	It appears to be possible that the mctx->state_log field may be NULL,
	and the name of this function, clean_state_log_if_needed(), suggests
	that it should be checking that it is valid to be cleaned before
	assuming that it does.

	Fixes: CID 86720

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	gnulib/argp-help: Fix dereference of a possibly NULL state
	All other instances of call to __argp_failure() where there is
	a dgettext() call is first checking whether state is NULL before
	attempting to dereference it to get the root_argp->argp_domain.

	Fixes: CID 292436

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	gnulib/regcomp: Fix uninitialized token structure
	The code is assuming that the value of br_token.constraint was
	initialized to zero when it wasn't.

	While some compilers will ensure that, not all do, so it is better to
	fix this explicitly than leave it to chance.

	Fixes: CID 73749

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	gnulib/regexec: Resolve unused variable
	This is a really minor issue where a variable is being assigned to but
	not checked before it is overwritten again.

	The reason for this issue is that we are not building with DEBUG set and
	this in turn means that the assert() that reads the value of the
	variable match_last is being processed out.

	The solution, move the assignment to match_last in to an ifdef DEBUG too.

	Fixes: CID 292459

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	kern/efi/mm: Fix possible NULL pointer dereference
	The model of grub_efi_get_memory_map() is that if memory_map is NULL,
	then the purpose is to discover how much memory should be allocated to
	it for the subsequent call.

	The problem here is that with grub_efi_is_finished set to 1, there is no
	check at all that the function is being called with a non-NULL memory_map.

	While this MAY be true, we shouldn't assume it.

	The solution to this is to behave as expected, and if memory_map is NULL,
	then don't try to use it and allow memory_map_size to be filled in, and
	return 0 as is done later in the code if the buffer is too small (or NULL).

	Additionally, drop unneeded ret = 1.

	Fixes: CID 96632

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	kern/efi: Fix memory leak on failure
	Free the memory allocated to name before returning on failure.

	Fixes: CID 296222

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	kern/parser: Fix resource leak if argc == 0
	After processing the command-line yet arriving at the point where we are
	setting argv, we are allocating memory, even if argc == 0, which makes
	no sense since we never put anything into the allocated argv.

	The solution is to simply return that we've successfully processed the
	arguments but that argc == 0, and also ensure that argv is NULL when
	we're not allocating anything in it.

	There are only 2 callers of this function, and both are handling a zero
	value in argc assuming nothing is allocated in argv.

	Fixes: CID 96680

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	net/tftp: Fix dangling memory pointer
	The static code analysis tool, Parfait, reported that the valid of
	file->data was left referencing memory that was freed by the call to
	grub_free(data) where data was initialized from file->data.

	To ensure that there is no unintentional access to this memory
	referenced by file->data we should set the pointer to NULL.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	net/net: Fix possible dereference to of a NULL pointer
	It is always possible that grub_zalloc() could fail, so we should check for
	a NULL return. Otherwise we run the risk of dereferencing a NULL pointer.

	Fixes: CID 296221

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Darren Kenny  <darren.kenny@oracle.com>

	mmap: Fix memory leak when iterating over mapped memory
	When returning from grub_mmap_iterate() the memory allocated to present
	is not being released causing it to leak.

	Fixes: CID 96655

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Javier Martinez Canillas  <javierm@redhat.com>

	usb: Avoid possible out-of-bound accesses caused by malicious devices
	The maximum number of configurations and interfaces are fixed but there is
	no out-of-bound checking to prevent a malicious USB device to report large
	values for these and cause accesses outside the arrays' memory.

	Fixes: CVE-2020-25647

	Reported-by: Joseph Tartaro <joseph.tartaro@ioactive.com>
	Reported-by: Ilja Van Sprundel <ivansprundel@ioactive.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Javier Martinez Canillas  <javierm@redhat.com>

	dl: Only allow unloading modules that are not dependencies
	When a module is attempted to be removed its reference counter is always
	decremented. This means that repeated rmmod invocations will cause the
	module to be unloaded even if another module depends on it.

	This may lead to a use-after-free scenario allowing an attacker to execute
	arbitrary code and by-pass the UEFI Secure Boot protection.

	While being there, add the extern keyword to some function declarations in
	that header file.

	Fixes: CVE-2020-25632

	Reported-by: Chris Coulson <chris.coulson@canonical.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Javier Martinez Canillas  <javierm@redhat.com>

	docs: Document the cutmem command
	The command is not present in the docs/grub.texi user documentation.

	Reported-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>

2021-03-02  Javier Martinez Canillas  <javierm@redhat.com>

	loader/xnu: Don't allow loading extension and packages when locked down
	The shim_lock verifier validates the XNU kernels but no its extensions
	and packages. Prevent these to be loaded when the GRUB is locked down.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Javier Martinez Canillas  <javierm@redhat.com>

	gdb: Restrict GDB access when locked down
	The gdbstub* commands allow to start and control a GDB stub running on
	local host that can be used to connect from a remote debugger. Restrict
	this functionality when the GRUB is locked down.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Javier Martinez Canillas  <javierm@redhat.com>

	commands/hdparm: Restrict hdparm command when locked down
	The command can be used to get/set ATA disk parameters. Some of these can
	be dangerous since change the disk behavior. Restrict it when locked down.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Javier Martinez Canillas  <javierm@redhat.com>

	commands/setpci: Restrict setpci command when locked down
	This command can set PCI devices register values, which makes it dangerous
	in a locked down configuration. Restrict it so can't be used on this setup.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Javier Martinez Canillas  <javierm@redhat.com>

	commands: Restrict commands that can load BIOS or DT blobs when locked down
	There are some more commands that should be restricted when the GRUB is
	locked down. Following is the list of commands and reasons to restrict:

	  * fakebios:   creates BIOS-like structures for backward compatibility with
	                existing OSes. This should not be allowed when locked down.

	  * loadbios:   reads a BIOS dump from storage and loads it. This action
	                should not be allowed when locked down.

	  * devicetree: loads a Device Tree blob and passes it to the OS. It replaces
	                any Device Tree provided by the firmware. This also should
	                not be allowed when locked down.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Javier Martinez Canillas  <javierm@redhat.com>

	mmap: Don't register cutmem and badram commands when lockdown is enforced
	The cutmem and badram commands can be used to remove EFI memory regions
	and potentially disable the UEFI Secure Boot. Prevent the commands to be
	registered if the GRUB is locked down.

	Fixes: CVE-2020-27779

	Reported-by: Teddy Reed <teddy.reed@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Javier Martinez Canillas  <javierm@redhat.com>

	acpi: Don't register the acpi command when locked down
	The command is not allowed when lockdown is enforced. Otherwise an
	attacker can instruct the GRUB to load an SSDT table to overwrite
	the kernel lockdown configuration and later load and execute
	unsigned code.

	Fixes: CVE-2020-14372

	Reported-by: Máté Kukri <km@mkukri.xyz>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Javier Martinez Canillas  <javierm@redhat.com>

	efi: Use grub_is_lockdown() instead of hardcoding a disabled modules list
	Now the GRUB can check if it has been locked down and this can be used to
	prevent executing commands that can be utilized to circumvent the UEFI
	Secure Boot mechanisms. So, instead of hardcoding a list of modules that
	have to be disabled, prevent the usage of commands that can be dangerous.

	This not only allows the commands to be disabled on other platforms, but
	also properly separate the concerns. Since the shim_lock verifier logic
	should be only about preventing to run untrusted binaries and not about
	defining these kind of policies.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Javier Martinez Canillas  <javierm@redhat.com>

	efi: Lockdown the GRUB when the UEFI Secure Boot is enabled
	If the UEFI Secure Boot is enabled then the GRUB must be locked down
	to prevent executing code that can potentially be used to subvert its
	verification mechanisms.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Javier Martinez Canillas  <javierm@redhat.com>

	kern/lockdown: Set a variable if the GRUB is locked down
	It may be useful for scripts to determine whether the GRUB is locked
	down or not. Add the lockdown variable which is set to "y" when the GRUB
	is locked down.

	Suggested-by: Dimitri John Ledkov <xnox@ubuntu.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Javier Martinez Canillas  <javierm@redhat.com>

	kern: Add lockdown support
	When the GRUB starts on a secure boot platform, some commands can be
	used to subvert the protections provided by the verification mechanism and
	could lead to booting untrusted system.

	To prevent that situation, allow GRUB to be locked down. That way the code
	may check if GRUB has been locked down and further restrict the commands
	that are registered or what subset of their functionality could be used.

	The lockdown support adds the following components:

	* The grub_lockdown() function which can be used to lockdown GRUB if,
	  e.g., UEFI Secure Boot is enabled.

	* The grub_is_lockdown() function which can be used to check if the GRUB
	  was locked down.

	* A verifier that flags OS kernels, the GRUB modules, Device Trees and ACPI
	  tables as GRUB_VERIFY_FLAGS_DEFER_AUTH to defer verification to other
	  verifiers. These files are only successfully verified if another registered
	  verifier returns success. Otherwise, the whole verification process fails.

	  For example, PE/COFF binaries verification can be done by the shim_lock
	  verifier which validates the signatures using the shim_lock protocol.
	  However, the verification is not deferred directly to the shim_lock verifier.
	  The shim_lock verifier is hooked into the verification process instead.

	* A set of grub_{command,extcmd}_lockdown functions that can be used by
	  code registering command handlers, to only register unsafe commands if
	  the GRUB has not been locked down.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Marco A Benatto  <mbenatto@redhat.com>

	efi: Move the shim_lock verifier to the GRUB core
	Move the shim_lock verifier from its own module into the core image. The
	Secure Boot lockdown mechanism has the intent to prevent the load of any
	unsigned code or binary when Secure Boot is enabled.

	The reason is that GRUB must be able to prevent executing untrusted code
	if UEFI Secure Boot is enabled, without depending on external modules.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2021-03-02  Marco A Benatto  <mbenatto@redhat.com>

	verifiers: Move verifiers API to kernel image
	Move verifiers API from a module to the kernel image, so it can be
	used there as well. There are no functional changes in this patch.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-18  Glenn Washburn  <development@efficientek.com>

	docs: Add documentation of disk size limitations
	Document the artificially imposed 1 EiB disk size limit and size limitations
	with LUKS volumes.

	Fix a few punctuation issues.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-18  Glenn Washburn  <development@efficientek.com>

	luks2: Use grub_log2ull() to calculate log_sector_size and improve readability
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	misc: Add grub_log2ull() macro for calculating log base 2 of 64-bit integers
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-18  Glenn Washburn  <development@efficientek.com>

	mips: Enable __clzdi2()
	This patch is similar to commit 9dab2f51e (sparc: Enable __clzsi2() and
	__clzdi2()) but for MIPS target and __clzdi2() only, __clzsi2() was
	already enabled.

	Suggested-by: Daniel Kiper <dkiper@net-space.pl>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-18  Glenn Washburn  <development@efficientek.com>

	luks2: Better error handling when setting up the cryptodisk
	Do some sanity checking on data coming from the LUKS2 header. If segment.size
	is "dynamic", verify that the offset is not past the end of disk. Otherwise,
	check for errors from grub_strtoull() when converting segment size from
	string. If a GRUB_ERR_BAD_NUMBER error was returned, then the string was
	not a valid parsable number, so skip the key. If GRUB_ERR_OUT_OF_RANGE was
	returned, then there was an overflow in converting to a 64-bit unsigned
	integer. So this could be a very large disk (perhaps large RAID array).
	In this case skip the key too. Additionally, enforce some other limits
	and fail if needed.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-18  Glenn Washburn  <development@efficientek.com>

	luks2: Do not handle disks of size GRUB_DISK_SIZE_UNKNOWN for now
	Check to make sure that source disk has a known size. If not, print
	a message and return error. There are 4 cases where GRUB_DISK_SIZE_UNKNOWN
	is set (biosdisk, obdisk, ofdisk, and uboot), and in all those cases
	processing continues. So this is probably a bit conservative. However,
	3 of the cases seem pathological, and the other, biosdisk, happens when
	booting from a CD-ROM. Since I doubt booting from a LUKS2 volume on
	a CD-ROM is a big use case, we'll error until someone complains.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-18  Glenn Washburn  <development@efficientek.com>

	luks2: Convert to crypt sectors from GRUB native sectors
	The function grub_disk_native_sectors(source) returns the number of sectors
	of source in GRUB native (512-byte) sectors, not source sized sectors. So
	the conversion needs to use GRUB_DISK_SECTOR_BITS, the GRUB native sector
	size.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Glenn Washburn  <development@efficientek.com>

	luks2: Error check segment.sector_size
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Properly handle non-512 byte sized sectors
	By default, dm-crypt internally uses an IV that corresponds to 512-byte
	sectors, even when a larger sector size is specified. What this means is
	that when using a larger sector size, the IV is incremented every sector.
	However, the amount the IV is incremented is the number of 512 byte blocks
	in a sector (i.e. 8 for 4K sectors). Confusingly the IV does not correspond
	to the number of, for example, 4K sectors. So each 512 byte cipher block in
	a sector will be encrypted with the same IV and the IV will be incremented
	afterwards by the number of 512 byte cipher blocks in the sector.

	There are some encryption utilities which do it the intuitive way and have
	the IV equal to the sector number regardless of sector size (ie. the fifth
	sector would have an IV of 4 for each cipher block). And this is supported
	by dm-crypt with the iv_large_sectors option and also cryptsetup as of 2.3.3
	with the --iv-large-sectors, though not with LUKS headers (only with --type
	plain). However, support for this has not been included as grub does not
	support plain devices right now.

	One gotcha here is that the encrypted split keys are encrypted with a hard-
	coded 512-byte sector size. So even if your data is encrypted with 4K sector
	sizes, the split key encrypted area must be decrypted with a block size of
	512 (ie the IV increments every 512 bytes). This made these changes less
	aesthetically pleasing than desired.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Glenn Washburn  <development@efficientek.com>

	luks2: grub_cryptodisk_t->total_sectors is the max number of device native sectors
	We need to convert the sectors from the size of the underlying device to the
	cryptodisk sector size; segment.size is in bytes which need to be converted
	to cryptodisk sectors as well.

	Also, removed an empty statement.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Add macros GRUB_TYPE_U_MAX/MIN(type) to replace literals
	Add GRUB_TYPE_U_MAX/MIN(type) macros to get the max/min values for an
	unsigned number with size of type.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Add macro GRUB_TYPE_BITS() to replace some literals
	The new macro GRUB_TYPE_BITS(type) returns the number of bits
	allocated for type.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Glenn Washburn  <development@efficientek.com>

	luks2: Add string "index" to user strings using a json index
	This allows error messages to be more easily distinguishable between indexes
	and slot keys. The former include the string "index" in the error/debug
	string, and the later are surrounded in quotes.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Glenn Washburn  <development@efficientek.com>

	luks2: Rename json index variables to names that they are obviously json indexes
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Glenn Washburn  <development@efficientek.com>

	luks2: Use more intuitive object name instead of json index in user messages
	Use the object name in the json array rather than the 0 based index in the
	json array for keyslots, segments, and digests. This is less confusing for
	the end user. For example, say you have a LUKS2 device with a key in slot 1
	and slot 4. When using the password for slot 4 to unlock the device, the
	messages using the index of the keyslot will mention keyslot 1 (its a
	zero-based index). Furthermore, with this change the keyslot number will
	align with the number used to reference the keyslot when using the
	--key-slot argument to cryptsetup.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Glenn Washburn  <development@efficientek.com>

	luks2: Add idx member to struct grub_luks2_keyslot/segment/digest
	This allows code using these structs to know the named key associated with
	these json data structures. In the future we can use these to provide better
	error messages to the user.

	Get rid of idx local variable in luks2_get_keyslot() which was overloaded to
	be used for both keyslot and segment slot keys.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Glenn Washburn  <development@efficientek.com>

	luks2: Make sure all fields of output argument in luks2_parse_digest() are written to
	We should assume that the output argument "out" is uninitialized and could
	have random data. So, make sure to initialize the segments and keyslots bit
	fields because potentially not all bits of those fields are written to.
	Otherwise, the digest could say it belongs to keyslots and segments that it
	does not.

	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Glenn Washburn  <development@efficientek.com>

	luks2: Remove unused argument in grub_error() call
	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	luks2: Convert 8 spaces to tabs
	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Glenn Washburn  <development@efficientek.com>

	misc: Add parentheses around ALIGN_UP() and ALIGN_DOWN() arguments
	This ensures that expected order of operations is preserved when arguments
	are expressions.

	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Glenn Washburn  <development@efficientek.com>

	disk: Rename grub_disk_get_size() to grub_disk_native_sectors()
	The function grub_disk_get_size() is confusingly named because it actually
	returns a sector count where the sectors are sized in the GRUB native sector
	size. Rename to something more appropriate.

	Suggested-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Glenn Washburn  <development@efficientek.com>

	loopback: Do not automaticaly replace existing loopback dev, error instead
	If there is a loopback device with the same name as the one to be created,
	instead of closing the old one and replacing it with the new one, return an
	error instead. If the loopback device was created, its probably being used
	by something and just replacing it may cause GRUB to crash unexpectedly.
	This fixes obvious problems like "loopback d (d)/somefile". Its not too
	onerous to force the user to delete the loopback first with the "-d" switch.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Glenn Washburn  <development@efficientek.com>

	disk: Move hardcoded max disk size literal to a GRUB_DISK_MAX_SECTORS in disk.h
	There is a hardcoded maximum disk size that can be read or written from,
	currently set at 1 EiB in grub_disk_adjust_range(). Move the literal into a
	macro in disk.h, so our assumptions are more visible. This hard coded limit
	does not prevent using larger disks, just GRUB won't read/write past the
	limit. The comment accompanying this restriction didn't quite make sense to
	me, so its been modified too.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Glenn Washburn  <development@efficientek.com>

	fs: Fix block lists not being able to address to end of disk sometimes
	When checking if a block list goes past the end of the disk, make sure
	the total size of the disk is in GRUB native sector sizes, otherwise there
	will be blocks at the end of the disk inaccessible by block lists.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Vladimir Serbinenko  <phcoder@gmail.com>

	mbr: Document new limitations on MBR gap support
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Vladimir Serbinenko  <phcoder@google.com>

	mbr: Warn if MBR gap is small and user uses advanced modules
	We don't want to support small MBR gap in pair with anything but the
	simplest config of biosdisk + part_msdos + simple filesystem. In this
	path "simple filesystems" are all current filesystems except ZFS and
	Btrfs.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Tianjia Zhang  <tianjia.zhang@linux.alibaba.com>

	efi/tpm: Extract duplicate code into independent functions
	Part of the code logic for processing the return value of efi
	log_extend_event is repetitive and complicated. Extract the
	repetitive code into an independent function.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Tianjia Zhang  <tianjia.zhang@linux.alibaba.com>

	efi/tpm: Add debug information for device protocol and eventlog
	Add a number of debug logs to the tpm module. The condition tag
	for opening debugging is "tpm". On TPM machines, this will bring
	great convenience to diagnosis and debugging.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Daniel Kiper  <daniel.kiper@oracle.com>

	loader/linux: Report the UEFI Secure Boot status to the Linux kernel
	Now that the GRUB has a grub_efi_get_secureboot() function to check the
	UEFI Secure Boot status, use it to report that to the Linux kernel.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-12  Javier Martinez Canillas  <javierm@redhat.com>

	efi: Only register shim_lock verifier if shim_lock protocol is found and SB enabled
	The shim_lock module registers a verifier to call shim's verify, but the
	handler is registered even when the shim_lock protocol was not installed.

	This doesn't cause a NULL pointer dereference in shim_lock_write() because
	the shim_lock_init() function just returns GRUB_ERR_NONE if sl isn't set.

	But in that case there's no point to even register the shim_lock verifier
	since won't do anything. Additionally, it is only useful when Secure Boot
	is enabled.

	Finally, don't assume that the shim_lock protocol will always be present
	when the shim_lock_write() function is called, and check for it on every
	call to this function.

	Reported-by: Michael Chang <mchang@suse.com>
	Reported-by: Peter Jones <pjones@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-11  Daniel Kiper  <daniel.kiper@oracle.com>

	efi: Add secure boot detection
	Introduce grub_efi_get_secureboot() function which returns whether
	UEFI Secure Boot is enabled or not on UEFI systems.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-11  Daniel Kiper  <daniel.kiper@oracle.com>

	efi: Add a function to read EFI variables with attributes
	It will be used to properly detect and report UEFI Secure Boot status to
	the x86 Linux kernel. The functionality will be added by subsequent patches.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-11  Daniel Kiper  <daniel.kiper@oracle.com>

	efi: Return grub_efi_status_t from grub_efi_get_variable()
	This is needed to properly detect and report UEFI Secure Boot status
	to the x86 Linux kernel. The functionality will be added by subsequent
	patches.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-11  Daniel Kiper  <daniel.kiper@oracle.com>

	efi: Make shim_lock GUID and protocol type public
	The GUID will be used to properly detect and report UEFI Secure Boot
	status to the x86 Linux kernel. The functionality will be added by
	subsequent patches. The shim_lock protocol type is made public for
	completeness.

	Additionally, fix formatting of four preceding GUIDs.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-11  Javier Martinez Canillas  <javierm@redhat.com>

	arm/term: Fix linking error due multiple ps2_state definitions
	When building with --target=arm-linux-gnu --with-platform=coreboot
	a linking error occurs caused by multiple definitions of the
	ps2_state variable.

	Mark them as static since they aren't used outside their compilation unit.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-11  Javier Martinez Canillas  <javierm@redhat.com>

	include/grub/i386/linux.h: Include missing <grub/types.h> header
	This header uses types defined in <grub/types.h> but does not include it,
	which leads to compile errors like the following:

	In file included from ../include/grub/cpu/linux.h:19,
	                 from kern/efi/sb.c:21:
	../include/grub/i386/linux.h:80:3: error: unknown type name ‘grub_uint64_t’
	   80 |   grub_uint64_t addr;

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-12-11  Javier Martinez Canillas  <javierm@redhat.com>

	i386: Don't include <grub/cpu/linux.h> in coreboot and ieee1275 startup.S
	Nothing defined in the header file is used in the assembly code but it
	may lead to build errors if some headers are included through this and
	contains definitions that are not recognized by the assembler, e.g.:

	../include/grub/types.h: Assembler messages:
	../include/grub/types.h:76: Error: no such instruction: `typedef signed char grub_int8_t'
	../include/grub/types.h:77: Error: no such instruction: `typedef short grub_int16_t'
	../include/grub/types.h:78: Error: no such instruction: `typedef int grub_int32_t'

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-11-20  Glenn Washburn  <development@efficientek.com>

	luks2: Rename index variable "j" to "i" in luks2_get_keyslot()
	Looping variable "j" was named such because the variable name "i" was taken.
	Since "i" has been renamed in the previous patch, we can rename "j" to "i".

	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-11-20  Glenn Washburn  <development@efficientek.com>

	luks2: Rename variable "i" to "keyslot_idx" in luks2_get_keyslot()
	Variables named "i" are usually looping variables. So, rename it to
	"keyslot_idx" to ease luks2_get_keyslot() reading.

	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-11-20  Glenn Washburn  <development@efficientek.com>

	luks2: Use correct index variable when looping in luks2_get_keyslot()
	The loop variable "j" should be used to index the digests and segments json
	array, instead of the variable "i", which is the keyslot index.

	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-11-20  Glenn Washburn  <development@efficientek.com>

	luks2: Rename source disk variable named "disk" to "source" as in luks.c
	This makes it more obvious to the reader that the disk referred to is the
	source disk, as opposed to say the disk holding the cryptodisk.

	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-11-20  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Rename "offset" in grub_cryptodisk_t to "offset_sectors"
	This makes it clear that the offset represents sectors, not bytes, in
	order to improve readability.

	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-11-20  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Rename "total_length" field in grub_cryptodisk_t to "total_sectors"
	This creates an alignment with grub_disk_t naming of the same field and is
	more intuitive as to how it should be used.

	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-11-20  Glenn Washburn  <development@efficientek.com>

	types: Define GRUB_CHAR_BIT based on compiler macro instead of using literal
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-11-20  Javier Martinez Canillas  <javierm@redhat.com>

	include/grub/arm64/linux.h: Include missing <grub/types.h> header
	This header uses types defined in <grub/types.h> but does not include it,
	which leads to compile errors like the following:

	../include/grub/cpu/linux.h:27:3: error: unknown type name ‘grub_uint32_t’
	   27 |   grub_uint32_t code0;  /* Executable code */
	      |   ^~~~~~~~~~~~~

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-11-20  Javier Martinez Canillas  <javierm@redhat.com>

	include/grub/arm/system.h: Include missing <grub/symbol.h> header
	The header uses the EXPORT_FUNC() macro defined in <grub/types.h> but
	doesn't include it, which leads to the following compile error on arm:

	../include/grub/cpu/system.h:12:13: error: ‘EXPORT_FUNC’ declared as function returning a function
	   12 | extern void EXPORT_FUNC(grub_arm_disable_caches_mmu) (void);
	      |             ^~~~~~~~~~~
	../include/grub/cpu/system.h:12:1: warning: parameter names (without types) in function declaration
	   12 | extern void EXPORT_FUNC(grub_arm_disable_caches_mmu) (void);
	      | ^~~~~~
	make[3]: *** [Makefile:36581: kern/efi/kernel_exec-sb.o] Error 1

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-11-20  Daniel Axtens  <dja@axtens.net>

	docs: grub-install --pubkey has been supported for some time
	grub-install --pubkey is supported, so we can now document it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-11-20  Daniel Axtens  <dja@axtens.net>

	docs: grub-install is no longer a shell script
	Since commit cd46aa6cefab in 2013, grub-install hasn't been a shell
	script. The para doesn't really add that much, especially since it's
	the user manual, so just drop it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-10-30  Jacob Kroon  <jacob.kroon@gmail.com>

	Makefile: Remove unused GRUB_PKGLIBDIR definition
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-10-30  Daniel Axtens  <dja@axtens.net>

	lzma: Fix compilation error under clang 10
	Compiling under clang 10 gives:

	grub-core/lib/LzmaEnc.c:1362:9: error: misleading indentation; statement is not part of the previous 'if' [-Werror,-Wmisleading-indentation]
	        {
	        ^
	grub-core/lib/LzmaEnc.c:1358:7: note: previous statement is here
	      if (repIndex == 0)
	      ^
	1 error generated.

	It's not really that unclear in context: there's a commented-out
	if-statement. But tweak the alignment anyway so that clang is happy.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-10-30  Cao jin  <caoj.fnst@cn.fujitsu.com>

	kern/i386/realmode: Update comment
	Commit b81d609e4c did not update it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-10-30  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Fix cipher IV mode "plain64" always being set as "plain"
	When setting cipher IV mode, detection is done by prefix matching the
	cipher IV mode part of the cipher mode string. Since "plain" matches
	"plain64", we must check for "plain64" first. Otherwise, "plain64" will
	be detected as "plain".

	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-18  Glenn Washburn  <development@efficientek.com>

	crypto: Remove GPG_ERROR_CFLAGS from gpg_err_code_t enum
	This was probably added by accident when originally creating the file.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-18  Glenn Washburn  <development@efficientek.com>

	script: Do not allow a delimiter between function name and block start
	Currently the following is valid syntax but should be a syntax error:

	  grub> function f; { echo HERE; }
	  grub> f
	  HERE

	This fix is not backward compatible, but current syntax is not documented
	either and has no functional value. So any scripts with this unintended
	syntax are technically syntactically incorrect and should not be relying
	on this behavior.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-18  Glenn Washburn  <development@efficientek.com>

	docs: Support for loading and concatenating multiple initrds
	This has been available since January of 2012 but has not been documented.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-18  Glenn Washburn  <development@efficientek.com>

	lexer: char const * should be const char *
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

	cryptodisk: Use cipher name instead of object in error message
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-18  Glenn Washburn  <development@efficientek.com>

	tests: F2FS test should use MOUNTDEVICE like other tests
	LODEVICES is not an array variable and should not be accessed as such.
	This allows the f2fs test to pass as it was failing because a device
	name had a space prepended to the path.

	Acked-by: Jaegeuk Kim <jaegeuk@kernel.org>
	Tested-by: Paul Menzel <pmenzel@molgen.mpg.de>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-18  Florian La Roche  <Florian.LaRoche@gmail.com>

	grub-mkconfig: If $hints is not set reduce the output into grub.cfg to just 1 line
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-18  Petr Vorel  <pvorel@suse.cz>

	travis: Run bootstrap to fix build
	autogen.sh isn't enough:

	  $ ./autogen.sh
	  Gnulib not yet bootstrapped; run ./bootstrap instead.
	  The command "./autogen.sh" exited with 1.

	Additionally, using bootstrap requires to install autopoint package.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-18  Patrick Steinhardt  <ps@pks.im>

	luks2: Strip dashes off of the UUID
	The UUID header for LUKS2 uses a format with dashes, same as for
	LUKS(1). But while we strip these dashes for the latter, we don't for
	the former. This isn't wrong per se, but it's definitely inconsistent
	for users as they need to use the dashed format for LUKS2 and the
	non-dashed format for LUKS when e.g. calling "cryptomount -u $UUID".

	Fix this inconsistency by stripping dashes off of the LUKS2 UUID.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-18  Tianjia Zhang  <tianjia.zhang@linux.alibaba.com>

	efi/tpm: Remove unused functions and structures
	Although the tpm_execute() series of functions are defined they are not
	used anywhere. Several structures in the include/grub/efi/tpm.h header
	file are not used too. There is even nonexistent grub_tpm_init()
	declaration in this header. Delete all that unneeded stuff.

	If somebody needs the functionality implemented in the dropped code then
	he/she can re-add it later. Now it needlessly increases the GRUB
	code/image size.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-18  Tianjia Zhang  <tianjia.zhang@linux.alibaba.com>

	shim_lock: Enable module for all EFI architectures
	Like the tpm the shim_lock module is only enabled for x86_64 target.
	However, there's nothing specific to x86_64 in the implementation and
	it can be enabled for all EFI architectures.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-18  Daniel Kiper  <daniel.kiper@oracle.com>

	efi/tpm: Fix typo in grub_efi_tpm2_protocol struct
	Rename get_active_pcr_blanks() to get_active_pcr_banks().

	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>

2020-09-18  Daniel Kiper  <daniel.kiper@oracle.com>

	i386/efi/init: Drop bogus include
	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>

2020-09-18  Daniel Kiper  <daniel.kiper@oracle.com>

	docs: Fix devicetree command description
	Specifically fix the subsection and drop bogus reference to the GNU/Linux.

	Reported-by: Patrick Higgins <higgi1pt@gmail.com>
	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>

2020-09-18  Martin Whitaker  <fsf@martin-whitaker.me.uk>

	grub-install: Fix inverted test for NLS enabled when copying locales
	Commit 3d8439da8 (grub-install: Locale depends on nls) attempted to avoid
	copying locale files to the target directory when NLS was disabled.
	However the test is inverted, and it does the opposite.

	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>

2020-09-11  Javier Martinez Canillas  <javierm@redhat.com>

	tftp: Roll-over block counter to prevent data packets timeouts
	Commit 781b3e5efc3 (tftp: Do not use priority queue) caused a regression
	when fetching files over TFTP whose size is bigger than 65535 * block size.

	  grub> linux /images/pxeboot/vmlinuz
	  grub> echo $?
	  0
	  grub> initrd /images/pxeboot/initrd.img
	  error: timeout reading '/images/pxeboot/initrd.img'.
	  grub> echo $?
	  28

	It is caused by the block number counter being a 16-bit field, which leads
	to a maximum file size of ((1 << 16) - 1) * block size. Because GRUB sets
	the block size to 1024 octets (by using the TFTP Blocksize Option from RFC
	2348 [0]), the maximum file size that can be transferred is 67107840 bytes.

	The TFTP PROTOCOL (REVISION 2) RFC 1350 [1] does not mention what a client
	should do when a file size is bigger than the maximum, but most TFTP hosts
	support the block number counter to be rolled over. That is, acking a data
	packet with a block number of 0 is taken as if the 65356th block was acked.

	It was working before because the block counter roll-over was happening due
	an overflow. But that got fixed by the mentioned commit, which led to the
	regression when attempting to fetch files larger than the maximum size.

	To allow TFTP file transfers of unlimited size again, re-introduce a block
	counter roll-over so the data packets are acked preventing the timeouts.

	[0]: https://tools.ietf.org/html/rfc2348
	[1]: https://tools.ietf.org/html/rfc1350

	Fixes: 781b3e5efc3 (tftp: Do not use priority queue)

	Suggested-by: Peter Jones <pjones@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-11  Florian La Roche  <Florian.LaRoche@gmail.com>

	templates: Remove unnecessary trailing semicolon
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-11  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Fix incorrect calculation of start sector
	Here dev is a grub_cryptodisk_t and dev->offset is offset in sectors of size
	native to the cryptodisk device. The sector is correctly transformed into
	native grub sector size, but then added to dev->offset which is not
	transformed. It would be nice if the type system would help us with this.

	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-11  Glenn Washburn  <development@efficientek.com>

	cryptodisk: Unregister cryptomount command when removing module
	Reviewed-by: Patrick Steinhardt <ps@pks.im>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-11  Patrick Steinhardt  <ps@pks.im>

	luks2: Improve error reporting when decrypting/verifying key
	While we already set up error messages in both luks2_verify_key() and
	luks2_decrypt_key(), we do not ever print them. This makes it really
	hard to discover why a given key actually failed to decrypt a disk.

	Improve this by including the error message in the user-visible output.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-11  Patrick Steinhardt  <ps@pks.im>

	luks: Fix out-of-bounds copy of UUID
	When configuring a LUKS disk, we copy over the UUID from the LUKS header
	into the new grub_cryptodisk_t structure via grub_memcpy(). As size
	we mistakenly use the size of the grub_cryptodisk_t UUID field, which
	is guaranteed to be strictly bigger than the LUKS UUID field we're
	copying. As a result, the copy always goes out-of-bounds and copies some
	garbage from other surrounding fields. During runtime, this isn't
	noticed due to the fact that we always NUL-terminate the UUID and thus
	never hit the trailing garbage.

	Fix the issue by using the size of the local stripped UUID field.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-11  Patrick Steinhardt  <ps@pks.im>

	json: Remove invalid typedef redefinition
	The C standard does not allow for typedef redefinitions, even if they
	map to the same underlying type. In order to avoid including the
	jsmn.h in json.h and thus exposing jsmn's internals, we have exactly
	such a forward-declaring typedef in json.h. If enforcing the GNU99 C
	standard, clang may generate a warning about this non-standard
	construct.

	Fix the issue by using a simple "struct jsmntok" forward declaration
	instead of using a typedef.

	Tested-by: Chuck Tuffli <chuck@freebsd.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-11  Cao jin  <caoj.fnst@cn.fujitsu.com>

	i386/relocator_common: Drop empty #ifdef
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-09-11  Ave Milia  <avemilia@protonmail.com>

	video/bochs: Fix typo
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Colin Watson  <cjwatson@debian.org>

	linux: Fix integer overflows in initrd size handling
	These could be triggered by a crafted filesystem with very large files.

	Fixes: CVE-2020-15707

	Reviewed-by: Jan Setje-Eilers <jan.setjeeilers@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Peter Jones  <pjones@redhat.com>

	loader/linux: Avoid overflow on initrd size calculation
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Alexey Makhalov  <amakhalov@vmware.com>

	efi: Fix use-after-free in halt/reboot path
	commit 92bfc33db984 ("efi: Free malloc regions on exit")
	introduced memory freeing in grub_efi_fini(), which is
	used not only by exit path but by halt/reboot one as well.
	As result of memory freeing, code and data regions used by
	modules, such as halt, reboot, acpi (used by halt) also got
	freed. After return to module code, CPU executes, filled
	by UEFI firmware (tested with edk2), 0xAFAFAFAF pattern as
	a code. Which leads to #UD exception later.

	grub> halt
	!!!! X64 Exception Type - 06(#UD - Invalid Opcode)  CPU Apic ID - 00000000 !!!!
	RIP  - 0000000003F4EC28, CS  - 0000000000000038, RFLAGS - 0000000000200246
	RAX  - 0000000000000000, RCX - 00000000061DA188, RDX - 0A74C0854DC35D41
	RBX  - 0000000003E10E08, RSP - 0000000007F0F860, RBP - 0000000000000000
	RSI  - 00000000064DB768, RDI - 000000000832C5C3
	R8   - 0000000000000002, R9  - 0000000000000000, R10 - 00000000061E2E52
	R11  - 0000000000000020, R12 - 0000000003EE5C1F, R13 - 00000000061E0FF4
	R14  - 0000000003E10D80, R15 - 00000000061E2F60
	DS   - 0000000000000030, ES  - 0000000000000030, FS  - 0000000000000030
	GS   - 0000000000000030, SS  - 0000000000000030
	CR0  - 0000000080010033, CR2 - 0000000000000000, CR3 - 0000000007C01000
	CR4  - 0000000000000668, CR8 - 0000000000000000
	DR0  - 0000000000000000, DR1 - 0000000000000000, DR2 - 0000000000000000
	DR3  - 0000000000000000, DR6 - 00000000FFFF0FF0, DR7 - 0000000000000400
	GDTR - 00000000079EEA98 0000000000000047, LDTR - 0000000000000000
	IDTR - 0000000007598018 0000000000000FFF,   TR - 0000000000000000
	FXSAVE_STATE - 0000000007F0F4C0

	Proposal here is to continue to free allocated memory for
	exit boot services path but keep it for halt/reboot path
	as it won't be much security concern here.
	Introduced GRUB_LOADER_FLAG_EFI_KEEP_ALLOCATED_MEMORY
	loader flag to be used by efi halt/reboot path.

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Daniel Kiper  <daniel.kiper@oracle.com>

	efi/chainloader: Propagate errors from copy_file_path()
	Without any error propagated to the caller, make_file_path()
	would then try to advance the invalid device path node with
	GRUB_EFI_NEXT_DEVICE_PATH(), which would fail, returning a NULL
	pointer that would subsequently be dereferenced. Hence, propagate
	errors from copy_file_path().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Peter Jones  <pjones@redhat.com>

	efi: Fix some malformed device path arithmetic errors
	Several places we take the length of a device path and subtract 4 from
	it, without ever checking that it's >= 4. There are also cases where
	this kind of malformation will result in unpredictable iteration,
	including treating the length from one dp node as the type in the next
	node. These are all errors, no matter where the data comes from.

	This patch adds a checking macro, GRUB_EFI_DEVICE_PATH_VALID(), which
	can be used in several places, and makes GRUB_EFI_NEXT_DEVICE_PATH()
	return NULL and GRUB_EFI_END_ENTIRE_DEVICE_PATH() evaluate as true when
	the length is too small. Additionally, it makes several places in the
	code check for and return errors in these cases.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Peter Jones  <pjones@redhat.com>

	emu: Make grub_free(NULL) safe
	The grub_free() implementation in grub-core/kern/mm.c safely handles
	NULL pointers, and code at many places depends on this. We don't know
	that the same is true on all host OSes, so we need to handle the same
	behavior in grub-emu's implementation.

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Peter Jones  <pjones@redhat.com>

	lvm: Fix two more potential data-dependent alloc overflows
	It appears to be possible to make a (possibly invalid) lvm PV with
	a metadata size field that overflows our type when adding it to the
	address we've allocated. Even if it doesn't, it may be possible to do so
	with the math using the outcome of that as an operand. Check them both.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Peter Jones  <pjones@redhat.com>

	hfsplus: Fix two more overflows
	Both node->size and node->namelen come from the supplied filesystem,
	which may be user-supplied. We can't trust them for the math unless we
	know they don't overflow. Making sure they go through grub_add() or
	grub_calloc() first will give us that.

	Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Alexey Makhalov  <amakhalov@vmware.com>

	relocator: Fix grub_relocator_alloc_chunk_align() top memory allocation
	Current implementation of grub_relocator_alloc_chunk_align()
	does not allow allocation of the top byte.

	Assuming input args are:
	  max_addr = 0xfffff000;
	  size = 0x1000;

	And this is valid. But following overflow protection will
	unnecessarily move max_addr one byte down (to 0xffffefff):
	  if (max_addr > ~size)
	    max_addr = ~size;

	~size + 1 will fix the situation. In addition, check size
	for non zero to do not zero max_addr.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Chris Coulson  <chris.coulson@canonical.com>

	script: Avoid a use-after-free when redefining a function during execution
	Defining a new function with the same name as a previously defined
	function causes the grub_script and associated resources for the
	previous function to be freed. If the previous function is currently
	executing when a function with the same name is defined, this results
	in use-after-frees when processing subsequent commands in the original
	function.

	Instead, reject a new function definition if it has the same name as
	a previously defined function, and that function is currently being
	executed. Although a behavioural change, this should be backwards
	compatible with existing configurations because they can't be
	dependent on the current behaviour without being broken.

	Fixes: CVE-2020-15706

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Chris Coulson  <chris.coulson@canonical.com>

	script: Remove unused fields from grub_script_function struct
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Alexey Makhalov  <amakhalov@vmware.com>

	relocator: Protect grub_relocator_alloc_chunk_align() max_addr against integer underflow
	This commit introduces integer underflow mitigation in max_addr calculation
	in grub_relocator_alloc_chunk_align() invocation.

	It consists of 2 fixes:
	  1. Introduced grub_relocator_alloc_chunk_align_safe() wrapper function to perform
	     sanity check for min/max and size values, and to make safe invocation of
	     grub_relocator_alloc_chunk_align() with validated max_addr value. Replace all
	     invocations such as grub_relocator_alloc_chunk_align(..., min_addr, max_addr - size, size, ...)
	     by grub_relocator_alloc_chunk_align_safe(..., min_addr, max_addr, size, ...).
	  2. Introduced UP_TO_TOP32(s) macro for the cases where max_addr is 32-bit top
	     address (0xffffffff - size + 1) or similar.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Alexey Makhalov  <amakhalov@vmware.com>

	relocator: Protect grub_relocator_alloc_chunk_addr() input args against integer underflow/overflow
	Use arithmetic macros from safemath.h to accomplish it. In this commit,
	I didn't want to be too paranoid to check every possible math equation
	for overflow/underflow. Only obvious places (with non zero chance of
	overflow/underflow) were refactored.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Alexey Makhalov  <amakhalov@vmware.com>

	tftp: Do not use priority queue
	There is not need to reassemble the order of blocks. Per RFC 1350,
	server must wait for the ACK, before sending next block. Data packets
	can be served immediately without putting them to priority queue.

	Logic to handle incoming packet is this:
	  - if packet block id equal to expected block id, then
	    process the packet,
	  - if packet block id is less than expected - this is retransmit
	    of old packet, then ACK it and drop the packet,
	  - if packet block id is more than expected - that shouldn't
	    happen, just drop the packet.

	It makes the tftp receive path code simpler, smaller and faster.
	As a benefit, this change fixes CID# 73624 and CID# 96690, caused
	by following while loop:

	  while (cmp_block (grub_be_to_cpu16 (tftph->u.data.block), data->block + 1) == 0)

	where tftph pointer is not moving from one iteration to another, causing
	to serve same packet again. Luckily, double serving didn't happen due to
	data->block++ during the first iteration.

	Fixes: CID 73624, CID 96690

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Konrad Rzeszutek Wilk  <konrad.wilk@oracle.com>

	multiboot2: Fix memory leak if grub_create_loader_cmdline() fails
	Fixes: CID 292468

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Konrad Rzeszutek Wilk  <konrad.wilk@oracle.com>

	udf: Fix memory leak
	Fixes: CID 73796

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Jan Setje-Eilers <jan.setjeeilers@oracle.com>

2020-07-29  Konrad Rzeszutek Wilk  <konrad.wilk@oracle.com>

	term: Fix overflow on user inputs
	This requires a very weird input from the serial interface but can cause
	an overflow in input_buf (keys) overwriting the next variable (npending)
	with the user choice:

	(pahole output)

	struct grub_terminfo_input_state {
	        int                        input_buf[6];         /*     0    24 */
	        int                        npending;             /*    24     4 */ <- CORRUPT
	        ...snip...

	The magic string requires causing this is "ESC,O,],0,1,2,q" and we overflow
	npending with "q" (aka increase npending to 161). The simplest fix is to
	just to disallow overwrites input_buf, which exactly what this patch does.

	Fixes: CID 292449

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Konrad Rzeszutek Wilk  <konrad.wilk@oracle.com>

	lzma: Make sure we don't dereference past array
	The two dimensional array p->posSlotEncoder[4][64] is being dereferenced
	using the GetLenToPosState() macro which checks if len is less than 5,
	and if so subtracts 2 from it. If len = 0, that is 0 - 2 = 4294967294.
	Obviously we don't want to dereference that far out so we check if the
	position found is greater or equal kNumLenToPosStates (4) and bail out.

	N.B.: Upstream LZMA 18.05 and later has this function completely rewritten
	without any history.

	Fixes: CID 51526

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Chris Coulson  <chris.coulson@canonical.com>

	json: Avoid a double-free when parsing fails.
	When grub_json_parse() succeeds, it returns the root object which
	contains a pointer to the provided JSON string. Callers are
	responsible for ensuring that this string outlives the root
	object and for freeing its memory when it's no longer needed.

	If grub_json_parse() fails to parse the provided JSON string,
	it frees the string before returning an error. This results
	in a double free in luks2_recover_key(), which also frees the
	same string after grub_json_parse() returns an error.

	This changes grub_json_parse() to never free the JSON string
	passed to it, and updates the documentation for it to make it
	clear that callers are responsible for ensuring that the string
	outlives the root JSON object.

	Fixes: CID 292465

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Alexey Makhalov  <amakhalov@vmware.com>

	xnu: Fix double free in grub_xnu_devprop_add_property()
	grub_xnu_devprop_add_property() should not free utf8 and utf16 as it get
	allocated and freed in the caller.

	Minor improvement: do prop fields initialization after memory allocations.

	Fixes: CID 292442, CID 292457, CID 292460, CID 292466

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Alexey Makhalov  <amakhalov@vmware.com>

	gfxmenu: Fix double free in load_image()
	self->bitmap should be zeroed after free. Otherwise, there is a chance
	to double free (USE_AFTER_FREE) it later in rescale_image().

	Fixes: CID 292472

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Daniel Kiper  <daniel.kiper@oracle.com>

	font: Do not load more than one NAME section
	The GRUB font file can have one NAME section only. Though if somebody
	crafts a broken font file with many NAME sections and loads it then the
	GRUB leaks memory. So, prevent against that by loading first NAME
	section and failing in controlled way on following one.

	Reported-by: Chris Coulson <chris.coulson@canonical.com>
	Reviewed-by: Jan Setje-Eilers <jan.setjeeilers@oracle.com>

2020-07-29  Peter Jones  <pjones@redhat.com>

	iso9660: Don't leak memory on realloc() failures
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Peter Jones  <pjones@redhat.com>

	malloc: Use overflow checking primitives where we do complex allocations
	This attempts to fix the places where we do the following where
	arithmetic_expr may include unvalidated data:

	  X = grub_malloc(arithmetic_expr);

	It accomplishes this by doing the arithmetic ahead of time using grub_add(),
	grub_sub(), grub_mul() and testing for overflow before proceeding.

	Among other issues, this fixes:
	  - allocation of integer overflow in grub_video_bitmap_create()
	    reported by Chris Coulson,
	  - allocation of integer overflow in grub_png_decode_image_header()
	    reported by Chris Coulson,
	  - allocation of integer overflow in grub_squash_read_symlink()
	    reported by Chris Coulson,
	  - allocation of integer overflow in grub_ext2_read_symlink()
	    reported by Chris Coulson,
	  - allocation of integer overflow in read_section_as_string()
	    reported by Chris Coulson.

	Fixes: CVE-2020-14309, CVE-2020-14310, CVE-2020-14311

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Peter Jones  <pjones@redhat.com>

	calloc: Use calloc() at most places
	This modifies most of the places we do some form of:

	  X = malloc(Y * Z);

	to use calloc(Y, Z) instead.

	Among other issues, this fixes:
	  - allocation of integer overflow in grub_png_decode_image_header()
	    reported by Chris Coulson,
	  - allocation of integer overflow in luks_recover_key()
	    reported by Chris Coulson,
	  - allocation of integer overflow in grub_lvm_detect()
	    reported by Chris Coulson.

	Fixes: CVE-2020-14308

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Peter Jones  <pjones@redhat.com>

	calloc: Make sure we always have an overflow-checking calloc() available
	This tries to make sure that everywhere in this source tree, we always have
	an appropriate version of calloc() (i.e. grub_calloc(), xcalloc(), etc.)
	available, and that they all safely check for overflow and return NULL when
	it would occur.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Peter Jones  <pjones@redhat.com>

	safemath: Add some arithmetic primitives that check for overflow
	This adds a new header, include/grub/safemath.h, that includes easy to
	use wrappers for __builtin_{add,sub,mul}_overflow() declared like:

	  bool OP(a, b, res)

	where OP is grub_add, grub_sub or grub_mul. OP() returns true in the
	case where the operation would overflow and res is not modified.
	Otherwise, false is returned and the operation is executed.

	These arithmetic primitives require newer compiler versions. So, bump
	these requirements in the INSTALL file too.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-07-29  Peter Jones  <pjones@redhat.com>

	yylex: Make lexer fatal errors actually be fatal
	When presented with a command that can't be tokenized to anything
	smaller than YYLMAX characters, the parser calls YY_FATAL_ERROR(errmsg),
	expecting that will stop further processing, as such:

	  #define YY_DO_BEFORE_ACTION \
	        yyg->yytext_ptr = yy_bp; \
	        yyleng = (int) (yy_cp - yy_bp); \
	        yyg->yy_hold_char = *yy_cp; \
	        *yy_cp = '\0'; \
	        if ( yyleng >= YYLMAX ) \
	                YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	        yy_flex_strncpy( yytext, yyg->yytext_ptr, yyleng + 1 , yyscanner); \
	        yyg->yy_c_buf_p = yy_cp;

	The code flex generates expects that YY_FATAL_ERROR() will either return
	for it or do some form of longjmp(), or handle the error in some way at
	least, and so the strncpy() call isn't in an "else" clause, and thus if
	YY_FATAL_ERROR() is *not* actually fatal, it does the call with the
	questionable limit, and predictable results ensue.

	Unfortunately, our implementation of YY_FATAL_ERROR() is:

	   #define YY_FATAL_ERROR(msg)                     \
	     do {                                          \
	       grub_printf (_("fatal error: %s\n"), _(msg));     \
	     } while (0)

	The same pattern exists in yyless(), and similar problems exist in users
	of YY_INPUT(), several places in the main parsing loop,
	yy_get_next_buffer(), yy_load_buffer_state(), yyensure_buffer_stack,
	yy_scan_buffer(), etc.

	All of these callers expect YY_FATAL_ERROR() to actually be fatal, and
	the things they do if it returns after calling it are wildly unsafe.

	Fixes: CVE-2020-10713

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-25  Marc Zyngier  <maz@kernel.org>

	arm: Fix 32-bit ARM handling of the CTR register
	When booting on an ARMv8 core that implements either CTR.IDC or CTR.DIC
	(indicating that some of the cache maintenance operations can be
	removed when dealing with I/D-cache coherency, GRUB dies with a
	"Unsupported cache type 0x........" message.

	This is pretty likely to happen when running in a virtual machine
	hosted on an arm64 machine (I've triggered it on a system built around
	a bunch of Cortex-A55 cores, which implements CTR.IDC).

	It turns out that the way GRUB deals with the CTR register is a bit
	harsh for anything from ARMv7 onwards. The layout of the register is
	backward compatible, meaning that nothing that gets added is allowed to
	break earlier behaviour. In this case, ignoring IDC is completely fine,
	and only results in unnecessary cache maintenance.

	We can thus avoid being paranoid, and align the 32bit behaviour with
	its 64bit equivalent.

	This patch has the added benefit that it gets rid of a (gnu-specific)
	case range too.

	Reviewed-by: Leif Lindholm <leif@nuviainc.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-25  Ian Jackson  <ian.jackson@eu.citrix.com>

	templates/20_linux_xen: Support Xen Security Modules (XSM/FLASK)
	XSM is enabled by adding "flask=enforcing" as a Xen command line
	argument, and providing the policy file as a grub module.

	We make entries for both with and without XSM. If XSM is not compiled
	into Xen, then there are no policy files, so no change to the boot
	options.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-25  Ian Jackson  <ian.jackson@eu.citrix.com>

	templates/20_linux_xen: Ignore xenpolicy and config files too
	file_is_not_sym() currently only checks for xen-syms. Extend it to
	disregard xenpolicy (XSM policy files) and files ending .config (which
	are built by the Xen upstream build system in some configurations and
	can therefore end up in /boot).

	Rename the function accordingly, to file_is_not_xen_garbage().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-25  Javier Martinez Canillas  <javierm@redhat.com>

	net: Break out nested function
	Nested functions are not supported in C, but are permitted as an extension
	in the GNU C dialect. Commit cb2f15c5448 ("normal/main: Search for specific
	config files for netboot") added a nested function which caused the build
	to break when compiling with clang.

	Break that out into a static helper function to make the code portable again.

	Reported-by: Daniel Axtens <dja@axtens.net>
	Tested-by: Daniel Axtens <dja@axtens.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-25  Javier Martinez Canillas  <javierm@redhat.com>

	tpm: Enable module for all EFI platforms
	The module is only enabled for x86_64, but there's nothing specific to
	x86_64 in the implementation and can be enabled for all EFI platforms.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-25  Daniel Kiper  <daniel.kiper@oracle.com>

	INSTALL/configure: Update install doc and configure comment
	..to reflect the GRUB build reality in them.

	Additionally, fix text formatting a bit.

	Reviewed-by: Leif Lindholm <leif@nuviainc.com>

2020-05-25  Daniel Kiper  <daniel.kiper@oracle.com>

	configure: Set gnu99 C language standard by default
	Commit d5a32255d (misc: Make grub_strtol() "end" pointers have safer
	const qualifiers) introduced "restrict" keyword into some functions
	definitions. This keyword was introduced in C99 standard. However, some
	compilers by default may use C89 or something different. This behavior
	leads to the breakage during builds when c89 or gnu89 is in force. So,
	let's set gnu99 C language standard for all compilers by default. This
	way a bit random build issue will be fixed and the GRUB source will be
	build consistently regardless of type and version of the compiler.

	It was decided to use gnu99 C language standard because it fixes the
	issue mentioned above and also provides some useful extensions which are
	used here and there in the GRUB source. Potentially we can use gnu11
	too. However, this may reduce pool of older compilers which can be used
	to build the GRUB. So, let's live with gnu99 until we discover that we
	strongly require a feature from newer C standard.

	The user is still able to override C language standard using relevant
	*_CFLAGS variables.

	Reviewed-by: Leif Lindholm <leif@nuviainc.com>

2020-05-15  Tianjia Zhang  <tianjia.zhang@linux.alibaba.com>

	tpm: Rename function grub_tpm_log_event() to grub_tpm_measure()
	grub_tpm_log_event() and grub_tpm_measure() are two functions that
	have the same effect. So, keep grub_tpm_log_event() and rename it
	to grub_tpm_measure(). This way we get also a more clear semantics.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-15  Daniel Kiper  <daniel.kiper@oracle.com>

	autogen: Replace -iname with -ipath in find command
	..because -iname cannot be used to match paths.

	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
	Reviewed-by: Leif Lindholm <leif@nuviainc.com>
	Reviewed-by: Daniel Axtens <dja@axtens.net>

2020-05-15  Daniel Kiper  <daniel.kiper@oracle.com>

	INSTALL: Update configure example
	..to make it more relevant.

	Reviewed-by: Leif Lindholm <leif@nuviainc.com>

2020-05-15  Daniel Kiper  <daniel.kiper@oracle.com>

	configure: Drop unneeded TARGET_CFLAGS expansion
	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
	Reviewed-by: Leif Lindholm <leif@nuviainc.com>

2020-05-15  Jacob Kroon  <jacob.kroon@gmail.com>

	docs/grub: Support for probing partition UUID on MSDOS disks
	Support was implemented in commit c7cb11b21 (probe: Support probing for
	msdos PARTUUID).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-15  Tianjia Zhang  <tianjia.zhang@linux.alibaba.com>

	verifiers: Add verify string debug message
	Like grub_verifiers_open(), the grub_verify_string() should also
	display this debug message, which is very helpful for debugging.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-15  Javier Martinez Canillas  <javierm@redhat.com>

	envblk: Fix buffer overrun when attempting to shrink a variable value
	If an existing variable is set with a value whose length is smaller than
	the current value, a memory corruption can happen due copying padding '#'
	characters outside of the environment block buffer.

	This is caused by a wrong calculation of the previous free space position
	after moving backward the characters that followed the old variable value.

	That position is calculated to fill the remaining of the buffer with the
	padding '#' characters. But since isn't calculated correctly, it can lead
	to copies outside of the buffer.

	The issue can be reproduced by creating a variable with a large value and
	then try to set a new value that is much smaller:

	$ grub2-editenv --version
	grub2-editenv (GRUB) 2.04

	$ grub2-editenv env create

	$ grub2-editenv env set a="$(for i in {1..500}; do var="b$var"; done; echo $var)"

	$ wc -c env
	1024 grubenv

	$ grub2-editenv env set a="$(for i in {1..50}; do var="b$var"; done; echo $var)"
	malloc(): corrupted top size
	Aborted (core dumped)

	$ wc -c env
	0 grubenv

	Reported-by: Renaud Métrich <rmetrich@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-15  Hans Ulrich Niedermann  <hun@n-dimensional.de>

	docs: Remove docs for non-existing uppermem command
	Remove all documentation of and mentions of the uppermem
	command from the docs/grub.texi file.

	The uppermem command is not implemented in the GRUB source
	at all and appears to never have been implemented despite
	former plans to add an uppermem command.

	To reduce user confusion, this even removes the paragraph
	describing how GRUB's uppermem command was supposed to
	complement the Linux kernel's mem= parameter.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-15  Hans Ulrich Niedermann  <hun@n-dimensional.de>

	docs: Remove docs for non-existing pxe_unload command
	Remove the documentation of the pxe_unload command from the
	docs/grub.texi file.

	The pxe_unload command is not implemented in the grub source
	at this time at all. It appears to have been removed in commit
	671a78acb (cleanup pxe and efi network release).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-15  Hans Ulrich Niedermann  <hun@n-dimensional.de>

	gitignore: Add a few forgotten file patterns
	Add a few patterns to .gitignore to cover files which are generated
	by building grub ("make", "make check", "make dist") but which have
	been forgotten to add to .gitignore in the past.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-15  Hans Ulrich Niedermann  <hun@n-dimensional.de>

	gitignore: Add leading slashes where appropriate
	Going through the list of gitignore patterns without a leading slash,
	this adds a leading slash where it appears to have been forgotten.

	Some gitignore patterns like ".deps/" or "Makefile" clearly should
	match everywhere, so those definitively need no leading slash.

	For some patterns like "ascii.bitmaps", it is unclear where in the
	source tree they should match. Those patterns are kept as they are,
	matching the patterns in the whole tree of subdirectories.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-15  Hans Ulrich Niedermann  <hun@n-dimensional.de>

	gitignore: Add trailing slashes for directories
	Add trailing slashes for all patterns matching directories.

	Note that we do *not* add trailing slashes for *symlinks*
	to directories.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-15  Hans Ulrich Niedermann  <hun@n-dimensional.de>

	gitignore: Sort both pattern groups alphabetically
	Alphabetically sort the two groups of gitignore patterns:

	  * The group of patterns without slashes, matching anywhere
	    in the directory subtree.

	  * The group of patterns with slashes, matching relative to the
	    .gitignore file's directory

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-15  Hans Ulrich Niedermann  <hun@n-dimensional.de>

	gitignore: Group patterns with and without slash
	Group the .gitignore patterns into two groups:

	  * Pattern not including a slash, i.e. matching files anywhere in
	    the .gitignore file's directory and all of its subdirectories.

	  * Patterns including a slash, i.e. matching only relative to the
	    .gitignore file's directory.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-15  Hans Ulrich Niedermann  <hun@n-dimensional.de>

	gitignore: Consistent leading slash is easier to read
	As all gitignore patterns containing a left or middle slash match
	only relative to the .gitignore file's directory, we write them
	all in the same manner with a leading slash.

	This makes the file significantly easier to read.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-05-15  Daniel Kiper  <daniel.kiper@oracle.com>

	mips/cache: Add missing nop's in delay slots
	Lack of them causes random instructions to be executed before the
	jump really happens.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-04-21  Patrick Steinhardt  <ps@pks.im>

	luks2: Propagate error when reading area key fails
	When decrypting a given keyslot, all error cases except for one set up
	an error and return the error code. The only exception is when we try to
	read the area key: instead of setting up an error message, we directly
	print it via grub_dprintf().

	Convert the outlier to use grub_error() to allow more uniform handling
	of errors.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-04-21  Patrick Steinhardt  <ps@pks.im>

	json: Get rid of casts for "jsmntok_t"
	With the upstream change having landed that adds a name to the
	previously anonymous "jsmntok" typedef, we can now add a forward
	declaration for that struct in our code. As a result, we no longer have
	to store the "tokens" member of "struct grub_json" as a void pointer but
	can instead use the forward declaration, allowing us to get rid of casts
	of that field.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-04-21  Patrick Steinhardt  <ps@pks.im>

	json: Update jsmn library to upstream commit 053d3cd
	Update our embedded version of the jsmn library to upstream commit
	053d3cd (Merge pull request #175 from pks-t/pks/struct-type,
	2020-04-02).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-04-21  Steve Langasek  <steve.langasek@ubuntu.com>

	templates: Output a menu entry for firmware setup on UEFI FastBoot systems
	The fwsetup command allows to reboot into the EFI firmware setup menu, add
	a template to include a menu entry on EFI systems that makes use of that
	command to reboot into the EFI firmware settings.

	This is useful for users since the hotkey to enter into the EFI setup menu
	may not be the same on all systems so users can use the menu entry without
	needing to figure out what key needs to be pressed.

	Also, if fastboot is enabled in the BIOS then often it is not possible to
	enter the firmware setup menu. So the entry is again useful for this case.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-04-21  Hans de Goede  <hdegoede@redhat.com>

	kern/term: Accept ESC, F4 and holding SHIFT as user interrupt keys
	On some devices the ESC key is the hotkey to enter the BIOS/EFI setup
	screen, making it really hard to time pressing it right. Besides that
	ESC is also pretty hard to discover for a user who does not know it
	will unhide the menu.

	This commit makes F4, which was chosen because is not used as a hotkey
	to enter the BIOS setup by any vendor, also interrupt sleeps / stop the
	menu countdown.

	This solves the ESC gets into the BIOS setup and also somewhat solves
	the discoverability issue, but leaves the timing issue unresolved.

	This commit fixes the timing issue by also adding support for keeping
	SHIFT pressed during boot to stop the menu countdown. This matches
	what Ubuntu is doing, which should also help with discoverability.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-04-21  Hans de Goede  <hdegoede@redhat.com>

	efi/console: Do not set text-mode until we actually need it
	If we're running with a hidden menu we may never need text mode, so do not
	change the video-mode to text until we actually need it.

	This allows to boot a machine without unnecessary graphical transitions and
	provide a seamless boot experience to users.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-04-21  Hans de Goede  <hdegoede@redhat.com>

	efi/console: Implement getkeystatus() support
	Implement getkeystatus() support in the EFI console driver.

	This is needed because the logic to determine if a key was pressed to make
	the menu countdown stop will be changed by a later patch to also take into
	account the SHIFT key being held down.

	For this reason the EFI console driver has to support getkeystatus() to
	allow detecting that event.

	Note that if a non-modifier key gets pressed and repeated calls to
	getkeystatus() are made then it will return the modifier status at the
	time of the non-modifier key, until that key-press gets consumed by a
	getkey() call.

	This is a side-effect of how the EFI simple-text-input protocol works
	and cannot be avoided.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-04-21  Hans de Goede  <hdegoede@redhat.com>

	efi/console: Add grub_console_read_key_stroke() helper function
	This is a preparatory patch for adding getkeystatus() support to the
	EFI console driver.

	We can get modifier status through the simple_text_input read_key_stroke()
	method, but if a non-modifier key is (also) pressed the read_key_stroke()
	call will consume that key from the firmware's queue.

	The new grub_console_read_key_stroke() helper buffers upto 1 key-stroke.
	If it has a non-modifier key buffered, it will return that one, if its
	buffer is empty, it will fills its buffer by getting a new key-stroke.

	If called with consume=1 it will empty its buffer after copying the
	key-data to the callers buffer, this is how getkey() will use it.

	If called with consume=0 it will keep the last key-stroke buffered, this
	is how getkeystatus() will call it. This means that if a non-modifier
	key gets pressed, repeated getkeystatus() calls will return the modifiers
	of that key-press until it is consumed by a getkey() call.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-04-21  Hans de Goede  <hdegoede@redhat.com>

	kern/term: Make grub_getkeystatus() helper function available everywhere
	Move grub_getkeystatushelper() function from grub-core/commands/keystatus.c
	to grub-core/kern/term.c and export it so that it can be used outside of
	the keystatus command code too.

	There's no logic change in this patch. The function definition is moved so
	it can be called from grub-core/kern/term.c in a subsequent patch. It will
	be used to determine if a SHIFT key has was held down and use that also to
	interrupt the countdown, without the need to press a key at the right time.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-04-21  Javier Martinez Canillas  <javierm@redhat.com>

	efi/console: Move grub_console_set{colorstate,cursor} higher in the file
	This is just a preparatory patch to move the functions higher in the file,
	since these will be called by the grub_prepare_for_text_output() function
	that will be introduced in a later patch.

	The logic is unchanged by this patch. Functions definitions are just moved
	to avoid a forward declaration in a later patch, keeping the code clean.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-04-21  Paul Menzel  <pmenzel@molgen.mpg.de>

	docs/grub: Fix typo in *preferred*
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-04-21  Daniel Axtens  <dja@axtens.net>

	powerpc/mkimage: Fix CHRP note descsz
	Currently, an image generated with 'grub-mkimage -n' causes an error when
	read with 'readelf -a':

	Displaying notes found at file offset 0x000106f0 with length 0x0000002c:
	  Owner                Data size        Description
	readelf: Warning: note with invalid namesz and/or descsz found at offset 0x0
	readelf: Warning:  type: 0x1275, namesize: 0x00000008, descsize: 0x0000002c, alignment: 4

	This is because the descsz of the CHRP note is set to
	 sizeof (struct grub_ieee1275_note)
	which is the size of the entire note, including name and elf header. The
	desczs should contain only the contents, not the name and header sizes.

	Set the descsz instead to 'sizeof (struct grub_ieee1275_note_desc)'

	Resultant readelf output:

	Displaying notes found at file offset 0x00010710 with length 0x0000002c:
	  Owner                Data size        Description
	  PowerPC              0x00000018       Unknown note type: (0x00001275)
	   description data: ff ff ff ff 00 c0 00 00 ff ff ff ff ff ff ff ff ff ff ff ff 00 00 40 00

	So far as I can tell this issue has existed for as long as the note
	generation code has existed, but I guess nothing really checks descsz.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-31  Flavio Suligoi  <f.suligoi@asem.it>

	efi: Add missed space in GRUB_EFI_GLOBAL_VARIABLE_GUID
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-31  Michael Chang  <mchang@suse.com>

	zfs: Fix gcc10 error -Werror=zero-length-bounds
	We bumped into the build error while testing gcc-10 pre-release.

	In file included from ../../include/grub/file.h:22,
			from ../../grub-core/fs/zfs/zfs.c:34:
	../../grub-core/fs/zfs/zfs.c: In function 'zap_leaf_lookup':
	../../grub-core/fs/zfs/zfs.c:2263:44: error: array subscript '<unknown>' is outside the bounds of an interior zero-length array 'grub_uint16_t[0]' {aka 'short unsigned int[0]'} [-Werror=zero-length-bounds]
	2263 |   for (chunk = grub_zfs_to_cpu16 (l->l_hash[LEAF_HASH (blksft, h, l)], endian);
	../../include/grub/types.h:241:48: note: in definition of macro 'grub_le_to_cpu16'
	 241 | # define grub_le_to_cpu16(x) ((grub_uint16_t) (x))
	     |                                                ^
	../../grub-core/fs/zfs/zfs.c:2263:16: note: in expansion of macro 'grub_zfs_to_cpu16'
	2263 |   for (chunk = grub_zfs_to_cpu16 (l->l_hash[LEAF_HASH (blksft, h, l)], endian);
	     |                ^~~~~~~~~~~~~~~~~
	In file included from ../../grub-core/fs/zfs/zfs.c:48:
	../../include/grub/zfs/zap_leaf.h:72:16: note: while referencing 'l_hash'
	  72 |  grub_uint16_t l_hash[0];
	     |                ^~~~~~

	Here I'd like to quote from the gcc document [1] which seems best to
	explain what is going on here.

	"Although the size of a zero-length array is zero, an array member of
	this kind may increase the size of the enclosing type as a result of
	tail padding. The offset of a zero-length array member from the
	beginning of the enclosing structure is the same as the offset of an
	array with one or more elements of the same type. The alignment of a
	zero-length array is the same as the alignment of its elements.

	Declaring zero-length arrays in other contexts, including as interior
	members of structure objects or as non-member objects, is discouraged.
	Accessing elements of zero-length arrays declared in such contexts is
	undefined and may be diagnosed."

	The l_hash[0] is apparnetly an interior member to the enclosed structure
	while l_entries[0] is the trailing member. And the offending code tries
	to access members in l_hash[0] array that triggers the diagnose.

	Given that the l_entries[0] is used to get proper alignment to access
	leaf chunks, we can accomplish the same thing through the ALIGN_UP macro
	thus eliminating l_entries[0] from the structure. In this way we can
	pacify the warning as l_hash[0] now becomes the last member to the
	enclosed structure.

	[1] https://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-31  Michael Chang  <mchang@suse.com>

	mdraid1x_linux: Fix gcc10 error -Werror=array-bounds
	We bumped into the build error while testing gcc-10 pre-release.

	../../grub-core/disk/mdraid1x_linux.c: In function 'grub_mdraid_detect':
	../../grub-core/disk/mdraid1x_linux.c:181:15: error: array subscript <unknown> is outside array bounds of 'grub_uint16_t[0]' {aka 'short unsigned int[0]'} [-Werror=array-bounds]
	  181 |      (char *) &sb.dev_roles[grub_le_to_cpu32 (sb.dev_number)]
	      |               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	../../grub-core/disk/mdraid1x_linux.c:98:17: note: while referencing 'dev_roles'
	   98 |   grub_uint16_t dev_roles[0]; /* Role in array, or 0xffff for a spare, or 0xfffe for faulty.  */
	      |                 ^~~~~~~~~
	../../grub-core/disk/mdraid1x_linux.c:127:33: note: defined here 'sb'
	  127 |       struct grub_raid_super_1x sb;
	      |                                 ^~
	cc1: all warnings being treated as errors

	Apparently gcc issues the warning when trying to access sb.dev_roles
	array's member, since it is a zero length array as the last element of
	struct grub_raid_super_1x that is allocated sparsely without extra
	chunks for the trailing bits, so the warning looks legitimate in this
	regard.

	As the whole thing here is doing offset computation, it is undue to use
	syntax that would imply array member access then take address from it
	later. Instead we could accomplish the same thing through basic array
	pointer arithmetic to pacify the warning.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-31  Simon Hardy  <simon.hardy@itdev.co.uk>

	build: Fix GRUB i386-pc build with Ubuntu gcc
	With recent versions of gcc on Ubuntu a very large lzma_decompress.img file is
	output. (e.g. 134479600 bytes instead of 2864.) This causes grub-mkimage to
	fail with: "error: Decompressor is too big."

	This seems to be caused by a section .note.gnu.property that is placed at an
	offset such that objcopy needs to pad the img file with zeros.

	This issue is present on:
	Ubuntu 19.10 with gcc (Ubuntu 8.3.0-26ubuntu1~19.10) 8.3.0
	Ubuntu 19.10 with gcc (Ubuntu 9.2.1-9ubuntu2) 9.2.1 20191008

	This issue is not present on:
	Ubuntu 19.10 with gcc (Ubuntu 7.5.0-3ubuntu1~19.10) 7.5.0
	RHEL 8.0 with gcc 8.3.1 20190507 (Red Hat 8.3.1-4)

	The issue can be fixed by removing the section using objcopy as shown in
	this patch.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-31  Tianjia Zhang  <tianjia.zhang@linux.alibaba.com>

	efi/tpm: Fix memory leak in grub_tpm1/2_log_event()
	The memory requested for the event is not released here,
	causing memory leaks. This patch fixes this problem.

	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-31  Michael Chang  <mchang@suse.com>

	docs: Document notes on LVM cache booting
	Add notes on LVM cache booting to the GRUB manual to help user understanding
	the outstanding issue and status.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-31  Michael Chang  <mchang@suse.com>

	lvm: Add LVM cache logical volume handling
	The LVM cache logical volume is the logical volume consisting of the original
	and the cache pool logical volume. The original is usually on a larger and
	slower storage device while the cache pool is on a smaller and faster one. The
	performance of the original volume can be improved by storing the frequently
	used data on the cache pool to utilize the greater performance of faster
	device.

	The default cache mode "writethrough" ensures that any data written will be
	stored both in the cache and on the origin LV, therefore grub can be straight
	to read the original lv as no data loss is guarenteed.

	The second cache mode is "writeback", which delays writing from the cache pool
	back to the origin LV to have increased performance. The drawback is potential
	data loss if losing the associated cache device.

	During the boot time grub reads the LVM offline i.e. LVM volumes are not
	activated and mounted, hence it should be fine to read directly from original
	lv since all cached data should have been flushed back in the process of taking
	it offline.

	It is also not much helpful to the situation by adding fsync calls to the
	install code. The fsync did not force to write back dirty cache to the original
	device and rather it would update associated cache metadata to complete the
	write transaction with the cache device. IOW the writes to cached blocks still
	go only to the cache device.

	To write back dirty cache, as LVM cache did not support dirty cache flush per
	block range, there'no way to do it for file. On the other hand the "cleaner"
	policy is implemented and can be used to write back "all" dirty blocks in a
	cache, which effectively drain all dirty cache gradually to attain and last in
	the "clean" state, which can be useful for shrinking or decommissioning a
	cache. The result and effect is not what we are looking for here.

	In conclusion, as it seems no way to enforce file writes to the original
	device, grub may suffer from power failure as it cannot assemble the cache
	device and read the dirty data from it. However since the case is only
	applicable to writeback mode which is sensitive to data lost in nature, I'd
	still like to propose my (relatively simple) patch and treat reading dirty
	cache as improvement.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Patrick Steinhardt  <ps@pks.im>

	gnulib: Fix build of base64 when compiling with memory debugging
	When building GRUB with memory management debugging enabled, then the
	build fails because of `grub_debug_malloc()` and `grub_debug_free()`
	being undefined in the luks2 module. The cause is that we patch
	"base64.h" to unconditionaly include "config-util.h", which shouldn't be
	included for modules at all. As a result, `MM_DEBUG` is defined when
	building the module, causing it to use the debug memory allocation
	functions. As these are not built into modules, we end up with a linker
	error.

	Fix the issue by removing the <config-util.h> include altogether. The
	sole reason it was included was for the `_GL_ATTRIBUTE_CONST` macro,
	which we can simply define as empty in case it's not set.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Patrick Steinhardt  <ps@pks.im>

	build: Fix option to explicitly disable memory debugging
	The memory management system supports a debug mode that can be enabled
	at build time by passing "--enable-mm-debug" to the configure script.
	Passing the option will cause us define MM_DEBUG as expected, but in
	fact the reverse option "--disable-mm-debug" will do the exact same
	thing and also set up the define. This currently causes the build of
	"lib/gnulib/base64.c" to fail as it tries to use `grub_debug_malloc()`
	and `grub_debug_free()` even though both symbols aren't defined.

	Seemingly, `AC_ARG_ENABLE()` will always execute the third argument if
	either the positive or negative option was passed. Let's thus fix the
	issue by moving the call to`AC_DEFINE()` into an explicit `if test
	$xenable_mm_debug` block, similar to how other defines work.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Paul Menzel <pmenzel@molgen.mpg.de>

2020-03-10  David Michael  <fedora.dm0@gmail.com>

	fat: Support file modification times
	This allows comparing file ages on EFI system partitions.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  David Michael  <fedora.dm0@gmail.com>

	exfat: Save the matching directory entry struct when searching
	This provides the node's attributes outside the iterator function
	so the file modification time can be accessed and reported.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Mike Gilbert  <floppym@gentoo.org>

	datetime: Enable the datetime module for the emu platform
	Fixes a build failure:

	  grub-core/commands/date.c:49: undefined reference to `grub_get_weekday_name'
	  grub-core/commands/ls.c:155: undefined reference to `grub_unixtime2datetime'

	Bug: https://bugs.gentoo.org/711512

	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
	Tested-by: Javier Martinez Canillas <javierm@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  John Paul Adrian Glaubitz  <glaubitz@physik.fu-berlin.de>

	build: Add soft-float handling for SuperH (sh4)
	While GRUB has no platform support for SuperH (sh4) yet, this change
	adds the target-specific handling of soft-floats such that the GRUB
	utilities can be built on this target.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Peter Jones  <pjones@redhat.com>

	efi: Fix the type of grub_efi_status_t
	Currently, in some builds with some checkers, we see:

	1. grub-core/disk/efi/efidisk.c:601: error[shiftTooManyBitsSigned]: Shifting signed 64-bit value by 63 bits is undefined behaviour

	This is because grub_efi_status_t is defined as grub_efi_intn_t, which is
	signed, and shifting into the sign bit is not defined behavior.  UEFI fixed
	this in the spec in 2.3:

	2.3 | Change the defined type of EFI_STATUS from INTN to UINTN | May 7, 2009

	And the current EDK2 code has:
	MdePkg/Include/Base.h-//
	MdePkg/Include/Base.h-// Status codes common to all execution phases
	MdePkg/Include/Base.h-//
	MdePkg/Include/Base.h:typedef UINTN RETURN_STATUS;
	MdePkg/Include/Base.h-
	MdePkg/Include/Base.h-/**
	MdePkg/Include/Base.h-  Produces a RETURN_STATUS code with the highest bit set.
	MdePkg/Include/Base.h-
	MdePkg/Include/Base.h-  @param  StatusCode    The status code value to convert into a warning code.
	MdePkg/Include/Base.h-                        StatusCode must be in the range 0x00000000..0x7FFFFFFF.
	MdePkg/Include/Base.h-
	MdePkg/Include/Base.h-  @return The value specified by StatusCode with the highest bit set.
	MdePkg/Include/Base.h-
	MdePkg/Include/Base.h-**/
	MdePkg/Include/Base.h-#define ENCODE_ERROR(StatusCode)     ((RETURN_STATUS)(MAX_BIT | (StatusCode)))
	MdePkg/Include/Base.h-
	MdePkg/Include/Base.h-/**
	MdePkg/Include/Base.h-  Produces a RETURN_STATUS code with the highest bit clear.
	MdePkg/Include/Base.h-
	MdePkg/Include/Base.h-  @param  StatusCode    The status code value to convert into a warning code.
	MdePkg/Include/Base.h-                        StatusCode must be in the range 0x00000000..0x7FFFFFFF.
	MdePkg/Include/Base.h-
	MdePkg/Include/Base.h-  @return The value specified by StatusCode with the highest bit clear.
	MdePkg/Include/Base.h-
	MdePkg/Include/Base.h-**/
	MdePkg/Include/Base.h-#define ENCODE_WARNING(StatusCode)   ((RETURN_STATUS)(StatusCode))
	MdePkg/Include/Base.h-
	MdePkg/Include/Base.h-/**
	MdePkg/Include/Base.h-  Returns TRUE if a specified RETURN_STATUS code is an error code.
	MdePkg/Include/Base.h-
	MdePkg/Include/Base.h-  This function returns TRUE if StatusCode has the high bit set.  Otherwise, FALSE is returned.
	MdePkg/Include/Base.h-
	MdePkg/Include/Base.h-  @param  StatusCode    The status code value to evaluate.
	MdePkg/Include/Base.h-
	MdePkg/Include/Base.h-  @retval TRUE          The high bit of StatusCode is set.
	MdePkg/Include/Base.h-  @retval FALSE         The high bit of StatusCode is clear.
	MdePkg/Include/Base.h-
	MdePkg/Include/Base.h-**/
	MdePkg/Include/Base.h-#define RETURN_ERROR(StatusCode)     (((INTN)(RETURN_STATUS)(StatusCode)) < 0)
	...
	Uefi/UefiBaseType.h:typedef RETURN_STATUS             EFI_STATUS;

	This patch makes grub's implementation match the Edk2 declaration with regards
	to the signedness of the type.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Peter Jones  <pjones@redhat.com>

	efi/gop: Add debug output on GOP probing
	Add debug information to EFI GOP video driver probing function.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Peter Jones  <pjones@redhat.com>

	efi/uga: Use video instead of fb as debug condition
	All other video drivers use "video" as the debug condition instead of "fb"
	so change this in the efi/uga driver to make it consistent with the others.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Peter Jones  <pjones@redhat.com>

	efi: Print error messages to grub_efi_allocate_pages_real()
	No messages were printed in this function, add some to ease debugging.

	Also, the function returns a void * pointer so return NULL instead of
	0 to make the code more readable.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Andrei Borzenkov  <arvidjaar@gmail.com>

	efi/uga: Use 64 bit for fb_base
	We get 64 bit from PCI BAR but then truncate by assigning to 32 bit.
	Make sure to check that pointer does not overflow on 32 bit platform.

	Closes: 50931

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Alexander Graf  <agraf@suse.de>

	efi/gop: Add support for BLT_ONLY adapters
	EFI GOP has support for multiple different bitness types of frame buffers
	and for a special "BLT only" type which is always defined to be RGBx.

	Because grub2 doesn't ever directly access the frame buffer but instead
	only renders graphics via the BLT interface anyway, we can easily support
	these adapters.

	The reason this has come up now is the emerging support for virtio-gpu
	in OVMF. That adapter does not have the notion of a memory mapped frame
	buffer and thus is BLT only.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Peter Jones  <pjones@redhat.com>

	normal/completion: Fix possible NULL pointer dereference
	Coverity Scan reports that the grub_strrchr() function can return NULL if
	the character is not found. Check if that's the case for dirfile pointer.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Peter Jones  <pjones@redhat.com>

	kern: Add grub_debug_enabled()
	Add a grub_debug_enabled() helper function instead of open coding it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Peter Jones  <pjones@redhat.com>

	Makefile: Make libgrub.pp depend on config-util.h
	If you build with "make -j48" a lot, sometimes you see:

	gcc -E -DHAVE_CONFIG_H -I. -I..  -Wall -W -DGRUB_UTIL=1 -D_FILE_OFFSET_BITS=64 -I./include -DGRUB_FILE=\"grub_script.tab.h\" -I. -I.. -I. -I.. -I../include -I./include -I../grub-core/lib/libgcrypt-grub/src/  -I../grub-core/lib/minilzo -I../grub-core/lib/xzembed -DMINILZO_HAVE_CONFIG_H -Wall -W -DGRUB_UTIL=1 -D_FILE_OFFSET_BITS=64 -I./include -DGRUB_FILE=\"grub_script.tab.h\" -I. -I.. -I. -I.. -I../include -I./include -I../grub-core/lib/libgcrypt-grub/src/  -I./grub-core/gnulib -I../grub-core/gnulib -I/builddir/build/BUILD/grub-2.02/grub-aarch64-efi-2.02 -D_FILE_OFFSET_BITS=64 \
	  -D'GRUB_MOD_INIT(x)=@MARKER@x@' grub_script.tab.h grub_script.yy.h ../grub-core/commands/blocklist.c ../grub-core/commands/macbless.c ../grub-core/commands/xnu_uuid.c ../grub-core/commands/testload.c ../grub-core/commands/ls.c ../grub-core/disk/dmraid_nvidia.c ../grub-core/disk/loopback.c ../grub-core/disk/lvm.c ../grub-core/disk/mdraid_linux.c ../grub-core/disk/mdraid_linux_be.c ../grub-core/disk/mdraid1x_linux.c ../grub-core/disk/raid5_recover.c ../grub-core/disk/raid6_recover.c ../grub-core/font/font.c ../grub-core/gfxmenu/font.c ../grub-core/normal/charset.c ../grub-core/video/fb/fbblit.c ../grub-core/video/fb/fbutil.c ../grub-core/video/fb/fbfill.c ../grub-core/video/fb/video_fb.c ../grub-core/video/video.c ../grub-core/video/capture.c ../grub-core/video/colors.c ../grub-core/unidata.c ../grub-core/io/bufio.c ../grub-core/fs/affs.c ../grub-core/fs/afs.c ../grub-core/fs/bfs.c ../grub-core/fs/btrfs.c ../grub-core/fs/cbfs.c ../grub-core/fs/cpio.c ../grub-core/fs/cpio_be.c ../grub-core/fs/odc.c ../grub-core/fs/newc.c ../grub-core/fs/ext2.c ../grub-core/fs/fat.c ../grub-core/fs/exfat.c ../grub-core/fs/fshelp.c ../grub-core/fs/hfs.c ../grub-core/fs/hfsplus.c ../grub-core/fs/hfspluscomp.c ../grub-core/fs/iso9660.c ../grub-core/fs/jfs.c ../grub-core/fs/minix.c ../grub-core/fs/minix2.c ../grub-core/fs/minix3.c ../grub-core/fs/minix_be.c ../grub-core/fs/minix2_be.c ../grub-core/fs/minix3_be.c ../grub-core/fs/nilfs2.c ../grub-core/fs/ntfs.c ../grub-core/fs/ntfscomp.c ../grub-core/fs/reiserfs.c ../grub-core/fs/romfs.c ../grub-core/fs/sfs.c ../grub-core/fs/squash4.c ../grub-core/fs/tar.c ../grub-core/fs/udf.c ../grub-core/fs/ufs2.c ../grub-core/fs/ufs.c ../grub-core/fs/ufs_be.c ../grub-core/fs/xfs.c ../grub-core/fs/zfs/zfscrypt.c ../grub-core/fs/zfs/zfs.c ../grub-core/fs/zfs/zfsinfo.c ../grub-core/fs/zfs/zfs_lzjb.c ../grub-core/fs/zfs/zfs_lz4.c ../grub-core/fs/zfs/zfs_sha256.c ../grub-core/fs/zfs/zfs_fletcher.c ../grub-core/lib/envblk.c ../grub-core/lib/hexdump.c ../grub-core/lib/LzFind.c ../grub-core/lib/LzmaEnc.c ../grub-core/lib/crc.c ../grub-core/lib/adler32.c ../grub-core/lib/crc64.c ../grub-core/normal/datetime.c ../grub-core/normal/misc.c ../grub-core/partmap/acorn.c ../grub-core/partmap/amiga.c ../grub-core/partmap/apple.c ../grub-core/partmap/sun.c ../grub-core/partmap/plan.c ../grub-core/partmap/dvh.c ../grub-core/partmap/sunpc.c ../grub-core/partmap/bsdlabel.c ../grub-core/partmap/dfly.c ../grub-core/script/function.c ../grub-core/script/lexer.c ../grub-core/script/main.c ../grub-core/script/script.c ../grub-core/script/argv.c ../grub-core/io/gzio.c ../grub-core/io/xzio.c ../grub-core/io/lzopio.c ../grub-core/kern/ia64/dl_helper.c ../grub-core/kern/arm/dl_helper.c ../grub-core/kern/arm64/dl_helper.c ../grub-core/lib/minilzo/minilzo.c ../grub-core/lib/xzembed/xz_dec_bcj.c ../grub-core/lib/xzembed/xz_dec_lzma2.c ../grub-core/lib/xzembed/xz_dec_stream.c ../util/misc.c ../grub-core/kern/command.c ../grub-core/kern/device.c ../grub-core/kern/disk.c ../grub-core/lib/disk.c ../util/getroot.c ../grub-core/osdep/unix/getroot.c ../grub-core/osdep/getroot.c ../grub-core/osdep/devmapper/getroot.c ../grub-core/osdep/relpath.c ../grub-core/kern/emu/hostdisk.c ../grub-core/osdep/devmapper/hostdisk.c ../grub-core/osdep/hostdisk.c ../grub-core/osdep/unix/hostdisk.c ../grub-core/osdep/exec.c ../grub-core/osdep/sleep.c ../grub-core/osdep/password.c ../grub-core/kern/emu/misc.c ../grub-core/kern/emu/mm.c ../grub-core/kern/env.c ../grub-core/kern/err.c ../grub-core/kern/file.c ../grub-core/kern/fs.c ../grub-core/kern/list.c ../grub-core/kern/misc.c ../grub-core/kern/partition.c ../grub-core/lib/crypto.c ../grub-core/disk/luks.c ../grub-core/disk/geli.c ../grub-core/disk/cryptodisk.c ../grub-core/disk/AFSplitter.c ../grub-core/lib/pbkdf2.c ../grub-core/commands/extcmd.c ../grub-core/lib/arg.c ../grub-core/disk/ldm.c ../grub-core/disk/diskfilter.c ../grub-core/partmap/gpt.c ../grub-core/partmap/msdos.c ../grub-core/fs/proc.c ../grub-core/fs/archelp.c > libgrub.pp || (rm -f libgrub.pp; exit 1)
	rm -f stamp-h1
	touch ../config-util.h.in
	cd . && /bin/sh ./config.status config-util.h
	config.status: creating config-util.h
	In file included from ../include/grub/mm.h:25:0,
	                 from ../include/grub/disk.h:29,
	                 from ../include/grub/file.h:26,
	                 from ../grub-core/fs/btrfs.c:21:
	./config.h:38:10: fatal error: ./config-util.h: No such file or directory
	 #include <config-util.h>
	          ^~~~~~~~~~~~~~~
	compilation terminated.
	make: *** [Makefile:13098: libgrub.pp] Error 1

	This is because libgrub.pp is built with -DGRUB_UTIL=1, which means
	it'll try to include config-util.h, but a parallel make is actually
	building that file.  I think.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Peter Jones  <pjones@redhat.com>

	efi: Print more debug info in our module loader
	The function that searches the mods section base address does not have
	any debug information. Add some debugging outputs that could be useful.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Peter Jones  <pjones@redhat.com>

	linux/getroot: Handle rssd storage device names
	The Micron PCIe SSDs Linux driver (mtip32xx) exposes block devices
	as /dev/rssd[a-z]+[0-9]*. Add support for these rssd device names.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Julian Andres Klode  <julian.klode@canonical.com>

	smbios: Add a --linux argument to apply linux modalias-like filtering
	Linux creates modalias strings by filtering out non-ASCII, space,
	and colon characters. Provide an option that does the same filtering
	so people can create a modalias string in GRUB, and then match their
	modalias patterns against it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Mike Gilbert  <floppym@gentoo.org>

	po: Fix replacement of %m in sed programs
	When running make dist, I hit this error:

	  rm -f en@arabic.gmo && /usr/bin/gmsgfmt -c --statistics --verbose -o en@arabic.gmo en@arabic.po
	  en@arabic.po:5312: 'msgstr' is not a valid C format string, unlike 'msgid'.
	  Reason: The character that terminates the directive number 3 is not a valid conversion specifier.
	  /usr/bin/gmsgfmt: found 1 fatal error

	This was caused by "%m" being replaced with foreign Unicode characters.
	For example:

	  msgid "cannot rename the file %s to %s: %m"
	  msgstr "ﺹﺎﻨﻧﻮﺗ ﺮﻌﻧﺎﻤﻋ ﺖﻬﻋ ﻒִﻴﻠﻋ %s ﺕﻭ %s: %ﻡ"

	Mimic the workaround used for "%s" by reversing the replacement of "%m" at
	the end of the sed programs.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-03-10  Colin Watson  <cjwatson@ubuntu.com>

	gettext: Restore patches to po/Makefile.in.in
	These were inadvertently lost during the conversion to Gnulib (gnulib:
	Upgrade Gnulib and switch to bootstrap tool; commit 35b909062). The
	files in po/gettext-patches/ can be imported using "git am" on top of
	the gettext tag corresponding to AM_GNU_GETTEXT_VERSION in configure.ac
	(currently 0.18.3). They handle translation of messages in shell files,
	make msgfmt output in little-endian format, and arrange to use @SHELL@
	rather than /bin/sh.

	There were some changes solely for the purpose of distributing extra
	files; for ease of maintenance, I've added these to
	conf/Makefile.extra-dist instead.

	Fixes: https://savannah.gnu.org/bugs/?57298

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-02-28  Peter Jones  <pjones@redhat.com>

	misc: Make grub_strtol() "end" pointers have safer const qualifiers
	Currently the string functions grub_strtol(), grub_strtoul(), and
	grub_strtoull() don't declare the "end" pointer in such a way as to
	require the pointer itself or the character array to be immutable to the
	implementation, nor does the C standard do so in its similar functions,
	though it does require us not to change any of it.

	The typical declarations of these functions follow this pattern:

	long
	strtol(const char * restrict nptr, char ** restrict endptr, int base);

	Much of the reason for this is historic, and a discussion of that
	follows below, after the explanation of this change.  (GRUB currently
	does not include the "restrict" qualifiers, and we name the arguments a
	bit differently.)

	The implementation is semantically required to treat the character array
	as immutable, but such accidental modifications aren't stopped by the
	compiler, and the semantics for both the callers and the implementation
	of these functions are sometimes also helped by adding that requirement.

	This patch changes these declarations to follow this pattern instead:

	long
	strtol(const char * restrict nptr,
	       const char ** const restrict endptr,
	       int base);

	This means that if any modification to these functions accidentally
	introduces either an errant modification to the underlying character
	array, or an accidental assignment to endptr rather than *endptr, the
	compiler should generate an error.  (The two uses of "restrict" in this
	case basically mean strtol() isn't allowed to modify the character array
	by going through *endptr, and endptr isn't allowed to point inside the
	array.)

	It also means the typical use case changes to:

	  char *s = ...;
	  const char *end;
	  long l;

	  l = strtol(s, &end, 10);

	Or even:

	  const char *p = str;
	  while (p && *p) {
		  long l = strtol(p, &p, 10);
		  ...
	  }

	This fixes 26 places where we discard our attempts at treating the data
	safely by doing:

	  const char *p = str;
	  long l;

	  l = strtol(p, (char **)&ptr, 10);

	It also adds 5 places where we do:

	  char *p = str;
	  while (p && *p) {
		  long l = strtol(p, (const char ** const)&p, 10);
		  ...
		  /* more calls that need p not to be pointer-to-const */
	  }

	While moderately distasteful, this is a better problem to have.

	With one minor exception, I have tested that all of this compiles
	without relevant warnings or errors, and that /much/ of it behaves
	correctly, with gcc 9 using 'gcc -W -Wall -Wextra'.  The one exception
	is the changes in grub-core/osdep/aros/hostdisk.c , which I have no idea
	how to build.

	Because the C standard defined type-qualifiers in a way that can be
	confusing, in the past there's been a slow but fairly regular stream of
	churn within our patches, which add and remove the const qualifier in many
	of the users of these functions.  This change should help avoid that in
	the future, and in order to help ensure this, I've added an explanation
	in misc.h so that when someone does get a compiler warning about a type
	error, they have the fix at hand.

	The reason we don't have "const" in these calls in the standard is
	purely anachronistic: C78 (de facto) did not have type qualifiers in the
	syntax, and the "const" type qualifier was added for C89 (I think; it
	may have been later).  strtol() appears to date from 4.3BSD in 1986,
	which means it could not be added to those functions in the standard
	without breaking compatibility, which is usually avoided.

	The syntax chosen for type qualifiers is what has led to the churn
	regarding usage of const, and is especially confusing on string
	functions due to the lack of a string type.  Quoting from C99, the
	syntax is:

	 declarator:
	  pointer[opt] direct-declarator
	 direct-declarator:
	  identifier
	  ( declarator )
	  direct-declarator [ type-qualifier-list[opt] assignment-expression[opt] ]
	  ...
	  direct-declarator [ type-qualifier-list[opt] * ]
	  ...
	 pointer:
	  * type-qualifier-list[opt]
	  * type-qualifier-list[opt] pointer
	 type-qualifier-list:
	  type-qualifier
	  type-qualifier-list type-qualifier
	 ...
	 type-qualifier:
	  const
	  restrict
	  volatile

	So the examples go like:

	const char foo;			// immutable object
	const char *foo;		// mutable pointer to object
	char * const foo;		// immutable pointer to mutable object
	const char * const foo;		// immutable pointer to immutable object
	const char const * const foo; 	// XXX extra const keyword in the middle
	const char * const * const foo; // immutable pointer to immutable
					//   pointer to immutable object
	const char ** const foo;	// immutable pointer to mutable pointer
					//   to immutable object

	Making const left-associative for * and right-associative for everything
	else may not have been the best choice ever, but here we are, and the
	inevitable result is people using trying to use const (as they should!),
	putting it at the wrong place, fighting with the compiler for a bit, and
	then either removing it or typecasting something in a bad way.  I won't
	go into describing restrict, but its syntax has exactly the same issue
	as with const.

	Anyway, the last example above actually represents the *behavior* that's
	required of strtol()-like functions, so that's our choice for the "end"
	pointer.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-02-28  Mike Gilbert  <floppym@gentoo.org>

	build: Disable PIE in TARGET_CCASFLAGS if needed
	PIE should be disabled in assembly sources as well, or else GRUB will
	fail to boot.

	Bug: https://bugs.gentoo.org/667852

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>

2020-02-28  Mike Gilbert  <floppym@gentoo.org>

	build: Move TARGET_* assignments earlier
	On a 32-bit SPARC userland, configure fails to compile assembly and the
	build fails:

	    checking for options to compile assembly... configure: error: could not compile assembly

	config.log shows:

	    asm-tests/sparc64.S: Assembler messages:
	    asm-tests/sparc64.S:5: Error: Architecture mismatch on "lduw [%o4+4],%o4".
	    asm-tests/sparc64.S:5: (Requires v9|v9a|v9b|v9c|v9d|v9e|v9v|v9m|m8; requested architecture is sparclite.)
	    asm-tests/sparc64.S:7: Error: Architecture mismatch on "stw %o5,[%o3]".
	    asm-tests/sparc64.S:7: (Requires v9|v9a|v9b|v9c|v9d|v9e|v9v|v9m|m8; requested architecture is sparclite.)
	    asm-tests/sparc64.S:8: Error: Architecture mismatch on "bne,pt %icc,1b ,pt %icc,1b".
	    asm-tests/sparc64.S:8: (Requires v9|v9a|v9b|v9c|v9d|v9e|v9v|v9m|m8; requested architecture is sparclite.)

	Simply moving these blocks earlier in configure.ac is sufficient to
	ensure that the tests are executed with the appropriate flags
	(specifically -m64 in this case).

	Bug: https://bugs.gentoo.org/667850

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>

2020-02-28  Patrick Steinhardt  <ps@pks.im>

	luks2: Add missing newline to debug message
	The debug message printed when decryption with a keyslot fails is
	missing its trailing newline. Add it to avoid mangling it with
	subsequent output.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-02-18  Michael Chang  <mchang@suse.com>

	verifiers: Fix calling uninitialized function pointer
	The necessary check for NULL before use of function ver->close is not
	taking place in the failure path. This patch simply adds the missing
	check and fixes the problem that GRUB hangs indefinitely after booting
	rogue image without valid signature if secure boot is turned on.

	Now it displays like this for booting rogue UEFI image:

	  error: bad shim signature
	  error: you need to load the kernel first

	  Press any key to continue...

	and then you can go back to boot menu by pressing any key or after a few
	seconds expired.

	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-02-18  Peter Jones  <pjones@redhat.com>

	grub-editenv: Make grub-editenv chase symlinks including those across devices
	The grub-editenv create command will wrongly overwrite /boot/grub2/grubenv
	with a regular file if grubenv is a symbolic link. But instead, it should
	create a new file in the path the symlink points to.

	This lets /boot/grub2/grubenv be a symlink to /boot/efi/EFI/fedora/grubenv
	even when they're different mount points, which allows grub2-editenv to be
	the same across platforms (i.e. UEFI vs BIOS).

	For example, in Fedora the GRUB EFI builds have prefix set to /EFI/fedora
	(on the EFI System Partition), but for BIOS machine it'll be /boot/grub2
	(which may or may not be its own mountpoint).

	With this patch, on EFI machines we can make /boot/grub2/grubenv a symlink
	to /boot/efi/EFI/fedora/grubenv, and the same copy of grub-set-default will
	work on both kinds of systems.

	Windows doesn't implement a readlink primitive, so the current behaviour is
	maintained for this operating system.

	Reviewed-by: Adam Jackson <ajax@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-02-18  Peter Jones  <pjones@redhat.com>

	grub-editenv: Add grub_util_readlink()
	Currently grub-editenv and related tools are not able to follow symbolic
	links when finding their config file. For example the grub-editenv create
	command will wrongly overwrite a symlink in /boot/grub2/grubenv with a new
	regular file, instead of creating a file in the path the symlink points to.

	A following patch will change that and add support in grub-editenv to
	follow symbolic links when finding the grub environment variables file.

	Add a grub_util_readlink() helper function that is just a wrapper around
	the platform specific function to read the value of a symbolic link. This
	helper function will be used by the following patch for grub-editenv.

	The helper function is not added for Windows, since this operating system
	doesn't have a primitive to read the contents of a symbolic link.

	Reviewed-by: Adam Jackson <ajax@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-02-18  Robert Marshall  <rmarshall@redhat.com>

	docs: Update info with grub.cfg netboot selection order
	Add documentation to the GRUB manual that specifies the order netboot
	clients use to select a GRUB configuration file.

	Also explain that the feature is enabled by default but can be disabled
	by setting the "feature_net_search_cfg" environment variable to "n" in
	an embedded configuration file.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-02-18  Paulo Flabiano Smorigo  <pfsmorigo@br.ibm.com>

	normal/main: Search for specific config files for netboot
	This patch implements a search for a specific configuration when the config
	file is on a remoteserver. It uses the following order:
	   1) DHCP client UUID option.
	   2) MAC address (in lower case hexadecimal with dash separators);
	   3) IP (in upper case hexadecimal) or IPv6;
	   4) The original grub.cfg file.

	This procedure is similar to what is used by pxelinux and yaboot:
	http://www.syslinux.org/wiki/index.php/PXELINUX#config

	It is enabled by default but can be disabled by setting the environment
	variable "feature_net_search_cfg" to "n" in an embedded configuration.

	Fixes: https://bugzilla.redhat.com/show_bug.cgi?id=873406

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-02-18  Paulo Flabiano Smorigo  <pfsmorigo@br.ibm.com>

	net/dhcp: Set net_<interface>_client{id, uuid} variables from DHCP options
	This patch sets a net_<interface>_clientid and net_<interface>_clientuuid
	GRUB environment variables, using the DHCP client ID and UUID options if
	these are found.

	In the same way than net_<interface>_<option> variables are set for other
	options such domain name, boot file, next server, etc.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-02-18  Javier Martinez Canillas  <javierm@redhat.com>

	net/dhcp: Consistently use decimal numbers for DHCP/BOOTP options enum
	The DHCP Options and BOOTP Vendor Extensions enum values are a mixture of
	decimal and hexadecimal numbers. Change this to consistently use decimal
	numbers for all since that is how these values are defined by RFC 2132.

	Suggested-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-02-18  Paulo Flabiano Smorigo  <pfsmorigo@br.ibm.com>

	kern: Add %X option to printf functions
	The printf(3) function has support for the %X format specifier, to output
	an unsigned hexadecimal integer in uppercase.

	This can be achived in GRUB using the %x format specifier in grub_printf()
	and calling grub_toupper(), but it is more convenient if there is support
	for %X in grub_printf().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-02-18  Javier Martinez Canillas  <javierm@redhat.com>

	normal: Move common datetime functions out of the normal module
	The common datetime helper functions are currently included in the normal
	module, but this makes any other module that calls these functions to have
	a dependency with the normal module only for this reason.

	Since the normal module does a lot of stuff, it calls functions from other
	modules. But since other modules may depend on it for calling the datetime
	helpers, this could lead to circular dependencies between modules.

	As an example, when platform == xen the grub_get_datetime() function from
	the datetime module calls to the grub_unixtime2datetime() helper function
	from the normal module. Which leads to the following module dependency:

	    datetime -> normal

	and send_dhcp_packet() from the net module calls the grub_get_datetime()
	function, which leads to the following module dependency:

	    net -> datetime -> normal

	but that means that the normal module is not allowed to depend on net or
	any other module that depends on it due the transitive dependency caused
	by datetime. A recent patch attempted to add support to fetch the config
	file over the network, which leads to the following circular dependency:

	    normal -> net -> datetime -> normal

	So having the datetime helpers in the normal module makes it quite fragile
	and easy to add circular dependencies like these, that break the build due
	the genmoddep.awk script catching the issues.

	Fix this by taking the datetime helper functions out of the normal module
	and instead add them to the datetime module itself. Besides fixing these
	issues, it makes more sense to have these helper functions there anyways.

	Reported-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-02-11  Peter Jones  <pjones@redhat.com>

	minilzo: Update to minilzo-2.08
	This patch updates the miniLZO library to a newer version, which among other
	things fixes "CVE-2014-4607 - lzo: lzo1x_decompress_safe() integer overflow"
	that is present in the current used in GRUB.

	It also updates the "GRUB Developers Manual", to mention that the library is
	used and describes the process to update it to a newer release when needed.

	Resolves: http://savannah.gnu.org/bugs/?42635

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-01-28  Peter Jones  <pjones@redhat.com>

	squash4: Fix an uninitialized variable
	gcc says:

	grub-core/fs/squash4.c: In function ‘direct_read’:
	grub-core/fs/squash4.c:868:10: error: ‘err’ may be used uninitialized in
	this function [-Werror=maybe-uninitialized]
	  868 |       if (err)
	      |          ^
	cc1: all warnings being treated as errors

	This patch initializes it to GRUB_ERR_NONE.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-01-28  C. Masloch  <pushbx@ulukai.org>

	freedos: Fix FreeDOS command booting large files (near or above 64 KiB)
	While testing the 86-DOS lDebug [1] booting from GRUB2, newer versions of the
	debugger would fail to load when booted using GRUB's freedos command. The
	behaviour observed in a qemu i386 machine was that the ROM-BIOS's boot load
	would start anew, instead of loading the selected debugger as kernel.

	It came to light that there was a size limit: Kernel files that were 58880
	bytes (E600h) long or shorter succeeded to boot, while files that were 64000
	bytes or longer failed in the manner described.

	Eventually it turned out that the relocator16 stub succeeded whenever it was
	placed completely within the first 64 KiB of the Low Memory Area. The chunk
	for the relocator is allocated with a minimum address of 0x8010 and a maximum
	address just below 0xA0000 [2]. That means if the kernel is, for instance,
	E600h bytes long, then the kernel will be allocated memory starting at 00600h
	(the fixed FreeDOS kernel load address) up to E600h + 00600h = 0EC00h, which
	leaves 1400h (5120) bytes for the relocator to stay in the first 64 KiB.
	If the kernel is 64000 bytes (FA00h) long, then the relocator must go to
	FA00h + 00600h = 10000h at least which is outside the first 64 KiB.

	The problem is that the relocator16 initialises the DS register with a
	"pseudo real mode" descriptor, which is defined with a segment limit of
	64 KiB and a segment base of zero. After that, the relocator addressed
	parts of itself (implicitly) using the DS register, with an offset from
	ESI, which holds the linear address of the relocator's base [3]. With the
	larger kernel files this would lead to accessing data beyond the 64 KiB
	segment limit, presumably leading to a fault and perhaps a subsequent
	triple-fault or such.

	This patch fixes the relocator to set the segment base of the descriptors
	to the base address of the relocator; then, the subsequent accesses to
	the relocator's variables are done without the ESI register as an index.
	This does not interfere with the relocator's or its target's normal
	operation; the segment limits are still loaded with 64 KiB and all the
	segment bases are subsequently reset by the relocator anyway.

	Current versions of the debugger to test are uploaded to [4]. The file
	ldebugnh.com (LZ4-compressed and built with -D_EXTHELP=0) at 58368 bytes
	loads successfully, whereas ldebug.com at 64000 bytes fails. Loading one
	of these files requires setting root to a FAT FS partition and using the
	freedos command to specify the file as kernel:

	set root='(hd0,msdos1)'
	freedos /ldebug.com
	boot

	Booting the file using the multiboot command (which uses a WIP entrypoint
	of the debugger) works, as it does not use GRUB's relocator16 but instead
	includes a loader in the kernel itself, which drops it back to 86 Mode.

	[1]: https://hg.ulukai.org/ecm/ldebug
	[2]: http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/lib/i386/relocator.c?id=495781f5ed1b48bf27f16c53940d6700c181c74c#n127
	[3]: http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/lib/i386/relocator16.S?id=495781f5ed1b48bf27f16c53940d6700c181c74c#n97
	[4]: https://ulukai.org/ecm/lDebug-5479a7988d21-nohelp.zip

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-01-10  Patrick Steinhardt  <ps@pks.im>

	disk: Implement support for LUKS2
	With cryptsetup 2.0, a new version of LUKS was introduced that breaks
	compatibility with the previous version due to various reasons. GRUB
	currently lacks any support for LUKS2, making it impossible to decrypt
	disks encrypted with that version. This commit implements support for
	this new format.

	Note that LUKS1 and LUKS2 are quite different data formats. While they
	do share the same disk signature in the first few bytes, representation
	of encryption parameters is completely different between both versions.
	While the former version one relied on a single binary header, only,
	LUKS2 uses the binary header only in order to locate the actual metadata
	which is encoded in JSON. Furthermore, the new data format is a lot more
	complex to allow for more flexible setups, like e.g. having multiple
	encrypted segments and other features that weren't previously possible.
	Because of this, it was decided that it doesn't make sense to keep both
	LUKS1 and LUKS2 support in the same module and instead to implement it
	in two different modules luks and luks2.

	The proposed support for LUKS2 is able to make use of the metadata to
	decrypt such disks. Note though that in the current version, only the
	PBKDF2 key derival function is supported. This can mostly attributed to
	the fact that the libgcrypt library currently has no support for either
	Argon2i or Argon2id, which are the remaining KDFs supported by LUKS2. It
	wouldn't have been much of a problem to bundle those algorithms with
	GRUB itself, but it was decided against that in order to keep down the
	number of patches required for initial LUKS2 support. Adding it in the
	future would be trivial, given that the code structure is already in
	place.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-01-10  Patrick Steinhardt  <ps@pks.im>

	luks: Move configuration of ciphers into cryptodisk
	The luks module contains quite a lot of logic to parse cipher and
	cipher-mode strings like aes-xts-plain64 into constants to apply them
	to the grub_cryptodisk_t structure. This code will be required by the
	upcoming luks2 module, as well, which is why this commit moves it into
	its own function grub_cryptodisk_setcipher in the cryptodisk module.
	While the strings are probably rather specific to the LUKS modules, it
	certainly does make sense that the cryptodisk module houses code to set
	up its own internal ciphers instead of hosting that code in the luks
	module.

	Except for necessary adjustments around error handling, this commit does
	an exact move of the cipher configuration logic from luks.c to
	cryptodisk.c. Any behavior changes are unintentional.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-01-10  Patrick Steinhardt  <ps@pks.im>

	afsplitter: Move into its own module
	While the AFSplitter code is currently used only by the luks module,
	upcoming support for luks2 will add a second module that depends on it.
	To avoid any linker errors when adding the code to both modules because
	of duplicated symbols, this commit moves it into its own standalone
	module afsplitter as a preparatory step.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-01-10  Patrick Steinhardt  <ps@pks.im>

	bootstrap: Add gnulib's base64 module
	The upcoming support for LUKS2 disc encryption requires us to include a
	parser for base64-encoded data, as it is used to represent salts and
	digests. As gnulib already has code to decode such data, we can just
	add it to the boostrapping configuration in order to make it available
	in GRUB.

	The gnulib module makes use of booleans via the <stdbool.h> header. As
	GRUB does not provide any POSIX wrapper header for this, but instead
	implements support for bool in <sys/types.h>, we need to patch
	base64.h to not use <stdbool.h> anymore. We unfortunately cannot include
	<sys/types.h> instead, as it would then use gnulib's internal header
	while compiling the gnulib object but our own <sys/types.h> when
	including it in a GRUB module. Because of this, the patch replaces the
	include with a direct typedef.

	A second fix is required to make available _GL_ATTRIBUTE_CONST, which
	is provided by the configure script. As base64.h does not include
	<config.h>, it is thus not available and results in a compile error.
	This is fixed by adding an include of <config-util.h>.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-01-10  Patrick Steinhardt  <ps@pks.im>

	json: Implement wrapping interface
	While the newly added jsmn library provides the parsing interface, it
	does not provide any kind of interface to act on parsed tokens. Instead,
	the caller is expected to handle pointer arithmetics inside of the token
	array in order to extract required information. While simple, this
	requires users to know some of the inner workings of the library and is
	thus quite an unintuitive interface.

	This commit adds a new interface on top of the jsmn parser that provides
	convenience functions to retrieve values from the parsed json type, grub_json_t.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2020-01-10  Patrick Steinhardt  <ps@pks.im>

	json: Import upstream jsmn-1.1.0
	The upcoming support for LUKS2 encryption will require a JSON parser to
	decode all parameters required for decryption of a drive. As there is
	currently no other tool that requires JSON, and as gnulib does not
	provide a parser, we need to introduce a new one into the code base. The
	backend for the JSON implementation is going to be the jsmn library [1].
	It has several benefits that make it a very good fit for inclusion in
	GRUB:

	    - It is licensed under MIT.
	    - It is written in C89.
	    - It has no dependencies, not even libc.
	    - It is small with only about 500 lines of code.
	    - It doesn't do any dynamic memory allocation.
	    - It is testen on x86, amd64, ARM and AVR.

	The library itself comes as a single header, only, that contains both
	declarations and definitions. The exposed interface is kind of
	simplistic, though, and does not provide any convenience features
	whatsoever. Thus there will be a separate interface provided by GRUB
	around this parser that is going to be implemented in the following
	commit. This change only imports jsmn.h from tag v1.1.0 and adds it
	unmodified to a new json module with the following command:

	curl -L https://raw.githubusercontent.com/zserge/jsmn/v1.1.0/jsmn.h \
	    -o grub-core/lib/json/jsmn.h

	Upstream jsmn commit hash: fdcef3ebf886fa210d14956d3c068a653e76a24e
	Upstream jsmn commit name: Modernize (#149), 2019-04-20

	[1]: https://github.com/zserge/jsmn

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-12-20  Lukasz Hawrylko  <lukasz.hawrylko@linux.intel.com>

	multiboot2: Set min address for mbi allocation to 0x1000
	In some cases GRUB2 allocates multiboot2 structure at 0 address, that is
	a confusing behavior. Consumers of that structure can have internal NULL-checks
	that will throw an error when get a pointer to data allocated at address 0.
	To prevent that, define min address for mbi allocation on x86 and x86_64
	platforms.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-12-20  Paul Menzel  <pmenzel@molgen.mpg.de>

	docs: Export "superusers" variable to apply to submenus
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-12-20  Daniel Kiper  <daniel.kiper@oracle.com>

	loader/i386/linux: Fix an underflow in the setup_header length calculation
	Recent work around x86 Linux kernel loader revealed an underflow in the
	setup_header length calculation and another related issue. Both lead to
	the memory overwrite and later machine crash.

	Currently when the GRUB copies the setup_header into the linux_params
	(struct boot_params, traditionally known as "zero page") it assumes the
	setup_header size as sizeof(linux_i386_kernel_header/lh). This is
	incorrect. It should use the value calculated accordingly to the Linux
	kernel boot protocol. Otherwise in case of pretty old kernel, to be
	exact Linux kernel boot protocol, the GRUB may write more into
	linux_params than it was expected to. Fortunately this is not very big
	issue. Though it has to be fixed. However, there is also an underflow
	which is grave. It happens when

	  sizeof(linux_i386_kernel_header/lh) > "real size of the setup_header".

	Then len value wraps around and grub_file_read() reads whole kernel into
	the linux_params overwriting memory past it. This leads to the GRUB
	memory allocator breakage and finally to its crash during boot.

	The patch fixes both issues. Additionally, it moves the code not related to
	grub_memset(linux_params)/grub_memcpy(linux_params)/grub_file_read(linux_params)
	section outside of it to not confuse the reader.

	Fixes: e683cfb0cf5 (loader/i386/linux: Calculate the setup_header length)

	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>
	Reviewed-by: Krystian Hebel <krystian.hebel@3mdeb.com>

2019-12-06  David Sterba  <dave@jikos.cz>

	btrfs: Add support for new RAID1C34 profiles
	New 3- and 4-copy variants of RAID1 were merged into Linux kernel 5.5.
	Add the two new profiles to the list of recognized ones. As this builds
	on the same code as RAID1, only the redundancy level needs to be
	adjusted, the rest is done by the existing code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-12-06  Lenny Szubowicz  <lszubowi@redhat.com>

	tftp: Normalize slashes in TFTP paths
	Some TFTP servers do not handle multiple consecutive slashes correctly.
	This patch avoids sending TFTP requests with non-normalized paths.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-11-18  Michael Chang  <MChang@suse.com>

	grub-editenv: Warn a user against editing environment block
	The environment block is a preallocated 1024-byte file which serves as
	persistent storage for environment variables. It has its own format
	which is sensitive to corruption if an editor does not know how to
	process it. Besides that the editor may inadvertently change grubenv
	file size and/or make it sparse which can lead to unexpected results.

	This patch adds a message to the grubenv file to warn a user against
	editing it by tools other than grub-editenv.

	Reviewed-by: Javier Martinez Canillas <javierm@redhat.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-11-18  Michael Chang  <MChang@suse.com>

	hostdisk: Set linux file descriptor to O_CLOEXEC as default
	We are often bothered by this sort of lvm warning while running grub-install
	every now and then:

	  File descriptor 4 (/dev/vda1) leaked on vgs invocation. Parent PID 1991: /usr/sbin/grub2-install

	The requirement related to the warning is dictated in the lvm man page:

	  "On invocation, lvm requires that only the standard file descriptors stdin,
	  stdout and stderr are available.  If others are found, they get closed and
	  messages are issued warning about the leak.  This warning can be suppressed by
	  setting the environment variable LVM_SUPPRESS_FD_WARNINGS."

	While it could be disabled through settings, most Linux distributions seem to
	enable it by default and the justification provided by the developer looks to
	be valid to me: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=466138#15

	Rather than trying to close and reopen the file descriptor to the same file
	multiple times, which is rather cumbersome, for the sake of no vgs invocation
	could happen in between. This patch enables the close-on-exec flag (O_CLOEXEC)
	for new file descriptor returned by the open() system call, making it closed
	thus not inherited by the child process forked and executed by the exec()
	family of functions.

	Fixes Debian bug #466138.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-10-28  Eli Schwartz  <eschwartz@archlinux.org>

	grub-mkconfig: Use portable "command -v" to detect installed programs
	The "which" utility is not guaranteed to be installed either, and if it
	is, its behavior is not portable either.

	Conversely, the "command -v" shell builtin is required to exist in all
	POSIX 2008 compliant shells, and is thus guaranteed to work everywhere.

	Examples of open-source shells likely to be installed as /bin/sh on
	Linux, which implement the 11-year-old standard: ash, bash, busybox,
	dash, ksh, mksh and zsh.

	A side benefit of using the POSIX portable option is that it requires
	neither an external disk executable, nor (because unlike "which", the
	exit code is reliable) a subshell fork. This therefore represents a mild
	speedup.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-10-28  Peter Jones  <pjones@redhat.com>

	templates: Add GRUB_DISABLE_UUID
	The grub-mkconfig and 10_linux scripts by default attempt to use a UUID to
	set the root kernel command line parameter and the $root GRUB environment
	variable.

	The former can be disabled by setting the GRUB_DISABLE_LINUX_UUID variable
	to "true", but there is currently no way to disable the latter.

	The generated grub config uses the search command with the --fs-uuid option
	to find the device that has to be set as $root, i.e:

	 search --no-floppy --fs-uuid --set=root ...

	This is usually more reliable but in some cases it may not be appropriate,
	so this patch introduces a new GRUB_DISABLE_UUID variable that can be used
	to disable searching for the $root device by filesystem UUID.

	When disabled, the $root device will be set to the value specified in the
	device.map as found by the grub-probe --target=compatibility_hint option.

	When setting GRUB_DISABLE_UUID=true, the GRUB_DISABLE_LINUX_UUID and
	GRUB_DISABLE_LINUX_PARTUUID variables will also be set to "true" unless
	these have been explicitly set to "false".

	That way, the GRUB_DISABLE_UUID variable can be used to force using the
	device names for both GRUB and Linux.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Nicholas Vinson <nvinson234@gmail.com>

2019-10-21  Michael Bideau  <mica.devel@gmail.com>

	at_keyboard: Fix unreliable key presses
	This patch fixes an issue that prevented the at_keyboard module to work
	(for me). The cause was a bad/wrong return value in the
	grub_at_keyboard_getkey() function in grub-core/term/at_keyboard.c file
	at line 237. My symptoms were to have an unresponsive keyboard. Keys
	needed to be pressed 10x and more to effectively be printed sometimes
	generating multiple key presses (after 1 or 2 sec of no printing). It
	was very problematic when typing passphrase in early stage (with
	GRUB_ENABLE_CRYPTODISK). When switched to "console" terminal input
	keyboard worked perfectly. It also worked great with the GRUB 2.02
	packaged by Debian (2.02+dfsg1-20). It was not an output issue but an
	input one.

	I've managed to analyze the issue and found that it came from the commit
	216950a4e (at_keyboard: Split protocol from controller code.). Three
	lines where moved from the fetch_key() function in
	grub-core/term/at_keyboard.c file to the beginning of
	grub_at_keyboard_getkey() function (same file). However, returning -1
	made sense when it happened in fetch_key() function but not anymore in
	grub_at_keyboard_getkey() function which should return GRUB_TERM_NO_KEY.
	I think it was just an incomplete cut-paste missing a small manual
	correction. Let's fix it.

	Note: Commit message updated by Daniel Kiper.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-10-21  Prarit Bhargava  <prarit@redhat.com>

	templates: Fix bad test on GRUB_DISABLE_SUBMENU
	The GRUB_DISABLE_SUBMENU option is different than the others in the sense
	that it has to be set to "y" instead of "true" to be enabled.

	That causes a lot of confusion to users, some may wrongly set it to "true"
	expecting that will work the same than with most options, and some may set
	it to "yes" since for other options the value to set is a word and not a
	single character.

	This patch changes all the grub.d scripts using the GRUB_DISABLE_SUBMENU
	option, so they check if it was set to "true" instead of "y", making it
	consistent with all the other options.

	But to keep backward compatibility for users that set the option to "y" in
	/etc/default/grub file, keep testing for this value. And also do it for
	"yes", since it is a common mistake made by users caused by this option
	being inconsistent with the others.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-10-21  Nicholas Vinson  <nvinson234@gmail.com>

	probe: Support probing for msdos PARTUUID
	Extend partition UUID probing support in GRUB core to display pseudo
	partition UUIDs for MBR (MSDOS) partitions.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-09-23  Colin Watson  <cjwatson@ubuntu.com>

	grub-mkconfig: Fix typo in --help output
	The short form of "--version" that grub-mkconfig accepts is "-V", not "-v".

	Fixes Debian bug #935504.

	Reviewed-by: Vladimir 'phcoder' Serbinenko <phcoder@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-09-23  Andreas Schwab  <schwab@suse.de>

	grub-install: Define default platform for RISC-V
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Alexander Graf <agraf@csgraf.de>

2019-09-23  Andreas Schwab  <schwab@suse.de>

	RISC-V: Add __clzdi2 symbol
	This is needed for the zstd module build for riscv64-emu.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-09-23  Peter Jones  <pjones@redhat.com>

	gitattributes: Mark po/exclude.pot as binary so git won't try to diff nonprintables
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-09-23  Marcel Kolaja  <mkolaja@redhat.com>

	grub-mkconfig: Honor a symlink when generating configuration by grub-mkconfig
	Honor a symlink when generating configuration by grub-mkconfig, so that
	the -o option follows it rather than overwriting it with a regular file.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-09-23  Gustavo Luiz Duarte  <gustavold@linux.vnet.ibm.com>

	net: Fix crash on http
	Don't free file->data on receiving FIN flag since it is used all over
	without checking. http_close() will be called later to free that memory.

	Fixes bug: https://bugzilla.redhat.com/show_bug.cgi?id=860834

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-09-23  Andre Przywara  <andre.przywara@arm.com>

	docs: Document newly introduced net_dhcp command
	Commit 5bc41db756c5 ("net/dhcp: Add explicit net_dhcp command")
	introduced the new command "net_dhcp", which (for now) is an alias for
	the existing "net_bootp". Unfortunately the TEXI documentation was not
	adjusted accordingly.

	Rename the existing paragraph about net_bootp to read net_dhcp instead,
	and make the net_bootp stanza point to this new command.

	On the way add the newly parsed TFTP_SERVER_NAME and BOOTFILE_NAME
	packets to the list of supported DHCP options.

	Fixes bug: https://savannah.gnu.org/bugs/?56725

	Reported-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-07-18  James Clarke  <jrtc27@jrtc27.com>

	[PATCH] sparc64: Fix BIOS Boot Partition support
	Currently, gpt_offset is uninitialised when using a BIOS Boot Partition
	but is used unconditionally inside save_blocklists. Instead, ensure it
	is always initialised to 0 (note that there is already separate code to
	do the equivalent adjustment after we call save_blocklists on this code
	path).

	This patch has been tested on a T5-2 LDOM.

	Tested-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
	Reviewed-by: Vladimir Serbinenko <phcoder@gmail.com>
	Reviewed-by: Eric Snowberg <eric.snowberg@oracle.com>

	---
	 util/setup.c | 4 +++-
	 1 file changed, 3 insertions(+), 1 deletion(-)

2019-07-11  Vladimir Serbinenko  <phcoder@gmail.com>

	configure: Add -fno-ident when available
	MinGW for i386-pc without this option generates a .rdata$zzz symbol that is
	page-aligned and hence lzma_decompress no longer fits in its allocated space.
	Additionally, MinGW with -fno-ident also saves a bit of space in modules. In
	case of other compilers we already strip the relevant sections, so, this
	option has no effect.

	More info can be found at https://github.com/msys2/MINGW-packages/issues/21

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-07-11  Heinrich Schuchardt  <xypron.glpk@gmx.de>

	lsefisystab: Add support for device tree table
	The device tree may passed by the firmware as UEFI configuration
	table. Let lsefisystab display a short text and not only the GUID
	for the device tree.

	Here is an example output:

	  grub> lsefisystab
	  Address: 0xbff694d8
	  Signature: 5453595320494249 revision: 00020046
	  Vendor: Das U-Boot, Version=20190700
	  2 tables:
	  0xbe741000  eb9d2d31-2d88-11d3-9a160090273fc14d   SMBIOS
	  0x87f00000  b1b621d5-f19c-41a5-830bd9152c69aae0   DEVICE TREE

	Reviewed-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-07-11  David Michael  <fedora.dm0@gmail.com>

	smbios: Add a module for retrieving SMBIOS information
	The following are two use cases from Rajat Jain <rajatjain@juniper.net>:

	  1) We have a board that boots Linux and this board itself can be plugged
	     into one of different chassis types. We need to pass different
	     parameters to the kernel based on the "CHASSIS_TYPE" information
	     that is passed by the bios in the DMI/SMBIOS tables.

	  2) We may have a USB stick that can go into multiple boards, and the
	     exact kernel to be loaded depends on the machine information
	     (PRODUCT_NAME etc) passed via the DMI.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-07-11  David Michael  <fedora.dm0@gmail.com>

	lsefisystab: Define SMBIOS3 entry point structures for EFI
	This adds the GUID and includes it in lsefisystab output.

	Reviewed-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-07-11  David Michael  <fedora.dm0@gmail.com>

	verifiers: Blocklist fallout cleanup
	Blocklist fallout cleanup after commit 5c6f9bc15 (generic/blocklist: Fix
	implicit declaration of function grub_file_filter_disable_compression()).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-07-11  Andreas Schwab  <schwab@suse.de>

	RISC-V: Fix computation of pc-relative relocation offset
	The offset calculation was missing the relocation addend.

	Tested-by: Chester Lin <clin@suse.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-07-11  Leif Lindholm  <leif.lindholm@linaro.org>

	configure: Disable arm movw/movt relocations for GCC
	When building for arm, we already disable movw/movt relocations for clang,
	since they are incompatible with PE.

	When building with bare metal GCC toolchains (like the one used in the
	travis ci scripts), we end up with these relocations again. So add an
	additional test for the '-mword-relocations' flag used by GCC.

	Reported-by: Alexander Graf <agraf@csgraf.de>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-07-11  Jacob Kroon  <jacob.kroon@gmail.com>

	probe: Support probing for partition UUID with --part-uuid
	Linux supports root=PARTUUID=<partuuid> boot argument, so add
	support for probing it. Compared to the fs UUID, the partition
	UUID does not change when reformatting a partition.

	For now, only disks using a GPT partition table are supported.

	Reviewed-by: Paul Menzel <pmenzel@molgen.mpg.de>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-07-05  Daniel Kiper  <daniel.kiper@oracle.com>

	Bump version to 2.05

2019-07-04  Daniel Kiper  <daniel.kiper@oracle.com>

	Release 2.04

2019-06-24  Thomas Schmitt  <scdbackup@gmx.net>

	docs: Document workaround for grub-mkrescue with older MacBooks
	Add a description of the workaround for firmware of older MacBooks
	which stalls with a grub-mkrescue ISO image for x86_64-efi target
	on an USB stick.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-06-24  Eric Snowberg  <eric.snowberg@oracle.com>

	docs: Bootstrap changes required for older distros
	Some older distros do not contain gettext 0.18. Document the workaround
	to use the bootstrap utility on these systems.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-06-07  Leif Lindholm  <leif.lindholm@linaro.org>

	ia64: build fix in cache.h
	Add IA64 to the architectures excluding a declaration for
	grub_arch_sync_dma_caches().

	IA64 does not include any of the source files that require the function,
	but was overlooked for d8901e3ba115 ("cache: Fix compilation for ppc,
	sparc and arm64").

	Add it to the list of excluding architectures in order to not get
	missing symbol errors when running grub-mkimage.

	Reported-by: Alexander Graf <agraf@csgraf.de>
	Tested-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-06-07  Vladimir 'phcoder' Serbinenko  <phcoder@gmail.com>

	hostfs: #undef open and close.
	Unlike in case of disks in this case it's just a single place, so it's easier
	to just #undef

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-06-03  John Paul Adrian Glaubitz  <glaubitz@physik.fu-berlin.de>

	f2fs: Disable gcc9 -Waddress-of-packed-member
	Disable the -Wadress-of-packaed-member diagnostic for the grub_f2fs_label
	function since the result is found to be false postive.

	A pointer to the 'volume_name' member of 'struct grub_f2fs_superblock' is
	guaranteed to be aligned as the offset of 'volume_name' within the struct
	is dividable by the natural alignment on both 32- and 64-bit targets.

	grub-core/fs/f2fs.c: In function ‘grub_f2fs_label’:
	grub-core/fs/f2fs.c:1253:60: error: taking address of packed member of ‘struct grub_f2fs_superblock’ may result in an unaligned pointer value [-Werror=address-of-packed-member]
	 1253 |     *label = (char *) grub_f2fs_utf16_to_utf8 (data->sblock.volume_name);
	      |                                                ~~~~~~~~~~~~^~~~~~~~~~~~
	cc1: all warnings being treated as errors

	Reported-by: Neil MacLeod <neil@nmacleod.com>
	Tested-by: Neil MacLeod <neil@nmacleod.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-05-20  Vincent Legoll  <vincent.legoll@gmail.com>

	grub-mkrescue: Fix error message about the wrong command having failed: mformat instead of mcopy
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-05-20  Mathieu Trudel-Lapierre  <mathieu.tl@gmail.com>

	video: skip 'text' gfxpayload if not supported, to fallback to default
	On UEFI, 'text' gfxpayload is not supported, but we still reach parse_modespec()
	with it, which will obviously fail. Fortunately, whatever gfxpayload is set,
	we still still have the 'auto' default to fall back to. Allow getting to this
	fallback by not trying to parse 'text' as a modespec.

	This is because 'text' correctly doesn't parse as a modespec, and ought to have
	been ignored before we got to that point, just like it is immediately picked if
	we're running on a system where 'text' is a supported video mode.

	Bug: https://savannah.gnu.org/bugs/index.php?56217

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-05-20  Ovidiu Panait  <ovidiu.panait@windriver.com>

	grub-mkconfig: Use -c instead of --printf for stat
	"--printf" only works with the stat variant provided by coreutils.

	With busybox, stat will fail with the following error:
	stat: unrecognized option '--printf=%T'

	Usage: stat [OPTIONS] FILE...

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-05-20  Michael Chang  <mchang@suse.com>

	f2fs: Fix gcc9 error -Werror=maybe-uninitialized
	The function grub_get_node_path() could return uninitialized offset with
	level == 0 if the block is greater than direct_index + 2 * direct_blks +
	2 * indirect_blks + dindirect_blks. The uninitialized offset is then used
	by function grub_f2fs_get_block() because level == 0 is valid and
	meaningful return to be processed.

	The fix is to set level = -1 as return value by grub_get_node_path() to
	signify an error that the input block cannot be handled. Any caller
	should therefore check level is negative or not before processing the
	output.

	Reported-by: Neil MacLeod <neil@nmacleod.com>
	Tested-by: Neil MacLeod <neil@nmacleod.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-05-06  Alexander Graf  <agraf@csgraf.de>

	arm: Align section alignment with manual relocation offset code
	The arm relocation code has a manual special case for EFI binaries to
	add the natural alignment to its own relocation awareness.

	Since commit a51f953f4ee87 ("mkimage: Align efi sections on 4k
	boundary") we changed that alignment from 0x400 to 0x1000 bytes. Reflect
	the change in that branch that we forgot as well.

	This fixes running 32bit arm grub efi binaries for me again.

	Fixes: a51f953f4ee87 ("mkimage: Align efi sections on 4k boundary")
	Reported-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
	Reported-by: Steve McIntyre <steve@einval.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Julien ROBIN <julien.robin28@free.fr>
	Reviewed-by: Leif Lindholm <leif.lindholm@linaro.org>
	Tested-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-05-06  Alexander Graf  <agraf@csgraf.de>

	arm: Move trampolines into code section
	When creating T32->A32 transition jumps, the relocation code in grub
	will generate trampolines. These trampolines live in the .data section
	of our PE binary which means they are not marked as executable.

	This misbehavior was unmasked by commit a51f953f4ee87 ("mkimage: Align
	efi sections on 4k boundary") which made the X/NX boundary more obvious
	because everything became page aligned.

	To put things into proper order, let's move the arm trampolines into the
	.text section instead. That way everyone knows they are executable.

	Fixes: a51f953f4ee87 ("mkimage: Align efi sections on 4k boundary")
	Reported-by: Julien ROBIN <julien.robin28@free.fr>
	Reported-by: Leif Lindholm <leif.lindholm@linaro.org>
	Tested-by: Julien ROBIN <julien.robin28@free.fr>
	Reviewed-by: Leif Lindholm <leif.lindholm@linaro.org>
	Tested-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Michael Chang  <mchang@suse.com>

	efi: Fix gcc9 error -Waddress-of-packed-member
	The address of fp->path_name could be unaligned since seeking into the
	device path buffer for a given node could end in byte boundary.

	The fix is allocating aligned buffer by grub_malloc for holding the
	UTF16 string copied from fp->path_name, and after using that buffer as
	argument for grub_utf16_to_utf8 to convert it to UTF8 string.

	[  255s] ../../grub-core/kern/efi/efi.c: In function 'grub_efi_get_filename':
	[  255s] ../../grub-core/kern/efi/efi.c:410:60: error: taking address of packed member of 'struct grub_efi_file_path_device_path' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[  255s]   410 |    p = (char *) grub_utf16_to_utf8 ((unsigned char *) p, fp->path_name, len);
	[  255s]       |                                                          ~~^~~~~~~~~~~
	[  255s] ../../grub-core/kern/efi/efi.c: In function 'grub_efi_print_device_path':
	[  255s] ../../grub-core/kern/efi/efi.c:900:33: error: taking address of packed member of 'struct grub_efi_file_path_device_path' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[  255s]   900 |     *grub_utf16_to_utf8 (buf, fp->path_name,
	[  255s]       |                               ~~^~~~~~~~~~~

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Michael Chang  <mchang@suse.com>

	chainloader: Fix gcc9 error -Waddress-of-packed-member
	The address of fp->path_name could be unaligned since seeking into the
	device path buffer for a given node could end in byte boundary.

	The fix is using aligned buffer allocated by grub_malloc for receiving
	the converted UTF16 string by grub_utf8_to_utf16 and also the processing
	after. The resulting string then gets copied to fp->path_name.

	[  243s] ../../grub-core/loader/efi/chainloader.c: In function 'copy_file_path':
	[  243s] ../../grub-core/loader/efi/chainloader.c:136:32: error: taking address of packed member of 'struct grub_efi_file_path_device_path' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[  243s]   136 |   size = grub_utf8_to_utf16 (fp->path_name, len * GRUB_MAX_UTF16_PER_UTF8,
	[  243s]       |                              ~~^~~~~~~~~~~
	[  243s] ../../grub-core/loader/efi/chainloader.c:138:12: error: taking address of packed member of 'struct grub_efi_file_path_device_path' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[  243s]   138 |   for (p = fp->path_name; p < fp->path_name + size; p++)
	[  243s]       |            ^~

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Michael Chang  <mchang@suse.com>

	usbtest: Disable gcc9 -Waddress-of-packed-member
	Disable the -Wadress-of-packaed-member diagnostic for the
	grub_usb_get_string function since the result is false postive. The
	descstrp->str is found to be aligned in the buffer allocated for 'struct
	grub_usb_desc_str'.

	[  229s] ../../grub-core/commands/usbtest.c: In function 'grub_usb_get_string':
	[  229s] ../../grub-core/commands/usbtest.c:104:58: error: taking address of packed member of 'struct grub_usb_desc_str' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[  229s]   104 |   *grub_utf16_to_utf8 ((grub_uint8_t *) *string, descstrp->str,
	[  229s]       |                                                  ~~~~~~~~^~~~~

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Michael Chang  <mchang@suse.com>

	acpi: Fix gcc9 error -Waddress-of-packed-member
	Simply adds the missing packed attribute to 'struct grub_acpi_madt'.

	[  233s] ../../grub-core/commands/lsacpi.c: In function 'disp_acpi_xsdt_table':
	[  233s] ../../grub-core/commands/lsacpi.c:201:27: error: converting a packed 'struct grub_acpi_table_header' pointer (alignment 1) to a 'struct grub_acpi_madt' pointer (alignment 4) may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[  233s]   201 |  disp_madt_table ((struct grub_acpi_madt *) t);
	[  233s]       |                           ^~~~~~~~~~~~~~
	[  233s] In file included from ../../grub-core/commands/lsacpi.c:23:
	[  233s] ../../include/grub/acpi.h:50:8: note: defined here
	[  233s]    50 | struct grub_acpi_table_header
	[  233s]       |        ^~~~~~~~~~~~~~~~~~~~~~
	[  233s] ../../include/grub/acpi.h:90:8: note: defined here
	[  233s]    90 | struct grub_acpi_madt
	[  233s]       |        ^~~~~~~~~~~~~~
	[  233s] ../../grub-core/commands/lsacpi.c: In function 'disp_acpi_rsdt_table':
	[  233s] ../../grub-core/commands/lsacpi.c:225:27: error: converting a packed 'struct grub_acpi_table_header' pointer (alignment 1) to a 'struct grub_acpi_madt' pointer (alignment 4) may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[  233s]   225 |  disp_madt_table ((struct grub_acpi_madt *) t);
	[  233s]       |                           ^~~~~~~~~~~~~~
	[  233s] In file included from ../../grub-core/commands/lsacpi.c:23:
	[  233s] ../../include/grub/acpi.h:50:8: note: defined here
	[  233s]    50 | struct grub_acpi_table_header
	[  233s]       |        ^~~~~~~~~~~~~~~~~~~~~~
	[  233s] ../../include/grub/acpi.h:90:8: note: defined here
	[  233s]    90 | struct grub_acpi_madt
	[  233s]       |        ^~~~~~~~~~~~~~

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Michael Chang  <mchang@suse.com>

	hfsplus: Fix gcc9 error with -Waddress-of-packed-member
	The catkey->name could be unaligned since the address of 'void* record'
	is calculated as offset in bytes to a malloc buffer.

	The fix is using aligned buffer allocated by grub_malloc for holding
	the UTF16 string copied from catkey->name. And use that buffer as
	argument for grub_utf16_to_utf8 to convert to UTF8 strings.

	In addition, using a new copy of buffer rather than catkey->name itself
	for processing the endianess conversion, we can also get rid of the hunk
	restoring byte order of catkey->name to what it was previously.

	[   59s] ../grub-core/fs/hfsplus.c: In function 'list_nodes':
	[   59s] ../grub-core/fs/hfsplus.c:738:57: error: taking address of packed member of 'struct grub_hfsplus_catkey' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]   738 |   *grub_utf16_to_utf8 ((grub_uint8_t *) filename, catkey->name,
	[   59s]       |                                                   ~~~~~~^~~~~~
	[   59s] ../grub-core/fs/hfsplus.c: In function 'grub_hfsplus_label':
	[   59s] ../grub-core/fs/hfsplus.c:1019:57: error: taking address of packed member of 'struct grub_hfsplus_catkey' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]  1019 |   *grub_utf16_to_utf8 ((grub_uint8_t *) (*label), catkey->name,
	[   59s]       |                                                   ~~~~~~^~~~~~

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Michael Chang  <mchang@suse.com>

	hfs: Fix gcc9 error -Waddress-of-packed-member
	Simply adds the missing packed attribute to 'struct grub_hfs_extent'.

	[   83s] ../grub-core/fs/hfs.c: In function 'grub_hfs_iterate_records':
	[   83s] ../grub-core/fs/hfs.c:699:9: error: taking address of packed member of 'struct grub_hfs_sblock' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   83s]   699 |      ? (&data->sblock.catalog_recs)
	[   83s]       |        ~^~~~~~~~~~~~~~~~~~~~~~~~~~~
	[   83s] ../grub-core/fs/hfs.c:700:9: error: taking address of packed member of 'struct grub_hfs_sblock' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   83s]   700 |      : (&data->sblock.extent_recs));
	[   83s]       |        ~^~~~~~~~~~~~~~~~~~~~~~~~~~

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Michael Chang  <mchang@suse.com>

	jfs: Disable gcc9 -Waddress-of-packed-member
	Disable the -Wadress-of-packaed-member diagnostic for the
	grub_jfs_getent function since the result is found to be false postive.

	The leaf is read into memory as continous chunks in size of 32 bytes and
	the pointer to its base is aligned, which also guarentee its member
	leaf->namepart is aligned.

	[   60s] ../grub-core/fs/jfs.c: In function 'grub_jfs_getent':
	[   60s] ../grub-core/fs/jfs.c:557:44: error: taking address of packed member of 'struct grub_jfs_leaf_dirent' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   60s]   557 |   le_to_cpu16_copy (filename + strpos, leaf->namepart, len < diro->data->namecomponentlen ? len
	[   60s]       |                                        ~~~~^~~~~~~~~~
	[   60s] ../grub-core/fs/jfs.c:570:48: error: taking address of packed member of 'struct grub_jfs_leaf_next_dirent' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   60s]   570 |  le_to_cpu16_copy (filename + strpos, next_leaf->namepart, len < 15 ? len : 15);
	[   60s]       |                                       ~~~~~~~~~^~~~~~~~~~
	[   60s] cc1: all warnings being treated as errors

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Michael Chang  <mchang@suse.com>

	cpio: Disable gcc9 -Waddress-of-packed-member
	Disable the -Wadress-of-packaed-member diagnostic for the
	grub_cpio_find_file function since the result is found to be false
	postive. Any pointers to member of the 'struct head hd' is aligned even
	if the structure is packed without paddings.

	[   59s] In file included from ../grub-core/fs/cpio.c:51:
	[   59s] ../grub-core/fs/cpio_common.c: In function 'grub_cpio_find_file':
	[   59s] ../grub-core/fs/cpio_common.c:58:31: error: taking address of packed member of 'struct head' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]    58 |   data->size = read_number (hd.filesize, ARRAY_SIZE (hd.filesize));
	[   59s]       |                             ~~^~~~~~~~~
	[   59s] ../grub-core/fs/cpio_common.c:60:29: error: taking address of packed member of 'struct head' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]    60 |     *mtime = read_number (hd.mtime, ARRAY_SIZE (hd.mtime));
	[   59s]       |                           ~~^~~~~~
	[   59s] ../grub-core/fs/cpio_common.c:61:28: error: taking address of packed member of 'struct head' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]    61 |   modeval = read_number (hd.mode, ARRAY_SIZE (hd.mode));
	[   59s]       |                          ~~^~~~~
	[   59s] ../grub-core/fs/cpio_common.c:62:29: error: taking address of packed member of 'struct head' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]    62 |   namesize = read_number (hd.namesize, ARRAY_SIZE (hd.namesize));
	[   59s]       |                           ~~^~~~~~~~~
	[   59s] In file included from ../grub-core/fs/cpio_be.c:51:
	[   59s] ../grub-core/fs/cpio_common.c: In function 'grub_cpio_find_file':
	[   59s] ../grub-core/fs/cpio_common.c:58:31: error: taking address of packed member of 'struct head' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]    58 |   data->size = read_number (hd.filesize, ARRAY_SIZE (hd.filesize));
	[   59s]       |                             ~~^~~~~~~~~
	[   59s] ../grub-core/fs/cpio_common.c:60:29: error: taking address of packed member of 'struct head' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]    60 |     *mtime = read_number (hd.mtime, ARRAY_SIZE (hd.mtime));
	[   59s]       |                           ~~^~~~~~
	[   59s] ../grub-core/fs/cpio_common.c:61:28: error: taking address of packed member of 'struct head' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]    61 |   modeval = read_number (hd.mode, ARRAY_SIZE (hd.mode));
	[   59s]       |                          ~~^~~~~
	[   59s] ../grub-core/fs/cpio_common.c:62:29: error: taking address of packed member of 'struct head' may result in an unaligned pointer value [-Werror=address-of-packed-member]
	[   59s]    62 |   namesize = read_number (hd.namesize, ARRAY_SIZE (hd.namesize));
	[   59s]       |                           ~~^~~~~~~~~

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Heinrich Schuchardt  <xypron.glpk@gmx.de>

	efi: Avoid NULL dereference if FilePath is NULL
	The UEFI specification allows LoadImage() to be called with a memory
	location only and without a device path. In this case FilePath will not be
	set in the EFI_LOADED_IMAGE_PROTOCOL.

	So in function grub_efi_get_filename() the device path argument may be
	NULL. As we cannot determine the device path in this case just return NULL
	from the function.

	Reviewed-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-23  Daniel Kiper  <daniel.kiper@oracle.com>

	x86/msr: Fix build with older GCC versions
	Some older GCC versions produce following error when x86 MSR modules are build:

	  In file included from commands/i386/rdmsr.c:29:0:
	  ../include/grub/i386/rdmsr.h:27:29: error: no previous prototype for ‘grub_msr_read’ [-Werror=missing-prototypes]
	   extern inline grub_uint64_t grub_msr_read (grub_uint32_t msr_id)
	                               ^
	  cc1: all warnings being treated as errors

	This happens due to lack of support for a such usage of extern keyword
	in older GCCs. Additionally, this usage is not consistent with the rest
	of codebase. So, replace it with static keyword.

	Additionally, fix incorrect coding style.

	Reported-by: Eric Snowberg <eric.snowberg@oracle.com>
	Reported-by: adrian15 <adrian15sgd@gmail.com>
	Reviewed-by: Vladimir 'phcoder' Serbinenko <phcoder@gmail.com>
	Reviewed-by: Eric Snowberg <eric.snowberg@oracle.com>
	Tested-by: adrian15 <adrian15sgd@gmail.com>

2019-04-09  Vladimir Serbinenko  <phcoder@gmail.com>

	Release 2.04~rc1

2019-04-09  Vladimir Serbinenko  <phcoder@gmail.com>

	Change fs functions to add fs_ prefix
	This avoid conflict with gnulib

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-08  Vladimir Serbinenko  <phcoder@google.com>

	A workaround for clang problem assembling startup_raw.S
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-04  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: NULL pointer dereference in grub_ieee1275_encode_devname()
	Function grub_strndup() may return NULL, this is called from
	function grub_ieee1275_get_devname() which is then called from
	function grub_ieee1275_encode_devname() to set device. The device
	variable could then be used with a NULL pointer.

	Reviewed-by: Colin Watson <cjwatson@ubuntu.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-02  Daniel Kiper  <daniel.kiper@oracle.com>

	docs/grub-dev: Change comments rules
	Current comments forms are annoying, so, some of them are disallowed
	starting from now. New rules are more flexible and mostly aligned
	with, e.g., Linux kernel comments rules.

	Reviewed-by: Vladimir Serbinenko <phcoder@google.com>

2019-04-02  Andrew Jeddeloh  <andrew.jeddeloh@coreos.com>

	loader/i386/linux: Calculate the setup_header length
	Previously the setup_header length was just assumed to be the size of the
	linux_kernel_params struct. The linux x86 32-bit boot protocol says that the
	end of the linux_i386_kernel_header is at 0x202 + the byte value at 0x201 in
	the linux_i386_kernel_header. So, calculate the size of the header using the
	end of the linux_i386_kernel_header, rather than assume it is the size of the
	linux_kernel_params struct.

	Additionally, add some required members to the linux_kernel_params
	struct and align the content of linux_i386_kernel_header struct with
	it. New members naming was taken directly from Linux kernel source.

	linux_kernel_params and linux_i386_kernel_header structs require more
	cleanup. However, this is not urgent, so, let's do this after release.
	Just in case...

	Reviewed-by: Vladimir Serbinenko <phcoder@google.com>
	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2019-04-02  Eric Snowberg  <eric.snowberg@oracle.com>

	efidisk: NULL pointer dereference in grub_efidisk_get_device_name()
	Function grub_efi_find_last_device_path() may return NULL when called
	from grub_efidisk_get_device_name().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-02  Eric Snowberg  <eric.snowberg@oracle.com>

	efidisk: NULL pointer dereference in is_child()
	Function grub_efi_find_last_device() path may return NULL when called
	from is_child().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-02  Eric Snowberg  <eric.snowberg@oracle.com>

	efidisk: Write to NULL pointer ldp
	Function grub_efi_find_last_device_path() may return constant NULL when
	called from find_parent_device().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-04-02  Vladimir Serbinenko  <phcoder@google.com>

	clang: Pair -Qn with -Qunused-arguments.
	When assembling module wirh clang -Qn ends up on command line but later ignored
	To avoid it breaking the compile, add -Qunused-arguments.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-28  John Paul Adrian Glaubitz  <glaubitz@physik.fu-berlin.de>

	ieee1275: Fix path reference in comment of sparc64 boot loader code
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-28  John Paul Adrian Glaubitz  <glaubitz@physik.fu-berlin.de>

	ieee1275: Include a.out header in assembly of sparc64 boot loader
	Recent versions of binutils dropped support for the a.out and COFF
	formats on sparc64 targets. Since the boot loader on sparc64 is
	supposed to be an a.out binary and the a.out header entries are
	rather simple to calculate in our case, we just write the header
	ourselves instead of relying on external tools to do that.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-26  Vladimir Serbinenko  <phcoder@gmail.com>

	Propagate GNU_PRINTF from gnulib vfprintf
	gnulib now replaces vfprintf and hence its format becomes GNU_PRINTF format

	This also fixes matching definitions to always use GNU format

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-26  Vladimir Serbinenko  <phcoder@gmail.com>

	efi/tpm.c: Add missing casts
	Without those casts we get a warning about implicit conversion of pointer
	to integer.

2019-03-26  Vladimir Serbinenko  <phcoder@gmail.com>

	POTFILES: Don't include gnulib in grub.pot
	They're translated as a separate project, so we
	don't want to submit them again.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-26  Vladimir Serbinenko  <phcoder@google.com>

	configure.ac: Use nostdlib when checking for nostdinc
	With clang nostdinc behaviour is influenced by nostdlib. Since we
	always add nostdlib, add it in test as well

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-25  Vladimir Serbinenko  <phcoder@gmail.com>

	efi/tpm.h: Fix hash_log_extend_event definition.
	I didn't check the spec but pointer to address doesn't make much sense
	and doesn't match the code.

	Rename grub_disk members
	Otherwise it horribly clashes with gnulib when it's
	replacing open/write/read/close

	grub-mkimagexx: Fix RISCV error message
	Outputting a raw pointer doesn't match the format and is
	also useless. Output offset instead.

	kern/emu/misc.c: Don't include config-util.h when running as GRUB_BUILD

	Support R_PPC_PLTREL24
	It's emitted by clang 7. It's the same as R_PPC_REL24.

2019-03-20  Daniel Kiper  <daniel.kiper@oracle.com>

	sparc: Enable __clzsi2() and __clzdi2()
	This patch is similiar to commit e795b9011 (RISC-V: Add libgcc helpers
	for clz) but for SPARC target.

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2019-03-20  Daniel Kiper  <daniel.kiper@oracle.com>

	mips: Enable __clzsi2()
	This patch is similiar to commit e795b9011 (RISC-V: Add libgcc helpers
	for clz) but for MIPS target.

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2019-03-20  Daniel Kiper  <daniel.kiper@oracle.com>

	verifiers: MIPS fallout cleanup
	MIPS fallout cleanup after commit 4d4a8c96e (verifiers: Add possibility
	to verify kernel and modules command lines).

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2019-03-20  Daniel Kiper  <daniel.kiper@oracle.com>

	verifiers: PowerPC fallout cleanup
	PowerPC fallout cleanup after commit 4d4a8c96e (verifiers: Add possibility
	to verify kernel and modules command lines) and ca0a4f689 (verifiers: File
	type for fine-grained signature-verification controlling).

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2019-03-20  Daniel Kiper  <daniel.kiper@oracle.com>

	verifiers: IA-64 fallout cleanup
	IA-64 fallout cleanup after commit 4d4a8c96e (verifiers: Add possibility
	to verify kernel and modules command lines).

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2019-03-20  Colin Watson  <cjwatson@ubuntu.com>

	posix_wrap: Flesh out posix_wrap/limits.h a little more
	In addition to what was already there, Gnulib's <intprops.h> needs SCHAR_MIN,
	SCHAR_MAX, SHRT_MIN, INT_MIN, LONG_MIN, and LONG_MAX. Fixes build on CentOS 7.

	Reported-by: "Chen, Farrah" <farrah.chen@intel.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-19  Marek Marczykowski-Górecki  <marmarek@invisiblethingslab.com>

	xen: Look for Xen notes in section headers too
	Mirror behaviour of ELF loader in libxc: first look for Xen notes in
	PT_NOTE segment, then in SHT_NOTE section and only then fallback to
	a section with __xen_guest name. This fixes loading PV kernels that
	Xen note have outside of PT_NOTE. While this may be result of a buggy
	linker script, loading such kernel directly works fine, so make it work
	with GRUB too. Specifically, this applies to binaries built from Unikraft.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-19  Colin Watson  <cjwatson@ubuntu.com>

	getroot: Save/restore CWD more reliably on Unix
	Various GRUB utilities fail if the current directory doesn't exist,
	because grub_find_device() chdirs to a different directory and then
	fails when trying to chdir back.  Gnulib's save-cwd module uses fchdir()
	instead when it can, avoiding this category of problem.

	Fixes Debian bug #918700.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Add explicit net_dhcp command
	Mostly for cosmetic reasons, we add a "net_dhcp" command, which is (at the
	moment) identical to the existing "net_bootp" command. Both actually trigger
	a DHCP handshake now, and both should be able to deal with pure BOOTP servers.
	We could think about dropping the DHCP options from the initial DISCOVER packet
	when the user issues the net_bootp command, but it's unclear whether this is
	really useful, as both protocols should be able to coexist.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Actually send out DHCPv4 DISCOVER and REQUEST messages
	Even though we were parsing some DHCP options sent by the server, so far
	we are only using the BOOTP 2-way handshake, even when talking to a DHCP
	server.

	Change this by actually sending out DHCP DISCOVER packets instead of the
	generic (mostly empty) BOOTP BOOTREQUEST packets.

	A pure BOOTP server would ignore the extra DHCP options in the DISCOVER
	packet and would just reply with a BOOTREPLY packet, which we also
	handle in the code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Allow receiving DHCP OFFER and ACK packets
	In respone to a BOOTREQUEST packet a BOOTP server would answer with a BOOTREPLY
	packet, which ends the conversation for good. DHCP uses a 4-way handshake,
	where the initial server respone is an OFFER, which has to be answered with
	REQUEST by the client again, only to be completed by an ACKNOWLEDGE packet
	from the server.

	Teach the grub_net_process_dhcp() function to deal with OFFER packets,
	and treat ACK packets the same es BOOTREPLY packets.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Use DHCP options for name and bootfile
	The BOOTP RFC describes the boot file name and the server name as being part
	of the integral BOOTP data structure, with some limits on the size of them.
	DHCP extends this by allowing them to be separate DHCP options, which is more
	flexible.

	Teach the code dealing with those fields to check for those DHCP options first
	and use this information, if provided. We fall back to using the BOOTP
	information if those options are not used.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Introduce per-interface timeout
	Currently we have a global timeout for all network cards in the BOOTP/DHCP
	discovery process.

	Make this timeout a per-interface one, so better accommodate the upcoming
	4-way DHCP handshake and to also cover the lease time limit a DHCP offer
	will come with.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Make grub_net_process_dhcp() take an interface
	Change the interface of the function dealing with incoming BOOTP packets
	to take an interface instead of a card, to allow more fine per-interface
	state (timeout, handshake state) later on.

	Use the opportunity to clean up the code a bit.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Refactor DHCP packet transmission into separate function
	In contrast to BOOTP, DHCP uses a 4-way handshake, so requires to send
	packets more often.

	Refactor the generation and sending of the BOOTREQUEST packet into
	a separate function, so that future code can more easily reuse this.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Allow overloading legacy bootfile and name field
	DHCP specifies a special dummy option OVERLOAD, to allow DHCP options to
	spill over into the (legacy) BOOTFILE and SNAME fields.

	Parse and handle this option properly.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Replace parse_dhcp_vendor() with find_dhcp_option()
	For proper DHCP support we will need to parse DHCP options from a packet
	more often and at various places.

	Refactor the option parsing into a new function, which will scan a packet to
	find *a particular* option field. Use that new function in places where we
	were dealing with DHCP options before.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/dhcp: Remove dead code
	The comment is right, the "giaddr" fields holds the IP address of the BOOTP
	relay, not a general purpose router address. Just remove the commented code,
	archeologists can find it in the git history.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Jesús Diéguez Fernández  <jesusdf@gmail.com>

	msr: Add new MSR modules (rdmsr/wrmsr)
	In order to be able to read from and write to model-specific registers,
	two new modules are added. They are i386 specific, as the cpuid module.

	rdmsr module registers the command rdmsr that allows reading from a MSR.
	wrmsr module registers the command wrmsr that allows writing to a MSR.

	wrmsr module is disabled if UEFI secure boot is enabled.

	Please note that on SMP systems, interacting with a MSR that has a scope
	per hardware thread, implies that the value only applies to the
	particular cpu/core/thread that ran the command.

	Also, if you specify a reserved or unimplemented MSR address, it will
	cause a general protection exception (which is not currently being
	handled) and the system will reboot.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Jesús Diéguez Fernández  <jesusdf@gmail.com>

	asm: Replace "__asm__ __volatile__" with "asm volatile"
	In order to maintain the coding style consistency, it was requested to
	replace the methods that use "__asm__ __volatile__" with "asm volatile".

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64: Add bios boot partition support
	Add BIOS Boot Partition support for sparc64 platforms.  This will work a
	little different than x86.  With GPT, both the OBP "load" and "boot" commands
	are partition aware and neither command can see the partition table.  Therefore
	the entire boot-loader is stored within the BIOS Boot Partition and nothing
	is stored within the bootstrap code area of MBR.

	To use it, the end user will issue the boot command with the path pointing to
	the BIOS Boot Partition.

	For example with the disk below:

	Model: Unknown (unknown)
	Disk /dev/nvme1n1: 1600GB
	Sector size (logical/physical): 512B/512B
	Partition Table: gpt

	Number  Start   End     Size    File system  Name  Flags
	1      1049kB  1075MB  1074MB   ext3
	2      1075MB  1076MB  1049kB                     bios_grub
	3      1076MB  1600GB  1599GB                     lvm

	To boot grub2 from OBP, you would use:

	boot /pci@302/pci@1/pci@0/pci@13/nvme@0/disk@1:b

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: obdisk driver
	Add a new disk driver called obdisk for IEEE1275 platforms.  Currently
	the only platform using this disk driver is SPARC, however other IEEE1275
	platforms could start using it if they so choose.  While the functionality
	within the current IEEE1275 ofdisk driver may be suitable for PPC and x86, it
	presented too many problems on SPARC hardware.

	Within the old ofdisk, there is not a way to determine the true canonical
	name for the disk.  Within Open Boot, the same disk can have multiple names
	but all reference the same disk.  For example the same disk can be referenced
	by its SAS WWN, using this form:

	/pci@302/pci@2/pci@0/pci@17/LSI,sas@0/disk@w5000cca02f037d6d,0

	It can also be referenced by its PHY identifier using this form:

	/pci@302/pci@2/pci@0/pci@17/LSI,sas@0/disk@p0

	It can also be referenced by its Target identifier using this form:

	/pci@302/pci@2/pci@0/pci@17/LSI,sas@0/disk@0

	Also, when the LUN=0, it is legal to omit the ,0 from the device name.  So with
	the disk above, before taking into account the device aliases, there are 6 ways
	to reference the same disk.

	Then it is possible to have 0 .. n device aliases all representing the same disk.
	Within this new driver the true canonical name is determined using the the
	IEEE1275 encode-unit and decode-unit commands when address_cells == 4.  This
	will determine the true single canonical name for the device so multiple ihandles
	are not opened for the same device.  This is what frequently happens with the old
	ofdisk driver.  With some devices when they are opened multiple times it causes
	the entire system to hang.

	Another problem solved with this driver is devices that do not have a device
	alias can be booted and used within GRUB. Within the old ofdisk, this was not
	possible, unless it was the original boot device.  All devices behind a SAS
	or SCSI parent can be found.   Within the old ofdisk, finding these disks
	relied on there being an alias defined.  The alias requirement is not
	necessary with this new driver.  It can also find devices behind a parent
	after they have been hot-plugged.  This is something that is not possible
	with the old ofdisk driver.

	The old ofdisk driver also incorrectly assumes that the device pointing to by a
	device alias is in its true canonical form. This assumption is never made with
	this new driver.

	Another issue solved with this driver is that it properly caches the ihandle
	for all open devices.  The old ofdisk tries to do this by caching the last
	opened ihandle.  However this does not work properly because the layer above
	does not use a consistent device name for the same disk when calling into the
	driver.  This is because the upper layer uses the bootpath value returned within
	/chosen, other times it uses the device alias, and other times it uses the
	value within grub.cfg.  It does not have a way to figure out that these devices
	are the same disk.  This is not a problem with this new driver.

	Due to the way GRUB repeatedly opens and closes the same disk. Caching the
	ihandle is important on SPARC.  Without caching, some SAS devices can take
	15 - 20 minutes to get to the GRUB menu. This ihandle caching is not possible
	without correctly having the canonical disk name.

	When available, this driver also tries to use the deblocker #blocks and
	a way of determining the disk size.

	Finally and probably most importantly, this new driver is also capable of
	seeing all partitions on a GPT disk.  With the old driver, the GPT
	partition table can not be read and only the first partition on the disk
	can be seen.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-12  Paul Menzel  <pmenzel@molgen.mpg.de>

	Makefile: Allow to set file systems modules for default_payload.elf
	By default all file system modules are added to the GRUB coreboot
	payload `default_payload.elf`. This makes the image quite big,
	especially as often not all modules are needed.

	Introduce the variable `FS_PAYLOAD_MODULES`, which can be used to
	explicitly set file systems modules to be added.

	    $ make default_payload.elf
	    test -f default_payload.elf && rm default_payload.elf || true
	    pkgdatadir=. ./grub-mkstandalone --grub-mkimage=./grub-mkimage -O i386-coreboot -o default_payload.elf --modules='ahci pata ehci uhci ohci usb_keyboard usbms part_msdos ext2 fat at_keyboard part_gpt usbserial_usbdebug cbfs' --install-modules='ls linux search configfile normal cbtime cbls memrw iorw minicmd lsmmap lspci halt reboot hexdump pcidump regexp setpci lsacpi chain test serial multiboot cbmemc linux16 gzio echo help syslinuxcfg xnu affs afs bfs btrfs cbfs cpio cpio_be exfat ext2 f2fs fat hfs hfsplus iso9660 jfs minix minix2 minix2_be minix3 minix3_be minix_be newc nilfs2 ntfs odc procfs reiserfs romfs sfs squash4 tar udf ufs1 ufs1_be ufs2 xfs zfs password_pbkdf2 ' --fonts= --themes= --locales= -d grub-core/ /boot/grub/grub.cfg=./coreboot.cfg
	    $ ls -l default_payload.elf
	    -rw-rw---- 1 joey joey 1199568 Mar  6 13:58 default_payload.elf

	    $ make default_payload.elf FS_PAYLOAD_MODULES="" # ext2 already in `--modules`
	    test -f default_payload.elf && rm default_payload.elf || true
	    pkgdatadir=. ./grub-mkstandalone --grub-mkimage=./grub-mkimage -O i386-coreboot -o default_payload.elf --modules='ahci pata ehci uhci ohci usb_keyboard usbms part_msdos ext2 fat at_keyboard part_gpt usbserial_usbdebug cbfs' --install-modules='ls linux search configfile normal cbtime cbls memrw iorw minicmd lsmmap lspci halt reboot hexdump pcidump regexp setpci lsacpi chain test serial multiboot cbmemc linux16 gzio echo help syslinuxcfg xnu  password_pbkdf2 ' --fonts= --themes= --locales= -d grub-core/ /boot/grub/grub.cfg=./coreboot.cfg
	    $ ls -l default_payload.elf
	    -rw-rw---- 1 joey joey 832976 Mar  7 12:13 default_payload.elf

	So, the resulting payload size is around 370 kB smaller. (Adding it to
	the CBFS, it will be compressed, so the effective size difference will
	be smaller.)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-07  Vladimir Serbinenko  <phcoder@gmail.com>

	windows/platform.c: Fix compilation errors

2019-03-05  Colin Watson  <cjwatson@ubuntu.com>

	gnulib: Upgrade Gnulib and switch to bootstrap tool
	Upgrade Gnulib files to 20190105.

	It's much easier to maintain GRUB's use of portability support files
	from Gnulib when the process is automatic and driven by a single
	configuration file, rather than by maintainers occasionally running
	gnulib-tool and committing the result.  Removing these
	automatically-copied files from revision control also removes the
	temptation to hack the output in ways that are difficult for future
	maintainers to follow.  Gnulib includes a "bootstrap" program which is
	designed for this.

	The canonical way to bootstrap GRUB from revision control is now
	"./bootstrap", but "./autogen.sh" is still useful if you just want to
	generate the GRUB-specific parts of the build system.

	GRUB now requires Autoconf >= 2.63 and Automake >= 1.11, in line with
	Gnulib.

	Gnulib source code is now placed in grub-core/lib/gnulib/ (which should
	not be edited directly), and GRUB's patches are in
	grub-core/lib/gnulib-patches/.  I've added a few notes to the developer
	manual on how to maintain this.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-05  Colin Watson  <cjwatson@ubuntu.com>

	syslinux: Fix syslinux_test in out-of-tree builds
	syslinux_parse simplifies some filenames by removing things like ".."
	segments, but the tests assumed that @abs_top_srcdir@ would be
	untouched, which is not true in the case of out-of-tree builds where
	@abs_top_srcdir@ may contain ".." segments.

	Performing the substitution requires some awkwardness in Makefile.am due
	to details of how config.status works.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-05  Colin Watson  <cjwatson@ubuntu.com>

	util: Detect more I/O errors
	Many of GRUB's utilities don't check anywhere near all the possible
	write errors.  For example, if grub-install runs out of space when
	copying a file, it won't notice.  There were missing checks for the
	return values of write, fflush, fsync, and close (or the equivalents on
	other OSes), all of which must be checked.

	I tried to be consistent with the existing logging practices of the
	various hostdisk implementations, but they weren't entirely consistent
	to start with so I used my judgement.  The result at least looks
	reasonable on GNU/Linux when I provoke a write error:

	  Installing for x86_64-efi platform.
	  grub-install: error: cannot copy `/usr/lib/grub/x86_64-efi-signed/grubx64.efi.signed' to `/boot/efi/EFI/debian/grubx64.efi': No space left on device.

	There are more missing checks in other utilities, but this should fix
	the most critical ones.

	Fixes Debian bug #922741.

	Reviewed-by: Steve McIntyre <93sam@debian.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-03-05  James Clarke  <jrtc27@jrtc27.com>

	osdep/freebsd: Fix partition calculation for EBR entries
	For EBR partitions, "start" is the relative starting sector of the EBR
	header itself, whereas "offset" is the relative starting byte of the
	partition's contents, excluding the EBR header and any padding. Thus we
	must use "offset", and divide by the sector size to convert to sectors.

	Fixes Debian bug #923253.

	Reviewed-by: Colin Watson <cjwatson@ubuntu.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-26  Steve McIntyre  <93sam@debian.org>

	grub-install: Check for arm-efi as a default target
	Much like on x86, we can work out if the system is running on top of EFI
	firmware. If so, return "arm-efi". If not, fall back to "arm-uboot" as
	previously.

	Split out the code to (maybe) load the efivar module and check for
	/sys/firmware/efi into a common helper routine is_efi_system().

	Reviewed-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-26  Daniel Kiper  <daniel.kiper@oracle.com>

	Revert "grub-install: Check for arm-efi as a default target"
	This reverts commit 082fd84d525f8d6602f892160b77c0a948308a78.

	Incorrect version of the patch was pushed into the git repo.

	Reported-by: Leif Lindholm <leif.lindholm@linaro.org>

2019-02-25  Alexander Graf  <agraf@suse.de>

	travis: Add Travis CI config file
	There is a really convenient service for open source project from Travis
	CI: They allow for free CI testing using their infrastructure.

	GRUB has had issues with broken builds for various targets for a long time
	already. The main reason is a lack of CI to just do smoke tests on whether
	all targets still at least compile.

	This patch adds a Travis config file which builds (almost) all currently
	available targets.

	On top of that, this Travis config also runs a small execution test on the
	x86_64-efi target.

	All of this config file can easily be extended further on. It probably
	makes sense to do something similar to the u-boot test infrastructure
	that communicates with the payload properly. Going forward, we also will
	want to do more QEMU runtime checks for other targets.

	Currently, with this config alone, I already see about half of the available
	targets as broken. So it's definitely desperately needed :).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Steve McIntyre  <93sam@debian.org>

	grub-install: Check for arm-efi as a default target
	Much like on x86, we can work out if the system is running on top
	of EFI firmware. If so, return "arm-efi". If not, fall back to
	"arm-uboot" as previously.

	Heavily inspired by the existing code for x86.

	Reviewed-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Leif Lindholm  <leif.lindholm@linaro.org>

	arm64/efi: Fix grub_efi_get_ram_base()
	grub_efi_get_ram_base() looks for the lowest available RAM address by
	traversing the memory map, comparing lowest address found so far.
	Due to a brain glitch, that "so far" was initialized to GRUB_UINT_MAX -
	completely preventing boot on systems without RAM below 4GB.

	Change the initial value to GRUB_EFI_MAX_USABLE_ADDRESS, as originally
	intended.

	Reported-by: Steve McIntyre <93sam@debian.org>
	Tested-by: Steve McIntyre <93sam@debian.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Paul Menzel  <pmenzel@molgen.mpg.de>

	normal/menu: Do not treat error values as key presses
	Some terminals, like `grub-core/term/at_keyboard.c`, return `-1` in case
	they are not ready yet.

	      if (! KEYBOARD_ISREADY (grub_inb (KEYBOARD_REG_STATUS)))
	        return -1;

	Currently, that is treated as a key press, and the menu time-out is
	cancelled/cleared. This is unwanted, as the boot is stopped and the user
	manually has to select a menu entry. Therefore, adapt the condition to
	require the key value also to be greater than 0.

	`GRUB_TERM_NO_KEY` is defined as 0, so the condition could be collapsed
	to greater or equal than (≥) 0, but the compiler will probably do that
	for us anyway, so keep the cases separate for clarity.

	This is tested with coreboot, the GRUB default payload, and the
	configuration file `grub.cfg` below.

	For GRUB:

	    $ ./autogen.sh
	    $ ./configure --with-platform=coreboot
	    $ make -j`nproc`
	    $ make default_payload.elf

	For coreboot:

	    $ more grub.cfg
	    serial --unit 0 --speed 115200
	    set timeout=5

	    menuentry 'halt' {
	        halt
	    }
	    $ build/cbfstool build/coreboot.rom add-payload \
	        -f /dev/shm/grub/default_payload.elf -n fallback/payload -c lzma
	    $ build/cbfstool build/coreboot.rom add -f grub.cfg -n etc/grub.cfg -t raw
	    $ qemu-system-x86_64 --version
	    QEMU emulator version 3.1.0 (Debian 1:3.1+dfsg-2+b1)
	    Copyright (c) 2003-2018 Fabrice Bellard and the QEMU Project developers
	    $ qemu-system-x86_64 -M pc -bios build/coreboot.rom -serial stdio -nic none

	Currently, the time-out is cancelled/cleared. With the commit, it is not.
	With a small GRUB payload, this the problem is also reproducible on the
	ASRock E350M1.

	Link: http://lists.gnu.org/archive/html/grub-devel/2019-01/msg00037.html

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	fdt: Treat device tree file type like ACPI
	We now have signature check logic in grub which allows us to treat
	files differently depending on their file type.

	Treat a loaded device tree like an overlayed ACPI table.
	Both describe hardware, so I suppose their threat level is the same.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	RISC-V: Add to build system
	This patch adds support for RISC-V to the grub build system. With this
	patch, I can successfully build grub on RISC-V as a UEFI application.

	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
	Tested-by: Bin Meng <bmeng.cn@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	RISC-V: Add libgcc helpers for clz
	Gcc may decide it wants to call helper functions to execute clz. Provide
	them in our own copy of libgcc.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	RISC-V: Add auxiliary files
	To support a new architecture we need to provide a few helper functions
	for memory, cache, timer, etc support.

	This patch adds the remainders of those. Some bits are still disabled,
	as I couldn't guarantee that we're always running on models / in modes
	where the respective hardware is available.

	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	RISC-V: Add awareness for RISC-V reloations
	This patch adds awareness of RISC-V relocations throughout the grub tools
	as well as dynamic linkage and elf->PE relocation conversion support.

	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	RISC-V: Add Linux load logic
	We currently only support to run grub on RISC-V as UEFI payload. Ideally,
	we also only want to support running Linux underneath as UEFI payload.

	Prepare that with some Linux boot stub code. Once the arm64 target is
	generalized, we can hook into that one and gain boot functionality.

	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	RISC-V: Add early startup code
	On entry, we need to save the system table pointer as well as our image
	handle. Add an early startup file that saves them and then brings us
	into our main function.

	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
	Tested-by: Bin Meng <bmeng.cn@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	RISC-V: Add setjmp implementation
	This patch adds a 32/64 capable setjmp implementation for RISC-V.

	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
	Tested-by: Bin Meng <bmeng.cn@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	elf.h: Add RISC-V definitions
	The RISC-V ABI document outlines ELF header structure and relocation
	information. Pull the respective magic numbers into our elf header
	so we can make use of them.

	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
	Tested-by: Bin Meng <bmeng.cn@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	PE: Add RISC-V definitions
	The PE format defines magic numbers as well as relocation identifiers for
	RISC-V. Add them to our include file, so we can make use of them.

	Reviewed-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
	Tested-by: Bin Meng <bmeng.cn@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-25  Alexander Graf  <agraf@suse.de>

	efi: Rename armxx to arch
	Some architectures want to boot Linux as plain UEFI binary. Today that
	really only encompasses ARM and AArch64, but going forward more
	architectures may adopt that model.

	So rename our internal API accordingly.

	Acked-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Alistair Francis <alistair.francis@wdc.com>
	Reviewed-by: Bin Meng <bmeng.cn@gmail.com>
	Tested-by: Bin Meng <bmeng.cn@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-02-06  Alexander Graf  <agraf@suse.de>

	mkimage: Clarify file alignment in efi case
	There are a few spots in the PE generation code for EFI binaries that uses
	the section alignment rather than file alignment, even though the alignment
	is really only file bound.

	Replace those cases with the file alignment constant instead.

	Reported-by: Daniel Kiper <dkiper@net-space.pl>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Julien ROBIN <julien.robin28@free.fr>

2019-02-06  Alexander Graf  <agraf@suse.de>

	mkimage: Align efi sections on 4k boundary
	There is UEFI firmware popping up in the wild now that implements stricter
	permission checks using NX and write protect page table entry bits.

	This means that firmware now may fail to load binaries if its individual
	sections are not page aligned, as otherwise it can not ensure permission
	boundaries.

	So let's bump all efi section alignments up to 4k (EFI page size). That way
	we will stay compatible going forward.

	Unfortunately our internals can't deal very well with a mismatch of alignment
	between the virtual and file offsets, so we have to also pad our target
	binary a bit.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Julien ROBIN <julien.robin28@free.fr>

2019-02-06  Alexander Graf  <agraf@suse.de>

	mkimage: Use EFI32_HEADER_SIZE define in arm-efi case
	The efi-arm case was defining its own header size calculation, even though it's
	100% identical to the common EFI32_HEADER_SIZE definition.

	So let's clean it up to use the common define.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Julien ROBIN <julien.robin28@free.fr>

2019-02-06  Guillaume GARDET  <guillaume.gardet@arm.com>

	arm: Move initrd upper to leave more space for kernel
	This patch allows to have bigger kernels. If the kernel grows, then it will
	overwrite the initrd when it is extracted.

	Acked-by: Alexander Graf <agraf@suse.de>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-01-23  Leif Lindholm  <leif.lindholm@linaro.org>

	linux, efi, arm*, fdt: Break FDT extra allocation space out into a #define
	A certain amount of dynamic space is required for the handover from
	GRUB/Linux-EFI-stub. This entails things like initrd addresses,
	address-cells entries and associated strings.

	But move this into a proper centralised #define rather than live-code
	it in the loader.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-01-22  Cristian Ciocaltea  <cristian.ciocaltea@gmail.com>

	uboot: Add the missing disk write operation support
	uboot_disk_write() is currently lacking the write support
	to storage devices because, historically, those devices did not
	implement block_write() in U-Boot.

	The solution has been tested using a patched U-Boot loading
	and booting GRUB in a QEMU vexpress-a9 environment.
	The disk write operations were triggered with GRUB's save_env
	command.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-01-21  Max Tottenham  <mtottenh@akamai.com>

	tpm: Fix bug in GRUB2 TPM module
	The value of tpm_handle changes between successive calls to grub_tpm_handle_find(),
	as instead of simply copying the stored pointer we end up taking the address of
	said pointer when using the cached value of grub_tpm_handle.

	This causes grub_efi_open_protocol() to return a nullptr in grub_tpm2_execute()
	and grub_tpm2_log_event(). Said nullptr goes unchecked and
	efi_call_5(tpm->hash_log_extend_event,...) ends up jumping to 0x0, Qemu crashes
	once video ROM is reached at 0xb0000.

	This patch seems to do the trick of fixing that bug, but we should also ensure
	that all calls to grub_efi_open_protocol() are checked so that we don't start
	executing low memory.

	Reviewed-by: Matthew Garrett <mjg59@google.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-01-14  Colin Watson  <cjwatson@ubuntu.com>

	pgp: Fix emu build and tests after pgp module renaming
	Commit b07feb8746c3bb845e3f0d33d37c0bded704d14d (verifiers: Rename
	verify module to pgp module) renamed the "verify" module to "pgp", but
	the GRUB_MOD_INIT and GRUB_MOD_FINI macros were left as "verify", which
	broke the emu target build; and file_filter_test still referred to the
	now non-existent "verify" module. Fix both of these.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-01-14  Peter Große  <pegro@friiks.de>

	grub-mkconfig/20_linux_xen: Support multiple early initrd images
	Add support for multiple, shared, early initrd images. These early
	images will be loaded in the order declared, and all will be loaded
	before the initrd image.

	While many classes of data can be provided by early images, the
	immediate use case would be for distributions to provide CPU
	microcode to mitigate the Meltdown and Spectre vulnerabilities.

	Xen has also support to load microcode updates provided as additional
	modules by the bootloader.

	There are two environment variables provided for declaring the early
	images.

	* GRUB_EARLY_INITRD_LINUX_STOCK is for the distribution declare
	  images that are provided by the distribution or installed packages.
	  If undeclared, this will default to a set of common microcode image
	  names.

	* GRUB_EARLY_INITRD_LINUX_CUSTOM is for user created images. User
	  images will be loaded after the stock images.

	These separate configurations allow the distribution and user to
	declare different image sets without clobbering each other.

	This also makes a minor update to ensure that UUID partition labels
	stay disabled when no initrd image is found, even if early images are
	present.

	This is basically a copy of a698240d "grub-mkconfig/10_linux: Support
	multiple early initrd images" by Matthew S. Turnbull.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2019-01-14  Heinrich Schuchardt  <xypron.glpk@gmx.de>

	grub-core/loader/efi/fdt.c: Do not copy random memory
	We should not try to copy any memory area which is outside of the original
	fdt. If this extra memory is controlled by a hypervisor this might end
	with a crash.

	Reviewed-by: Leif Lindholm <leif.lindholm@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-12-12  Matthew Garrett  <matthewgarrett@google.com>

	verifiers: Add TPM documentation
	Describe the behaviour of GRUB when the TPM module is in use.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-12-12  Matthew Garrett  <mjg59@google.com>

	verifiers: Core TPM support
	Add support for performing basic TPM measurements. Right now this only
	supports extending PCRs statically and only on UEFI. In future we might
	want to have some sort of mechanism for choosing which events get logged
	to which PCRs, but this seems like a good default policy and we can wait
	to see whether anyone  has a use case before adding more complexity.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-12-12  Matthew Garrett  <mjg59@google.com>

	verifiers: Verify commands executed by grub
	Pass all commands executed by GRUB to the verifiers layer. Most verifiers will
	ignore this, but some (such as the TPM verifier) want to be able to measure and
	log each command executed in order to ensure that the boot state is as expected.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen_pvh: Add support to configure
	Support platform i386/xen_pvh in configure.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen_pvh: Support grub-install for xen_pvh
	Add xen_pvh support to grub-install.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen_pvh: Support building a standalone image
	Support mkimage for xen_pvh.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Use elfnote defines instead of plain numbers
	In order to avoid using plain integers for the ELF notes use the
	available Xen include instead.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Hans van Kranenburg  <hans@knorrie.org>

	grub-module-verifier: Ignore all_video for xen_pvh
	This solves the build failing with "Error: no symbol table and no
	.moddeps section"

	Also see:
	- 6371e9c10433578bb236a8284ddb9ce9e201eb59
	- https://savannah.gnu.org/bugs/?49012

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen_pvh: Add build runes for grub-core
	Add the modifications to the build system needed to build a xen_pvh
	grub.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Init memory regions for PVH
	Add all usable memory regions to grub memory management and add the
	needed mmap iterate code, which will be used by grub core (e.g.
	grub-core/lib/relocator.c or grub-core/mmap/mmap.c).

	As we are running in 32-bit mode don't add memory above 4GB.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Setup Xen specific data for PVH
	Initialize the needed Xen specific data. This is:

	- the Xen start of day page containing the console and Xenstore ring
	  page PFN and event channel
	- the grant table
	- the shared info page

	Write back the possibly modified memory map to the hypervisor in case
	the guest is reading it from there again.

	Set the RSDP address for the guest from the start_info page passed
	as boot parameter.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Reviewed-by: Roger Pau Monné <roger.pau@citrix.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Get memory map from hypervisor for PVH
	Retrieve the memory map from the hypervisor and normalize it to contain
	no overlapping entries and to be sorted by address.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Setup hypercall page for PVH
	Add the needed code to setup the hypercall page for calling into the
	Xen hypervisor.

	Import the XEN_HVM_DEBUGCONS_IOPORT define from Xen unstable into
	include/xen/arch-x86/xen.h

	Reviewed-by: Roger Pau Monné <roger.pau@citrix.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Add PVH boot entry code
	Add the code for the Xen PVH mode boot entry.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Add basic hooks for PVH in current code
	Add the hooks to current code needed for Xen PVH. They will be filled
	with code later when the related functionality is being added.

	loader/i386/linux.c needs to include machine/kernel.h now as it needs
	to get GRUB_KERNEL_USE_RSDP_ADDR from there. This in turn requires to
	add an empty kernel.h header for some i386 platforms (efi, coreboot,
	ieee1275, xen) and for x86_64 efi.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Add PVH specific defines to offset.h
	include/grub/offsets.h needs some defines for Xen PVH mode.

	Add them. While at it line up the values in the surrounding lines to
	start at the same column.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Modify grub_xen_ptr2mfn() for Xen PVH
	grub_xen_ptr2mfn() returns the machine frame number for a given pointer
	value. For Xen-PVH guests this is just the PFN. Add the PVH specific
	variant.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Rearrange xen/init.c to prepare it for Xen PVH mode
	Rearrange grub-core/kern/xen/init.c to prepare adding PVH mode support
	to it. This includes putting some code under #ifdef GRUB_MACHINE_XEN
	as it will not be used when running as PVH.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Add some dummy headers for PVH mode
	With Xen PVH mode adding a new machine type the machine related headers
	need to be present for the build to succeed. Most of the headers just
	need to include the related common i386 headers. Add those to the tree.

	Note that xen_pvh/int.h needs to include pc/int_types.h instead of
	pc/int.h in order to avoid the definition of grub_bios_interrupt().

	xen_pvh/memory.h needs to include coreboot/memory.h (like some other
	<machine>/memory.h do as well) as this contains just the needed stubs.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Prepare common code for Xen PVH support
	Some common code needs to be special cased for Xen PVH mode. This hits
	mostly Xen PV mode specific areas.

	Split include/grub/i386/pc/int_types.h off from
	include/grub/i386/pc/int.h to support including this file later from
	xen_pvh code without the grub_bios_interrupt definition.

	Move definition of struct grub_e820_mmap_entry from
	grub-core/mmap/i386/pc/mmap.c to include/grub/i386/memory.h in order
	to make it usable from xen_pvh code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Carve out grant tab initialization into dedicated function
	Initialize the grant tab in a dedicated function. This will enable
	using it for PVH guests, too.

	Call the new function from grub_machine_init() as this will later
	be common between Xen PV and Xen PVH mode.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	loader/linux: Support passing RSDP address via boot params
	Xen PVH guests will have the RSDP at an arbitrary address. Support that
	by passing the RSDP address via the boot parameters to Linux.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-12  Juergen Gross  <jgross@suse.com>

	xen: Add some Xen headers
	In order to support grub2 in Xen PVH environment some additional Xen
	headers are needed as grub2 will be started in PVH mode requiring to
	use several HVM hypercalls and structures.

	Add the needed headers from Xen 4.10 being the first Xen version with
	full (not only experimental) PVH guest support.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Hans van Kranenburg <hans@knorrie.org>

2018-12-07  Daniel Kiper  <daniel.kiper@oracle.com>

	verifiers: ARM Xen fallout cleanup
	ARM Xen fallout cleanup after commit ca0a4f689 (verifiers: File type for
	fine-grained signature-verification controlling).

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-12-07  Daniel Kiper  <daniel.kiper@oracle.com>

	verifiers: Xen fallout cleanup
	Xen fallout cleanup after commit ca0a4f689 (verifiers: File type for
	fine-grained signature-verification controlling).

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-28  Eric Snowberg  <eric.snowberg@oracle.com>

	ofnet: Fix build regression in grub_ieee1275_parse_bootpath()
	The grub_ieee1275_parse_bootpath() function (commit a661a32, ofnet: Initialize
	structs in bootpath parser) introduces a build regression on SPARC:

	cc1: warnings being treated as errors
	net/drivers/ieee1275/ofnet.c: In function 'grub_ieee1275_parse_bootpath':
	net/drivers/ieee1275/ofnet.c:156: error: missing initializer
	net/drivers/ieee1275/ofnet.c:156: error: (near initialization for 'client_addr.type')
	net/drivers/ieee1275/ofnet.c:156: error: missing initializer
	net/drivers/ieee1275/ofnet.c:156: error: (near initialization for 'gateway_addr.type')
	net/drivers/ieee1275/ofnet.c:156: error: missing initializer
	net/drivers/ieee1275/ofnet.c:156: error: (near initialization for 'subnet_mask.type')
	net/drivers/ieee1275/ofnet.c:157: error: missing initializer
	net/drivers/ieee1275/ofnet.c:157: error: (near initialization for 'hw_addr.type')
	make[3]: *** [net/drivers/ieee1275/ofnet_module-ofnet.o] Error 1

	Initialize the entire structure.

	More info can be found here:
	  http://lists.gnu.org/archive/html/grub-devel/2018-03/msg00034.html

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-26  Nick Terrell  <terrelln@fb.com>

	btrfs: Add zstd support to grub btrfs
	- Adds zstd support to the btrfs module.
	- Adds a test case for btrfs zstd support.
	- Changes top_srcdir to srcdir in the btrfs module's lzo include
	  following comments from Daniel Kiper about the zstd include.

	Tested on Ubuntu-18.04 with a btrfs /boot partition with and without zstd
	compression. A test case was also added to the test suite that fails before
	the patch, and passes after.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-26  Nick Terrell  <terrelln@fb.com>

	zstd: Import upstream zstd-1.3.6
	- Import zstd-1.3.6 from upstream
	- Add zstd's module.c file
	- Add the zstd module to Makefile.core.def

	Import zstd-1.3.6 from upstream [1]. Only the files need for decompression
	are imported. I used the latest zstd release, which includes patches [2] to
	build cleanly in GRUB.

	I included the script used to import zstd-1.3.6 below at the bottom of the
	commit message.

	Upstream zstd commit hash: 4fa456d7f12f8b27bd3b2f5dfd4f46898cb31c24
	Upstream zstd commit name: Merge pull request #1354 from facebook/dev

	Zstd requires some posix headers, which it gets from posix_wrap.
	This can be checked by inspecting the .Po files generated by automake,
	which contain the header dependencies. After building run the command
	`cat grub-core/lib/zstd/.deps-core/*.Po` to see the dependencies [3].
	The only OS dependencies are:

	- stddef.h, which is already a dependency in posix_wrap, and used for size_t
	  by lzo and xz.
	- stdarg.h, which comes from the grub/misc.h header, and we don't use in zstd.

	All the types like uint64_t are typedefed to grub_uint64_t under the hood.
	The only exception is size_t, which comes from stddef.h. This is already the
	case for lzo and xz. I don't think there are any cross-compilation concerns,
	because cross-compilers provide their own system headers (and it would already
	be broken).

	[1] https://github.com/facebook/zstd/releases/tag/v1.3.6
	[2] https://github.com/facebook/zstd/pull/1344
	[3] https://gist.github.com/terrelln/7a16b92f5a1b3aecf980f944b4a966c4

	```

	curl -L -O https://github.com/facebook/zstd/releases/download/v1.3.6/zstd-1.3.6.tar.gz
	curl -L -O https://github.com/facebook/zstd/releases/download/v1.3.6/zstd-1.3.6.tar.gz.sha256
	sha256sum --check zstd-1.3.6.tar.gz.sha256
	tar xzf zstd-1.3.6.tar.gz

	SRC_LIB="zstd-1.3.6/lib"
	DST_LIB="grub-core/lib/zstd"
	rm -rf $DST_LIB
	mkdir -p $DST_LIB
	cp $SRC_LIB/zstd.h $DST_LIB/
	cp $SRC_LIB/common/*.[hc] $DST_LIB/
	cp $SRC_LIB/decompress/*.[hc] $DST_LIB/
	rm $DST_LIB/{pool.[hc],threading.[hc]}
	rm -rf zstd-1.3.6*
	echo SUCCESS!
	```

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-21  Michael Chang  <mchang@suse.com>

	verifiers: fix double close on pgp's sig file descriptor
	An error emerged as when I was testing the verifiers branch, so instead
	of putting it in pgp prefix, the verifiers is used to reflect what the
	patch is based on.

	While running verify_detached, grub aborts with error.

	verify_detached /@/.snapshots/1/snapshot/boot/grub/grub.cfg
	/@/.snapshots/1/snapshot/boot/grub/grub.cfg.sig

	alloc magic is broken at 0x7beea660: 0
	Aborted. Press any key to exit.

	The error is caused by sig file descriptor been closed twice, first time
	in grub_verify_signature() to which it is passed as parameter. Second in
	grub_cmd_verify_signature() or in whichever opens the sig file
	descriptor. The second close is not consider as bug to me either, as in
	common rule of what opens a file has to close it to avoid file
	descriptor leakage.

	After all the design of grub_verify_signature() makes it difficult to keep
	a good trace on opened file descriptor from it's caller. Let's refine
	the application interface to accept file path rather than descriptor, in
	this way the caller doesn't have to care about closing the descriptor by
	delegating it to grub_verify_signature() with full tracing to opened
	file descriptor by itself.

	Also making it clear that sig descriptor is not referenced in error
	returning path of grub_verify_signature_init(), so it can be closed
	directly by it's caller. This also makes delegating it to
	grub_pubkey_close() infeasible to help in relieving file descriptor
	leakage as it has to depend on uncertainty of ctxt fields in error
	returning path.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-21  Lee Jones  <lee.jones@linaro.org>

	generic/blocklist: Fix implicit declaration of function grub_file_filter_disable_compression()
	grub_file_filter_disable_compression() no longer exists.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-21  Lee Jones  <lee.jones@linaro.org>

	arm64/xen: Fix too few arguments to function grub_create_loader_cmdline()
	Without this fix, building xen_boot.c omits:

	loader/arm64/xen_boot.c: In function ‘xen_boot_binary_load’:
	loader/arm64/xen_boot.c:370:7: error: too few arguments to function ‘grub_create_loader_cmdline’
	       grub_create_loader_cmdline (argc - 1, argv + 1, binary->cmdline,
	       ^~~~~~~~~~~~~~~~~~~~~~~~~~
	In file included from loader/arm64/xen_boot.c:36:0:
	../include/grub/lib/cmdline.h:29:12: note: declared here
	 grub_err_t grub_create_loader_cmdline (int argc, char *argv[], char *buf,

	Reviewed-by: Julien Grall <julien.grall@arm.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-16  Leif Lindholm  <leif.lindholm@linaro.org>

	arm-uboot, ia64, sparc64: Fix up grub_file_open() calls
	The verifiers framework changed the grub_file_open() interface, breaking all
	non-x86 linux loaders. Add file types to the grub_file_open() calls to make
	them build again.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-16  Leif Lindholm  <leif.lindholm@linaro.org>

	arm64/efi: Fix breakage caused by verifiers
	  - add variable "err" (used but not defined),
	  - add GRUB_FILE_TYPE_LINUX_KERNEL to grub_file_open() call.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-16  Leif Lindholm  <leif.lindholm@linaro.org>

	grub-core/loader/efi/fdt.c: Fixup grub_file_open() call
	The verifiers framework changed the API of grub_file_open(), but did not
	fix up all users. Add the file type GRUB_FILE_TYPE_DEVICE_TREE_IMAGE
	to the "devicetree" command handler call.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-16  Leif Lindholm  <leif.lindholm@linaro.org>

	include/grub/file.h: Add device tree file type
	The API change of grub_file_open() for adding verifiers did not include
	a type for device tree blobs. Add GRUB_FILE_TYPE_DEVICE_TREE_IMAGE to
	the grub_file_type enum.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-16  Leif Lindholm  <leif.lindholm@linaro.org>

	include/grub/verify.h: Add include guard
	verify.h was added without include guards. This means compiling anything
	including both include/grub/verify.h and include/grub/lib/cmdline.h fails
	(at least grub-core/loader/arm64/linux.c.

	Add the necessary include guard.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-16  Matthew Daley  <mattd@bugfuzz.com>

	mkimage: Pad DTBs to target-specific pointer size
	Device tree (DTB) lengths are being padded to a multiple of 4 bytes
	rather than the target-specific pointer size. This causes objects
	following OBJ_TYPE_DTB objects to be incorrectly parsed during GRUB
	execution on arm64.

	Fix by using ALIGN_ADDR(), not ALIGN_UP().

	Signed-by-off: Matthew Daley <mattd@bugfuzz.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-09  Colin Watson  <cjwatson@ubuntu.com>

	Cope with / being on a ZFS root dataset
	If / is on the root dataset in a ZFS pool, then ${bootfs} will be set to
	"/" (whereas if it is on a non-root dataset, there will be no trailing
	slash).  Passing "root=ZFS=${rpool}/" will fail to boot, but
	"root=ZFS=${rpool}" works fine, so strip the trailing slash.

	Fixes: https://savannah.gnu.org/bugs/?52746

	Tested-by: Fejes József <jozsef.fejes@gmail.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-09  Paul Menzel  <pmenzel@molgen.mpg.de>

	unix/platform: Initialize variable to fix grub-install on UEFI system
	On a UEFI system, were no boot entry *grub* is present, currently,
	`grub-install` fails with an error.

	    $ efibootmgr
	    BootCurrent: 0000
	    Timeout: 0 seconds
	    BootOrder: 0001,0006,0003,0004,0005
	    Boot0001  Diskette Drive
	    Boot0003* USB Storage Device
	    Boot0004* CD/DVD/CD-RW Drive
	    Boot0005  Onboard NIC
	    Boot0006* WDC WD2500AAKX-75U6AA0
	    $ sudo grub-install /dev/sda
	    Installing for x86_64-efi platform.
	    grub-install: error: efibootmgr failed to register the boot entry: Unknown error 22020.

	The error code is always different, and the error message (incorrectly)
	points to efibootmgr.

	But, the error is in GRUB’s function
	`grub_install_remove_efi_entries_by_distributor()`, where the variable
	`rc` for the return value, is uninitialized and never set, when no boot
	entry for the distributor is found.

	The content of that uninitialized variable is then returned as the error
	code of efibootmgr.

	Set the variable to 0, so that success is returned, when no entry needs
	to be deleted.

	Tested on Dell OptiPlex 7010 with firmware A28.

	    $ sudo ./grub-install /dev/sda
	    Installing for x86_64-efi platform.
	    Installation finished. No error reported.

	[1]: https://github.com/rhboot/efibootmgr/issues/100

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-11-09  Daniel Kiper  <daniel.kiper@oracle.com>

	efi: Add EFI shim lock verifier
	This module provides shim lock verification for various kernels
	if UEFI secure boot is enabled on a machine.

	It is recommended to put this module into GRUB2 standalone image
	(avoid putting iorw and memrw modules into it; they are disallowed
	if UEFI secure boot is enabled). However, it is also possible to use
	it as a normal module. Though such configurations are more fragile
	and less secure due to various limitations.

	If the module is loaded and UEFI secure boot is enabled then:
	  - module itself cannot be unloaded (persistent module),
	  - the iorw and memrw modules cannot be loaded,
	  - if the iorw and memrw modules are loaded then
	    machine boot is disabled,
	  - GRUB2 defers modules and ACPI tables verification to
	    other verifiers.

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-09  Daniel Kiper  <daniel.kiper@oracle.com>

	dl: Add support for persistent modules
	This type of modules cannot be unloaded. This is useful if a given
	functionality, e.g. UEFI secure boot shim signature verification, should
	not be disabled if it was enabled at some point in time. Somebody may
	say that we can use standalone GRUB2 here. That is true. However, the
	code is not so big nor complicated hence it make sense to support
	modularized configs too.

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-09  Vladimir Serbinenko  <phcoder@gmail.com>

	verifiers: Add the documentation
	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-09  Daniel Kiper  <daniel.kiper@oracle.com>

	verifiers: Rename verify module to pgp module
	Just for clarity. No functional change.

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-09  Daniel Kiper  <daniel.kiper@oracle.com>

	verifiers: Add possibility to defer verification to other verifiers
	This way if a verifier requires verification of a given file it can defer task
	to another verifier (another authority) if it is not able to do it itself. E.g.
	shim_lock verifier, posted as a subsequent patch, is able to verify only PE
	files. This means that it is not able to verify any of GRUB2 modules which have
	to be trusted on UEFI systems with secure boot enabled. So, it can defer
	verification to other verifier, e.g. PGP one.

	I silently assume that other verifiers are trusted and will do good job for us.
	Or at least they will not do any harm.

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-09  Vladimir Serbinenko  <phcoder@gmail.com>

	verifiers: Add possibility to verify kernel and modules command lines
	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-09  Vladimir Serbinenko  <phcoder@gmail.com>

	verifiers: Framework core
	Verifiers framework provides core file verification functionality which
	can be used by various security mechanisms, e.g., UEFI secure boot, TPM,
	PGP signature verification, etc.

	The patch contains PGP code changes and probably they should be extracted
	to separate patch for the sake of clarity.

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-09  Vladimir Serbinenko  <phcoder@gmail.com>

	verifiers: File type for fine-grained signature-verification controlling
	Let's provide file type info to the I/O layer. This way verifiers
	framework and its users will be able to differentiate files and verify
	only required ones.

	This is preparatory patch.

	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-11-09  Daniel Kiper  <daniel.kiper@oracle.com>

	bufio: Use grub_size_t instead of plain int for size
	Reviewed-by: Ross Philipson <ross.philipson@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Add RAID 6 recovery for a btrfs filesystem
	Add the RAID 6 recovery, in order to use a RAID 6 filesystem even if some
	disks (up to two) are missing. This code use the md RAID 6 code already
	present in grub.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Make more generic the code for RAID 6 rebuilding
	The original code which handles the recovery of a RAID 6 disks array
	assumes that all reads are multiple of 1 << GRUB_DISK_SECTOR_BITS and it
	assumes that all the I/O is done via the struct grub_diskfilter_segment.
	This is not true for the btrfs code. In order to reuse the native
	grub_raid6_recover() code, it is modified to not call
	grub_diskfilter_read_node() directly, but to call an handler passed
	as an argument.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Add support for recovery for a RAID 5 btrfs profiles
	Add support for recovery for a RAID 5 btrfs profile. In addition
	it is added some code as preparatory work for RAID 6 recovery code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Refactor the code that read from disk
	Move the code in charge to read the data from disk into a separate
	function. This helps to separate the error handling logic (which
	depends on the different raid profiles) from the read from disk
	logic. Refactoring this code increases the general readability too.

	This is a preparatory patch, to help the adding of the RAID 5/6 recovery code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Move logging code in grub_btrfs_read_logical()
	A portion of the logging code is moved outside of internal for(;;). The part
	that is left inside is the one which depends on the internal for(;;) index.

	This is a preparatory patch. The next one will refactor the code inside
	the for(;;) into an another function.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Avoid a rescan for a device which was already not found
	Currently read from missing device triggers rescan. However, it is never
	recorded that the device is missing. So, each read of a missing device
	triggers rescan again and again. This behavior causes a lot of unneeded
	rescans leading to huge slowdowns.

	This patch fixes above mentioned issue. Information about missing devices
	is stored in the data->devices_attached[] array as NULL value in dev
	member. Rescan is triggered only if no information is found for a given
	device. This means that only first time read triggers rescan.

	The patch drops premature return. This way data->devices_attached[] is
	filled even when a given device is missing.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Move the error logging from find_device() to its caller
	The caller knows better if this error is fatal or not, i.e. another disk is
	available or not.

	This is a preparatory patch.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Add helper to check the btrfs header
	This helper is used in a few places to help the debugging. As
	conservative approach the error is only logged.
	This does not impact the error handling.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-10-31  Goffredo Baroncelli  <kreijack@inwind.it>

	btrfs: Add support for reading a filesystem with a RAID 5 or RAID 6 profile
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-27  Michael Chang  <mchang@suse.com>

	msdos: Fix overflow in converting partition start and length into 512B blocks
	When booting from NVME SSD with 4k sector size, it fails with the message.

	error: attempt to read or write outside of partition.

	This patch fixes the problem by fixing overflow in converting partition start
	and length into 512B blocks.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-27  Mihai Moldovan  <ionic@ionic.de>

	osdep/linux: Convert partition start to disk sector length
	When reading data off a disk, sector values are based on the disk sector
	length.

	Within grub_util_fd_open_device(), the start of the partition was taken
	directly from grub's partition information structure, which uses the
	internal sector length (currently 512b), but never transformed to the
	disk's sector length.

	Subsequent calculations were all wrong for devices that have a diverging
	sector length and the functions eventually skipped to the wrong stream
	location, reading invalid data.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-27  Adam Williamson  <awilliam@redhat.com>

	python: Use AM_PATH_PYTHON to determine interpreter for gentpl.py
	gentpl.py is python2/3-agnostic, but there's no way to cause it
	to be run with any interpreter other than 'python', it's just
	hard-coded into Makefile.common that way. Adjust that to use
	AM_PATH_PYTHON (provided by automake) to find an interpreter
	and run gentpl.py with that instead. This makes grub buildable
	when `python` does not exist (but rather `python3` or `python2`
	or `python2.7`, etc.) Minimum version is set to 2.6 as this is
	the first version with `__future__.print_function` available.

	Note, AM_PATH_PYTHON respects the PYTHON environment variable
	and will treat its value as the *only* candidate for a valid
	interpreter if it is set - when PYTHON is set, AM_PATH_PYTHON
	will not try to find any alternative interpreter, it will only
	check whether the interpreter set as the value of PYTHON meets
	the requirements and use it if so or fail if not. This means
	that when using grub's `autogen.sh`, as it too uses the value
	of the PYTHON environment variable (and if it is not set, just
	sets it to 'python') you cannot rely on AM_PATH_PYTHON
	interpreter discovery. If your desired Python interpreter is
	not just 'python', you must set the PYTHON environment variable,
	e.g. 'PYTHON=/usr/local/bin/python3 ./autogen.sh'. The specified
	interpreter will then be used both by autogen.sh itself and by
	the autotools-driven build scripts.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-27  Colin Watson  <cjwatson@ubuntu.com>

	build: Use pkg-config to find FreeType
	pkg-config is apparently preferred over freetype-config these days (see
	the BUGS section of freetype-config(1)).  pkg-config support was added
	to FreeType in version 2.1.5, which was released in 2003, so it should
	comfortably be available everywhere by now.

	We no longer need to explicitly substitute FREETYPE_CFLAGS and
	FREETYPE_LIBS, since PKG_CHECK_MODULES does that automatically.

	Fixes Debian bug #887721.

	Reported-by: Hugh McMaster <hugh.mcmaster@outlook.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-27  Colin Watson  <cjwatson@ubuntu.com>

	build: Capitalise *freetype_* variables
	Using FREETYPE_CFLAGS and FREETYPE_LIBS is more in line with the naming
	scheme used by pkg-config macros.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-13  Julian Andres Klode  <julian.klode@canonical.com>

	ofnet: Initialize structs in bootpath parser
	Code later on checks if variables inside the struct are
	0 to see if they have been set, like if there were addresses
	in the bootpath.

	The variables were not initialized however, so the check
	might succeed with uninitialized data, and a new interface
	with random addresses and the same name is added. This causes
	$net_default_mac to point to the random one, so, for example,
	using that variable to load per-mac config files fails.

	Bug-Ubuntu: https://bugs.launchpad.net/bugs/1785859

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-13  dann frazier  <dann.frazier@canonical.com>

	grub-reboot: Warn when "for the next boot only" promise cannot be kept
	The "for the next boot only" property of grub-reboot is dependent upon
	GRUB being able to clear the next_entry variable in the environment
	block. However, GRUB cannot write to devices using the diskfilter
	and lvm abstractions.

	Ref: https://lists.gnu.org/archive/html/grub-devel/2009-12/msg00276.html
	Ref: https://bugs.launchpad.net/bugs/788298

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-13  Cao jin  <caoj.fnst@cn.fujitsu.com>

	relocator16: Comments update
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-13  Paul Menzel  <pmenzel@molgen.mpg.de>

	ahci: Increase time-out from 10 s to 32 s
	This is a cryptographically signed message in MIME format.

	Date: Thu, 9 Aug 2018 07:27:35 +0200

	Currently, the GRUB payload for coreboot does not detect the Western
	Digital hard disk WDC WD20EARS-60M AB51 connected to the ASRock E350M1,
	as that takes over ten seconds to spin up.

	```
	disk/ahci.c:533: port 0, err: 0
	disk/ahci.c:539: port 0, err: 0
	disk/ahci.c:543: port 0, err: 0
	disk/ahci.c:549: port 0, offset: 120, tfd:80, CMD: 6016
	disk/ahci.c:552: port 0, err: 0
	disk/ahci.c:563: port 0, offset: 120, tfd:80, CMD: 6016
	disk/ahci.c:566: port: 0, err: 0
	disk/ahci.c:593: port 0 is busy
	disk/ahci.c:621: cleaning up failed devs
	```

	GRUB detects the drive, when either unloading the module *ahci*, and
	then loading it again, or when doing a warm reset.

	As the ten second time-out is too short, increase it to 32 seconds,
	used by SeaBIOS. which detects the drive successfully.

	The AHCI driver in libpayload uses 30 seconds, and that time-out was
	added in commit 354066e1 (libpayload: ahci: Increase timeout for
	signature reading) with the description below.

	> We can't read the drives signature before it's ready, i.e. spun up.
	> So set the timeout to the standard 30s. Also put a notice on the
	> console, so the user knows why the signature reading failed.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-13  Cao jin  <caoj.fnst@cn.fujitsu.com>

	linux16: Code cleanup
	1. move relocator related code more close to each other
	2. use variable "len" since it has correct assignment, and keep coding
	style with upper code

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-13  Colin Watson  <cjwatson@ubuntu.com>

	tests: Fix qemu options for UHCI test
	qemu 2.12 removed the -usbdevice option.  Use a more modern spelling
	instead, in line with other USB-related tests.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-13  Colin Watson  <cjwatson@ubuntu.com>

	tests: Disable sercon in SeaBIOS
	SeaBIOS 1.11.0 added support for VGA emulation over a serial port, which
	interferes with grub-shell.  Turn it off.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-12  Peter Jones  <pjones@redhat.com>

	grub-module-verifier: Report the filename or modname in errors
	Make it so that when grub-module-verifier complains of an issue, it tells you
	which module the issue was with.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-12  Peter Jones  <pjones@redhat.com>

	configure: Fix an 8 year old typo
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-12  Leif Lindholm  <leif.lindholm@linaro.org>

	loader/multiboot_mbi2: Use central copy of grub_efi_find_mmap_size()
	Delete local copy of function to determine required buffer size for the
	UEFI memory map, use helper in kern/efi/mm.c.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-12  Leif Lindholm  <leif.lindholm@linaro.org>

	loader/ia64/linux: Use central copy of grub_efi_find_mmap_size()
	Delete local copy of function to determine required buffer size for the
	UEFI memory map, use helper in kern/efi/mm.c.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-09-12  Leif Lindholm  <leif.lindholm@linaro.org>

	loader/i386/linux: Use central copy of grub_efi_find_mmap_size()
	Delete local copy of function to determine required buffer size for the
	UEFI memory map, use helper in kern/efi/mm.c.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-25  Leif Lindholm  <leif.lindholm@linaro.org>

	i386: Don't include lib/i386/reset.c in EFI builds
	Commit 0ba90a7f0178 ("efi: Move grub_reboot() into kernel") broke
	the build on i386-efi - genmoddep.awk bails out with message
	  grub_reboot in reboot is duplicated in kernel
	This is because both lib/i386/reset.c and kern/efi/efi.c now provide
	this function.

	Rather than explicitly list each i386 platform variant in
	Makefile.core.def, include the contents of lib/i386/reset.c only when
	GRUB_MACHINE_EFI is not set.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-25  Leif Lindholm  <leif.lindholm@linaro.org>

	efi: Restrict arm/arm64 linux loader initrd placement
	The 32-bit arm Linux kernel is built as a zImage, which self-decompresses
	down to near start of RAM. In order for an initrd/initramfs to be
	accessible, it needs to be placed within the first ~768MB of RAM.
	The initrd loader built into the kernel EFI stub restricts this down to
	512MB for simplicity - so enable the same restriction in grub.

	For arm64, the requirement is within a 1GB aligned 32GB window also
	covering the (runtime) kernel image. Since the EFI stub loader itself
	will attempt to relocate to near start of RAM, force initrd to be loaded
	completely within the first 32GB of RAM.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-25  Leif Lindholm  <leif.lindholm@linaro.org>

	arm: Delete unused efi support from loader/arm
	The 32-bit arm efi port now shares the 64-bit linux loader, so delete
	the now unused bits from the 32-bit linux loader.

	This in turn leaves the grub-core/kern/arm/efi/misc.c unused, so
	delete that too.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-25  Leif Lindholm  <leif.lindholm@linaro.org>

	arm/efi: Switch to arm64 linux loader
	The arm64 and arm linux kernel EFI-stub support presents pretty much
	identical interfaces, so the same linux loader source can be used for
	both architectures.

	Switch 32-bit ARM UEFI platforms over to the existing EFI-stub aware
	loader initially developed for arm64.

	This *WILL* stop non-efistub Linux kernels from booting on arm-efi.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-25  Leif Lindholm  <leif.lindholm@linaro.org>

	arm64/linux/loader: Rename functions and macros and move to common headers
	In preparation for using the linux loader for 32-bit and 64-bit platforms,
	rename grub_arm64*/GRUB_ARM64* to grub_armxx*/GRUB_ARMXX*.

	Move prototypes for now-common functions to efi/efi.h.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-25  Leif Lindholm  <leif.lindholm@linaro.org>

	efi: Add grub_efi_get_ram_base() function for arm64
	Since ARM platforms do not have a common memory map, add a helper
	function that finds the lowest address region with the EFI_MEMORY_WB
	attribute set in the UEFI memory map.

	Required for the arm64 efi linux loader to restrict the initrd
	location to where it will be accessible by the kernel at runtime.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-25  Leif Lindholm  <leif.lindholm@linaro.org>

	efi: Add central copy of grub_efi_find_mmap_size
	There are several implementations of this function in the tree.
	Add a central version in grub-core/efi/mm.c.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-25  Arindam Nath  <arindam.nath@amd.com>

	i386/linux: Add support for ext_lfb_base
	The EFI Graphics Output Protocol can return a 64-bit
	linear frame buffer address in some firmware/BIOS
	implementations. We currently only store the lower
	32-bits in the lfb_base. This will eventually be
	passed to Linux kernel and the efifb driver will
	incorrectly interpret the framebuffer address as
	32-bit address.

	The Linux kernel has already added support to handle
	64-bit linear framebuffer address in the efifb driver
	since quite some time now.

	This patch adds the support for 64-bit linear frame
	buffer address in GRUB to address the above mentioned
	scenario.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-11  Leif Lindholm  <leif.lindholm@linaro.org>

	commands/file: Use definitions from arm64/linux.h
	Clean up code for matching IS_ARM64 slightly by making use of struct
	linux_arm64_kernel_header and GRUB_LINUX_ARM64_MAGIC_SIGNATURE.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-11  Leif Lindholm  <leif.lindholm@linaro.org>

	commands/file: Use definitions from arm/linux.h
	Clean up code for matching IS_ARM slightly by making use of struct
	linux_arm_kernel_header and GRUB_LINUX_ARM_MAGIC_SIGNATURE.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-11  Hans de Goede  <hdegoede@redhat.com>

	efi/console: Fix the "enter" key not working on x86 tablets
	Most 8" or 7" x86 Windows 10 tablets come with volume up/down buttons and
	a power-button. In their UEFI these are almost always mapped to arrow
	up/down and enter.

	Pressing the volume buttons (sometimes by accident) will stop the
	menu countdown, but the power-button / "enter" key was not being recognized
	as enter, so the user would be stuck at the grub menu.

	The problem is that these tablets send scan_code 13 or 0x0d for the
	power-button, which officialy maps to the F3 key. They also set
	unicode_char to 0x0d.

	This commit recognizes the special case of both scan_code and unicode_char
	being set to 0x0d and treats this as an enter key press.

	This fixes things getting stuck at the grub-menu and allows the user
	to choice a grub-menu entry using the buttons on the tablet.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-11  Cao jin  <caoj.fnst@cn.fujitsu.com>

	grub-setup: Debug message cleanup
	Variable "root" is initialized after root device probing and is null in
	current place, so, drop it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-07-02  Denis 'GNUtoo' Carikli  <GNUtoo@no-log.org>

	multiboot_elfxx.c: Fix compilation by fixing undeclared variable
	Without that fix we have:
	  In file included from ../../include/grub/command.h:25:0,
	                   from ../../grub-core/loader/multiboot.c:30:
	  ../../grub-core/loader/multiboot_elfxx.c: In function 'grub_multiboot_load_elf64':
	  ../../grub-core/loader/multiboot_elfxx.c:130:28: error: 'relocatable' undeclared (first use in this function)
	     "load_base_addr=0x%x\n", relocatable,

	This happens due to mistake in the commit 14ec665
	(mbi: Use per segment a separate relocator chunk).

	So, let's fix it.

2018-06-23  Leif Lindholm  <leif.lindholm@linaro.org>

	efi/fdt: Set address/size cells to 2 for empty tree
	When booting an arm* system on UEFI with an empty device tree (currently
	only when hardware description comes from ACPI), we don't currently set
	default to 1 cell (32 bits).

	Set both of these properties, to 2 cells (64 bits), to resolve issues
	with kexec on some platforms.

	This change corresponds with linux kernel commit ae8a442dfdc4
	("efi/libstub/arm*: Set default address and size cells values for an empty dtb")
	and ensures booting through grub does not behave differently from booting
	the stub loader directly.

	See also https://patchwork.kernel.org/patch/9561201/

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-06-23  Leif Lindholm  <leif.lindholm@linaro.org>

	fdt: Move prop_entry_size to fdt.h
	To be able to resuse the prop_entry_size macro, move it to
	<grub/fdt.h> and rename it grub_fdt_prop_entry_size.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-06-23  Will Thompson  <wjt@endlessm.com>

	grub-fs-tester: Fix losetup race
	If something else on the system is using loopback devices, then the
	device that's free at the call to `losetup -f` may not be free in the
	following call to try to use it. Instead, find and use the first free
	loopback device in a single call to losetup.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-06-23  Alexander Boettcher  <alexander.boettcher@genode-labs.com>

	mbi: Use per segment a separate relocator chunk
	Instead of setting up a all comprising relocator chunk for all segments,
	use per segment a separate relocator chunk.

	Currently, if the ELF is non-relocatable, a single relocator chunk will
	comprise memory (between the segments) which gets overridden by the relst()
	invocation of the movers code in grub_relocator16/32/64_boot().

	The overridden memory may contain reserved ranges like VGA memory or ACPI
	tables, which may lead to crashes or at least to strange boot behaviour.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-06-05  Daniel Kiper  <daniel.kiper@oracle.com>

	templates: Add missing "]"
	Commit 51be337 (templates: Update grub script template files)
	lacked one "]", so, add it.

	Reported-by: Philip <philm@manjaro.org>

2018-05-29  Daniel Kiper  <daniel.kiper@oracle.com>

	xfs: Accept filesystem with sparse inodes
	The sparse inode metadata format became a mkfs.xfs default in
	xfsprogs-4.16.0, and such filesystems are now rejected by grub as
	containing an incompatible feature.

	In essence, this feature allows xfs to allocate inodes into fragmented
	freespace.  (Without this feature, if xfs could not allocate contiguous
	space for 64 new inodes, inode creation would fail.)

	In practice, the disk format change is restricted to the inode btree,
	which as far as I can tell is not used by grub.  If all you're doing
	today is parsing a directory, reading an inode number, and converting
	that inode number to a disk location, then ignoring this feature
	should be fine, so I've added it to XFS_SB_FEAT_INCOMPAT_SUPPORTED

	I did some brief testing of this patch by hacking up the regression
	tests to completely fragment freespace on the test xfs filesystem, and
	then write a large-ish number of inodes to consume any existing
	contiguous 64-inode chunk.  This way any files the grub tests add and
	traverse would be in such a fragmented inode allocation.  Tests passed,
	but I'm not sure how to cleanly integrate that into the test harness.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>
	Tested-by: Chris Murphy <lists@colorremedies.com>

2018-05-29  Oleg Solovyov  <mcpain@altlinux.org>

	grub-probe: Don't skip /dev/mapper/dm-* devices
	This patch ensures that grub-probe will find the root device placed in
	/dev/mapper/dm-[0-9]+-.* e.g. device named /dev/mapper/dm-0-luks will be
	found and grub.cfg will be updated properly, enabling the system to boot.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-05-08  Michael Chang  <mchang@suse.com>

	bufio: Round up block size to power of 2
	Rounding up the bufio->block_size to meet power of 2 to facilitate next_buf
	calculation in grub_bufio_read().

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-23  Nicholas Vinson  <nvinson234@gmail.com>

	templates: Update grub script template files
	Update grub-mkconfig.in and 10_linux.in to support grub-probe's new
	partuuid target.  Update grub.texi documentation.  The following table
	shows how GRUB_DISABLE_LINUX_UUID, GRUB_DISABLE_LINUX_PARTUUID, and
	initramfs detection interact:

	Initramfs  GRUB_DISABLE_LINUX_PARTUUID  GRUB_DISABLE_LINUX_UUID  Linux Root
	detected   Set                          Set                      ID Method

	false      false                        false                    part UUID
	false      false                        true                     part UUID
	false      true                         false                    dev name
	false      true                         true                     dev name
	true       false                        false                    fs UUID
	true       false                        true                     part UUID
	true       true                         false                    fs UUID
	true       true                         true                     dev name

	Note: GRUB_DISABLE_LINUX_PARTUUID and GRUB_DISABLE_LINUX_UUID equate to
	      'false' when unset or set to any value other than 'true'.
	      GRUB_DISABLE_LINUX_PARTUUID defaults to 'true'.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-23  Nicholas Vinson  <nvinson234@gmail.com>

	grub-probe: Add PARTUUID detection support
	Add PARTUUID detection support grub-probe for MBR and GPT partition schemes.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-23  Nicholas Vinson  <nvinson234@gmail.com>

	disk: Update grub_gpt_partentry
	Rename grub_gpt_part_type to grub_gpt_part_guid and update grub_gpt_partentry
	to use this type for both the partition type GUID string and the partition GUID
	string entries.  This change ensures that the two GUID fields are handled more
	consistently and helps to simplify the changes needed to add Linux partition
	GUID support.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-23  Nicholas Vinson  <nvinson234@gmail.com>

	grub-probe: Centralize GUID prints
	Define print_gpt_guid(), so there is a central function for printing
	GUID strings.  This change is a precursor for later patches which rely
	on this logic.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-23  Olaf Hering  <olaf@aepfle.de>

	grub-install: Locale depends on nls
	With --disable-nls no locales exist.

	Avoid runtime error by moving code that copies locales into its own
	function. Return early in case nls was disabled. That way the compiler
	will throw away unreachable code, no need to put preprocessor
	conditionals everywhere to avoid warnings about unused code.

	Fix memleak by freeing srcf and dstf.
	Convert tabs to spaces in moved code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-23  Cao jin  <caoj.fnst@cn.fujitsu.com>

	diskboot: Trivial correction on stale comments
	diskboot.img now is loaded at 0x8000 and is jumped to with 0:0x8000.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-10  Jaegeuk Kim  <jaegeuk@kernel.org>

	fs: Add F2FS support
	"F2FS (Flash-Friendly File System) is flash-friendly file system which was merged
	into Linux kernel v3.8 in 2013.

	The motive for F2FS was to build a file system that from the start, takes into
	account the characteristics of NAND flash memory-based storage devices (such as
	solid-state disks, eMMC, and SD cards).

	F2FS was designed on a basis of a log-structured file system approach, which
	remedies some known issues of the older log structured file systems, such as
	the snowball effect of wandering trees and high cleaning overhead. In addition,
	since a NAND-based storage device shows different characteristics according to
	its internal geometry or flash memory management scheme (such as the Flash
	Translation Layer or FTL), it supports various parameters not only for
	configuring on-disk layout, but also for selecting allocation and cleaning
	algorithm.", quote by https://en.wikipedia.org/wiki/F2FS.

	The source codes for F2FS are available from:

	http://git.kernel.org/cgit/linux/kernel/git/jaegeuk/f2fs.git
	http://git.kernel.org/cgit/linux/kernel/git/jaegeuk/f2fs-tools.git

	This patch has been integrated in OpenMandriva Lx 3.
	  https://www.openmandriva.org/

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-04  Michael Chang  <mchang@suse.com>

	Fix packed-not-aligned error on GCC 8
	When building with GCC 8, there are several errors regarding packed-not-aligned.

	./include/grub/gpt_partition.h:79:1: error: alignment 1 of ‘struct grub_gpt_partentry’ is less than 8 [-Werror=packed-not-aligned]

	This patch fixes the build error by cleaning up the ambiguity of placing
	aligned structure in a packed one. In "struct grub_btrfs_time" and "struct
	grub_gpt_part_type", the aligned attribute seems to be superfluous, and also
	has to be packed, to ensure the structure is bit-to-bit mapped to the format
	laid on disk. I think we could blame to copy and paste error here for the
	mistake. In "struct efi_variable", we have to use grub_efi_packed_guid_t, as
	the name suggests. :)

	Tested-by: Michael Chang <mchang@suse.com>
	Tested-by: Paul Menzel <paulepanter@users.sourceforge.net>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-04-04  mike.travis@hpe.com  <mike.travis@hpe.com>

	efi/uga: Fix PCIe LER when GRUB2 accesses non-enabled MMIO data from VGA
	A GPU inserted into a PCIe I/O slot disappears during system startup.
	The problem centers around GRUB and a specific VGA init function in
	efi_uga.c. This causes an LER (Link Error Recorvery) because the MMIO
	memory has not been enabled before attempting access.

	The fix is to add the same coding used in other VGA drivers, specifically
	to add a check to insure that it is indeed a VGA controller. And then
	enable the MMIO address space with the specific bits.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-26  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: NULL pointer dereference in grub_machine_get_bootlocation()
	Read from NULL pointer canon in function grub_machine_get_bootlocation().
	Function grub_ieee1275_canonicalise_devname() may return NULL.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-14  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: split up grub_machine_get_bootlocation
	Split up some of the functionality in grub_machine_get_bootlocation into
	grub_ieee1275_get_boot_dev.  This will allow for code reuse in a follow on
	patch.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-14  C. Masloch  <pushbx@38.de>

	chainloader: patch in BPB's sectors_per_track and num_heads
	These fields must reflect the ROM-BIOS's geometry for CHS-based
	loaders to correctly load their next stage. Most loaders do not
	query the ROM-BIOS (Int13.08), relying on the BPB fields to hold
	the correct values already.

	Tested with lDebug booted in qemu via grub2's
	FreeDOS direct loading support, refer to
	https://bitbucket.org/ecm/ldosboot + https://bitbucket.org/ecm/ldebug
	(For this test, lDebug's iniload.asm must be assembled with
	-D_QUERY_GEOMETRY=0 to leave the BPB values provided by grub.)

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-14  Matthew S. Turnbull  <sparky@bluefang-logic.com>

	grub-mkconfig/10_linux: Support multiple early initrd images
	Add support for multiple, shared, early initrd images. These early
	images will be loaded in the order declared, and all will be loaded
	before the initrd image.

	While many classes of data can be provided by early images, the
	immediate use case would be for distributions to provide CPU
	microcode to mitigate the Meltdown and Spectre vulnerabilities.

	There are two environment variables provided for declaring the early
	images.

	* GRUB_EARLY_INITRD_LINUX_STOCK is for the distribution declare
	  images that are provided by the distribution or installed packages.
	  If undeclared, this will default to a set of common microcode image
	  names.

	* GRUB_EARLY_INITRD_LINUX_CUSTOM is for user created images. User
	  images will be loaded after the stock images.

	These separate configurations allow the distribution and user to
	declare different image sets without clobbering each other.

	This also makes a minor update to ensure that UUID partition labels
	stay disabled when no initrd image is found, even if early images are
	present.

	This is a continuation of a previous patch published by Christian
	Hesse in 2016:
	http://lists.gnu.org/archive/html/grub-devel/2016-02/msg00025.html

	Down stream Gentoo bug:
	https://bugs.gentoo.org/645088

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-07  Eric Snowberg  <eric.snowberg@oracle.com>

	mkimage: fix build regression in grub_mkimage_load_image
	The grub_mkimage_load_image function (commit 7542af6, mkimage: refactor a bunch
	of section data into a struct.) introduces a build regression on SPARC:

	  cc1: warnings being treated as errors
	  In file included from util/grub-mkimage32.c:23:
	  util/grub-mkimagexx.c: In function 'grub_mkimage_load_image32':
	  util/grub-mkimagexx.c:1968: error: missing initializer
	  util/grub-mkimagexx.c:1968: error: (near initialization for 'smd.sections')
	  make[2]: *** [util/grub_mkimage-grub-mkimage32.o] Error 1

	Initialize the entire section_metadata structure.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  dann frazier  <dann.frazier@canonical.com>

	Revert "Keep the native terminal active when enabling gfxterm"
	This can cause an issue where GRUB is trying to display both a text and
	graphical menu on the display at the same time, resulting in a flickering
	effect when e.g. scrolling quickly through a menu (LP: #1752767).

	Revert for now while we look for a better solution for the original issue.

	This reverts commit 52ef7b23f528ce844716661d586497a177e80d5b.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64: #blocks64 disk node method
	Return the 64bit number of blocks of storage associated with the device or
	instance. Where a "block" is a unit of storage consisting of the number of
	bytes returned by the package's "block-size" method. If the size cannot be
	determined, or if the number of blocks exceeds the range return -1.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64: #blocks disk node method
	Return the number of blocks of storage associated with the device or
	instance. Where a "block" is a unit of storage consisting of the number
	of bytes returned by the package's "block-size" method. If the size cannot
	be determined, the #blocks method returns the maximum unsigned integer
	(which, because of Open Firmware's assumption of two's complement arithmetic,
	is equivalent to the signed number -1). If the number of blocks exceeds
	the range of an unsigned number, return 0 to alert the caller to try
	the #blocks64 command.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: block-size deblocker support method
	IEEE Std 1275-1994 Standard for Boot (Initialization Configuration)
	Firmware: Core Requirements and Practices

	3.8.3 deblocker support package

	Any package that uses the "deblocker" support package must define
	the following method, which the deblocker uses as a low-level
	interface to the device

	block-size ( -- block-len ) Return "granularity" for accesses to this
	device.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Daniel Kiper  <daniel.kiper@oracle.com>

	ieee1275: no-data-command bus specific method
	IEEE 1275-1994 Standard for Boot (Initialization Configuration)
	Firmware: Core Requirements and Practices

	E.3.2.2 Bus-specific methods for bus nodes

	A package implementing the scsi-2 device type shall implement the
	following bus-specific method:

	no-data-command ( cmd-addr -- error? )
	Executes a simple SCSI command, automatically retrying under
	certain conditions.  cmd-addr is the address of a 6-byte command buffer
	containing an SCSI command that does not have a data transfer phase.
	Executes the command, retrying indefinitely with the same retry criteria
	as retry-command.

	error? is nonzero if an error occurred, zero otherwise.
	NOTE no-data-command is a convenience function. It provides
	no capabilities that are not present in retry-command, but for
	those commands that meet its restrictions, it is easier to use.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: set-address bus specific method
	IEEE 1275-1994 Standard for Boot (Initialization Configuration)
	Firmware: Core Requirements and Practices
	E.3.2.2 Bus-specific methods for bus nodes

	A package implementing the scsi-2 device type shall implement the
	following bus-specific method:

	 set-address ( unit# target# -- )
	   Sets the SCSI target number (0x0..0xf) and unit number (0..7) to which
	   subsequent commands apply.

	This function is for devices with #address-cells == 2

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: encode-unit command for 4 addr cell devs
	Convert physical address to text unit-string.

	Convert phys.lo ... phys-high, the numerical representation, to unit-string,
	the text string representation of a physical address within the address
	space defined by this device node. The number of cells in the list
	phys.lo ... phys.hi is determined by the value of the #address-cells property
	of this node.

	This function is for devices with #address-cells == 4

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: decode-unit command for 4 addr cell devs
	decode-unit ( addr len -- phys.lo ... phys.hi )

	Convert text unit-string to physical address.

	Convert unit-string, the text string representation, to phys.lo ... phys.hi,
	the numerical representation of a physical address within the address space
	defined by this device node. The number of cells in the list
	phys.lo ... phys.hi is determined by the value of the #address-cells
	property of this node.

	This function is for devices with #address-cells == 4

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64: Limit nvme of_path_of_nvme to just SPARC
	Limit NVMe of_path_of_nvme to just SPARC hardware for now.  It has been
	found that non-Open Firmware hardware platforms can some how access
	this function.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  John Paul Adrian Glaubitz  <glaubitz@physik.fu-berlin.de>

	ieee1275: Fix crash in of_path_of_nvme when of_path is empty
	The of_path_of_nvme function (commit 2391d57, ieee1275: add nvme
	support within ofpath) introduced a functional regression:

	On systems which are not based on Open Firmware but have at
	least one NVME device, find_obppath will return NULL and thus
	trying to append the disk name to of_path will result in a
	crash.

	The proper behavior of of_path_of_nvme is, however, to just
	return NULL in such cases, like other users of find_obppath,
	such as of_path_of_scsi.

	Reviewed-by: Eric Snowberg <eric.snowberg@oracle.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Peter Jones  <pjones@redhat.com>

	.mod files: Strip annobin annotations and .eh_frame, and their relocations
	This way debuginfo built from the .module will still include this
	information, but the final result won't have the data we don't actually
	need in the modules, either on-disk, loaded at runtime, or in prebuilt
	images.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Peter Jones  <pjones@redhat.com>

	mkimage: avoid copying relocations for sections that won't be copied.
	Some versions of gcc include a plugin called "annobin", and in some
	build systems this is enabled by default.  This plugin creates special
	ELF note sections to track which ABI-breaking features are used by a
	binary, as well as a series of relocations to annotate where.

	If grub is compiled with this feature, then when grub-mkimage translates
	the binary to another file format which does not strongly associate
	relocation data with sections (i.e. when platform is *-efi), these
	relocations appear to be against the .text section rather than the
	original note section.  When the binary is loaded by the PE runtime
	loader, hilarity ensues.

	This issue is not necessarily limited to the annobin, but could arise
	any time there are relocations in sections that are not represented in
	grub-mkimage's output.

	This patch seeks to avoid this issue by only including relocations that
	refer to sections which will be included in the final binary.

	As an aside, this should also obviate the need to avoid -funwind-tables,
	-fasynchronous-unwind-tables, and any sections similar to .eh_frame in
	the future.  I've tested it on x86-64-efi with the following gcc command
	line options (as recorded by -grecord-gcc-flags), but I still need to
	test the result on some other platforms that have been problematic in
	the past (especially ARM Aarch64) before I feel comfortable making
	changes to the configure.ac bits:

	GNU C11 7.2.1 20180116 (Red Hat 7.2.1-7) -mno-mmx -mno-sse -mno-sse2 -mno-sse3 -mno-3dnow -msoft-float -mno-stack-arg-probe -mcmodel=large -mno-red-zone -m64 -mtune=generic -march=x86-64 -g3 -Os -freg-struct-return -fno-stack-protector -ffreestanding -funwind-tables -fasynchronous-unwind-tables -fno-strict-aliasing -fstack-clash-protection -fno-ident -fplugin=annobin

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Peter Jones  <pjones@redhat.com>

	mkimage: refactor a bunch of section data into a struct.
	This basically moves a bunch of the section information we pass around a
	lot into a struct, and passes a pointer to a single one of those
	instead.

	This shouldn't change the binary file output or the "grub-mkimage -v"
	output in any way.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Peter Jones  <pjones@redhat.com>

	mkimage: make locate_sections() set up vaddresses as well.
	This puts both kinds of address initialization at the same place, and also lets
	us iterate through the section list one time fewer.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Peter Jones  <pjones@redhat.com>

	mkimage: rename a couple of things to be less confusing later.
	This renames some things:

	- the "strtab" and "strtab_section" in relocate_symbols are changed to "symtab"
	  instead, so as to be less confusing when "strtab" is moved to a struct in a
	  later patch.

	- The places where we pass section_vaddresses to functions are changed to also
	  be called section_vaddresses"inside those functions, so I get less confused
	  when I put addresses and vaddresses in a struct in a later patch.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Peter Jones  <pjones@redhat.com>

	mkimage: make it easier to run syntax checkers on grub-mkimagexx.c
	This makes it so you can treat grub-mkimagexx.c as a file you can build
	directly, so syntax checkers like vim's "syntastic" plugin, which uses
	"gcc -x c -fsyntax-only" to build it, will work.

	One still has to do whatever setup is required to make it pick the right
	include dirs, which -W options we use, etc., but this makes it so you
	can do the checking on the file you're editing, rather than on a
	different file.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-03-05  Peter Jones  <pjones@redhat.com>

	aout.h: Fix missing include.
	grub_aout_load() has a grub_file_t parameter, and depending on what order
	includes land in, it's sometimes not defined.  This patch explicitly adds
	file.h to aout.h so that it will always be defined.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-26  Joakim Bech  <joakim.bech@linaro.org>

	ieee1275: fix build regression in of_path_of_nvme
	The of_path_of_nvme function (commit 2391d57, ieee1275: add nvme
	support within ofpath) introduced a build regression:
	    grub-core/osdep/linux/ofpath.c:365:21: error: comparison between pointer
	    and zero character constant [-Werror=pointer-compare]
	       if ((digit_string != '\0') && (*part_end == 'p'))

	Update digit_string to compare against the char instead of the pointer.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Leif Lindholm  <leif.lindholm@linaro.org>

	arm: make linux.h safe to include for non-native builds
	<grub/machine/loader.h> (for machine arm/efi) and
	<grub/machine/kernel.h> (for machine arm/coreboot) will not always
	resolve (and will likely not be valid to) if pulled in when building
	non-native commands, such as host tools or the "file" command.
	So explicitly include them with their expanded pathnames.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Leif Lindholm  <leif.lindholm@linaro.org>

	arm: switch linux loader to linux_arm_kernel_header struct
	Use kernel header struct and magic definition to align (and coexist) with
	i386/arm64 ports.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Leif Lindholm  <leif.lindholm@linaro.org>

	arm64: align linux kernel magic macro naming with i386
	Change GRUB_ARM64_LINUX_MAGIC to GRUB_LINUX_ARM64_MAGIC_SIGNATURE.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Leif Lindholm  <leif.lindholm@linaro.org>

	arm64: align linux kernel header struct naming with i386
	Rename struct grub_arm64_linux_kernel_header -> linux_arm64_kernel_header.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Leif Lindholm  <leif.lindholm@linaro.org>

	i386: make struct linux_kernel_header architecture specific
	struct linux_kernel_header -> struct linux_i386_kernel_header

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Leif Lindholm  <leif.lindholm@linaro.org>

	make GRUB_LINUX_MAGIC_SIGNATURE architecture-specific
	Rename GRUB_LINUX_MAGIC_SIGNATURE GRUB_LINUX_I386_MAGIC_SIGNATURE,
	to be usable in code that supports more than one image type.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Leif Lindholm  <leif.lindholm@linaro.org>

	Make arch-specific linux.h include guards architecture unique
	Replace uses of GRUB_LINUX_MACHINE_HEADER and GRUB_LINUX_CPU_HEADER
	with GRUB_<arch>_LINUX_HEADER include guards to prevent issues when
	including more than one of them.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Leif Lindholm  <leif.lindholm@linaro.org>

	arm64/efi: move EFI_PAGE definitions to efi/memory.h
	The EFI page definitions and macros are generic and should not be confined
	to arm64 headers - so move to efi/memory.h.
	Also add EFI_PAGE_SIZE macro.

	Update loader sources to reflect new header location.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Colin Watson  <cjwatson@ubuntu.com>

	libgcrypt: Import replacement CRC operations
	The CRC implementation imported from libgcrypt 1.5.3 is arguably
	non-free, due to being encumbered by the restrictive Internet Society
	licence on RFCs (see e.g. https://wiki.debian.org/NonFreeIETFDocuments).
	Fortunately, libgcrypt has since replaced it with a version that is both
	reportedly better-optimised and doesn't suffer from this encumbrance.

	The ideal solution would be to update to a new version of libgcrypt, and
	I spent some time trying to do that.  However, util/import_gcry.py
	requires complex modifications to cope with the new version, and I
	stalled part-way through; furthermore, GRUB's libgcrypt tree already
	contains some backports of upstream changes.  Rather than allowing the
	perfect to be the enemy of the good, I think it's best to backport this
	single change to at least sort out the licensing situation.  Doing so
	won't make things any harder for a future wholesale upgrade.

	This commit is mostly a straightforward backport of
	https://git.gnupg.org/cgi-bin/gitweb.cgi?p=libgcrypt.git;a=commitdiff;h=06e122baa3321483a47bbf82fd2a4540becfa0c9,
	but I also imported bufhelp.h from libgcrypt 1.7.0 (newer versions
	required further changes elsewhere).

	I've tested that "hashsum -h crc32" still produces correct output for a
	variety of files on both i386-pc and x86_64-emu targets.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: add nvme support within ofpath
	Add NVMe support within ofpath.

	The Open Firmware text representation for a NVMe device contains the
	Namespace ID. An invalid namespace ID is one whose value is zero or whose
	value is greater than the value reported by the Number of Namespaces (NN)
	field in the Identify Controller data structure.  At the moment  only a
	single Namespace is supported, therefore the value is currently hard coded
	to one.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  Daniel Kiper  <daniel.kiper@oracle.com>

	chainloader: Fix wrong break condition (must be AND not, OR)
	The definition of bpb's num_total_sectors_16 and num_total_sectors_32
	is that either the 16-bit field is non-zero and is used (in which case
	eg mkfs.fat sets the 32-bit field to zero), or it is zero and the
	32-bit field is used. Therefore, a BPB is invalid only if *both*
	fields are zero; having one field as zero and the other as non-zero is
	the case to be expected. (Indeed, according to Microsoft's specification
	one of the fields *must* be zero, and the other non-zero.)

	This affects all users of grub_chainloader_patch_bpb which are in
	chainloader.c, freedos.c, and ntldr.c

	Some descriptions of the semantics of these two fields:

	https://www.win.tue.nl/~aeb/linux/fs/fat/fat-1.html

	  The old 2-byte fields "total number of sectors" and "number of
	  sectors per FAT" are now zero; this information is now found in
	  the new 4-byte fields.

	(Here given in the FAT32 EBPB section but the total sectors 16/32 bit
	fields semantic is true of FAT12 and FAT16 too.)

	https://wiki.osdev.org/FAT#BPB_.28BIOS_Parameter_Block.29

	  19 | 2 | The total sectors in the logical volume. If this value is 0,
	  it means there are more than 65535 sectors in the volume, and the actual
	  count is stored in "Large Sectors (bytes 32-35).

	  32 | 4 | Large amount of sector on media. This field is set if there
	  are more than 65535 sectors in the volume.

	(Doesn't specify what the "large" field is set to when unused, but as
	mentioned mkfs.fat sets it to zero then.)

	https://technet.microsoft.com/en-us/library/cc976796.aspx

	  0x13 | WORD | 0x0000 |
	  Small Sectors . The number of sectors on the volume represented in 16
	  bits (< 65,536). For volumes larger than 65,536 sectors, this field
	  has a value of zero and the Large Sectors field is used instead.

	  0x20 | DWORD | 0x01F03E00 |
	  Large Sectors . If the value of the Small Sectors field is zero, this
	  field contains the total number of sectors in the FAT16 volume. If the
	  value of the Small Sectors field is not zero, the value of this field
	  is zero.

	https://staff.washington.edu/dittrich/misc/fatgen103.pdf page 10

	  BPB_TotSec16 | 19 | 2 |
	  This field is the old 16-bit total count of sectors on the volume.
	  This count includes the count of all sectors in all four regions of the
	  volume. This field can be 0; if it is 0, then BPB_TotSec32 must be
	  non-zero. For FAT32 volumes, this field must be 0. For FAT12 and
	  FAT16 volumes, this field contains the sector count, and
	  BPB_TotSec32 is 0 if the total sector count “fits” (is less than
	  0x10000).

	  BPB_TotSec32 | 32 | 4 |
	  This field is the new 32-bit total count of sectors on the volume.
	  This count includes the count of all sectors in all four regions of the
	  volume. This field can be 0; if it is 0, then BPB_TotSec16 must be
	  non-zero. For FAT32 volumes, this field must be non-zero. For
	  FAT12/FAT16 volumes, this field contains the sector count if
	  BPB_TotSec16 is 0 (count is greater than or equal to 0x10000).

	(This specifies that an unused BPB_TotSec32 field is set to zero.)

	By the way fix offsets in include/grub/fat.h.

	Tested with lDebug booted in qemu via grub2's
	FreeDOS direct loading support, refer to
	https://bitbucket.org/ecm/ldosboot + https://bitbucket.org/ecm/ldebug

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-23  H.J. Lu  <hjl.tools@gmail.com>

	x86-64: Treat R_X86_64_PLT32 as R_X86_64_PC32
	Starting from binutils commit bd7ab16b4537788ad53521c45469a1bdae84ad4a:

	https://sourceware.org/git/?p=binutils-gdb.git;a=commit;h=bd7ab16b4537788ad53521c45469a1bdae84ad4a

	x86-64 assembler generates R_X86_64_PLT32, instead of R_X86_64_PC32, for
	32-bit PC-relative branches.  Grub2 should treat R_X86_64_PLT32 as
	R_X86_64_PC32.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-14  Steve McIntyre  <steve@einval.com>

	Make grub-install check for errors from efibootmgr
	Code is currently ignoring errors from efibootmgr, giving users
	clearly bogus output like:

	        Setting up grub-efi-amd64 (2.02~beta3-4) ...
	        Installing for x86_64-efi platform.
	        Could not delete variable: No space left on device
	        Could not prepare Boot variable: No space left on device
	        Installation finished. No error reported.

	and then potentially unbootable systems. If efibootmgr fails, grub-install
	should know that and report it!

	We've been using similar patch in Debian now for some time, with no ill effects.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-14  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64: fix OF path names for sun4v systems
	Fix the Open Firmware (OF) path property for sun4v SPARC systems.
	These platforms do not have a /sas/ within their path. Over time
	different OF addressing schemes have been supported. There
	is no generic addressing scheme that works across every HBA.

	It looks that this functionality will not work if you try to cross-install
	SPARC GRUB2 binary using e.g. x86 grub-install. By default it should work.
	However, we will also have other issues here, like lack of access to OF
	firmware/paths, which make such configs unusable anyway. So, let's leave
	this patch as is for time being. If somebody cares then he/she should fix
	the issue(s) at some point.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-02-14  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64: Add blocklist GPT support for SPARC
	Add block-list GPT support for SPARC.  The OBP "load" and "boot" methods
	are partition aware and neither command can see the partition table. Also
	neither command can address the entire physical disk. When the install
	happens, grub generates the block-list entries based on the beginning of the
	physical disk, not the beginning of the partition. This patch fixes the
	block-list entries so they match what OBP expects during boot for a GPT disk.

	T5 and above now supports GPT as well as VTOC.

	This patch has been tested on T5-2 and newer SPARC systems.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-01-29  Stefan Fritsch  <fritsch@genua.de>

	ahci: Improve error handling
	Check the error bits in the interrupt status register. According to the
	AHCI 1.2 spec, "Interrupt sources that are disabled (‘0’) are still
	reflected in the status registers.", so this should work even though
	grub uses polling

	This fixes the following problem on a Fujitsu E744 laptop:

	Sometimes there is a very long delay (up to several minutes) when
	booting from hard disk. It seems accessing the DVD drive (which has no
	disk inserted) sometimes fails with some errors, which leads to each
	access being stalled until the 20s timeout triggers. This seems to
	happen when grub is trying to read filesystem/partition data.

	The problem is that the command_issue bit that is checked in the loop is
	only reset if the "HBA receives a FIS which clears the BSY, DRQ, and ERR
	bits for the command", but the ERR bit is never cleared. Therefore
	command_issue is never reset and grub waits for the timeout.

	The relevant bit in our case is the Task File Error Status (TFES), which
	is equivalent to the ERR bit 0 in tfd. But this patch also checks
	the other error bits except for the "Interface non-fatal error status"
	bit.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2018-01-29  dann frazier  <dann.frazier@canonical.com>

	Keep the native terminal active when enabling gfxterm
	grub-mkconfig will set GRUB_TERMINAL_OUTPUT to "gfxterm" unless the user
	has overridden it. On EFI systems, this will stop output from going to the
	default "console" terminal. When the EFI fw console is configured to output to
	both serial and video, this will cause GRUB to only display on video - while
	continuing to accept input from both video and serial.

	Instead of switching from "console" to "gfxterm", let's output to both.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-12-06  Julien Grall  <julien.grall@linaro.org>

	arm64/xen: Add missing #address-cells and #size-cells properties
	The properties #address-cells and #size-cells are used to know the
	number of cells for ranges provided by "regs". If they don't exist, the
	value are resp. 2 and 1.

	Currently, when multiboot nodes are created it is assumed that #address-cells
	and #size-cells are exactly 2. However, they are never set by GRUB and
	will result to later failure when the device-tree is generated by GRUB
	or contain different values.

	To prevent this failure, create the both properties in the chosen nodes.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-12-06  Jordan Glover  <Golden_Miller83@protonmail.ch>

	grub-mkconfig: Fix detecting .sig files as system images
	grub-mkconfig detects detached RSA signatures for kernel images used for
	signature checking as valid images and adds them to grub.cfg as separate
	menu entries. This patch adds .sig extension to common blacklist.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-12-06  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: Fix segfault in grub-ofpathname
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-11-28  Eric Snowberg  <eric.snowberg@oracle.com>

	grub-install: Fix memory leak
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-11-24  Eric Snowberg  <eric.snowberg@oracle.com>

	ls: prevent double open
	Prevent a double open.  This can cause problems with some ieee1275
	devices, causing the system to hang.  The double open can occur
	as follows:

	grub_ls_list_files (char *dirname, int longlist, int all, int human)
	       dev = grub_device_open (device_name);
	       dev remains open while:
	       grub_normal_print_device_info (device_name);
	                dev = grub_device_open (name);

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-10-06  David E. Box  <david.e.box@linux.intel.com>

	tsc: Change default tsc calibration method to pmtimer on EFI systems
	On efi systems, make pmtimer based tsc calibration the default over the
	pit. This prevents Grub from hanging on Intel SoC systems that power gate
	the pit.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-09-07  Alexander Graf  <agraf@suse.de>

	efi: Free malloc regions on exit
	When we exit grub, we don't free all the memory that we allocated earlier
	for our heap region. This can cause problems with setups where you try
	to descend the boot order using "exit" entries, such as PXE -> HD boot
	scenarios.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-09-07  Alexander Graf  <agraf@suse.de>

	efi: Move grub_reboot() into kernel
	The reboot function calls machine_fini() and then reboots the system.
	Currently it lives in lib/ which means it gets compiled into the
	reboot module which lives on the heap.

	In a following patch, I want to free the heap on machine_fini()
	though, so we would free the memory that the code is running in. That
	obviously breaks with smarter UEFI implementations.

	So this patch moves it into the core. That way we ensure that all
	code running after machine_fini() in the UEFI case is running from
	memory that got allocated (and gets deallocated) by the UEFI core.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-09-07  Konrad Rzeszutek Wilk  <konrad.wilk@oracle.com>

	Use grub-file to figure out whether multiboot2 should be used for Xen.gz
	The multiboot2 is much more preferable than multiboot. Especiall
	if booting under EFI where multiboot does not have the functionality
	to pass ImageHandler.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-09-07  Konrad Rzeszutek Wilk  <konrad.wilk@oracle.com>

	Fix util/grub.d/20_linux_xen.in: Add xen_boot command support for aarch64
	Commit d33045ce7ffcb7c1e4a60c14d5ca64b36e3c5abe introduced
	the support for this, but it does not work under x86 (as it stops
	20_linux_xen from running).

	The 20_linux_xen is run under a shell and any exits from within it:

	(For example on x86):
	+ /usr/bin/grub2-file --is-arm64-efi /boot/xen-4.9.0.gz
	[root@tst063 grub]# echo $?
	1

	will result in 20_linux_xen exiting without continuing
	and also causing grub2-mkconfig to stop processing.

	As in:

	 [root@tst063 grub]# ./grub-mkconfig | tail
	 Generating grub configuration file ...
	 Found linux image: /boot/vmlinuz-4.13.0-0.rc5.git1.1.fc27.x86_64
	 Found initrd image: /boot/initramfs-4.13.0-0.rc5.git1.1.fc27.x86_64.img
	 Found linux image: /boot/vmlinuz-0-rescue-ec082ee24aea41b9b16aca52a6d10cc2
	 Found initrd image: /boot/initramfs-0-rescue-ec082ee24aea41b9b16aca52a6d10cc2.img
	 		echo	'Loading Linux 0-rescue-ec082ee24aea41b9b16aca52a6d10cc2 ...'
	 		linux	/vmlinuz-0-rescue-ec082ee24aea41b9b16aca52a6d10cc2 root=/dev/mapper/fedora_tst063-root ro single
	 		echo	'Loading initial ramdisk ...'
	 		initrd	/initramfs-0-rescue-ec082ee24aea41b9b16aca52a6d10cc2.img
	 	}
	 }

	 ### END /usr/local/etc/grub.d/10_linux ###

	 ### BEGIN /usr/local/etc/grub.d/20_linux_xen ###

	 root@tst063 grub]#

	And no more.

	This patch wraps the invocation of grub-file to be a in subshell
	and to process the return value in a conditional. That fixes
	the issue.

	RH-BZ 1486002: grub2-mkconfig does not work if xen.gz is installed.

	CC: Fu Wei <fu.wei@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-09-07  Vladimir Serbinenko  <phcoder@gmail.com>

	Fix compilation for x86_64-efi.

2017-09-05  Vladimir Serbinenko  <phcoder@gmail.com>

	Add a file missing in multiboot2 commit.

2017-08-30  Vladimir Serbinenko  <phcoder@google.com>

	gzio: fix unaligned access

	grub-fs-tester: Fix bashism

2017-08-30  Vladimir Serbinenko  <phcoder@gmail.com>

	Regenerate checksum.h with newer unifont.
	Old link is broken. New unifont is
	http://ftp.de.debian.org/debian/pool/main/u/unifont/xfonts-unifont_9.0.06-2_all.deb

	printf_unit_test: Disable Wformat-truncation on GCC >= 7
	We intentionally pass NULL as argument to format, hence disable the warning.

	qemu, coreboot, multiboot: Change linking address to 0x9000.
	It's common for distros to use a defective ld which links at 0x9000. Instead
	of fighting it, just move link target to 0x9000.

2017-08-30  Stefan Fritsch  <sf@sfritsch.de>

	Implement checksum verification for gunzip
	This implements the crc32 check for the gzip format. Support for zlib's
	adler checksum is not included, yet.

2017-08-30  Vladimir Serbinenko  <phcoder@gmail.com>

	xfs: Don't attempt to iterate over empty directory.
	Reported by: Tuomas Tynkkynen

2017-08-30  Patrick Steinhardt  <ps@pks.im>

	unix exec: avoid atexit handlers when child exits
	The `grub_util_exec_redirect_all` helper function can be used to
	spawn an executable and redirect its output to some files. After calling
	`fork()`, the parent will wait for the child to terminate with
	`waitpid()` while the child prepares its file descriptors, environment
	and finally calls `execvp()`. If something in the children's setup
	fails, it will stop by calling `exit(127)`.

	Calling `exit()` will cause any function registered via `atexit()` to be
	executed, which is usually the wrong thing to do in a child. And
	actually, one can easily observe faulty behaviour on musl-based systems
	without modprobe(8) installed: executing `grub-install --help` will call
	`grub_util_exec_redirect_all` with "modprobe", which obviously fails if
	modprobe(8) is not installed. Due to the child now exiting and invoking
	the `atexit()` handlers, it will clean up some data structures of the
	parent and cause it to be deadlocked in the `waitpid()` syscall.

	The issue can easily be fixed by calling `_exit(127)` instead, which is
	especially designed to be called when the atexit-handlers should not be
	executed.

2017-08-30  Vladimir Serbinenko  <phcoder@gmail.com>

	arc: Do not create spurious variable grub_arc_memory_type_t.

2017-08-14  Xuan Guo  <nbdd0121>

	Set have_exec to y on cygwin so we have grub_mkrescue.

2017-08-14  Vladimir Serbinenko  <phcoder@gmail.com>

	enforcing fixup

	multiboot fixup

	linux fixup

	yylex: Explicilty cast fprintf to void.
	It's needed to avoid warning on recent GCC.

	genmoddep: Check that no modules provide the same symbol.
	The semantics of 2 modules providing the same symbol are undefined. So
	ensure that it doesn't happen.

	Fix symbols appearing in several modules in linux*.
	If same symbol is provided by 2 modules its semantics are undefined.
	Avoid this by depending rather than double-including files.

2017-08-14  Vladimir Serbinenko  <phcoder@gmail.com>

	multiboot: disentangle multiboot and multiboot2.
	Previously we had multiboot and multiboot2 declaring the same symbols.
	This can potentially lead to aliasing and strange behaviours when e.g.
	module instead of module2 is used with multiboot2.

	Bug: #51137

2017-08-14  Vladimir Serbinenko  <phcoder@gmail.com>

	hdparm: Depend on hexdump rather than having a second copy of hexdump.

	grub.texi: Fix typo
	Reported by: 	Ori Avtalion <saltyhorse>

2017-08-07  Pete Batard  <pete@akeo.ie>

	io: add a GRUB_GZ prefix to gzio specific defines
	* This is done to avoid a conflict with a PACKED define in the EDK2

	core: use GRUB_TERM_ definitions when handling term characters
	* Also use hex value for GRUB_TERM_ESC as '\e' is not in the C standard and is not understood by some compilers

2017-08-07  Leif Lindholm  <leif.lindholm@linaro.org>

	efi: change heap allocation type to GRUB_EFI_LOADER_CODE
	With upcoming changes to EDK2, allocations of type EFI_LOADER_DATA may
	not return regions with execute ability. Since modules are loaded onto
	the heap, change the heap allocation type to GRUB_EFI_LOADER_CODE in
	order to permit execution on systems with this feature enabled.

	Closes: 50420

2017-08-07  Leif Lindholm  <leif.lindholm@linaro.org>

	arm64 linux loader: improve type portability
	In preparation for turning this into a common loader for 32-bit and 64-bit
	platforms, ensure the code will compile cleanly for either.

2017-08-07  Leif Lindholm  <leif.lindholm@linaro.org>

	efi: Add GRUB_PE32_MAGIC definition
	Add a generic GRUB_PE32_MAGIC definition for the PE 'MZ' tag and delete
	the existing one in arm64/linux.h.

	Update arm64 Linux loader to use this new definition.

2017-08-07  Leif Lindholm  <leif.lindholm@linaro.org>

	efi: move fdt helper library
	There is nothing ARM64 (or even ARM) specific about the efi fdt helper
	library, which is used for locating or overriding a firmware-provided
	devicetree in a UEFI system - so move it to loader/efi for reuse.

	Move the fdtload.h include file to grub/efi and update path to
	efi/fdtload.h in source code referring to it.

2017-08-07  Vladimir Serbinenko  <phcoder@gmail.com>

	Remove grub_efi_allocate_pages.
	grub_efi_allocate_pages Essentially does 2 unrelated things:
	* Allocate at fixed address.
	* Allocate at any address.

	To switch between 2 different functions it uses address == 0 as magic
	value which is wrong as 0 is a perfectly valid fixed adress to allocate at.

2017-08-07  Leif Lindholm  <leif.lindholm@linaro.org>

	efi: refactor grub_efi_allocate_pages
	Expose a new function, grub_efi_allocate_pages_real(), making it possible
	to specify allocation type and memory type as supported by the UEFI
	AllocatePages boot service.

	Make grub_efi_allocate_pages() a consumer of the new function,
	maintaining its old functionality.

	Also delete some left-around #if 1/#else blocks in the affected
	functions.

2017-08-07  Vladimir Serbinenko  <phcoder@gmail.com>

	Fail if xorriso failed.
	If xorriso failed most likely we didn't generate a meaningful image.

	mkrescue: Check xorriso presence before doing anything else.
	mkrescue can't do anything useful without xorriso, so abort early if it's
	not available.

2017-08-07  Pali Rohár  <pali.rohar@gmail.com>

	* grub-core/fs/udf.c: Add support for UUID
	Use same algorithm as in libblkid from util-linux v2.30.

	1. Take first 16 bytes from UTF-8 encoded string of VolumeSetIdentifier
	2. If all bytes are hexadecimal digits, convert to lowercase and use as UUID
	3. If first 8 bytes are not all hexadecimal digits, convert those 8 bytes
	   to their hexadecimal representation, resulting in 16 bytes for UUID
	4. Otherwise, compose UUID from two parts:
	   1. part: converted first 8 bytes (which are hexadecimal digits) to lowercase
	   2. part: encoded following 4 bytes to their hexadecimal representation (16 bytes)

	So UUID would always have 16 hexadecimal digits in lowercase variant.

	According to UDF specification, first 16 Unicode characters of
	VolumeSetIdentifier should be unique value and first 8 should be
	hexadecimal characters.

	In most cases all 16 characters are hexadecimal, but e.g. MS Windows
	format.exe set only first 8 as hexadecimal and remaining as fixed
	(non-unique) which violates specification.

2017-08-07  Pali Rohár  <pali.rohar@gmail.com>

	udf: Fix reading label, lvd.ident is dstring
	UDF dstring has stored length in the last byte of buffer. Therefore last
	byte is not part of recorded characters. And empty string in dstring is
	encoded as empty buffer, including first byte (compression id).

2017-08-07  Pete Batard  <pete@akeo.ie>

	zfs: remove size_t typedef and use grub_size_t instead
	* Prevents some toolchains from issuing a warning on size_t redef.

2017-08-03  Rob Clark  <rclark@redhat.com>

	Fix a segfault in lsefi
	when protocols_per_handle returns error, we can't use the pointers we
	passed to it, and that includes trusting num_protocols.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-07-10  Vladimir Serbinenko  <phcoder@gmail.com>

	fdt: silence clang warning.

2017-07-09  Vladimir Serbinenko  <phcoder@gmail.com>

	arm-efi: Fix compilation

2017-07-09  AppChecker  <appchecker>

	crypto: Fix use after free.
	Reported by: AppChecker
	Transformed to patch by: Satish Govindarajan

2017-07-09  Vladimir Serbinenko  <phcoder@gmail.com>

	ehci: Fix compilation on i386

2017-07-09  phcoder  <phcoder@sid.debian.laptop.phnet>

	cache: Fix compilation for ppc, sparc and arm64

	ehci: Fix compilation for amd64

2017-06-29  Eric Biggers  <ebiggers@google.com>

	Allow GRUB to mount ext2/3/4 filesystems that have the encryption feature.
	On such a filesystem, inodes may have EXT4_ENCRYPT_FLAG set.
	For a regular file, this means its contents are encrypted; for a
	directory, this means the filenames in its directory entries are
	encrypted; and for a symlink, this means its target is encrypted.  Since
	GRUB cannot decrypt encrypted contents or filenames, just issue an error
	if it would need to do so.  This is sufficient to allow unencrypted boot
	files to co-exist with encrypted files elsewhere on the filesystem.

	(Note that encrypted regular files and symlinks will not normally be
	encountered outside an encrypted directory; however, it's possible via
	hard links, so they still need to be handled.)

	Tested by booting from an ext4 /boot partition on which I had run
	'tune2fs -O encrypt'.  I also verified that the expected error messages
	are printed when trying to access encrypted directories, files, and
	symlinks from the GRUB command line.  Also ran 'sudo ./grub-fs-tester
	ext4_encrypt'; note that this requires e2fsprogs v1.43+ and Linux v4.1+.

2017-05-29  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64: Don't use devspec to determine the OBP path
	Don't use devspec to determine the OBP path on SPARC hardware.  Within all
	versions of Linux on SPARC, the devspec returns one of three values:
	"none", "vnet-port", or "vdisk".  Unlike on PPC, none of these values
	are useful in determining the OBP path.

	Before this patch grub-ofpathname always returned the wrong value
	for a virtual disk. For example:

	% grub-ofpathname /dev/vdiskc2
	vdisk/disk@2:b

	After this patch it now returns the correct value:

	% grub-ofpathname /dev/vdiskc2
	/virtual-devices@100/channel-devices@200/disk@2:b

	Orabug: 24459765

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-05-18  Fu Wei  <fu.wei@linaro.org>

	arm64: Update the introduction of Xen boot commands in docs/grub.texi
	delete: xen_linux, xen_initrd, xen_xsm
	add: xen_module

	This update bases on
	    commit 0edd750e50698854068358ea53528100a9192902
	    Author: Vladimir Serbinenko <phcoder@gmail.com>
	    Date:   Fri Jan 22 10:18:47 2016 +0100

	        xen_boot: Remove obsolete module type distinctions.

	Also bases on the module loading mechanism of Xen code:
	488c2a8 docs/arm64: clarify the documention for loading XSM support
	67831c4 docs/arm64: update the documentation for loading XSM support
	ca32012 xen/arm64: check XSM Magic from the second unknown module.

	Reviewed-by: Julien Grall <julien.grall@arm.com>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-05-18  Fu Wei  <fu.wei@linaro.org>

	util/grub.d/20_linux_xen.in: Add xen_boot command support for aarch64
	This patch adds the support of xen_boot command for aarch64:
	    xen_hypervisor
	    xen_module
	These two commands are only for aarch64, since it has its own protocol and
	commands to boot xen hypervisor and Dom0, but not multiboot.

	For other architectures, they are still using multiboot and module
	commands.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-05-18  Fu Wei  <fu.wei@linaro.org>

	arm64: Add "--nounzip" option support in xen_module command
	This patch adds "--nounzip" option support in order to
	be compatible with the module command of multiboot on other architecture,
	by this way we can simplify grub-mkconfig support code.

	This patch also allow us to use zip compressed module(like Linux kernel
	for Dom0).

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-05-18  Julien Grall  <julien.grall@linaro.org>

	arm64/xen_boot: Fix Xen boot using GRUB2 on AARCH64
	Xen is currently crashing because of malformed compatible property for
	the boot module. This is because the property string is not
	null-terminated as requested by the ePAR spec.

	Tested-by: Fu Wei <fu.wei@linaro.org>
	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-05-18  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64: Close cdboot ihandle
	The ihandle is left open with a cd-core image.  This will cause a delay
	booting grub from a virtual cdrom in a LDOM.  It will also cause problems
	as Linux boots, since it expects the ihandle to be closed during init.

	Orabug: 25911275

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2017-05-09  Vladimir Serbinenko  <phcoder@gmail.com>

	at_keyboard: Fix falco chromebook case.
	EC is slow, so we need few delays for it to toggle the bits correctly.

	Command to enable clock and keyboard were not sent.

2017-05-09  Julius Werner  <jwerner@chromium.org>

	coreboot: Changed cbmemc to support updated console format from coreboot.

2017-05-09  Vladimir Serbinenko  <phcoder@gmail.com>

	Missing parts of previous commit

	arm_coreboot: Add Chromebook keyboard driver.

	rk3288_spi: Add SPI driver

	fdtbus: Add ability to send/receive messages on parent busses.

	Fix bug on FDT nodes with compatible property

2017-05-08  Vladimir Serbinenko  <phcoder@gmail.com>

	arm_coreboot: Support EHCI.

	ehci: Split core  code from PCI part.
	On ARM often EHCI is present without PCI and just declared in device
	tree. So splitcore from PCI part.

	arm_coreboot: Support DMA.
	This is needed to support USB and some other busses.

	arm_coreboot: Support loading linux images.

	arm_coreboot: Support grub-mkstandalone.

	arm_coreboot: Support keyboard for vexpress.

	at_keyboard: Split protocol from controller code.
	On vexpress controller is different but protocol is the same, so reuse the
	code.

	arm-coreboot: Export FDT routines.
	We need to use them from modules as well.

	arm-coreboot: Support for vexpress timer.

	Add support for device-tree-based drivers.

	arm-coreboot: Start new port.

	Rename uboot/datetime to dummy/datetime.
	It's just a stub and is not UBoot-specific.

	Rename uboot/halt.c to dummy/halt.c.
	It's not U-Boot specific and it's a stub.

	coreboot: Split parts that are platform-independent.
	We currently assume that coreboot is always i386, it's no longer the case,
	so split i386-coreboot parts from generic coreboot code.

	Refactor arm-uboot code to make it genereic.
	arm-coreboot startup code can be very similar to arm-uboot but current code has
	U-Boot specific references. So split U-Boot part from generic part.

	mkimage: Pass layout to mkimage_generate_elfXX rather than some fields.
	This allows easier extension of this function without having too long of
	arguments list.

2017-05-03  Paulo Flabiano Smorigo  <pfsmorigo@br.ibm.com>

	Add Virtual LAN support.
	This patch adds support for virtual LAN (VLAN) tagging. VLAN tagging allows
	multiple VLANs in a bridged network to share the same physical network link
	but maintain isolation:

	http://en.wikipedia.org/wiki/IEEE_802.1Q

	* grub-core/net/ethernet.c: Add check, get, and set vlan tag id.
	* grub-core/net/drivers/ieee1275/ofnet.c: Get vlan tag id from bootargs.
	* grub-core/net/arp.c: Add check.
	* grub-core/net/ip.c: Likewise.
	* include/grub/net/arp.h: Add vlantag attribute.
	* include/grub/net/ip.h: Likewise.

2017-05-03  Vladimir Serbinenko  <phcoder@gmail.com>

	strtoull: Fix behaviour on chars between '9' and 'a'.
	Reported by: Aaron Miller <aaronmiller@fb.com>

	Add strtoull test.

	Fix shebang for termux.
	Termux doesn't have a /bin/sh. So we needto use $SHELL.
	Keep /bin/sh as much as possible.

	Add termux path to dict.

	po: Use @SHELL@ rather than /bin/sh.
	/bin/sh might not exist.

	Use $(SHELL) rather than /bin/sh.
	/bin/sh doesn't exist under termux.

	Support lseek64.
	Android doesn't have 64-bit off_t, so use off64_t instead.

	Don't retrieve fstime when it's not useful.

	support busybox date.
	Busybox date doesn't understand weekdays in -d input,
	so strip them beforehand.

	fs-tester: make sh-compatible

	Remove bashisms from tests.
	Those tests don't actually need bash. Just use common shebang.

	Bump version to 2.03

2017-04-25  Vladimir Serbinenko  <phcoder@gmail.com>

	Increase version to 2.02.

2017-04-12  Vladimir Serbinenko  <phcoder@gmail.com>

	Fix remaining cases of gcc 7 fallthrough warning.
	They are all intended, so just add the relevant comment.

2017-04-04  Andrei Borzenkov  <arvidjaar@gmail.com>

	Add gnulib-fix-gcc7-fallthrough.diff
	As long as the code is not upstream, add it as explicit patch for the
	case of gnulib refresh.

2017-04-04  Andrei Borzenkov  <arvidjaar@gmail.com>

	i386, x86_64, ppc: fix switch fallthrough cases with GCC7
	In util/getroot and efidisk slightly modify exitsing comment to mostly
	retain it but still make GCC7 compliant with respect to fall through
	annotation.

	In grub-core/lib/xzembed/xz_dec_lzma2.c it adds same comments as
	upstream.

	In grub-core/tests/setjmp_tets.c declare functions as "noreturn" to
	suppress GCC7 warning.

	In grub-core/gnulib/regexec.c use new __attribute__, because existing
	annotation is not recognized by GCC7 parser (which requires that comment
	immediately precedes case statement).

	Otherwise add FALLTHROUGH comment.

	Closes: 50598

2017-04-04  Andrei Borzenkov  <arvidjaar@gmail.com>

	btrfs: avoid "used uninitialized" error with GCC7
	sblock was local and so considered new variable on every loop
	iteration.

	Closes: 50597

2017-04-02  Andrei Borzenkov  <arvidjaar@gmail.com>

	acpi: add missing efi_call wrapper to acpi command
	Fixed loading of ACPI tables on EFI (side effect was apparent memory
	corruption ranging from unpredictable behavior to system reset).

	Reported by Nando Eva <nando4eva@ymail.com>

2017-03-15  Vladimir Serbinenko  <phcoder@gmail.com>

	Increment version to GRUB 2.02~rc2.

	Use core2duo for bootcheck test on 64-bit EFI.
	Obviously pentium2 can't run efi64.

2017-03-14  Andrei Borzenkov  <arvidjaar@gmail.com>

	efi: skip iPXE block device.
	iPXE adds Simple File System Protocol to loaded image handle, as side
	effect it also adds Block IO protocol (according to comments, to work
	around some bugs in EDK2). GRUB assumes that every device with Block IO
	is disk and skips network initialization entirely. But iPXE Block IO
	implementation is just a stub which always fails for every operation
	so cannot be used. Attempt to detect and skip such devices.

	We are using media ID which iPXE sets to "iPXE" and block IO size in
	hope that no real device would announce 1B block ...

	Closes: 50518

2017-03-05  phcoder  <phcoder@gmail.com>

	xen: Fix wrong register in relocator.
	This fixes chainloading of some GRUB variants.

2017-02-27  Vladimir Serbinenko  <phcoder@gmail.com>

	video_fb: Fix blue collor if using unoptimized blitter.
	when unmapping the color what matters is the mode of source, not target.

	legacy_initrd: Strip any additional arguments to initrd.

2017-02-26  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-fs-tester: improve squash4 tests
	1. Make sure files are not multiple of block size. This will ensure tail packing
	for squash4 and may also trigger more codes paths in other filesystems.

	2. Call mksquashfs with -always-use-fragments to force tail packing.

2017-02-25  Andrei Borzenkov  <arvidjaar@gmail.com>

	efi: strip off final NULL from File Path in grub_efi_get_filename
	UEFI 2.6 9.3.6.4 File Path Media Device Path says that Path Name is
	"A NULL-terminated Path string including directory and file names".

	Strip final NULL from Path Name in each File Path node when constructing
	full path. To be on safe side, strip all of them.

	Fixes failure chainloading grub from grub, when loaded grub truncates
	image path and does not find its grub.cfg.

	https://bugzilla.opensuse.org/show_bug.cgi?id=1026344

	This was triggered by commit ce95549cc54b5d6f494608a7c390dba3aab4fba7;
	before it we built Path Name without trailing NULL, and apparently all
	other bootloaders use single File Path node, thus not exposing this bug.

2017-02-24  Andrei Borzenkov  <arvidjaar@gmail.com>

	squash4: fix handling of fragments and sparse files
	1. Do not assume block list and fragment are mutually exclusive. Squash
	can pack file tail as fragment (unless -no-fragments is specified); so
	check read offset and read either from block list or from fragments as
	appropriate.

	2. Support sparse files with zero blocks.

	3. Fix fragment read - frag.offset is absolute fragment position,
	not offset relative to ino.chunk.

	Reported and tested by Carlo Caione <carlo@endlessm.com>

2017-02-22  Vladimir Serbinenko  <phcoder@gmail.com>

	Whitelist sparc64-ieee1275 as having no video modules.
	ieee1275_fb is not built on sparc64 due to virtual address issues.

2017-02-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	script: fix double free in lexer
	yylex_destroy() already frees scanner.

	Found by: Coverity scan.
	CID: 176636

2017-02-07  Vladimir Serbinenko  <phcoder@gmail.com>

	xen: Fix parsing of XZ kernel.
	In case of xz, the uncompressed size is appended to xz data which confuses
	our xz decompressor. Trim it.

2017-02-07  Vladimir Serbinenko  <phcoder@gmail.com>

	xen: Fix handling of GRUB chainloading.
	In case of GRUB we put remapper after domain pages and not at 0x0.
	In this case we use max_addr to put remapper. Unfortunately we increment
	max_addr as well in this case resulting in virt mapping mapping page
	at old max_addr and trying to boot using new max_addr.

	Closes 46014.

2017-02-04  Vladimir Serbinenko  <phcoder@gmail.com>

	linguas: Don't skip ko.po.
	Translation project doesn't require copyright disclaimers. They're independant
	from us. They're responsible for their copyright story.

2017-02-03  Vladimir Serbinenko  <phcoder@gmail.com>

	Fix truncated checksum.h.

	Regenerate checksums.h
	Screenshots contain version, so we need new checksums.

	Release 2.02-rc1.

	Fix mingw compilation.

2017-02-03  Daniel Kahn Gillmor  <dkg@fifthhorseman.net>

	documentation: Clarify documentation for special environment variable "default".
	The current documentation for the special environment variable
	"default" is confusing and unclear.  This patch attempts to clean it
	up.

	In particular, the current documentation refers to the "number or
	title", but then in the example it gives, the menu entries and
	submenus all have numbers *in* their title; furthermore, there is no
	example given about how to choose the number, or any indication about
	whether counting is zero-indexed or 1-indexed.

	Having a cleaner example and presenting all variants (numeric, title,
	and id) should make it clearer to the user.

2017-02-03  Vladimir Serbinenko  <phcoder@gmail.com>

	Avoid causing kernel oops in nilfs2 test.
	1024-byte and 2048-byte blocks don't really work with some kernels, skip
	them as we don't want any oops'es.

	btrfs: Shorten label by one character.
	mkfs.btrfs imposes a slightly lower limit than would be possible in btrfs.

2017-02-02  Vladimir Serbinenko  <phcoder@gmail.com>

	grub-fs-tester: Fix mkudffs invocation.
	With current invocation order of arguments is wrong and path is hardcoded.

	grub-fs-tester: Fix fat test.
	mkfs.vfat ignores -S when invoked on a disk, including loopback device,
	so do an mkfs on underlying image.

2017-02-02  Daniel Kiper  <daniel.kiper@oracle.com>

	i386/relocator: Align stack in grub_relocator64_efi relocator
	Unified Extensible Firmware Interface Specification, Version 2.6,
	section 2.3.4, x64 Platforms, boot services, says among others:
	The stack must be 16-byte aligned. So, do it. Otherwise OS may
	boot only by chance as it happens right now.

2017-02-02  Vladimir Serbinenko  <phcoder@gmail.com>

	i386-ieee1275: Add missing bootcheck target.

	bootcheck-linux-i386: Use -cpu pentium2.
	Most modern kernels are compiled for i686, so use -cpu pentium2
	to avoid spurious failures.

	Use -fPIC with arm64 with clang.
	Currently it doesn't work either way but with -fPIC it should work once
	clang bug is fixed.

	INSTALL: Fix mention of thumb-clang.

	Fix thumb compilation with clang.
	According to EABI only STT_FUNC has convention of lowest bit indicating
	execution mode. R_THM_{JUMP,CALL}* relocations are assumed to be pointing
	to thumb mode unless they use STT_FUNC.

2017-02-01  Vladimir Serbinenko  <phcoder@gmail.com>

	Add missing strtoull_test.c
	It was forgotten in my local directory.

	arm64: Add support for GOT and PCREL32 relocations.

	mkimage: Fix memory leak.

	arm/arm64: Fix improper use of start address.
	It was used instead of loading address of current section or of entire buffer.

	ia64: Fix iterator for relocation entries.
	Don't assume relocation entry size and use sh_entsize properly.

	arm: Fix trampoline generation.
	We used the wrong pointer in this case. It worked only by accident.

	Fix bootcheck-related files compilation.
	We need -static as otherwise linker will set interpreter field and ld.so
	is not available on our initrd's.
	Strip all sections we don't need on binary tests.

2017-01-31  Vladimir Serbinenko  <phcoder@gmail.com>

	Regenerate checksum.h.
	Screenshots checked.
	Using unifont from http://ftp.us.debian.org/debian/pool/main/u/unifont/xfonts-unifont_7.0.06-1_all.deb.

	grub-mkfont: Remove leftover debug statement.

	charset: Trim away RLM and LRM.
	They are not visible but would otherwise end up as [LRM] or [RLM] squares
	with some fonts.

	gfxterm: Fix clearing of cursor.
	If ascent is bigger than height - 2, then we draw over character box but then
	to clear cursor we only draw over character box. So trim ascent if necessarry.

	ia64: Add support for R_IA64_GPREL64I.
	Recent GCC generates those relocations, so we need to support them.

2017-01-30  Vladimir Serbinenko  <phcoder@gmail.com>

	grub-module-verifier: Add mips to all_video whitelist.
	On MIPS video is compiled-in. So all_video is empty. Whitelist it.

	Fix -nopie/-nopie check.
	We don't use lgcc_s but missing lgcc_s or another library cause test to fail.
	So use -nostdlib.
	We need to use -Werror to avoid warning-generated case to be accepted.
	Clang uses -nopie rather than -no-pie. Check both and use whichever one works.
	Additionally android clang passes -pie to the linker even though it doesn't
	define __PIE__. So if compilation without no-pie logic fails add -nopie/-no-pie
	even if __PIE__ is not defined.

	grub-module-verifier: Ignore all_video emptiness on xen.
	It's intentional that it's empty when no video modules
	are available.

2017-01-28  Vladimir Serbinenko  <phcoder@gmail.com>

	Support arm clang 3.8 amd later.
	clang 3.8 and later doesn't support -mllvm -use-arm-movt=0
	whereas older clang doesn't know -mno-movt. So use
	-mno-movt whenever possible and fallback to mllvm variant.

2017-01-27  Carlo Caione  <carlo@endlessm.com>

	exfat: Support files over 4GiB
	file size in grub_fat_data was 32-bit on exfat.

2017-01-27  Vladimir Serbinenko  <phcoder@gmail.com>

	Ensure that grub_reboot doesn't return on emu.
	Use grub_fatal if longjmp fails.

	grub_reboot is marked as noreturn so return would cause
	a crash.

2017-01-27  Vladimir Serbinenko  <phcoder@gmail.com>

	grub-shell: skip font copying when no font is available.

	Don't use -mlong-calls on arm.
	We don't really need it and it's flaky and creates
	bogus symbols with clang.

	configure: Disable movw/movt with clang.
	Those relocations are not compatible with PE and also
	not compatible with custom uboot relocator.
	Disable them.

	grub-fs-tester: Delete directory once we're done.

	grub-fs-tester: Accomodate for slower systems.
	fstime can be more different with xz squashfs.
	Allow difference up to 3 seconds.
	This code is ugly now but rewriting it now is not on the
	table.

	grub-fs-tester: Accomodate for testing in proot containers.
	proot creates hidden files with .proot prefix and name
	derived from real file name. So decrease file name length
	and path depth. For some reason depth 85 also results in
	undeleteable directory, so use 84 instead of 85.

2017-01-24  Andrei Borzenkov  <arvidjaar@gmail.com>

	osdep/linux: handle autofs entries in /proc/self/mountinfo
	These entries have placeholder for device name and so are useless for our
	purpose. grub failed with something like

	grub-install: error: failed to get canonical path of `systemd-1'.

	When we see autofs entry, record it (to keep parent-child relationship) but
	continue to look for real mount. If it is found, we process it as usual. If
	only autofs entry exists, attempt to trigger mount by opening mount point
	and retry. Mount point itself is then kept open to avoid timeout.

	Recent systemd is by default using automount for /boot/efi so this should
	become more popular problem on EFI systems.

	Closes: 49942

2017-01-08  Andrei Borzenkov  <arvidjaar@gmail.com>

	linux: fix "vga=XX deprecated" warning for text mode
	Arguments were in reverse order which resulted in

	text is deprecated. Use set gfxpayload=vga=0 before linux command instead.

2016-12-22  Andrei Borzenkov  <arvidjaar@gmail.com>

	configure: fix check for sys/sysmacros.h under glibc 2.25+
	glibc 2.25 still includes sys/sysmacros.h in sys/types.h but also emits
	deprecation warning. So test for sys/types.h succeeds in configure but later
	compilation fails because we use -Werror by default.

	While this is fixed in current autoconf GIT, we really cannot force everyone
	to use bleeding edge (that is not even released right now). So run test under
	-Werror as well to force proper detection.

	This should have no impact on autoconf 2.70+ as AC_HEADER_MAJOR in this version
	simply checks for header existence.

	Reported and tested by Khem Raj <raj.khem@gmail.com>

2016-12-22  Michael Chang  <mchang@suse.com>

	Fix fwpath in efi netboot
	The path returned by grub_efi_net_config has already been stripped for the
	directory part extracted from cached bootp packet. We should just return the
	result to avoild it be stripped again.

	It fixed the problem that grub.efi as NBP image always looking for grub.cfg and
	platform directory in upper folder rather than current one it gets loaded while
	$prefix is empty. The behavior is inconsistent with other architecture and how
	we would expect empty $prefix going to be in general.

	The only exception to the general rule of empty $prefix is that when loaded
	from platform directory itself, the platform part is stripped thus upper folder
	is used for looking up files. It meets the case for how grub-mknetdir lay out
	the files under tftp root directory, but also hide away this issue to be
	identified as it appears to be just works.

	Also fix possible memory leak by moving grub_efi_get_filename() call after
	grub_efi_net_config().

2016-12-15  Andrei Borzenkov  <arvidjaar@gmail.com>

	efi: properly terminate filepath with NULL in chainloader
	EFI File Path Media Device Path is defined as NULL terminated string;
	but chainloader built file paths without final NULL. This caused error
	with Secure Boot and Linux Foundation PreLoader on Acer with InsydeH20 BIOS.
	Apparently firmware failed verification with EFI_INVALID_PARAMETER which is
	considered fatal error by PreLoader.

	Reported and tested by Giovanni Santini <itachi.sama.amaterasu@gmail.com>

2016-12-14  Magnus Granberg  <zorry@gentoo.org>

	configure: add check for -no-pie if the compiler default to -fPIE
	When Grub is compile with gcc 6.1 that have --enable-defult-pie set.
	It fail with.
	-ffreestanding   -m32 -Wl,-melf_i386 -Wl,--build-id=none  -nostdlib -Wl,-N -Wl,-r,-d   -
	o trig.module  trig_module-trigtables.o
	grep 'MARKER' gcry_whirlpool.marker.new > gcry_whirlpool.marker; rm -f
	gcry_whirlpool.marker.new
	/usr/lib/gcc/x86_64-pc-linux-gnu/6.1.0/../../../../x86_64-pc-linux-gnu/bin/ld: -r and -
	shared may not be used together
	collect2: error: ld returned 1 exit status
	Makefile:26993: recipe for target 'trig.module' failed

	Check that compiler supports -no-pie and add it to linker flags.

2016-12-14  Stanislav Kholmanskikh  <stanislav.kholmanskikh@oracle.com>

	ofnet: implement the receive buffer
	get_card_packet() from ofnet.c allocates a netbuff based on the device's MTU:

	 nb = grub_netbuff_alloc (dev->mtu + 64 + 2);

	In the case when the MTU is large, and the received packet is
	relatively small, this leads to allocation of significantly more memory,
	than it's required. An example could be transmission of TFTP packets
	with 0x400 blksize via a network card with 0x10000 MTU.

	This patch implements a per-card receive buffer in a way similar to efinet.c,
	and makes get_card_packet() allocate a netbuff of the received data size.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-12-14  Stanislav Kholmanskikh  <stanislav.kholmanskikh@oracle.com>

	ofnet: move the allocation of the transmit buffer into a function
	In the current code search_net_devices() uses the "alloc-mem" command
	from the IEEE1275 User Interface for allocation of the transmit buffer
	for the case when GRUB_IEEE1275_FLAG_VIRT_TO_REAL_BROKEN is set.

	I don't have hardware where this flag is set to verify if this
	workaround is still needed. However, further changes to ofnet will
	require to execute this workaround one more time. Therefore, to
	avoid possible duplication of code I'm moving this piece of
	code into a function.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-11-24  Alexander Graf  <agraf@suse.de>

	efi: Move fdt helper into own file
	We only support FDT files with EFI on arm and arm64 systems, not
	on x86. So move the helper that finds a prepopulated FDT UUID
	into its own file and only build it for architectures where it
	also gets called.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-11-22  Andrei Borzenkov  <arvidjaar@gmail.com>

	NEWS updates

2016-11-22  Andrei Borzenkov  <arvidjaar@gmail.com>

	bootp: export next server IP as environment variable
	Network boot autoconfiguration sets default server to next server IP
	(siaddr) from BOOTP/DHCP reply, but manual configuration using net_bootp
	exports only server name. Unfortunately semantic of server name is not
	clearly defined. BOOTP RFC 951 defines it only for client request, and
	DHCP RFC 1541 only mentions it, without any implied usage. It looks like
	this field is mostly empty in server replies.

	Export next server IP as net_<interface>_next_server variable. This allows
	grub configuration script to set $root/$prefix based on information obtained
	by net_bootp.

	Reported and tested by: Nikunj A Dadhania <nikunj@linux.vnet.ibm.com>
	Cc: nikunj@linux.vnet.ibm.com

	v2: change variable name to net_<interface>_next_server as discussed on the list

2016-11-22  Aaro Koskinen  <aaro.koskinen@iki.fi>

	configure.ac: don't require build time grub-mkfont on powerpc-ieee1275
	Don't require build time grub-mkfont on powerpc-ieee1275.

2016-11-14  Dirk Mueller  <dmueller@suse.com>

	grub-mknetdir: Add support for ARM64 EFI

2016-11-12  Joonas Lahtinen  <joonas.lahtinen@linux.intel.com>

	.gitignore: Add grub-core/build-grub-module-verifier

2016-11-10  Alexander Graf  <agraf@suse.de>

	arm efi: Use fdt from firmware when available
	If EFI is nice enough to pass us an FDT using configuration tables on 32bit
	ARM, we should really try and make use of it.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-11-10  Alexander Graf  <agraf@suse.de>

	arm64: Move firmware fdt search into global function
	Searching for a device tree that EFI passes to us via configuration tables
	is nothing architecture specific. Move it into generic code.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-11-05  Corey Hickey  <bugfood-ml@fatooh.org>

	fix detection of non-LUKS CRYPT
	grub_util_get_dm_abstraction() does a string comparison of insufficient
	length. When using a UUID such as "CRYPT-PLAIN-sda6_crypt", the function
	returns GRUB_DEV_ABSTRACTION_LUKS.

	This results in the error:
	    ./grub-probe: error: disk `cryptouuid/sda6_crypt' not found.

	This appears to be a copy/paste error introduced in:
	a10e7a5a8918bea6e2632055129fa9b516fe965a

	The bug was (apparently) latent until revealed by:
	3bca85b4184f74995a7cc2791e432173fde26d34

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: add capability to load p2m list outside of kernel mapping
	Modern pvops linux kernels support a p2m list not covered by the
	kernel mapping. This capability is flagged by an elf-note specifying
	the virtual address the kernel is expecting the p2m list to be mapped
	to.

	In case the elf-note is set by the kernel don't place the p2m list
	into the kernel mapping, but map it to the given address. This will
	allow to support domains with larger memory, as the kernel mapping is
	limited to 2GB and a domain with huge memory in the TB range will have
	a p2m list larger than this.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: modify page table construction
	Modify the page table construction to allow multiple virtual regions
	to be mapped. This is done as preparation for removing the p2m list
	from the initial kernel mapping in order to support huge pv domains.

	This allows a cleaner approach for mapping the relocator page by
	using this capability.

	The interface to the assembler level of the relocator has to be changed
	in order to be able to process multiple page table areas.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: add capability to load initrd outside of initial mapping
	Modern pvops linux kernels support an initrd not covered by the initial
	mapping. This capability is flagged by an elf-note.

	In case the elf-note is set by the kernel don't place the initrd into
	the initial mapping. This will allow to load larger initrds and/or
	support domains with larger memory, as the initial mapping is limited
	to 2GB and it is containing the p2m list.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: factor out allocation of page tables into separate function
	Do the allocation of page tables in a separate function. This will
	allow to do the allocation at different times of the boot preparations
	depending on the features the kernel is supporting.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: factor out allocation of special pages into separate function
	Do the allocation of special pages (start info, console and xenbus
	ring buffers) in a separate function. This will allow to do the
	allocation at different times of the boot preparations depending on
	the features the kernel is supporting.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: factor out p2m list allocation into separate function
	Do the p2m list allocation of the to be loaded kernel in a separate
	function. This will allow doing the p2m list allocation at different
	times of the boot preparations depending on the features the kernel
	is supporting.

	While at this remove superfluous setting of first_p2m_pfn and
	nr_p2m_frames as those are needed only in case of the p2m list not
	being mapped by the initial kernel mapping.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: synchronize xen header
	Get actual version of include/xen/xen.h from the Xen repository in
	order to be able to use constants defined there.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: add elfnote.h to avoid using numbers instead of constants
	Various features and parameters of a pv-kernel are specified via
	elf notes in the kernel image. Those notes are part of the interface
	between the Xen hypervisor and the kernel.

	Instead of using num,bers in the code when interpreting the elf notes
	make use of the header supplied by Xen for that purpose.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: reduce number of global variables in xen loader
	The loader for xen paravirtualized environment is using lots of global
	variables. Reduce the number by making them either local or by putting
	them into a single state structure.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: avoid memleaks on error
	When loading a Xen pv-kernel avoid memory leaks in case of errors.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Juergen Gross  <jgross@suse.com>

	xen: make xen loader callable multiple times
	The loader for xen paravirtualized environment isn't callable multiple
	times as it won't free any memory in case of failure.

	Call grub_relocator_unload() as other modules do it before allocating
	a new relocator or when unloading the module.

	Reviewed-by: Daniel Kiper <daniel.kiper@oracle.com>

2016-10-27  Daniel Kiper  <daniel.kiper@oracle.com>

	multiboot2: Add support for relocatable images
	Currently multiboot2 protocol loads image exactly at address specified in
	ELF or multiboot2 header. This solution works quite well on legacy BIOS
	platforms. It is possible because memory regions are placed at predictable
	addresses (though I was not able to find any spec which says that it is
	strong requirement, so, it looks that it is just a goodwill of hardware
	designers). However, EFI platforms are more volatile. Even if required
	memory regions live at specific addresses then they are sometimes simply
	not free (e.g. used by boot/runtime services on Dell PowerEdge R820 and
	OVMF). This means that you are not able to just set up final image
	destination on build time. You have to provide method to relocate image
	contents to real load address which is usually different than load address
	specified in ELF and multiboot2 headers.

	This patch provides all needed machinery to do self relocation in image code.
	First of all GRUB2 reads min_addr (min. load addr), max_addr (max. load addr),
	align (required image alignment), preference (it says which memory regions are
	preferred by image, e.g. none, low, high) from multiboot_header_tag_relocatable
	header tag contained in binary (at this stage load addresses from multiboot2
	and/or ELF headers are ignored). Later loader tries to fulfill request (not only
	that one) and if it succeeds then it informs image about real load address via
	multiboot_tag_load_base_addr tag. At this stage GRUB2 role is finished. Starting
	from now executable must cope with relocations itself using whole static and
	dynamic knowledge provided by boot loader.

	This patch does not provide functionality which could do relocations using
	ELF relocation data. However, I was asked by Konrad Rzeszutek Wilk and Vladimir
	'phcoder' Serbinenko to investigate that thing. It looks that relevant machinery
	could be added to existing code (including this patch) without huge effort.
	Additionally, ELF relocation could live in parallel with self relocation provided
	by this patch. However, during research I realized that first of all we should
	establish the details how ELF relocatable image should look like and how it should
	be build. At least to build proper test/example files.

	So, this patch just provides support for self relocatable images. If ELF file
	with relocs is loaded then GRUB2 complains loudly and ignores it. Support for
	such files will be added later.

	This patch was tested with Xen image which uses that functionality. However, this Xen
	feature is still under development and new patchset will be released in about 2-3 weeks.

	Reviewed-by: Vladimir Serbinenko <phcoder@gmail.com>

2016-10-27  Daniel Kiper  <daniel.kiper@oracle.com>

	multiboot2: Do not pass memory maps to image if EFI boot services are enabled
	If image requested EFI boot services then skip multiboot2 memory maps.
	Main reason for not providing maps is because they will likely be
	invalid. We do a few allocations after filling them, e.g. for relocator
	needs. Usually we do not care as we would have finished boot services.
	If we keep boot services then it is easier/safer to not provide maps.
	However, if image needs memory maps and they are not provided by bootloader
	then it should get itself just before ExitBootServices() call.

	Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Reviewed-by: Vladimir Serbinenko <phcoder@gmail.com>

2016-10-27  Daniel Kiper  <daniel.kiper@oracle.com>

	multiboot2: Add tags used to pass ImageHandle to loaded image
	Add tags used to pass ImageHandle to loaded image if requested.
	It is used by at least ExitBootServices() function.

	Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Reviewed-by: Vladimir Serbinenko <phcoder@gmail.com>

2016-10-27  Daniel Kiper  <daniel.kiper@oracle.com>

	i386/relocator: Add grub_relocator64_efi relocator
	Add grub_relocator64_efi relocator. It will be used on EFI 64-bit platforms
	when multiboot2 compatible image requests MULTIBOOT_TAG_TYPE_EFI_BS. Relocator
	will set lower parts of %rax and %rbx accordingly to multiboot2 specification.
	On the other hand processor mode, just before jumping into loaded image, will
	be set accordingly to Unified Extensible Firmware Interface Specification,
	Version 2.4 Errata B, section 2.3.4, x64 Platforms, boot services. This way
	loaded image will be able to use EFI boot services without any issues.

	Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
	Reviewed-by: Vladimir Serbinenko <phcoder@gmail.com>

2016-10-18  Sakar Arora  <Sakar.Arora@nxp.com>

	net/ip: Fix limit_time calculation in freeing old fragments
	limit_time underflows when current time is less than 90000ms.
	This causes packet fragments received during this time, i.e.,
	till 90000ms pass since timer init, to be rejected.

	Hence, set it to 0 if its less than 90000.

2016-09-28  Andrei Borzenkov  <arvidjaar@gmail.com>

	asm-tests/i386-pc: Check that movl is 5 bytes.
	LLVM 3.9 now emits short form of jump instructions, but it is still using
	32 bit addresses for some movl instructions. Fortunately it was caught early:

	clang ... boot/i386/pc/boot.S
	clang -cc1as: fatal error: error in backend: invalid .org offset '440' (at offset '441')

	Add additional check to catch it during configure run and force -no-integrated-as.

	Closes: 49200

	More details in
	  https://lists.gnu.org/archive/html/grub-devel/2015-02/msg00099.html
	  https://llvm.org/bugs/show_bug.cgi?id=22662

2016-08-13  Pete Batard  <pete@akeo.ie>

	Add missing va_end() to xasprintf() in grub-emu.

2016-07-27  Andrei Borzenkov  <arvidjaar@gmail.com>

	at_keyboard: fix numpad "0" and "." mapping
	Reported for set 1 by fgndevelop <fgndevelop@posteo.org>. Apparently
	set 2 was reversed too.

2016-07-26  Andrei Borzenkov  <arvidjaar@gmail.com>

	dns: fix buffer overflow for data->addresses in recv_hook
	We may get more than one response before exiting out of loop in
	grub_net_dns_lookup, but buffer was allocated for the first response only,
	so storing answers from subsequent replies wrote past allocated size.
	We never really use more than the very first address during lookup so there
	is little point in collecting all of them. Just quit early if we already have
	some reply.

	Code needs serious redesign to actually collect multiple answers
	and select the best fit according to requested type (IPv4 or IPv6).

	Reported and tested by Michael Chang <mchang@suse.com>

2016-07-26  Andrei Borzenkov  <arvidjaar@gmail.com>

	xfs: accept filesystem with meta_uuid
	XFS V5 stores UUID in metadata and compares them with superblock UUID.
	To allow changing of user-visible UUID it stores original value in new
	superblock field (meta_uuid) and sets incompatible flag to indicate that
	new field must be used to verify metadata. Our driver currently does not
	check metadata UUID so simply accept such filesystem.

	Reported-By: Marcos Mello <marcosfrm@outlook.com>
	Reviewd by Jan Kara <jack@suse.cz>

2016-05-03  Andrei Borzenkov  <arvidjaar@gmail.com>

	net: translate pxe prefix to tftp when checking for self-load
	Commit ba218c1 missed legacy pxe and pxe: prefixes which are
	translated to tftp, so comparison failed.

2016-04-30  Andrei Borzenkov  <arvidjaar@gmail.com>

	net: reset net->stall in grub_net_seek_real
	If we open new connection, we need to reset stall indication, otherwise
	nothing will ever be polled (low level code rely on this field being
	zero when establishing connection).

2016-04-30  Stefan Fritsch  <sf@sfritsch.de>

	http: reset EOF indication in http_seek
	Otherwise next read will stop polling too early due to stale EOF
	indicator, returning incomplete data to caller.

2016-04-24  Mike Gilbert  <floppym@gentoo.org>

	build: Use AC_HEADER_MAJOR to find device macros
	Depending on the OS/libc, device macros are defined in different
	headers. This change ensures we include the right one.

	sys/types.h - BSD
	sys/mkdev.h - Sun
	sys/sysmacros.h - glibc (Linux)

	glibc currently pulls sys/sysmacros.h into sys/types.h, but this may
	change in a future release.

	https://sourceware.org/ml/libc-alpha/2015-11/msg00253.html

2016-04-09  Michael Chang  <mchang@suse.com>

	http: fix superfluous null line in range request header
	At least the apache sever is very unhappy with that extra null line and will
	take more than ten seconds in responding to each range request, which slows
	down a lot the entire http file transfer process or even time out.

2016-03-22  Andrei Borzenkov  <arvidjaar@gmail.com>

	configure: set -fno-pie together with -fno-PIE
	OpenBSD 5.9 apparently defaults to -fpie. We use -fno-PIE when appropriate
	already, but that is not enough - it does not turn off -fpie.

	Actually check for -fPIE is not precise enough. __PIE__ is set for both
	-fpie and -fPIE but with different values. As far as I can tell, both
	options were introduced at the same time, so both should always be supported.

	This fixes compilation on OpenBSD 5.9 which otherwise created insanely big
	lzma_decompress.img.

	Reported, suggested and tested by: Jiri B <jirib@devio.us>

2016-03-20  Andrei Borzenkov  <arvidjaar@gmail.com>

	bootp: check that interface is not NULL in configure_by_dhcp_ack
	grub_net_add_addr may fail with OOM and we use returned interface
	later without any checks.

2016-03-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	bootp: fix memory leak in grub_cmd_dhcpopt

2016-03-15  Aaron Luft  <aluft@lifesize.com>

	Remove the variable oldname which is attempting to free stack space.
	Historically this variable hold previous value of filename that
	had to be freed if allocated previously. Currently this branch
	is entered only if filename was not allocated previously so it
	became redundant. It did not cause real problems because grub_free
	was not called, but code is confusing and causes compilation error
	in some cases.

2016-03-13  Andrei Borzenkov  <arvidjaar@gmail.com>

	Makefile.util.def: add $LIBINTL to grub-macbless flags
	Fixes compilation on OpenBSD 5.9.

	Reported by Jiri B <jirib@devio.us>

2016-03-11  Robert Marshall  <rmarshall@redhat.com>

	Failed config now returns exit code (#1252311)
	Grub would notify the user if the new config was invalid, however, it
	did not exit properly with exit code 1. Added the proper exit code.

	Resolves: rhbz#1252311

2016-03-11  Michael Chang  <mchang@suse.com>

	xen_file: Fix invalid payload size

2016-03-10  Vladimir Serbinenko  <phcoder@gmail.com>

	multiboot2: Remove useless GRUB_PACKED
	Reported by: Daniel Kiper

2016-03-06  Andrei Borzenkov  <arvidjaar@gmail.com>

	20_linux_xen: fix test for GRUB_DEVICE
	Same fix as in 082bc9f.

2016-03-06  Mike Gilbert  <floppym@gentoo.org>

	10_linux: Fix grouping of tests for GRUB_DEVICE
	Commit 7290bb562 causes GRUB_DISABLE_LINUX_UUID to be ignored due to
	mixing of || and && operators. Add some parens to help with that.

2016-02-28  Andrei Borzenkov  <arvidjaar@gmail.com>

	NEWS update

2016-02-28  Vladimir Serbinenko  <phcoder@gmail.com>

	Release 2.02~beta3

	grub_arch_sync_dma_caches: Accept volatile address

2016-02-27  Leif Lindholm  <leif.lindholm@linaro.org>

	efidisk: Respect block_io_protocol buffer alignment
	Returned from the OpenProtocol operation, the grub_efi_block_io_media
	structure contains the io_align field, specifying the minimum alignment
	required for buffers used in any data transfers with the device.

	Make grub_efidisk_readwrite() allocate a temporary buffer, aligned to
	this boundary, if the buffer passed to it does not already meet the
	requirements.

	Also sanity check the io_align field in grub_efidisk_open() for
	power-of-two-ness and bail if invalid.

2016-02-27  Vladimir Serbinenko  <phcoder@gmail.com>

	usbtrans: Fix memory coherence and use-after-free.

	ehci: Fix memory coherence
	This is a no-op on x86 but necessarry on ARM and may be necessarry on MIPS.

	arm-uboot: Make self-relocatable to allow loading at any address

	Allow _start == 0 with relocatable images

2016-02-27  Vladimir Serbinenko  <phcoder@gmail.com>

	Provide __bss_start and _end symbols in grub-mkimage.
	For this ensure that all bss sections are merged.

	We need this to correctly prelink non-PE relocatable images.

2016-02-27  Vladimir Serbinenko  <phcoder@gmail.com>

	Encapsulate image layout into a separate structure.
	Currently we pass around a lot of pointer. Instead put all relevant data
	into one structure.

	mkimagexx: Split PE and generic part for relocations.
	As a preparation for U-Boot relocations, split emitting PE-relocations
	from parsing source ELF-relocations.

	mkimage.c: Split into separate files.
	util/grub-mkimagexx.c is included in a special way into mkimage.c.
	Interoperation between defines makes this very tricky. Instead
	just have a clean interface and compile util/grub-mkimage*.c separately
	from mkimage.c

	bsd: Ensure that kernel is loaded before loading module.
	kernel_type may be set to the type of failed kernel. This patching-up is
	easier than to reflow kernel loading routines.

	cat: Don't switch terminal mode when there is nothing to highlight.
	This just pollutes serial console.

	Use console rather than serial_efi0 on arm64-efi in tests

2016-02-27  Andrei Borzenkov  <arvidjaar@gmail.com>

	efidisk: fix misplaced parenthesis in b00e4c2

2016-02-26  Andrei Borzenkov  <arvidjaar@gmail.com>

	efidisk: prevent errors from diskfilter scan of removable drives
	Map EFI_NO_MEDIA to GRUB_ERR_OUT_OF_RANGE that is ignored by diskfilter. This
	actually matches pretty close (we obviously attempt to read outside of media)
	and avoids adding more error codes.

	This affects only internally initiated scans. If read/write from removable is
	explicitly requested, we still return an error and text explanation is more
	clear for user than generic error.

	Reported and tested by Andreas Loew <Andreas.Loew@gmx.net>

2016-02-26  Vladimir Serbinenko  <phcoder@gmail.com>

	Regenerate checksums

	Makefile: Don't delete default_payload.elf if it doesn't exist.

2016-02-25  Josef Bacik  <jbacik@fb.com>

	net: fix ipv6 routing
	ipv6 routing in grub2 is broken, we cannot talk to anything outside our local
	network or anything that doesn't route in our global namespace.  This patch
	fixes this by doing a couple of things

	1) Read the router information off of the router advertisement.  If we have a
	router lifetime we need to take the source address and create a route from it.

	2) Changes the routing stuff slightly to allow you to specify a gateway _and_ an
	interface.  Since the router advertisements come in on the link local address we
	need to associate it with the global address on the card.  So when we are
	processing the router advertisement, either use the SLAAC interface we create
	and add the route to that interface, or loop through the global addresses we
	currently have on our interface and associate it with one of those addresses.
	We need to have a special case here for the default route so that it gets used,
	we do this by setting the masksize to 0 to mean it encompasses all networks.
	The routing code will automatically select the best route so if there is a
	closer match we will use that.

	With this patch I can now talk to ipv6 addresses outside of my local network.
	Thanks,

2016-02-24  Vladimir Serbinenko  <phcoder@gmail.com>

	ieee1275: fix signed comparison

2016-02-23  Andrei Borzenkov  <arvidjaar@gmail.com>

	search: actually skip floppy with --no-floppy
	grub_device_iterate() ignores device when iterator returns 1, not 0.

	Reported by Carlos E. R. <robin.listas@telefonica.net>

2016-02-23  Andrei Borzenkov  <arvidjaar@gmail.com>

	multiboot2: zero reserved field in memory map
	Documentation says, bootloader should set reserved field to zero.

	Reported by Wink Saville <wink@saville.com>

2016-02-22  Vladimir Serbinenko  <phcoder@gmail.com>

	Improve EHCI logging
	Add dprintf's on common error paths and remove some entries which are too
	noisy.

	usb_keyboard: Remove useless include
	This prevents non-PCI machines from having USB.

	Refresh before abort
	This ensures that abort message is actually visible to the user.

2016-02-22  Eric Snowberg  <eric.snowberg@oracle.com>

	ieee1275: prevent buffer over-read
	Prevent buffer over-read in grub_machine_mmap_iterate. This was
	causing phys_base from being calculated properly. This then
	caused the wrong value to be placed in ramdisk_image within
	struct linux_hdrs. Which prevented the ramdisk from loading on
	boot.

	Newer SPARC systems contain more than 8 available memory entries.

	For example on a T5-8 with 2TB of memory, the memory layout could
	look like this:

	T5-8 Memory
	reg                      00000000 30000000 0000003f b0000000
	                         00000800 00000000 00000040 00000000
	                         00001000 00000000 00000040 00000000
	                         00001800 00000000 00000040 00000000
	                         00002000 00000000 00000040 00000000
	                         00002800 00000000 00000040 00000000
	                         00003000 00000000 00000040 00000000
	                         00003800 00000000 00000040 00000000
	available                00003800 00000000 0000003f ffcae000
	                         00003000 00000000 00000040 00000000
	                         00002800 00000000 00000040 00000000
	                         00002000 00000000 00000040 00000000
	                         00001800 00000000 00000040 00000000
	                         00001000 00000000 00000040 00000000
	                         00000800 00000000 00000040 00000000
	                         00000000 70000000 0000003f 70000000
	                         00000000 6eef8000 00000000 00002000
	                         00000000 30400000 00000000 3eaf6000
	name                     memory

2016-02-22  Thomas Huth  <thuth@redhat.com>

	menu_entry: Disable cursor during update_screen()
	When running grub in a VGA console of a KVM pseries guest on PowerPC,
	you can see the cursor sweeping over the whole line when entering a
	character in editor mode. This is visible because grub always refreshes
	the whole line when entering a character in editor mode, and drawing
	characters is quite a slow operation with the firmware used for the
	powerpc pseries guests (SLOF).
	To avoid this ugliness, the cursor should be disabled when refreshing
	the screen contents during update_screen().

2016-02-17  Vladimir Serbinenko  <phcoder@gmail.com>

	default_payload.elf: Always rebuild and remove before build.
	It's difficult to know all dependencies. Since it's manual and cheap
	target anyway, simply always rebuild it.

	default_payload.elf: Include password_pbkdf2.
	Withoout this module we may end up in a system where no password is
	accepted.

	default_payload.elf: Add modules from $(EXTRA_PAYLOAD_MODULES).
	This allows coreboot building system to add extra modules depending
	on user config.

	mm: Avoid integer overflow.

	Remove -Wno-maybe-uninitialized as it may not be present.

	Fix warnings when compiling with -O3

2016-02-14  Vladimir Serbinenko  <phcoder@gmail.com>

	Add wbinvd around bios call.
	Via C3 has problems with cache coherency when transitioning between the modes,
	so flush it around bios calls.

2016-02-12  Eric Snowberg  <eric.snowberg@oracle.com>

	OBP available region contains grub. Start at grub_phys_end.
	This prevents a problem where grub was being overwritten since
	grub_phys_start does not start at a zero offset within the memory
	map.

2016-02-12  Andreas Freimuth  <andreas_freimuth@web.de>

	Add Thinkpad T410s button cmos address.

2016-02-12  Vladimir Serbinenko  <phcoder@gmail.com>

	TODO: Remove obsolete link

2016-02-12  Toomas Soome  <tsoome@me.com>

	lz4: Fix pointer overflow

2016-02-12  Vladimir Serbinenko  <phcoder@gmail.com>

	grub-shell: Update 32-bit OVMF binary name.

2016-02-12  Daniel Kiper  <daniel.kiper@oracle.com>

	relocator: Fix integer underflow.

2016-02-12  Vladimir Serbinenko  <phcoder@gmail.com>

	Change -v to -V for version of shell utils.

	xnu: Add new kernel path to autoconfig.

	arm64: Use cpu timer for timekeeping.

	powerpc: Trim header in tests.

	default_payload: Include syslinuxcfg, all filesystems and xnu.

	xnu: Supply random seed.
	Now we're able to load kernels up to El Capitan.

	Add RNG module.

	yylex: use grub_fatal for exit.
	lexer calls yylex_fatal on fatal internal errors. yylex_fatal itself is
	declared as noreturn and calls exit. Returning from noreturn function has
	unpredictable consequences.

	printf: Fix and test %% behaviour in presence of subsequenbt args.

	Split pmtimer wait and tsc measurement from pmtimer tsc calibration.

	Make grub_cpu_is_tsc_supported generally available.

	Make grub_acpi_find_fadt accessible generically

	Make unaligned types public.
	This simplifies code which has to handle those types.

	Fix emu compilation error on arm.

2016-02-11  Vladimir Serbinenko  <phcoder@gmail.com>

	xnu: Include relocated EFI in heap size.

	xnu: supply ramsize to the kernel.
	Without this info recent kernels crash as they allocate no heap.

2016-02-03  Andrei Borzenkov  <arvidjaar@gmail.com>

	support modules without symbol table
	all_video module does not have any code or data and exists solely for
	.moddeps section to pull in dependencies. This makes all symbols unneeded.

	While in current binutils (last released version as of this commit is 2.26)
	``strip --strip-unneeded'' unintentionally adds section symbols for each
	existing section, this behavior was considered a bug and changed in commit
	14f2c699ddca1e2f706342dffc59a6c7e23e844c to completely strip symbol table
	in this case.

	Older binutils (verified with 2.17) and some other toolchains (at least
	elftoolchain r3223M), both used in FreeBSD, remove symbol table in all_video
	as well.

	Relax run-time check and do not return error for modules without symbol table.
	Add additional checks to module verifier to make sure such modules

	a) have non-empty .moddeps section. Without either externally visible symbols
	or .moddeps modules are completely useless and should not be built.

	b) do not have any relocations.

	Closes: 46986

	v2: add run-time check for empty symbol table if relocations are present as
	    suggested by Vladimir.

2016-02-01  Andrei Borzenkov  <arvidjaar@gmail.com>

	10_linux: avoid multi-device root= kernel argument
	If root filesystem is multidev btrfs, do not attempt to pass all devices as
	kernel root= argument. This results in splitting command line in GRUB due to
	embedded newline and even if we managed to quote it, kernel does not know how
	to interpret it anyway. Multidev btrfs requires user space device scanning,
	so passing single device would not work too.

	This still respects user settings GRUB_DISABLE_LINUX_UUID. Not sure what we
	should do in this case.

	Closes: 45709

2016-01-22  Vladimir Serbinenko  <phcoder@gmail.com>

	Error out if mtools invocation fails.

	arm64: Add support for relocations needed for linaro gcc

	efiemu: Fix compilation failure

	Document cpuid -p

2016-01-22  Robert Elliott  <elliott@hpe.com>

	efiemu: Handle persistent RAM and unknown possible future additions.

2016-01-22  Vladimir Serbinenko  <phcoder@gmail.com>

	Document expr1 expr2 syntax for test command

2016-01-22  Michael Chang  <mchang@suse.com>

	Restore terminal settings on grub-emu exit.

2016-01-22  Vladimir Serbinenko  <phcoder@gmail.com>

	xen_boot: Remove obsolete module type distinctions.

	arm: Ignore qemu clock bug

	i386-ieee1275: Increase maximum heap size to accomodate highres graphi tests

2016-01-20  Colin Watson  <cjwatson@ubuntu.com>

	Remove pragmas related to -Wunreachable-code
	-Wunreachable-code has been a no-op since GCC 4.5; GRUB hasn't been
	compiled with it since 2012; and GCC 6 produces "error:
	'-Wunreachable-code' is not an option that controls warnings" for these.

	Fixes Debian bug #812047.

2016-01-16  Colin Watson  <cjwatson@ubuntu.com>

	loader/bsd: Fix signed/unsigned comparison

	ahci, ehci: Fix typos

2016-01-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-probe: fix memory leak
	Found by: Coverity scan.
	CID: 73783

2016-01-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	tftp: fix memory leaks in open
	If protocol open fails, file is immediately freed, so data was leaked.

	Found by: Coverity scan.
	CID: 96659

2016-01-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	tcp: fix memory leaks
	Found by: Coverity scan.
	CID: 96639, 96647

	net: fix memory leaks
	Found by: Coverity scan.
	CID: 96638, 96648

	legacycfg: fix memory leaks and add NULL check
	Memory leaks found by Coverity scan.
	CID: 96642, 96645

2016-01-15  Andrei Borzenkov  <arvidjaar@gmail.com>

	loader: Unintended sign extension
	CID: 96707, 96699, 96693, 96691, 96711, 96709, 96708, 96703, 96702,
	96700, 96698, 96696, 96695, 96692, 96710, 96705

2016-01-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	script: fix memory leak
	Found by: Coverity scan.
	CID: 96637

	normal: fix memory leak
	Found by: Coverity scan.
	CID: 96641, 96670, 96667

	xnu: fix memory leak
	Found by: Coverity scan.
	CID: 96663

	truecrypt: fix memory leak
	Found by: Coverity scan.
	CID: 156611

	gfxmenu: fix memory leak
	Found by: Coverity scan.
	CID: 96657

	efiemu: fix memory leak
	Found by: Coverity scan.
	CID: 156610

	efidisk: fix memory leak
	Found by: Coverity scan.
	CID: 96644

	verify: fix memory leak
	Found by: Coverity scan.
	CID: 96643

	password_pbkdf2: fix memory leak
	Found by: Coverity scan.
	CID: 96656

	parttool: fix memory leak
	Found by: Coverity scan.
	CID: 96652

2016-01-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	nativedisk: fix memory leak
	Based on Coverity scan.
	CID: 96660

	Extended to also cover other error return places.

2016-01-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	acpi: fix memory leak
	Found by: Coverity scan.
	CID: 96673

2016-01-10  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-install: include ehci in list of native modules
	This matches behavior of "nativedisk" command.

	Reported and tested by Smith Henry <sh37092@gmail.com>

2016-01-10  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-mkimage: remove redundant NULL check
	Found by: Coverity scan.
	CID: 73737

2016-01-10  Andrei Borzenkov  <arvidjaar@gmail.com>

	net: remove dead and redundant code
	server cannot be NULL at this point (we return error earlier if it is).
	Also structure is zalloc'ed, so no need to explicitly initialize
	members to 0.

	Found by: Coverity scan.
	CID: 73837

2016-01-10  Andrei Borzenkov  <arvidjaar@gmail.com>

	hostdisk: fix device detection
	Condition was apparently reversed so GRUB assumed all devices were
	files. This later made it skip BLKFLSBUF ioctl on Linux which caused
	various page cache coherency issues. Observed were

	- failure to validate blocklist install (read content did not match
	  just written)

	- failure to detect Linux MD on disk after online hot addition
	  (GRUB got stale superblock)

	Closes: 46691

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	setup: fix NULL pointer dereference
	Check return value of grub_guess_root_devices

	Found by: Coverity scan.
	CID: 73638, 73751

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	mkimage: fix unintended sign extension
	Found by: Coverity scan.
	CID: 73691, 73717

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	util/getroot: delete dead code
	is_part cannot be non-zero at this point.

	Found by: Coveruty scan.
	CID: 73838

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	loader/multiboot: fix unintended sign extension
	Found by: Coveruty scan.
	CID: 73700, 73763

	kern/elf: fix unintended sign extension
	Found by: Coverity scan.
	CID: 73729, 73735, 73758, 73760

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	xfs: fix possible inode corruption in directory scan
	grub_xfs_iterate_dir did not restore first character after inline
	name when match was found. Dependning on XFS format this character
	could be inode number and we could return to the same node later in
	find_file if processing cycled symlinks.

	CID: 86724

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	rescue_parser: restructure code to avoid Coverity false positive
	If line contains single word, line and argv[0] are aliases, so
	no NULL dereference is possible, but Coverity does not know it.
	Change code to avoid ambiguity and also remove redundant call to
	grub_strchr.

	CID: 86725

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-mklayout: check subscript bounds
	Found by: Coverity scan.
	CID: 73686

	grub-probe: fix memory leak
	Found by: Coverity scan.
	CID: 73783

	gfxmenu: fix memory leak
	Found by: Coverity scan.
	CID: 73766

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	util/setup: fix grub_util_path_list leak
	Add helper grub_util_free_path_list and use it where appropriate.

	Found by: Coverity scan.
	CID: 73727

2016-01-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	setup: fix memory leak
	Found by: Coverity scan.
	CID: 73680, 73715

	efiemu: check return value of grub_efiemu_write_value
	Found by: Coverity scan.
	CID: 73590

	efiemu: change code to avoid Coverity false positive
	CID: 73623

	efiemu: fix unintended sign extension
	Found by: Coverity scan.
	CID: 73883, 73637

	hfs: fix memory leak
	Found by: Coverity scan.
	CID: 156531

	grub-module-verifier: fix unintended sign extension
	Found by: Coverity scan.
	CID: 156533, 156532

2016-01-08  Vladimir Serbinenko  <phcoder@gmail.com>

	Tests: Support arm-efi

2016-01-07  Vladimir Serbinenko  <phcoder@gmail.com>

	arm64/setjmp: Add missing move for arg1 == 0 case.

	grub-shell: Support arm64-efi

2016-01-07  Mark Salter  <msalter@redhat.com>

	arm-efi: Reduce timer event frequency by 10
	Timer event to keep grub msec counter was running at 1000HZ. This was too
	fast for UEFI timer driver and resulted in a 10x slowdown in grub time
	versus wallclock. Reduce the timer event frequency and increase tick
	increment accordingly to keep better time.

2016-01-07  Vladimir Serbinenko  <phcoder@gmail.com>

	x86_64-efi: Automatically add -bios OVMF.fd to qemu in tests.

	Allow GRUB_QEMU_OPTS to override machine.

	arm64: Disable tests that need native drivers.

	Disable NetBSD bootcheck on EFI until it supports ACPI on EFI.

	grub-shell: Use new cbfstool syntax.

	grub-shell: On i386-ieee1275 don't try to switch to console.
	console goes to serial as well, so this doesn't stop garbage from going
	to serial. But it creates garbage itself.

	hddboot_test: reenable on OVMF
	OVMF now supports booting from disks.

	iee1275/datetime: Fix off-by-1 error.

2016-01-07  Vladimir Serbinenko  <phcoder@gmail.com>

	Adjust bootcheck tests for multiboot/coreboot/qemu to match real support.
	coreboot has ACPI while 2 others don't. *BSD need ACPI and have trouble
	without it. Don't even attempt to boot *BSD on multiboot or qemu targets.

	On coreboot boot all *BSD except 32-bit NetBSD which apparently does some
	early BIOS calls.

2016-01-05  Vladimir Serbinenko  <phcoder@gmail.com>

	minixfs_test: Check if mkfs.minixfs supports -B option.

	Add memdisk support to grub-emu.
	Use it to add custom files, so that tests which need them work.

	Move file loading functions to grub-emu.
	So that we can use it in grub-emu as well as utils.

	Disable progress indicator in grub-shell.
	This disables progress indicator for tests. This in turn fixes test
	flakiness as they ended up timing-dependent.

	Update checksums

2016-01-02  Andrei Borzenkov  <arvidjaar@gmail.com>

	acpihalt: add GRUB_ACPI_OPCODE_CREATE_DWORD_FIELD (0x8a)
	Fixes ACPI halt on ASUSTeK P8B75-V,
	Bios: American Megatrends v: 0414 date: 04/24/2012

	Reported-By: Goh Lip <g.lip@gmx.com>

2016-01-02  Andrei Borzenkov  <arvidjaar@gmail.com>

	acpihalt: fix GRUB_DSDT_TEST compilation

2016-01-01  Andrei Borzenkov  <arvidjaar@gmail.com>

	Add missing BUILD_EXEEXT

2015-12-31  Vladimir Serbinenko  <phcoder@gmail.com>

	configure.ac: Reorder efiemu check to after link format check.
	efiemu is supposed to be disabled when compiling through exe format.
	Unfortunately format was determined only after efiemu check. Reorder to fix the
	problem

2015-12-31  Andrey Borzenkov  <arvidjaar@gmail.com>

	remove temporary .bin files (kernel and modules)

	add dejavu built fonts to cleanfiles

2015-12-31  Andrei Borzenkov  <arvidjaar@gmail.com>

	Add grub-module-verifier files to EXTRA_DIST

2015-12-31  Vladimir Serbinenko  <phcoder@gmail.com>

	configure: Add -fno-unwind-tables if supported.
	Unwind tables are useless for us bt consume space if present. Ensure that they
	are not.

	module-verifier: allow limited-range relocations on sparc64.
	clang as incomplete mcmodel=large support. As we don't currently need full
	mcmodel=large support for sparc64, relax those checks.

	Disable build-time module check on emu.
	On emu some checks can be laxer like check for relocation range. Additionally
	module loading in emu is rarely used. So skip this check rather than making
	it laxer for all platforms. In ideal we may want to have slightly different
	check for emu but for now this is good enough.

	configure: Fix grub_cv_cc_fno_unwind_tables check.
	Check tries -fno-dwarf2-cfi-asm but adds -fno-asynchronous-unwind-tables
	to TARGET_CFLAGS. Fix this.

	Add -mno-stack-arg-probe on mingw.
	This argument disables generation of calls to __chkstk_ms. Those calls are
	useless on GRUB as function is dummy. Yet they increase module size and
	use limited-range relocations which may not work under some memory layouts.
	We currently don't use such layouts on concerned platforms but lt's correct
	this.

	Strip .ARM.exidx
	This section is generated by clang and is useful only for debugging.
	It contains exotic relocations, so strip them to avoid them interferring
	with module loading.

	module-verifier: Check range-limited relative relocations.
	Check that they point to the same module, so will end up in the same
	chunk of memory.

	xen/relocator: Use local symbol to ensure that code is relocation-free.

	backtrace: Fix register call syntax

	Verify modules on build-time rather than failing in runtime.

	sparc64: Fix assembly to let compiler to fill in memory references.
	This fixes the use of not fully relocatable (they assume that variables are
	under 4G limit in virtual memory) references.

2015-12-30  Andrey Borzenkov  <arvidjaar@gmail.com>

	30_os-prober: derive --class from os-prober generated label
	Currently only Windows gets distinguished icons, everything else is displayed
	using the same generic one. Add additional --class based on os-prober returned
	label, which usually is expected to match primary distribution name.

	Also use it for Windows as well - chainloader prober may actually return
	different strings (Windows, MS-DOS, Windows9xME).

2015-12-30  Vladimir Serbinenko  <phcoder@gmail.com>

	backtrace: Remove assembly assumption that grub_backtrace_pointer is under 4G

2015-12-30  Andrei Borzenkov  <arvidjaar@gmail.com>

	menu: fix line count calculation for long lines
	It gave one extra screen line if length was exactly equal to screen
	width.

	Reported by Michael Chang.
	Also-By: Michael Chang <mchang@suse.com>

2015-12-29  Vladimir Serbinenko  <phcoder@gmail.com>

	grub-mkrescue: Delete temporary file
	Reported by: Thomas Schmitt

	grub-mount: Fix oath parsing.
	Brackets detection was copied from somewhere else and makes no sense in case
	of grub-mount and prevents user from accessing and files with ) in them.

	exfat: Fix stream extension flag parsing.

2015-12-26  Andrei Borzenkov  <arvidjaar@gmail.com>

	devmapper: check for valid device abstraction in get_grub_dev
	This was lost when code was refactored. Patch restores previous behavior.

	It is still not clear whether this is the right one. Due to the way we
	detect DM abstraction, partitions on DM are skipped, we fall through to
	generic detection which ends up in assuming parent device is BIOS disk.

	It is useful to install GRUB on VM disk from the host. But it also means
	that GRUB will mistakenly allow install on real system as well.

	For now let's fix regression; future behavior needs to be discussed.

	Closes: 45163

2015-12-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	windows: correct LBA in generated EFI HDD media paths
	GRUB keeps partition offset and size in units of 512B sectors. Media paths
	are defined in terms of LBA which are presumed to match HDD sector size.

	This is probably cosmetic (EFI requires that partition is searched by GUID)
	and still incorrect if GPT was created using different logical block size.
	But current code is obviously wrong and new has better chances to be correct.

2015-12-17  Robert Elliott  <elliott@hpe.com>

	lsefimmap: support persistent memory and other UEFI 2.5 features
	This should accompany
		76ce1de740 Translate UEFI persistent memory type

	1. Add a string for the EfiPersistentMemory type 14 that was
	added in UEFI 2.5.

	2. Decode the memory attributes that were added in UEFI 2.5:
	* NV (non-volatile)
	* MORE_RELIABLE (higher reliable, e.g., mirrored memory in a system
	  with partial memory mirroring)
	* RO (read-only)

	3. Use proper IEC binary units (KiB, MiB, etc.) for power-of-two
	values rather than misusing SI power-of-ten units (KB, MB, etc.)

	4. The lsmmap command only decodes memory ranges sizes up to GiB scale
	units.  Persistent memory ranges will reach into the TiB scale.
	Since 64-bit size field supports TiB, PiB, and EiB, decode all of
	them for completeness.

	5. In the lsefimmap command, rewrite the print statements to
	* avoid rounding
	* avoid a big nested if/else tree.

	For example: In the sixth entry below, the value of 309MB implies
	316416KB but is really reporting 316436KB.

	Widen the size column to 6 digits to accommodate typical cases.
	The worst case value would require 14 digits; if that happens,
	let the columns get out of sync.

	Old format:
	Type      Physical start  - end             #Pages     Size Attributes
	conv-mem  0000000000000000-0000000000092fff 00000093  588KB UC WC WT WB
	reserved  0000000000093000-0000000000093fff 00000001    4KB UC WC WT WB
	conv-mem  0000000000094000-000000000009ffff 0000000c   48KB UC WC WT WB
	conv-mem  0000000000100000-000000000fffffff 0000ff00  255MB UC WC WT WB
	BS-code   0000000010000000-0000000010048fff 00000049  292KB UC WC WT WB
	conv-mem  0000000010049000-000000002354dfff 00013505  309MB UC WC WT WB
	ldr-data  000000002354e000-000000003ecfffff 0001b7b2  439MB UC WC WT WB
	BS-data   000000003ed00000-000000003ed7ffff 00000080  512KB UC WC WT WB
	conv-mem  000000003ed80000-000000006af5ffff 0002c1e0  705MB UC WC WT WB
	reserved  000000006af60000-000000006b55ffff 00000600    6MB UC WC WT WB
	BS-data   000000006b560000-000000006b560fff 00000001    4KB UC WC WT WB
	RT-data   000000006b561000-000000006b5e1fff 00000081  516KB RT UC WC WT WB
	BS-data   000000006b5e2000-000000006ecfafff 00003719   55MB UC WC WT WB
	BS-code   000000006ecfb000-000000006ecfbfff 00000001    4KB UC WC WT WB
	conv-mem  000000006ecfc000-00000000711fafff 000024ff   36MB UC WC WT WB
	BS-data   00000000711fb000-000000007128dfff 00000093  588KB UC WC WT WB
	Unk 0d    0000000880000000-0000000e7fffffff 00600000   24GB UC WC WT WB NV
	reserved  0000001680000000-0000001c7fffffff 00600000   24GB UC WC WT WB NV

	New format:
	Type      Physical start  - end             #Pages        Size Attributes
	conv-mem  0000000000000000-0000000000092fff 00000093    588KiB UC WC WT WB
	reserved  0000000000093000-0000000000093fff 00000001      4KiB UC WC WT WB
	conv-mem  0000000000094000-000000000009ffff 0000000c     48KiB UC WC WT WB
	conv-mem  0000000000100000-000000000fffffff 0000ff00    255MiB UC WC WT WB
	BS-code   0000000010000000-0000000010048fff 00000049    292KiB UC WC WT WB
	conv-mem  0000000010049000-000000002354dfff 00013505 316436KiB UC WC WT WB
	ldr-data  000000002354e000-000000003ecfffff 0001b7b2 450248KiB UC WC WT WB
	BS-data   000000003ed00000-000000003ed7ffff 00000080    512KiB UC WC WT WB
	conv-mem  000000003ed80000-000000006af5ffff 0002c1e0 722816KiB UC WC WT WB
	reserved  000000006af60000-000000006b55ffff 00000600      6MiB UC WC WT WB
	BS-data   000000006b560000-000000006b560fff 00000001      4KiB UC WC WT WB
	RT-data   000000006b561000-000000006b5e1fff 00000081    516KiB RT UC WC WT WB
	BS-data   000000006b5e2000-000000006ecfafff 00003719  56420KiB UC WC WT WB
	BS-code   000000006ecfb000-000000006ecfbfff 00000001      4KiB UC WC WT WB
	conv-mem  000000006ecfc000-0000000071222fff 00002527  38044KiB UC WC WT WB
	BS-data   0000000071223000-00000000712ddfff 000000bb    748KiB UC WC WT WB
	persist   0000000880000000-0000000e7fffffff 00600000     24GiB UC WC WT WB NV
	reserved  0000001680000000-0000001c7fffffff 00600000     24GiB UC WC WT WB NV

2015-12-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	kernel: print and reset grub_errno after each embedded config line
	Otherwise it causes subsequent file open to fail, because grub_file_open
	misinterprets set grub_errno for grub_file_get_device_name failure.

	Closes: 46540

2015-12-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	Erase backspaced character in grub_username_get
	It probably does not work across linefeed, but hopefully user names are not
	that long (and nobody is using terminal that small).

2015-12-16  Hector Marco-Gisbert  <hecmargi@upv.es>

	Fix security issue when reading username and password
	This patch fixes two integer underflows at:
	  * grub-core/lib/crypto.c
	  * grub-core/normal/auth.c

	CVE-2015-8370

	Also-By: Andrey Borzenkov <arvidjaar@gmail.com>

2015-12-15  Andrei Borzenkov  <arvidjaar@gmail.com>

	NEWS: more additions
	Also-By: Robert Elliott <elliott@hpe.com>

2015-12-15  Robert Elliott  <elliott@hpe.com>

	Translate UEFI persistent memory type
	Define
	* GRUB_EFI_PERSISTENT_MEMORY (UEFI memory map type 14) per UEFI 2.5
	* GRUB_MEMORY_PERSISTENT (E820 type 7) per ACPI 3.0
	* GRUB_MEMORY_PERSISTENT_LEGACY (E820 unofficial type 12) per ACPI 3.0

	and translate GRUB_EFI_PERSISTENT_MEMORY to GRUB_MEMORY_PERSISTENT in
	grub_efi_mmap_iterate().

	Includes
	* adding the E820 names to lsmmap
	* handling the E820 types in make_efi_memtype()

	Suggested-by: Vladimir 'φ-coder/phcoder' Serbinenko <phcoder@gmail.com>
	Suggested-by: Andrei Borzenkov <arvidjaar@gmail.com>

2015-12-14  Vladimir Serbinenko  <phcoder@gmail.com>

	Document bootlocation discovery limitations and xen platform limitations

2015-12-07  Josef Bacik  <jbacik@fb.com>

	tcp: ack when we get an OOO/lost packet
	While adding tcp window scaling support I was finding that I'd get some packet
	loss or reordering when transferring from large distances and grub would just
	timeout.  This is because we weren't ack'ing when we got our OOO packet, so the
	sender didn't know it needed to retransmit anything, so eventually it would fill
	the window and stop transmitting, and we'd time out.  Fix this by ACK'ing when
	we don't find our next sequence numbered packet.  With this fix I no longer time
	out.  Thanks,

2015-12-01  Michael Chang  <mchang@suse.com>

	i386: fix TSC calibration using PIT
	Condition was accidentally reversed, so PIT calibration always failed
	when PIT was present and always succeeded when PIT was missing, but in
	the latter case resulted in absurdly fast clock.

	Reported and tested by Vitaly Kuznetsov <vkuznets@redhat.com>

2015-11-28  Andrei Borzenkov  <arvidjaar@gmail.com>

	Do not include generated gnulib headers in tarball
	gnulib files are already handled by recursive make distdir invocation.
	Including all generated headers (after make completed) causes build
	failure if target system is different (different compile version etc).

2015-11-27  Andrei Borzenkov  <arvidjaar@gmail.com>

	Replace numbers with grub_memory_type_t enums

2015-11-27  Andrei Borzenkov  <arvidjaar@gmail.com>

	configure: fix macports flex version detection
	Macports add extra information after version itself:

	$flex --version
	flex 2.5.35 Apple(flex-31)

	We require at least felx 2.5.35 so do not need to care about prehistoric
	"flex version n.n.n"; just use second field always.

	Reported by Peter Cheung <mcheung63@hotmail.com>

2015-11-27  Vladimir Serbinenko  <phcoder@gmail.com>

	tsc: Use alternative delay sources whenever appropriate.
	PIT isn't available on some of new hardware including Hyper-V. So
	use pmtimer for calibration. Moreover pmtimer calibration is faster, so
	use it on coreboor where booting time is important.

	Based on patch by Michael Chang.

2015-11-26  Andrei Borzenkov  <arvidjaar@gmail.com>

	efi: really mark memory of unknown type as reserved
	9be4c45dbe3c877d1f4856e99ee15133c6cd2261 added switch case between
	fall through cases, causing all memory regions of unknown type to be
	marked as available.

	Move default case into its own block and add explicit FALLTHROUGH
	annotation.

	Reported by Elliott, Robert (Persistent Memory) <elliott@hpe.com>

2015-11-24  Josef Bacik  <jbacik@fb.com>

	net: reset nb->data per dns record lookup loop
	We were resetting nb->data every time we tried a new server, but we need to do
	it every time we try for a different record, otherwise we don't end up falling
	back to the A record properly.  Thanks,

2015-11-18  Andrei Borzenkov  <arvidjaar@gmail.com>

	unix: do not close stdin in grub_passwd_get
	This makes it impossible to read from stdin without controlling tty:

	10:/mnt # echo -e passwd\\npasswd | setsid ./grub-mkpasswd-pbkdf2
	Enter password:
	Reenter password: ./grub-mkpasswd-pbkdf2: error: failure to read password.
	10:/mnt

2015-11-17  Andrei Borzenkov  <arvidjaar@gmail.com>

	lsefisystab: add missing comma after 7994077

2015-11-14  Pavel Bludov  <pbludov@gmail.com>

	Add some UUIDs found in the hardware

2015-11-13  Konstantin Vlasov  <kvlasov@odin.com>

	gfxterm: fix calculation of terminal-top and terminal-height
	They used screen width, not height.

2015-11-12  Paulo Flabiano Smorigo  <pfsmorigo@linux.vnet.ibm.com>

	ofdisk: add sas disks to the device list

2015-11-12  Vladimir Serbinenko  <phcoder@gmail.com>

	multiboot: Don't rely on particular ordering of options.

	multiboot_mbi: Fix handling of --quirk-bad-kludge.

2015-11-12  Fu Wei  <fu.wei@linaro.org>

	xen_boot: Remove useless file_name_index variable.

	Document ARM64 xen commands

2015-11-11  Vladimir Serbinenko  <phcoder@gmail.com>

	asm-tests/i386-pc: Check that near jumps are 2 bytes.
	We already check that jump over 300 bytes gap is 3 bytes in code16-mode.
	Some clang versions generate 3-byte opcode for short jumps which makes
	boot.img blow over 512-byte limit. Enforce -no-integrated-as in such cases

2015-11-11  Paulo Flabiano Smorigo  <pfsmorigo@linux.vnet.ibm.com>

	ofdisk: add a comment about vscsi method

2015-11-09  Vladimir Serbinenko  <phcoder@gmail.com>

	fdt.mod: Move license tag to the right file.

2015-11-09  Fu Wei  <fu.wei@linaro.org>

	fdt.mod: Add missing license tag.

2015-11-09  Vladimir Serbinenko  <phcoder@gmail.com>

	kern/elf: Ignore cast-align warnings

2015-11-09  Vladimir Serbinenko  <phcoder@gmail.com>

	cbfs: Fix corner case and compilation with recdent gcc
	Accept the header to touch the jump address at 0xfffffff0.

	Fix compilation for 64-bit EFI with recent GCC.

2015-11-08  Vladimir Serbinenko  <phcoder@gmail.com>

	fstester: Enforce LC_ALL=C

	Adapt build-system to use imported xen headers.

	Import xen headers directly into GRUB

	cbfs: Check for ptr range sanity.
	Triaged by Andrei and enhanced with suggestions by Aaron Durbin
	Also-By: Andrei Borzenkov <arvidjaar@gmail.com>

	Remove reliance C.UTF-8

	genmoddep.awk: Add a test that we have no circular dependencies

	Makefile.core.def: Break circular dependency on arm64.

	autogen: Use cp instead of ln -s.
	libgcrypt-grub shouldn't be modified directly anyway. With this patch
	tarball without contrib can be unpacked on FAT and stay usable for
	out-of-tree compile on full POSIX FS (compile on FAT not tested).

2015-11-07  Andrei Borzenkov  <arvidjaar@gmail.com>

	partmap_test: check that parted is available
	Skip test if parted is unavailable instead of returning false failure.

2015-11-07  grub-devel@iam.tj  <grub-devel@iam.tj>

	cryptodisk: teach grub_cryptodisk_insert() about partitions (bug #45889)
	It is not possible to configure encrypted containers on multiple partitions of
	the same disk; after the first one all subsequent fail with

	disk/cryptodisk.c:978: already mounted as crypto0

	Store partition offset in cryptomount descriptor to distinguish between them.

2015-11-07  Andrey Borzenkov  <arvidjaar@gmail.com>

	doc: document config_directory and config_file variables

2015-11-07  Andrei Borzenkov  <arvidjaar@gmail.com>

	unix/getroot: remove unused MAJOR definition
	We use major() everywhere, these definitions just add to confusion.

	Add comments to code for commit d313218

2015-11-07  Andrei Borzenkov  <arvidjaar@gmail.com>

	devmapper/getroot: use makedev instead of direct shift
	Fixes device detection with large number of devices.

	Reported by Tim Wallberg <twalberg@comcast.net>

2015-11-06  Andrei Borzenkov  <arvidjaar@gmail.com>

	mkimage: zero fill alignment space
	This did not cause real problem but is good for reproducible builds. I hit
	it with recent bootinfoscript that displays embedded config; I was puzzled
	by random garbage at the end.

	Prezero memory buffer used to assemble core.img. This makes individual
	memset redundant. Also ensure buffer is filled with zeroes in several other
	places.

	Also remove redundant zeroing code where we fill in the whole memory block
	anyway.

2015-11-06  Vladimir Serbinenko  <phcoder@gmail.com>

	configure.ac: Explicitly add -mno-sse3 on x86.

	README: Remove dead link to the wiki

2015-10-29  Andrei Borzenkov  <arvidjaar@gmail.com>

	NEWS: mention powerpc64le support

2015-10-29  Ignat Korchagin  <ignat>

	tcp: Fix uninited mac address when accepting connection.

2015-10-29  Fu Wei  <fu.wei@linaro.org>

	arm64: Add support for xen boot protocol.

2015-10-29  Vladimir Serbinenko  <phcoder@gmail.com>

	arm64: Move FDT functions to separate module

2015-10-27  Andrei Borzenkov  <arvidjaar@gmail.com>

	efi: fix warnings with recent GCC
	../../grub-core/term/efi/console.c:128:32: error: suggest parentheses around '&&' within '||' [-Werror=parentheses]
	   if (key.unicode_char >= 0x20 && key.unicode_char <= 0x7f

2015-10-26  Eric Snowberg  <eric.snowberg@oracle.com>

	ofdisk: Fix devpath freeing logic.

2015-10-26  Paulo Flabiano Smorigo  <pfsmorigo@linux.vnet.ibm.com>

	Implement cross-endian ELF load for powerpc

2015-10-25  Peter Jones  <pjones@redhat.com>

	Use EFI_SIMPLE_TEXT_INPUT_EX to support key combinations.

2015-10-14  Andrei Borzenkov  <arvidjaar@gmail.com>

	configure: find options to force endian on MIPS

2015-10-14  Andrei Borzenkov  <arvidjaar@gmail.com>

	configure: force o32 ABI on MIPS
	GRUB code expects O32 or N32. N32 is less tested than O32, so we prefer to
	compile with O32. Some systems (e.g. GNU Guix) default to using newer
	n64 or n32 ABI. Try to find suitable options to force o32.

	For GCC this is simply -mabi=32. While clang supports this option as well,
	o32 ABI is valid for MIPS target and n32/64 ABI are valid for MIPS64 target
	only, so use "-target mips/mipsel -mabi=32".

	Reported-By: Mark H Weaver <mhw@netris.org>
	Also-By: Mark H Weaver <mhw@netris.org>

2015-10-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	net: avoid closing NULL socket in DNS lookup
	Refactor code so that we do not store NULL pointers in array
	of in-flight DNS servers.

	Reported-By: Josef Bacik <jbacik@fb.com>

2015-10-11  Andrei Borzenkov  <arvidjaar@gmail.com>

	install: --compress argument is not optional
	Fixes crash if argument is not specified. Also use `|' to separate choices
	in list of compression methods to align it with --core-compress.

2015-10-11  Vladimir Serbinenko  <phcoder@gmail.com>

	mips: Make setjmp code N32-compliant.

	mips: Make the assembly-code N32-compatible.
	There are no $t4 or $t5 in N32 but there are $a4 and $a5.

2015-10-10  Andrei Borzenkov  <arvidjaar@gmail.com>

	progress: avoid NULL dereference for net files
	From original patch by dann frazier <dann.frazier@canonical.com>:

	  grub_net_fs_open() saves off a copy of the file structure it gets passed and
	  uses it to create a bufio structure. It then overwrites the passed in file
	  structure with this new bufio structure. Since file->name doesn't get set
	  until we return back to grub_file_open(), it means that only the bufio
	  structure gets a valid file->name. The "real" file's name is left
	  uninitialized. This leads to a crash when the progress module hook is called
	  on it.

	grub_net_fs_open() already saved copy of file name as ->net->name, so change
	progress module to use it.

	Also, grub_file_open may leave file->name as NULL if grub_strdup fails. Check
	for it.

	Also-By: dann frazier <dann.frazier@canonical.com>

2015-10-10  Andrei Borzenkov  <arvidjaar@gmail.com>

	file: ignore host disk in blocklist check
	It cannot work anyway because host disk cannot be read. This fixes hostfs access
	on native Windows build where filenames start with '\' or do not have initial
	separator at all (d:\foo).

	Issue was observed when running grub-fstest on Windows. On UNIX image name is
	canonicalized to always start with `/' so this was not noticed.

	This has side effect of allowing relative path names on host, but this already
	was the case with `ls' command, so it just extends it to all commands.

	Reported-By: Arch Stack <archstacker@gmail.com>
	Also-By: Arch Stack <archstacker@gmail.com>

2015-10-09  Vladimir Serbinenko  <phcoder@gmail.com>

	mips/dl: Handle addend in RELA entries.

	gfxmenu/model: Delete empty file.

2015-10-09  Alexander Bluhm  <bluhm@genua.de>

	ufs: Fix parameters to grub_memset.
	len = 0 made simply no sense. Fix parameters to be in line with read.

2015-10-07  Stanislav Kholmanskikh  <stanislav.kholmanskikh@oracle.com>

	ofnet: Do not set SUFFIX for sun4v network devices
	sun4v vnet devices do not implement the support of duplex and speed
	instance attributes. An attempt to open such a device with
	the attributes will fail:

	ok select net:speed=auto,duplex=auto
	Unknown key 'speed'
	Unknown key 'duplex'
	Manual Configuration: Host IP, boot server and filename must be specified
	WARNING: /virtual-devices@100/channel-devices@200/network@0: Can't open OBP standard TFTP package

	Can't open device
	ok

	Therefore, let's not set SUFFIX for such devices.

2015-10-07  Eric Snowberg  <eric.snowberg@oracle.com>

	sparc64 - use correct drive name within grub_util_sparc_setup
	Incorrect drive name was being passed into grub_util_sparc_setup,
	causing the grub-install to fail.

2015-09-13  Andrei Borzenkov  <arvidjaar@gmail.com>

	cryptodisk: strip parenthesis from backing device name
	Otherwise subsequent disk open fails.

	Reported-By: Klemens Nanni <contact@autoboot.org>

2015-08-22  Felix Zielcke  <fzielcke@z-51.de>

	disk/ldm, partmap/msdos.c: fix spelling error

2015-08-13  Andrei Borzenkov  <arvidjaar@gmail.com>

	net: do not try to load protocol module via itself
	Otherwise we get infinite recursion.

	Closes: 45729

2015-08-09  Josef Bacik  <jbacik@fb.com>

	efinet: handle get_status() on buggy firmware properly
	The EFI spec indicates that get_status() should return the address of the buffer
	we passed into transmit to indicate the the buffer was transmitted.  However we
	have boxes where the firmware returns some arbitrary address instead, which
	makes grub think that we've not sent anything.  So since we have the SNP stuff
	opened in exclusive mode just assume any non-NULL txbuf means that our transmit
	occurred properly.  This makes grub able to do its networking stuff properly on
	our broken firmware.  Thanks,

	cc: Peter Jones <pjones@redhat.com>

2015-08-09  Andrei Borzenkov  <arvidjaar@gmail.com>

	linguas.sh: fix error when removing non-existing autogenerated files

2015-07-28  Vladimir Serbinenko  <phcoder@gmail.com>

	ahci: Ensure that bus mastering is set.
	Fixes ahci_test failing on several platforms.

2015-07-27  Vladimir Serbinenko  <phcoder@gmail.com>

	archelp: Never pass NULL as mtime.
	Moves complexity from fs code (NULL check) to common code (passing non-NULL).

	HFS: Convert to fshelp.
	HFS doesn't handle "." and ".." properly. Convert it to fshelp to reuse the
	logic.

	FAT: Convert to fshelp.
	exFAT doesn't handle "." and ".." correctly, convert it to fshelp to
	reuse the same logic.

	BFS: Convert to fshelp.
	BFS doesn't handle ".." correctly, so convert it to fshelp to reuse the logic.

	fshelp: Add handling of "." and ".." and grub_fshelp_find_file_lookup.
	Recent tests have discovered that many of our filesystems have flawed
	handling of "." and "..". Rather than attempting to fix it in filesystems
	themselves, make the common code fshelp aware of "." and ".." and handle
	them in this layer. Add grub_fshelp_find_file_lookup for easy conversion
	of BFS, HFS and exFAT which have the same problem and don't use fshelp.

	Switch procfs to use archelp.
	This fixes handling of "." and "..".

	grub-install: Use a+ in fopen rather than r+.
	r+ does not create a file if none exists.

	Add transform_data as a variant of data with substitutions.
	This fixrs name mismatch for grub.chrp with
	transform_program_name='s,grub,grub2,g'

2015-07-24  Ignat Korchagin  <ignat@cloudflare.com>

	efi: fix GetVariable return status check in 81ca24a
	GetVariable should return EFI_BUFFER_TOO_SMALL if given buffer of size
	zero; commit incorrectly checked for EFI_SUCCESS.

2015-07-24  Vladimir Serbinenko  <phcoder@gmail.com>

	zfs_test: Skip dotdot in volume root test.
	Given special semantics of ZFS it's far from clear what the expected
	result is. Just skip it for now

	xfs_test: Test both crc and non-crc filesystems.

	xfs: Fix handling of symlink with crc-enabled filesystem.

	reiserfs: Fix handling of first entry in the directory.
	Fixes garbage being added to "." filename.

2015-07-23  Ignat Korchagin  <ignat@cloudflare.com>

	efi: fix memory leak in variable handling

2015-07-23  Vladimir Serbinenko  <phcoder@gmail.com>

	exclude.pot: Add missing blacklisted strings.

	archelp: Fix handling of dot and dotdot at the end of the name.
	Fixes cpio_test and tar_test.

	arm-emu: Add __aeabi_memcpy* and __aeabi_memclr* symbols.
	Fixes compilation with clang.

2015-07-22  Vladimir Serbinenko  <phcoder@gmail.com>

	fwstart: Fix loading of address of read_spd_fail.

	fwstart: Add missing argument to p2align.
	Resulting binary is unchanged as it happens we were already aligned
	by chance.

2015-07-22  Vladimir Serbinenko  <phcoder@gmail.com>

	fwstart: Replace blt with bltz.
	blt A, $zero, B and bltz A, B are equivalent but clang recognizes only
	later, so use it.

	Resulting binary is unchanged.

2015-07-22  Vladimir Serbinenko  <phcoder@gmail.com>

	Remove mips_attributes.
	mips_attributes was introduced to work around clang problems with
	-msoft-float. Those problems are now fixed and moreover .gnu_attributes
	itself is unportable and creates problem with clang.

	Revert "mips: Fix soft-float handling."

	This partially reverts commit 6a4ecd276ed39f66be0ad6ff0f8ff67598098605.

2015-07-22  Vladimir Serbinenko  <phcoder@gmail.com>

	ARM: provide __aeabi_memclr* and __aeabi_memcpy* symbols
	Fixes compilation with recent clang.

	diskfilter: Make name a const char to fix compilation error.

	dmraid_nvidia: Set a name to usable value to avoid null dereference.
	Reported by: Andrei Borzenkov

	configure.ac: Handle powerpc64le compiler
	Also-by: Paulo Flabiano Smorigo <pfsmorigo@linux.vnet.ibm.com>

2015-07-20  Bernhard Übelacker  <bernhardu@vr-web.de>

	loader/linux: Make trailer initrd entry aligned again.
	Regression from commit:
	  loader/linux: do not pad initrd with zeroes at the end
	  a8c473288d3f0a5e17a903a5121dea1a695dda3b

	Wimboot fails since the change above because it expects the "trailer"
	initrd element on an aligned address.
	This issue shows only when newc_name is used and the last initrd
	entry has a not aligned size.

2015-07-16  Vladimir Serbinenko  <phcoder@gmail.com>

	XFS: Fix wrong alignment treatment.

	grub_ext2_read_block: Fix return type on error.

2015-07-05  Andrei Borzenkov  <arvidjaar@gmail.com>

	use TARGET_LDFLAGS in grub_PROG_OBJCOPY_ABSOLUTE
	That's what Makefile will use and it is required if unusual flags
	must be passed to linker (e.g. to build ppc32 code on ppc64le with clang).

2015-06-26  Michael Chang  <mchang@suse.com>

	Fix missing byte order conversion in get_btrfs_fs_prefix function
	Since btrfs on-disk format uses little-endian, the searched item types
	(ROOT_REF, INODE_REF) need converting the byte order in order to
	function properly on big-endian systems.

2015-06-26  Andrei Borzenkov  <arvidjaar@gmail.com>

	chainloader: fix resoource leak
	Found by: Coverity scan.
	CID: 96651

	loader/bsd: fix memory leak
	Found by: Coverity scan.
	CID: 96662, 96665

2015-06-20  Andrei Borzenkov  <arvidjaar@gmail.com>

	loader/bsd: free memory leaks
	Found by: Coverity scan.
	CID: 96671, 96658, 96653

	search_wrap: fix memory leak
	Found by: Coverity scan.
	CID: 96675

	password_pbkdf2: fix memory leak
	Found by: Coverity scan.
	CID: 96676

	normal: fix memory leak
	Found by: Coverity scan.
	CID: 96677

	efi/serial: fix memory leak
	Found by: Coverity scan.
	CID: 96678

	ohci: fix memory leak
	Found by: Coverity scan.
	CID: 96679

	loader/bsd: free memory leaks
	Found by: Coverity scan.
	CID: 96682

	multiboot: fix memory leak
	Found by: Coverity scan.
	CID: 96684

	normal: fix memory leak
	Found by: Coverity scan.
	CID: 96685

	loader/bsd: fix memory leak
	Found by: Coverity scan.
	CID: 96686

	reed_solomon: fix memory leak
	Found by: Coverity scan.
	CID: 96688

	usb: fix use after free
	Found by: Coverity scan.
	CID: 96704

	xnu: fix use after free
	Found by: Coverity scan.
	CID: 96706

	disk/scsi: fix use after free
	Found by: Coverity scan.
	CID: 96713

	efi/chainloader: fix use after free
	Found by: Coverity scan.
	CID: 96714

	search: fix use after free
	Found by: Coverity scan.
	CID: 96715

	NEWS: emu libusb support removed

2015-06-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-probe: fix memory leak in probe (ofpath)
	Found by: Coverity scan.
	CID: 73772

2015-06-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-probe: restructure code to make static analysis easier
	Current code in probe() could not be verified to not contain memory leaks.
	Restructure code and ensure grub_device_close is always called at the end of
	loop.

	Calms down Coverity scan.
	CID: 73739

2015-06-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	zfs: fix memory leak
	Found by: Coverity scan.
	CID: 73647

	xfs: silence Coverity overflow warning
	inode size cannot really overflow integer, but Coverity does not know it.
	CID: 96602

	zfs: memory leak
	Found by Coverity scan.
	CID: 96603

	unix/getroot: memory leak
	Found by Coverity scan.
	CID: 96605

	unix/relpath: memory leak
	Found by Coverity scan.
	CID: 96606

2015-06-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	syslinux_parse: assorted issues found by Coverity
	1. Remove unneeded NULL check
	CID: 96607

	2. Do not allocate storage for initrd, copy it directly from input
	buffer. Avoids memory leak in failure path.
	CID: 96604

	3. Unchecked error return from print()
	CID: 96601, 73595

2015-06-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	syslinux_parse: make print_escaped actually stop before `to'
	The only current user is mboot.c32 which unfortunately is not covered
	by regression tests.

2015-06-18  Andrei Borzenkov  <arvidjaar@gmail.com>

	fat: fix handling of "." and ".." directory entries
	Emulate dot and dotdot in root directory. For other directories do not
	add separator between name and extension for these two special entries.

	Closes: 45335

2015-06-18  Andrei Borzenkov  <arvidjaar@gmail.com>

	tests: regression tests for "." and ".." directory entries

2015-06-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	efinet: enable hardware filters when opening interface
	Exclusive open on SNP will close all existing protocol instances which
	may disable all receive filters on interface. Reinstall them after we
	opened protocol exclusively.

	Also follow UEFI specification recommendation and stop interfaces when
	closing them:

	Unexpected system errors, reboots and hangs can occur if an OS is loaded
	and the network devices are not Shutdown() and Stopped().

	Also by: Mark Salter <msalter@redhat.com>
	Closes: 45204

2015-06-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	NEWS: mention libgcc removal

2015-06-15  Paulo Flabiano Smorigo  <pfsmorigo@linux.vnet.ibm.com>

	Add flag for powerpc ieee1275 to avoid unneeded optimizations

2015-06-12  Mark Salter  <msalter@redhat.com>

	Fix exit to EFI firmware
	The current code for EFI grub_exit() calls grub_efi_fini() before
	returning to firmware. In the case of ARM, this leaves a timer
	event running which could lead to a firmware crash. This patch
	changes this so that grub_machine_fini() is called with a NORETURN
	flag. This allows machine-specific shutdown to happen as well
	as the shutdown done by grub_efi_fini().

2015-06-12  Paul Menzel  <paulepanter@users.sourceforge.net>

	disk/ahci.c: Use defines `GRUB_AHCI_HBA_PORT_CMD_SPIN_UP` and `GRUB_AHCI_HBA_PORT_CMD_POWER_ON`
	Instead of hard coding `2` and `4` use the macros defined already at the
	top of the file. As a consequence, wrap the now too long line.

2015-06-12  Andrei Borzenkov  <arvidjaar@gmail.com>

	NEWS: XFS v5 support

2015-06-12  Jan Kara  <jack@suse.cz>

	xfs: V5 filesystem format support
	Add support for new XFS on disk format. We have to handle optional
	filetype fields in directory entries, additional CRC, LSN, UUID entries
	in some structures, etc.

	xfs: Add helpers for inode size
	Add helpers to return size of XFS inode on disk and when loaded in
	memory.

2015-06-04  Toomas Soome  <tsoome@me.com>

	multiboot_header_tag_module_align fix to confirm multiboot specification

2015-06-02  Leif Lindholm  <leif.lindholm@linaro.org>

	configure.ac: clean up arm64 soft-float handling
	Fix compilation with gcc 5.1 (avoid internal compiler error), by
	replacing explicit -march +nofp+nosimd options with -mgeneral-regs-only.

	This also enables the removal of some further conditional build flag
	setting.

2015-06-01  dann frazier  <dann.frazier@canonical.com>

	arm64/setjmp: Add missing license macro
	Including the setjmp module in an arm64-efi image will cause it to
	immediately exit with an "incompatible license" error.

	The source file includes a GPLv3+ boilerplate, so fix this by declaring a
	GPLv3+ license using the GRUB_MOD_LICENSE macro.

2015-05-31  Paul Menzel  <paulepanter@users.sourceforge.net>

	disk/ahci.c: Add port number to port debug messages
	Currently, some messages cannot be mapped to the port they belong to as
	the port number is missing from the output. So add `port: n` to the
	debug messages.

2015-05-30  Andrei Borzenkov  <arvidjaar@gmail.com>

	Clarify use of superusers variable and menu entry access
	superusers controls both CLI and editing. Also explicitly mention that
	empty superusers disables them.

	"Access to menuentry" is a bit vague - change to "execute menuentry"
	to make it obvious, what access is granted.

2015-05-30  Paul Menzel  <paulepanter@users.sourceforge.net>

	Correct spelling of *scheduled*
	Run the command below

		$ git grep -l schedulded | xargs sed -i 's/schedulded/scheduled/g'

	and revert the change in `ChangeLog-2015`.

	Including "miscellaneous" spelling fix noted by richardvoigt@gmail.com

2015-05-30  Toomas Soome  <tsoome@me.com>

	zfs extensible_dataset and large_blocks feature support
	large blocks basically use extensible dataset feature, or to be exact,
	setting recordsize above 128k will trigger large_block feature to be
	enabled and storing such blocks is using feature extensible dataset. so
	the extensible dataset is prerequisite.

	Changes implement read support extensible dataset… instead of fixed DMU
	types they dont specify type, making it possible to use fat zap objects
	from bonus area.

2015-05-27  Vladimir Serbinenko  <phcoder@gmail.com>

	multiboot1: never place modules in low memory.
	While in theory permitted by the spec, modules rarely fit in low memory
	anyway and not every kernel is able to handle modules in low memory anyway.
	At least VMWare is known not to be able to handle modules at arbitrary
	locations.

2015-05-24  Paul Menzel  <paulepanter@users.sourceforge.net>

	disk/ahci: Use defines `GRUB_ATA_STATUS_BUSY` and `GRUB_ATA_STATUS_DRQ`
	Instead of hard coding `0x88` use the macros defined in `disk/ata.h`.

2015-05-19  Paul Menzel  <paulepanter@users.sourceforge.net>

	cb_timestamps.c: Add new time stamp descriptions
	Add the descriptions of the “core”, that means no vendorcode or payload,
	coreboot time stamps added up to coreboot commit a7d92441 (timestamps:
	You can never have enough of them!) [1].

	Running `coreboot_boottime` in the GRUB command line interface now shows
	descriptions for all time stamps again on the ASRock E350M1.

	[1] http://review.coreboot.org/9608

2015-05-17  Andrei Borzenkov  <arvidjaar@gmail.com>

	bootp: ignore gateway_ip (relay) field.
	From RFC1542:

	   The 'giaddr' field is rather poorly named.  It exists to facilitate
	   the transfer of BOOTREQUEST messages from a client, through BOOTP
	   relay agents, to servers on different networks than the client.
	   Similarly, it facilitates the delivery of BOOTREPLY messages from the
	   servers, through BOOTP relay agents, back to the client.  In no case
	   does it represent a general IP router to be used by the client.  A
	   BOOTP client MUST set the 'giaddr' field to zero (0.0.0.0) in all
	   BOOTREQUEST messages it generates.

	   A BOOTP client MUST NOT interpret the 'giaddr' field of a BOOTREPLY
	   message to be the IP address of an IP router.  A BOOTP client SHOULD
	   completely ignore the contents of the 'giaddr' field in BOOTREPLY
	   messages.

	Leave code ifdef'd out for the time being in case we see regression.

	Suggested by: Rink Springer <rink@rink.nu>
	Closes: 43396

2015-05-17  Andrei Borzenkov  <arvidjaar@gmail.com>

	hostdisk: fix crash with NULL device.map
	grub-macbless calls grub_util_biosdisk_init with NULL device.map.

2015-05-14  Andrei Borzenkov  <arvidjaar@gmail.com>

	zfs: fix integer truncation in zap_lookup
	Size after shift could exceed 16 bits; use grub_unit32_t for result.

	Reported and tested by: Kostya Berger <bergerkos@yahoo.co.uk>
	Closes: 44448

2015-05-13  Andrei Borzenkov  <arvidjaar@gmail.com>

	remove extra newlines in grub_util_* strings
	grub_util_{info,warn,error} already add trailing newlines, so remove
	them from format strings. Also trailing full stops are already added.

2015-05-12  Jan Kara  <jack@suse.cz>

	xfs: Convert inode numbers to cpu endianity immediately after reading
	Currently XFS driver converted inode numbers to native endianity only
	when using them to compute inode position. Although this works, it is
	somewhat confusing. So convert inode numbers when reading them from disk
	structures as every other field.

2015-05-11  Jan Kara  <jack@suse.cz>

	xfs: Fix termination loop for directory iteration
	Directory iteration used wrong position (sizeof wrong structure) for
	termination of iteration inside a directory block. Luckily the position
	ended up being wrong by just 1 byte and directory entries are larger so
	things worked out fine in practice. But fix the problem anyway.

2015-05-08  Andrei Borzenkov  <arvidjaar@gmail.com>

	acpi: do not skip BIOS scan if EBDA length is zero
	EBDA layout is not standardized so we cannot assume first two bytes
	are length. Neither is it required by ACPI standard. HP 8710W is known
	to contain zeroes here.

	Closes: 45002

2015-05-07  Andrei Borzenkov  <arvidjaar@gmail.com>

	Add asm-tests to tarball

2015-05-07  Vladimir Serbinenko  <phcoder@gmail.com>

	util/grub-mkrescue: Fix compilation

2015-05-07  Andrei Borzenkov  <arvidjaar@gmail.com>

	efinet: open Simple Network Protocol exclusively
	EDK2 network stack is based on Managed Network Protocol which is layered
	on top of Simple Management Protocol and does background polling. This
	polling races with grub for received (and probably trasmitted) packets
	which causes either serious slowdown or complete failure to load files.

	Open SNP device exclusively.  This destroys all child MNP instances and
	stops background polling.

	Exclusive open cannot be done when enumerating cards, as it would destroy
	PXE information we need to autoconfigure interface; and it cannot be done
	during autoconfiguration as we need to do it for non-PXE boot as well. So
	move SNP open to card ->open method and add matching ->close to clean up.

	Based on patch from Mark Salter <msalter@redhat.com>

	Also-By: Mark Salter <msalter@redhat.com>
	Closes: 41731

2015-05-07  Andrei Borzenkov  <arvidjaar@gmail.com>

	efinet: skip virtual IPv4 and IPv6 devices when enumerating cards
	EDK2 PXE driver creates two child devices - IPv4 and IPv6 - with
	bound SNP instance. This means we get three cards for every physical
	adapter when enumerating. Not only is this confusing, this may result
	in grub ignoring packets that come in via the "wrong" card.

	Example of device hierarchy is

	 Ctrl[91] PciRoot(0x0)/Pci(0x3,0x0)
	   Ctrl[95] PciRoot(0x0)/Pci(0x3,0x0)/MAC(525400123456,0x1)
	     Ctrl[B4] PciRoot(0x0)/Pci(0x3,0x0)/MAC(525400123456,0x1)/IPv4(0.0.0.0)
	     Ctrl[BC] PciRoot(0x0)/Pci(0x3,0x0)/MAC(525400123456,0x1)/IPv6(0000:0000:0000:0000:0000:0000:0000:0000)

	Skip PXE created virtual devices when enumerating cards. Make sure to
	find real card when applying initial autoconfiguration during PXE boot,
	this information is associated with one of child devices.

2015-05-07  Andrei Borzenkov  <arvidjaar@gmail.com>

	efidisk: move device path helpers in core for efinet

	convert to, not from, CPU byte order in DNS receive function

2015-05-07  Andrei Borzenkov  <arvidjaar@gmail.com>

	loader/linux: do not pad initrd with zeroes at the end
	Syslinux memdisk is using initrd image and needs to know uncompressed
	size in advance. For gzip uncompressed size is at the end of compressed
	stream. Grub padded each input file to 4 bytes at the end, which means
	syslinux got wrong size.

	Linux initramfs loader apparently does not care about trailing alignment.
	So change code to align beginning of each file instead which atomatically
	gives us the correct size for single file.

	Reported-By: David Shaw <dshaw@jabberwocky.com>

2015-05-07  Daniel Kiper  <daniel.kiper@oracle.com>

	i386/relocator: Remove unused extern grub_relocator64_rip_addr

2015-05-07  Vladimir Serbinenko  <phcoder@gmail.com>

	grub-install-common: Increase buf size to 8192 as modinfo.sh is bigger.

2015-05-07  Vladimir Serbinenko  <phcoder@gmail.com>

	grub-mkrescue: Recognize -output as an alias of --output.
	This helps us to be in line with xorriso -as mkisofs.

	Suggested by: Thomas Schmitt

2015-05-07  Vladimir Serbinenko  <phcoder@gmail.com>

	linux.c: Ensure that initrd is page-aligned.

	Revert parts accidentally committed 2 commits ago.

2015-05-07  Fu Wei  <fu.wei@linaro.org>

	fdt.h: Add grub_fdt_set_reg64 macro

	arm64: Export useful functions from linux.c

2015-05-04  Andrei Borzenkov  <arvidjaar@gmail.com>

	Revert "efinet: memory leak on module removal"
	This reverts commits 47b2bee3ef0ea60fc3f5bfc37f3784e559385297
	and 8d3c4544ffdd0289a4b0bdeb0cdc6355f801a4b3. It is not safe
	to free allocated cards, dangling pointers main remain. Such
	cleanup requires more changes in net core.

	efinet: cannot free const char * pointer

	efinet: memory leak on module removal

2015-05-03  Andrei Borzenkov  <arvidjaar@gmail.com>

	zfs: add missing NULL check and fix incorrect buffer overwrite
	grub_memset should zero out padding after data end. It is not clear
	why it is needed at all - ZFS block is at least 512 bytes and power
	of two, so it is always multiple of 16 bytes. This grub_memset
	apparently never did anything.

2015-05-03  Toomas Soome  <tsoome@me.com>

	zfs: com.delphix:embedded_data feature support

	zfs: com.delphix:hole_birth feature support
	In the past birth was always zero for holes. This feature started
	to make use of birth for holes as well, so change code to test for
	valid DVA address instead.

2015-04-29  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-mkconfig: use $pkgdatadir in scripts
	Otherwise scripts will source wrong grub-mkconfig_lib.

2015-04-24  Vladimir Serbinenko  <phcoder@gmail.com>

	Remove -V in grub-mkrescue.c
	It clashhes with -V which is alias to -volid.

2015-04-13  Toomas Soome  <tsoome@me.com>

	getroot: include sys/mkdev.h for makedev
	Solaris (like) systems need to include sys/mkdev.h for makedev() function.

2015-04-13  Toomas Soome  <tsoome@me.com>

	core/partmap: rename 'sun' to avoid clash with predefined symbol
	the symbol “sun” is defined macro in solaris derived systems, from
	gcc -dM -E:

	and therefore can not be used as name.

2015-04-12  Paul Menzel  <paulepanter@users.sourceforge.net>

	docs/grub.texi: Fix spelling of cbfstool

2015-04-06  Andrei Borzenkov  <arvidjaar@gmail.com>

	core: avoid NULL derefrence in grub_divmod64s
	It can be called with NULL for third argument.  grub_divmod32* for
	now are called only from within wrappers, so skip check.

	Reported-By: Michael Zimmermann <sigmaepsilon92@gmail.com>

2015-03-28  Andrei Borzenkov  <arvidjaar@gmail.com>

	do not emit cryptomount without crypto UUID

2015-03-28  Sarah Newman  <srn@prgmr.com>

	grub-core/loader/i386/xen.c: Initialized initrd_ctx so we don't free a random pointer from the stack.

2015-03-27  Andrei Borzenkov  <arvidjaar@gmail.com>

	net: trivial grub_cpu_to_XX_compile_time cleanup

2015-03-27  Lunar  <lunar@torproject.org>

	syslinux: Support {vesa,}menu.c32.

2015-03-27  Steve McIntyre  <steve@einval.com>

	Recognize EFI platform even in case of mismatch between Linux and EFI.
	Some x86 systems might be capable of running a 64-bit Linux kernel but
	only use a 32-bit EFI (e.g. Intel Bay Trail systems). It's useful for
	grub-install to be able to recognise such systems, to set the default
	x86 platform correctly.

	To allow grub-install to know the size of the firmware rather than
	just the size of the kernel, there is now an extra EFI sysfs file to
	describe the underlying firmware. Read that if possible, otherwise
	fall back to the kernel type as before.

2015-03-27  Michael Zimmermann  <sigmaepsilon92@gmail.com>

	Add missing initializers to silence suprious warnings.

2015-03-27  Leif Lindholm  <leif.lindholm@linaro.org>

	dl_helper: Cleanup
	Use the new thumb_get_instruction_word/thumb_set_instruction_word
	helpers throughout.

	Style cleanup (missing spaces).

	Move Thumb MOVW/MOVT handlers into Thumb relocation section of file.

2015-03-27  Martin Wilck  <martin.wilck@ts.fujitsu.com>

	efinet: Check for immediate completition.
	This both speeds GRUB up and workarounds unexpected EFI behaviour.

2015-03-27  Vladimir Serbinenko  <phcoder@gmail.com>

	Make Makefile.util.def independent of platform.

2015-03-27  Daniel Kahn Gillmor  <dkg@fifthhorseman.net>

	util/mkimage: Use stable timestamp when generating binaries.

2015-03-27  Vladimir Serbinenko  <phcoder@gmail.com>

	modinfo.sh.in: Add missing config variables.

	Makefile.core.def: Remove obsolete LDADD_KERNEL

	arp, icmp: Fix handling in case of oversized or invalid packets.
	This restrict ARP handling to MAC and IP addresses but in practice we need
	only this case anyway and other cases are very rar if exist at all. It makes
	code much simpler and less error-prone.

2015-03-23  Colin Watson  <cjwatson@ubuntu.com>

	hostfs: Drop unnecessary feature test macros
	_BSD_SOURCE was added to allow the use of DT_DIR, but that was removed
	in e768b77068a0b030a07576852bd0f121c9a077eb.  While adding
	_DEFAULT_SOURCE as well works around problems with current glibc,
	neither is in fact needed nowadays.

2015-03-20  Vladimir Serbinenko  <phcoder@gmail.com>

	compiler-rt-emu: Add missing file.

	emunet: Fix init error checking.
	Otherwise emunet doesn't expose any cards.

	fddboot_test: Add -no-pad to xorriso.

	grub-mkrescue: pass all unrecognized options unchanged to xorriso.

	cacheinfo: Add missing license information.

2015-03-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-fs-tester: add LVM RAID1 support
	LVM miscalculates bitmap size with small extent, so start with 16K as
	for other RAID types.

	Until version 2.02.103 LVM counts metadata segments twice when checking
	available space, reduce segment count by one to account for this bug.

2015-03-19  Andrei Borzenkov  <arvidjaar@gmail.com>

	core: add LVM RAID1 support
	Closes 44534.

2015-03-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-fs-tester: explicitly set segment type for LVM mirror
	LVM mirror defaults to RAID1 today and can be different on different
	systems as set in lvm.conf.

2015-03-15  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-fs-tester: better estimation of filesystem time for LVM/RAID
	Write activity with LVM/RAID can happen after filesystem is unmounted.
	In my testing modification time of loop files was 15 - 20 seconds
	after unmount.  So use time as close to unmount as possible as
	reference instead.

2015-03-06  Vladimir Serbinenko  <phcoder@gmail.com>

	hfsplus: Fix potential access to uninited memory on invalid FS

2015-03-06  Jon McCune  <jonmccune@google.com>

	autogen.sh: Allow overriding the python to be used by setting $PYTHON.
	Some installations have several python versions installed. Allow user
	to choose which one to use by setting $PYTHON.

2015-03-05  Andrei Borzenkov  <arvidjaar@gmail.com>

	update gnulib/argp-help.c to fix garbage in grub-mknetdir --help output
	argp_help attempts to translate empty string, which results in printing
	meta information about translation, like in

	bor@opensuse:~/build/grub> grub2-mknetdir --help
	Использование: grub2-mknetdir [ПАРАМЕТР…]
	Project-Id-Version: grub 2.02-pre2
	Report-Msgid-Bugs-To: bug-grub@gnu.org
	...

	Update gnulib/argp-help.c to the current version which fixes this
	(commit b9bfe78424b871f5b92e5ee9e7d21ef951a6801d).

2015-03-05  Andrey Borzenkov  <arvidjaar@gmail.com>

	update m4/extern-inline.m4 to upstream version to fix compilation on FreeBSD
	In file included from util/grub-mkimage.c:54:0:
	./grub-core/gnulib/argp.h:627:49: error: '__sbistype' is static but
	used in inline function '_option_is_short' which is not static
	[-Werror] cc1: all warnings being treated as errors gmake[2]: ***
	[util/grub_mkimage-grub-mkimage.o] Error 1

	Update m4/extern-inline.m4 to current upstream gnulib version that
	contains fix for this (commit b9bfe78424b871f5b92e5ee9e7d21ef951a6801d).

	Reported-By: Beeblebrox <zaphod@berentweb.com>

2015-03-04  Vladimir Serbinenko  <phcoder@gmail.com>

	syslinux_parse: Fix the case of unknown localboot.
	Reported by: Jordan Uggla

	configure.ac: Fix the name of pciaccess header.

	Fix canonicalize_file_name clash.
	canonicalize_file_name clashed with gnulib function. Additionally
	it was declared in 2 places: emu/misc.h and util/misc.h. Added
	grub_ prefix and removed second declaration.

2015-03-03  Vladimir Serbinenko  <phcoder@gmail.com>

	Remove emu libusb support.
	It's disabled by default and has been broken for a long time.
	As nobody is interested in fixing and maintaining it, remove it.

	configure.ac: Remove unused COND_clang

	Remove libgcc dependency.
	libgcc for boot environment isn't always present and compatible.
	libgcc is often absent if endianness or bit-size at boot is different
	from running OS.
	libgcc may use optimised opcodes that aren't available on boot time.
	So instead of relying on libgcc shipped with the compiler, supply
	the functions in GRUB directly.
	Tests are present to ensure that those replacement functions behave the
	way compiler expects them to.

	types.h: Use __builtin_bswap* with clang.
	clang pretends to be GCC 4.2 but we use __builtin_bswap* only with GCC 4.3+.
	clang support __builtin_bswap*, so use it.

	configure.ac: Set $CPPFLAGS when checking for no_app_regs.
	Fixes compilation for sparc64 with clang.

	Don't continue to query block-size if disk doesn't have it.
	Stops poluting screen with a lot of "block-size: exception -21".

2015-02-28  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-probe: free temporary variable

2015-02-28  Vladimir Serbinenko  <phcoder@gmail.com>

	exclude.pot: Add new technical strings

	grub-probe: Mark a "[default=]" for translation.

	grub-shell: Add missing --locale-directory.
	Fixes the language tests is no make install was done.

	ntfs_test: Skip is setfattr is unavailable.

2015-02-26  Vladimir Serbinenko  <phcoder@gmail.com>

	emu/cache: Change declaration of __clear_cache to match builtin declaration.
	Fixes compile of arm64-emu.

	arm/dl: Fix handling of nonstandard relocation sizes

	gzio: Optimize by removing division.

	raid6: Optimize by removing division.

	dmraid_nvidia: Fix division by 0 and missing byte-swap.

	crypto: restrict cipher block size to power of 2.
	All current ciphers have blocks which are power of 2 and it's
	unlikely to change. Other block length would be tricky to handle anyway.
	This restriction allows avoiding extra divisions.

	jpeg: Optimise by replacing division with shifts.

	png: Optimize by avoiding divisions.

	Add missing lib/division.c

	fbblit: Optimize by replacing division with additions and shifts.

	bitmap_scale: Optimize by moving division out of the loop.

	minilzo: Skip parts tha we don't need.

2015-02-23  Vladimir Serbinenko  <phcoder@gmail.com>

	mips: Fix soft-float handling.
	Add -msoft-float alongside clang arguments to specify ABI.
	Specify ABI in asm files explicitly.
	This trigers asm warning due to gcc failing to propagate -msoft-float
	but it's tolerable.

	Add missing grub_ prefix in memcpy invocation

	Allow clang compilation for thumb with -mthumb-interwork.
	clang already uses -mthumb-interwork behaviour even thout it doesn't
	support the option.

	arm64: Fix compilation failure.
	Don't supply +nosimd to asm files.
	Otherwise +nosimd coming from flags forbids some of instructions
	used in cache_flush.

	Supply signed division to fix ARM compilation.
	Previously we supplied only unsigned divisions on platforms that need software
	division.
	Yet compiler may itself use a signed division. A typical example would be a
	difference between 2 pointers which involves division by object size.

2015-02-22  Vladimir Serbinenko  <phcoder@gmail.com>

	acpi: Fix unused function warning.

	configure.ac: Add ia64-specific way to disable floats.

	i386/tsc: Fix unused function warning on xen.

2015-02-22  Vladimir Serbinenko  <phcoder@gmail.com>

	Experimental support for clang for sparc64.
	Automatically discover command line options to make clang and
	gcc behave in same way.

	Tested with qemu.

2015-02-22  Vladimir Serbinenko  <phcoder@gmail.com>

	Discover which option provides soft-float on configure stage.
	Deals with clang needing other arguments to stop issuing floating
	instructions than gcc.

2015-02-21  Vladimir Serbinenko  <phcoder@gmail.com>

	mips: Switch to more portable .org
	Binary is unchanged.

	sparc64: Switch to more portable .org.
	Binaries are unchanged.

	kernel-8086: Switch to more portable .org.

	Relax requirements on asm for non-BIOS i386 platforms.
	These platforms don't have a hard limit on size of resulting code16
	code, so we don't care if assembly is bigger than necessarry.

	qemu: Switch to more portable .org
	Binary is checked identical.

	qemu: Fix GateA20 enabling.
	GateA20 code was inactive due to address error.

	qemu: Fix compilation

	Remove realmode.S from coreboot and qemu.
	It's not used there.

	Remove obsolete ADDR32 and DATA32 checks.

	i386: Remove needless ADDR32 prefixes when address is known and fixed.
	Shaves off 6 bytes in lzma_decompress.img.

	i386-pc/boot: Explicitly mark kernel_address[_high] as local.
	Otherwise apple asm might try to make accesses relocatable.

	Change dot assignmnet to more portable .org.
	Binary is unchanged (verified)

	i386: Move from explicit ADDR32/DATA32 prefixes to instruction suffixes.
	Is more portable.
	Binary is unchanged (verified).

	Test which flags make our asm compile.
	Previously we relied on assumption that clang always needs -no-integrated-as
	but it's not always true.

	INSTALL: clarify that clang support is experimental

	zfs/mzap_lookup: Fix argument types

	wildcard: Mark unused argument as such.

	ofdisk: Exclude floppies from scanning.
	It causes similar hang as CD on at least the qemu.

	configure: Add -msoft-float to CCASFLAGS
	Otherwise mismatch between API flags triggers linker failure

	mips/startup_raw: Use more portable .asciz

	Provide __aeabi_mem{cpy,set}
	Fixes ARM compilation

	div_test: Don't try to divide by zero

	INSTALL: Fix names of host flags to match actual behaviour

	Strip .MIPS.abiflags which causes compile failure

2015-02-20  Vladimir Serbinenko  <phcoder@gmail.com>

	configure: Move adding of include options to the very end to avoid subshell.

	configure: Add missing comma.

2015-02-16  Vladimir Serbinenko  <phcoder@gmail.com>

	ext2: Ignore INCOMPAT_MMP.
	It's not really incompatible as long as driver never writes to FS.

	ext2: Support META_BG.
	This fixes bug that system would become unbootable after ext*
	online resize if no resize_inode was created at ext* format time.

2015-02-16  Andrei Borzenkov  <arvidjaar@gmail.com>

	tests: remove hardcoded paths from syslinux_test
	abs_top_srcdir appeared in Autoconf 2.52f. Minimal grub requirement
	is 2.60 so we should be good here.

	build-sys: add syslinux test files to tarball

2015-02-16  Vladimir Serbinenko  <phcoder@gmail.com>

	Add test for syslinux converter

2015-02-16  Vladimir Serbinenko  <phcoder@gmail.com>

	Don't remove initrd= parameter.
	Based on simplified patch by Lunar.

	Reported by: Lunar

2015-02-16  Vladimir Serbinenko  <phcoder@gmail.com>

	syslinux_parse: Always output comments even if no entries are found.

2015-02-15  Andrei Borzenkov  <arvidjaar@gmail.com>

	diskfilter_make_raid: more memory leaks in failure path

2015-02-14  Vladimir Serbinenko  <phcoder@gmail.com>

	disk/lvm: Use zalloc to ensure that segments are initialised to sane value.
	Reported by: EmanueL Czirai.

2015-02-14  Daniel Kiper  <daniel.kiper@oracle.com>

	multiboot2: Fix information request tag size calculation

2015-02-14  Andrei Borzenkov  <arvidjaar@gmail.com>

	diskfilter: fix double free of lv names for mdraid
	Avoid micro-optimization in grub_diskfilter_make_raid and make sure
	name and fullname are independent strings. This avoids need to special
	case it everywhere else.

	Also fix memory leak in failure case in grub_diskfilter_make_raid.

	Closes: 41582

2015-02-14  Andrei Borzenkov  <arvidjaar@gmail.com>

	diskfilter: fix crash in validate_lv for mdraid arrays
	Commit 750f4bacd3262376ced3f837d8dc78f834ca233a put LV validation before
	actual vg assignment. Make grub_diskfilter_make_raid to assign ->vg as
	happens in other cases for consistency. Also clean up redundant code and add
	explicit NULL lv->vg check in validate_lv.

	Also fix segment validation in validate_lv; it became obvious when crash
	was fixed.

	Closes: 44199

2015-02-12  Jiri Slaby  <jslaby@suse.cz>

	util: mkimage, fix gcc5 build failure
	gcc5 reports:
	../util/mkimage.c: In function 'grub_install_get_image_target':
	../util/mkimage.c:954:5: error: loop exit may only be reached after undefined behavior [-Werror=aggressive-loop-optimizations]
	     && j < ARRAY_SIZE (image_targets[i].names); j++)
	     ^
	../util/mkimage.c:953:39: note: possible undefined statement is here
	      for (j = 0; image_targets[i].names[j]
	                                        ^

	Well, let's move the index 'j' test before accesing the array to:
	1) make the loop obvious
	2) make gcc happy

2015-02-03  Leif Lindholm  <leif.lindholm@linaro.org>

	arm: implement additional relocations generated by gcc 4.9 at -O3
	GCC 4.9 also generates R_ARM_THM_MOVW_ABS_NC and R_ARM_THM_MOVT_ABS,
	as an alternative to ABS32.

2015-01-30  Andrei Borzenkov  <arvidjaar@gmail.com>

	setup: fix blocklist size calculation
	Found by: Coverity scan.

	grub-fstest: fix descriptor leak
	Found by: Coverity scan.

2015-01-30  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/pxe: fix error condition
	Test return value of grub_netbuff_reserve(), buf itself cannot be
	NULL here.

	Found by: Coverity scan.

2015-01-30  Andrei Borzenkov  <arvidjaar@gmail.com>

	grub-mkimage: fix potential NULL pointer dereference
	Move fatal check whether symtab_section is NULL before first reference.

	Found by: Coverity scan.

2015-01-30  Andrei Borzenkov  <arvidjaar@gmail.com>

	net/ip: check result of grub_netbuff_push
	Found by: Coverity scan.

	tests: add test command file tests
	This requires access to files in both host and grub image, so
	implementing as separate test unit instead of script test was
	more easy.

	test: consistently use TMPDIR and same name pattern for temp files

	test: fix previous commit - we need to return from subexpression
	( ... ) was processed recursively, we need to return from it. Revert
	this change.

	test: do not stop after first file test or closing bracket
	Closes: 44115

2015-01-28  Leif Lindholm  <leif.lindholm@linaro.org>

	configure.ac: don't use -msoft-float for arm64
	aarch64 toolchains do not support the -msoft-float option added by
	commit 3661261f. Insted, for arm64 use -march=armv8-a+nofp+nosimd.

	Reported-by: Ryan Harkin <ryan.harkin@linaro.org>

2015-01-28  Andrei Borzenkov  <arvidjaar@gmail.com>

	script/execute.c: fix memory leak.
	Make sure to continue loop over array after failure to free
	allocated strings.

	Found by: Coverity scan.

2015-01-28  Andrei Borzenkov  <arvidjaar@gmail.com>

	syslinux_parse: fix memory leak.
	Found by: Coverity scan.

2015-01-27  Andrei Borzenkov  <arvidjaar@gmail.com>

	Change quotes to match overall style in NEWS

	loader/xnu: fix memory leak.
	Foound by: Coverity scan.

	util/grub-probe: fix memory leaks.
	Found by: Coverity scan.

	fs/hfsplus: fix memory leak.
	Found by: Coverity scan.

	fs/zfs/zfscrypt.c: fix indentation.

	fs/zfs/zfscrypt.c: fix memory leaks.
	Found by: Coverity scan.

	commands/parttool: fix memory leak.
	Found by: Coverity scan.

	fs/zfs/zfs.c: fix memory leak.
	Found by: Coverity scan.

	linux/ofpath: fix descriptor leak
	Found by: Coverity scan

	linux/hostdisk: use strncpy instead of strlcpy
	strlcpy is not available on Linux as part of standard libraries.
	It probably is not worth extra configure checks espicially as we
	need to handle missing function anyway.

2015-01-27  Vladimir Serbinenko  <phcoder@gmail.com>

	Document intentional fallthroughs.
	Found by: Coverity scan.

	linux/ofpath: Fix error handling.
	Found by: Coverity Scan.

	linux/hostdisk: Limit strcpy size to buffer size.
	Found by: Coverity scan.

	fs/zfscrypt: Add missing explicit cast.
	Found by: Coverity scan.

	fs/zfs: Fix error handling.
	Found by: Coverity Scan.

2015-01-27  Vladimir Serbinenko  <phcoder@gmail.com>

	fs/{cbfs,cpio}: Remove useless check if mode is NULL.
	Callers already ensure that it's not null.

	Found by: Coverity Scan.

2015-01-27  Vladimir Serbinenko  <phcoder@gmail.com>

	commands/acpi: Use ALIGN_UP rather than manual expression.
	Improves readability and hopefully automatic scanning.

	Found by: Coverity Scan.

2015-01-26  Andrei Borzenkov  <arvidjaar@gmail.com>

	util/setup: fix memory leak.
	Found by: Coverity scan.

	util/mkimage: fix memory leaks.
	Found by: Coverity scan.

	util/grub-mount: fix descriptor leak.
	Found by: Coverity scan.

	util/grub-mkstandalone: fix memory leak.
	Found by: Coverity scan.

	util/grub-install: rearrange code to avoid memory leak.
	Found by: Coverity scan.

	linux/getroot: fix memory leak.
	Found by: Coverity scan.

	util/install: fix memory leak.
	Found by: Coverity scan.

	util/setup: fix memory leak.
	Found by: Coverity scan.

	linux/ofpath: fix various memory leaks.
	Found by: Coverity scan.

	linux/getroot: fix descriptor leak.
	Found by: Coverity scan.

2015-01-26  Vladimir Serbinenko  <phcoder@gmail.com>

	util/misc.c: Check ftello return value.
	Found by: Coverity scan.

	grub-macbless: Fix resource leak.
	Found by: Coverity scan.

	grub-install: Fix memory leak.
	Found by: Coverity scan.

	grub-install-common: Fix sizeof usage.
	Found by: Coverity scan.

	util/getroot: Add missing grub_disk_close.
	Found by: Coverity scan.

	vbe: Fix incorrect register usage.
	Found by: Coverity scan.

	unix/password: Fix file descriptor leak.
	Found by: Coverity scan.

	linux/getroot: Fix error handling.
	Found by: Coverity scan.

	linux/blocklist: Fix memory leak.
	Found by: Coverity scan.

	devmapper/getroot: Fix memory leak.
	Found by: Coverity scan.

	normal/misc: Close device on all pathes.
	Found by: Coverity scan.

	normal/main: Fix error handling.
	Found by: Coverity scan.

	xnu: Add missing error check.
	Found by: Coveriy scan.

	plan9: Add missing grub_device_close.
	Found by: Coverity scan.

	multiboot: Simplify to avoid confusing assignment.
	Found by: Coverity scan.

	bsd: Add missing null-pointer check.
	Found by: Coverity scan.

	lib/syslinux_parse: Add missing error check.
	Found by: Coverity scan.

	lib/syslinux_parse: Fix memory leak.
	Found by: Coveriy scan.

	lib/syslinux_parse: Add missing alloc check.
	Found by: Coverity scan.

	i386/pc/mmap: Fix memset size.
	Found by: Coverity scan.

	gfxmenu/theme_loader: Add missing allos error check.
	Found by: Coverity scan.

	gfxmenu/icon_manager: Fix null pointer dereference.
	Found by: Coverity scan.

	fs/ufs: Add missing error check.
	Found by: Coverity scan.

	configure.ac: Always add -D_FILE_OFFSET_BITS=64.

2015-01-25  Vladimir Serbinenko  <phcoder@gmail.com>

	fs/sfs: Fix error check and add sanity check.
	Found by: Coverity scan.

	fs/reiserfs: Fix sector count overflow.
	Found by: Coverity scan.

	fs/ntfs: Add sizes sanity checks.
	Found by: Coverity scan.

	fs/ntfs: Add missing free.
	Found by: Coverity scan.

2015-01-25  Vladimir Serbinenko  <phcoder@gmail.com>

	fs/minix: Fix sector promotion to 64-bit.
	While on it make GRUB_MINIX_ZONE2SECT into function.

	Found by: Coverity scan

2015-01-25  Vladimir Serbinenko  <phcoder@gmail.com>

	grub_iso9660_read: Explicitly check read_node return value.
	Not really needed as grub_errno is already checked but is nicer.

	Found by: Coverity scan.

2015-01-25  Andrei Borzenkov  <arvidjaar@gmail.com>

	commands/fileXX: Fix remaining memory leak.
	Found by: Coverity Scan.

2015-01-25  Vladimir Serbinenko  <phcoder@gmail.com>

	fs/hfs: Add pointer sanity checks.
	Found by: Coverity scan.

	fs/hfs/hfs_open: Check that mount succeeded.
	Found by: Coverity scan.

	fs/fat: Fix codepath to properly free on error.
	Found by: Coverity scan.

	fs/cpio_common: Add a sanity check on namesize.
	Found by: Coverity scan.

	fs/cbfs: Add missing free.
	Found by: Coverity scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	font: Add missing free.
	Found by: Coverity Scan.

	biosdisk: Add missing cast.
	Found by: Coverity scan.

	disk/geli: Add missing free.
	Found by: Coverity scan.

	disk/geli: Add missing seek success check.
	Found by: Coverity scan.

	disk/diskfilter: Add missing lv presence check.
	Found by: Coverity scan.

	disk/cryptodisk: Add missing error check.
	Found by: Coverity scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	disk/ahci: Fix device_map_range argument.
	Argument is not used on x86, hence it's gone unnoticed.

	Found by: Coverity scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	disk/AFsplitter: check argument validity before doing any allocs.
	This avoids possible memory leaks.

	Found by: Coverity scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	commands/wildcard: Add missing free.
	Found by: Coverity scan.

	commands/verify: Fix sha1 context zeroing-out.
	Current code doesn't zero-out context completely. It's a minor issue
	really as sha1 init already takes care of initing the context.

	commands/tr: Simplify and fix missing parameter test.
	Found by: Coverity scan

	commands/syslinux: Add missing free.
	Found by: Coverity scan.

	commands/parttool: Add missing device close.
	Found by: Coverity scan.

	commands/nativedisk: Add missing device_close.
	Found by: Coverity scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	commands/macbless: Handle device opening errors correctly.
	Wrong variable was checked for errors.

	Found by: Coverity scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	commands/macbless: Fix potential overflow.
	Is a minor concern as no such FS would be created under normal circumstances
	and failure was benign.

	Found by: Coverity scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	commands/macbless: Remove incorrect grub_free.
	Found by: Coverity Scan

	commands/legacycfg: Fix resource leaks.

	zfs: Fix disk-matching logic.
	Reported by: Tim Chase <dweeezil>

	commands/hdparm: Add missing grub_disk_close.
	Found by: Coverity scan.

	gptsync: Add missing device_close.
	Found by: Coverity scan

	commands/fileXX: Fix memory leak.
	Found by: Coverity Scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	commands/file: Change the confusing loop stop condition.
	Old condition was used to zero-out header variable on exit of the loop.
	This is correct but confusing. Replace with in-loop logic.

	Found by: Coverity Scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	commands/acpi: Use ALIGN_UP rather than manual expression.
	Improves readability and hopefully automatic scanning.

	Found by: Coverity Scan.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	uhci: Fix null pointer dereference.
	Found by: Coverity scan.

	Always add -msoft-float to avoid compiler generating float arithmetics.

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	Generate empty ChangeLog if no .git is available.
	When making dist from a git snapshot without repo available make dist would
	fail to find ChangeLog. Generate empty ChangeLog if no ChangeLog is already
	present and repo is not available.

	Reported by: Andrei Borzenkov <arvidjaar@gmail.com>

2015-01-24  Vladimir Serbinenko  <phcoder@gmail.com>

	Makefile.am: Fix Changelog cutoff address.
	gitlog-to-changelog Doesn't generate entries for cutoff day, only
	for days after the cutoff date, adjust by one to compensate.

	efidisk: Return the determined root disk even if partition is unknown.

	util/grub-mkrescue.c: Always include part_msdos and part_gpt on EFI.
	When booted from stick, EFI would use GPT partition and our root
	device detection algortihm depends on GRUB's ability to see the same
	partitions. Hence include msdos and gpt partmap modules on EFI even when
	they're not needed to access root filesystem.

	conf/Makefile.common: Remove unused {LD,C}FLAGS_CPU.

	Autogenerate ChangeLog from git changelog.
	Old ChangeLog is moved to ChangeLog-2015. For all changes starting from
	this one ChangeLog will be generated from gitlog only on explicit make
	invocation and make dist.

2015-01-23  Vladimir Serbinenko  <phcoder@gmail.com>

		* tests/file_filter/file: Really add missing file.

2015-01-23  Andrei Borzenkov  <arvidjaar@gmail.com>

	Mention platform "none" in NEWS

2015-01-23  Andrey Borzenkov  <arvidjaar@gmail.com>

	accept also hdX as alias to native Xen disk name
	To be compatible with legacy pv-grub, sort disks by increasing order of handle
	value. This allows reusing legacy pv-grub menu.lst which is using hdX names.

	Suggested-By: Michael Chang <mchang@suse.com>
	Closes: 44026
