
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 BEZEICHNUNG

dpkg-architecture - Architektur zum Paketbau setzen und bestimmen

=head1 ÜBERSICHT

B<dpkg-architecture> [I<Option> …] [I<Befehl>]

=head1 BESCHREIBUNG

B<dpkg-architecture> stellt eine Möglichkeit bereit, die Rechner-Architektur für den Paketbau zu bestimmen und zu setzen.

Die Bau-Architektur wird immer über due Variable B<DEB_BUILD_ARCH> (falls diese gesetzt und B<--force> nicht angegeben ist) oder durch einen externen Aufruf an L<dpkg(1)> bestimmt und kann nicht auf der Befehlszeile gesetzt werden.

Sie können die Host-Architektur (Wirt-Architektur) spezifizieren, indem Sie eine oder beide der Optionen B<--host-arch> oder B<--host-type> verwenden (andernfalls wird die Variable B<DEB_HOST_ARCH> verwandt, falls sie gesetzt und B<--force> nicht angegeben ist). Der Standardwert wird über einen externen Aufruf an L<gcc(1)> ermittelt oder ist identisch mit der Bauarchitektur, falls sowohl B<CC> als auch GCC nicht verfügbar sind. Einer von B<--host-arch> oder B<--host-type> ist ausreichend, der Wert des anderen wird auf einen brauchbaren Wert gesetzt. Tatsächlich ist es oft besser, nur einen der beiden anzugeben, da B<dpkg-architecture> Sie warnen wird, falls Ihre Wahl nicht mit dem Standardwert übereinstimmt.

=head1 BEFEHLE

=over 

=item B<-l>, B<--list>

Zeigt die Umgebungsvariablen, eine pro Zeile, in dem Format I<VARIABLE=Wert>. Dies ist die Standardaktion.

=item B<-e>, B<--equal> I<Architektur>

Überprüft auf Gleichheit der Architekturen (seit Dpkg 1.13.13). Es prüft die aktuelle oder angegebene Debian-Host-Architektur mit I<Architektur> auf Gleichheit. Diese Aktion expandiert nicht die Architektur-Platzhalter (Wildcards). Der Befehl beendet sich mit einem Exit-Status von 0, falls eine Übereinstimmung besteht, andernfalls mit 1.

=item B<-i>, B<--is> I<Architektur-Platzhalter>

Überprüft auf Gleichheit der Architekturen (seit Dpkg 1.13.13). Es prüft die aktuelle oder angegebene Debian-Host-Architektur mit I<Architektur-Platzhalter>, nachdem dieser zu einem Architektur-Platzhalter expandiert wurde und prüft, ob sie passen. Der Befehl beendet sich mit einem Exit-Status von 0, falls eine Übereinstimmung besteht, andernfalls mit 1.

=item B<-q>, B<--query> I<Variablenname>

Zeigt den Wert einer einzelnen Variablen an.

=item B<-s>, B<--print-set>

Zeigt einen Export-Befehl. Dies kann dazu verwendet werden, um Umgebungsvariablen mittels der POSIX-Shell oder make B<eval> zu setzen, abhängig vom Ausgabeformat.

=item B<-u>, B<--print-unset>

Gibt ähnlich wie B<--print-set> einen Export-Befehl aus, der alle Variablen löscht.

=item B<-c>, B<--command> I<Befehlszeichenkette>

Führt eine I<Befehlszeichenkette> in einer Umgebung aus, in der alle Variablen auf die festgelegten Werte gesetzt sind.

Falls die I<Befehlszeichenkette> Shell-Metazeichen enthält, dann wird sie durch die System-Bourne-Shell aufgerufen.

=item B<-L>, B<--list-known>

Gibt eine Liste von gültigen Architekturnamen aus. Möglicherweise durch eine oder mehrere der Abgleich-Optionen B<--match-wildcard>, B<--match-bits> oder B<--match-endian> eingeschränkt (seit Dpkg 1.17.14).

=item B<-?>, B<--help>

Zeigt einen Hinweis zum Aufruf und beendet das Programm.

=item B<--version>

Gibt die Version aus und beendet das Programm.

=back

=head1 OPTIONEN

=over 

=item B<-a>, B<--host-arch> I<Architektur>

Setzt die Debian-Host-Architektur.

=item B<-t>, B<--host-type> I<GNU-Systemtyp>

Setzt den Host-GNU-Systemtyp.

=item B<-A>, B<--target-arch> I<Architektur>

Setzt die Ziel-Debian-Architektur (seit Dpkg 1.17.14).

=item B<-T>, B<--target-type> I<GNU-Systemtyp>

Setzt den Ziel-GNU-Systemtyp (seit Dpkg 1.17.14).

=item B<-W>, B<--match-wildcard> I<Architektur-Platzhalter>

Begrenzt die mit B<--list-known> aufgeführten Architekturen auf solche, die auf den angegebenen Architektur-Platzhalter passen (seit Dpkg 1.17.14).

=item B<-B>, B<--match-bits> I<Architektur-Bits>

Begrenzt die mit B<--list-known> aufgeführten Architekturen auf solche mit den angegebenen CPU-Bits (seit Dpkg 1.17.14). Entweder B<32> oder B<64>.

=item B<-E>, B<--match-endian> I<Architektur-Bytereihenfolge>

Begrenzt die mit B<--list-known> aufgeführten Architekturen auf solche mit der angegebenen Bytereihenfolge (seit Dpkg 1.17.14). Entweder B<little> oder B<big>.

=item B<--print-format> I<Format>

Setzt das Ausgabeformat für B<--print-set> und B<--print-unset> (seit Dpkg 1.20.6), auf entweder B<shell> (Vorgabe) oder B<make>.

=item B<-f>, B<--force>

Existierende Umgebungsvariablen mit dem gleichen Namen wie vom Skript verwendet werden nicht überschrieben (d.h. sie werden von B<dpkg-architecture> verwendet), es sei denn, die „force“-Markierung ist gesetzt. Dies erlaubt es dem Benutzer, einen Wert zu überschreiben, selbst wenn der Aufruf von B<dpkg-architecture> tief in einem anderen Skript versteckt ist (beispielsweise L<dpkg-buildpackage(1)>).

=back

=head1 AUSDRÜCKE

=over 

=item Baumaschine

Die Maschine, auf der das Paket gebaut wird.

=item Host-Maschine

Die Maschine, für die das Paket gebaut ist.

=item Ziel-Maschine

Die Maschine, für die der Compiler baut oder dem Emulator, für den Code ausgeführt wird. Dies wird nur beim Bau einer Cross-Toolchain (oder einem Emulator) und zum Bau von Code für die Ziel-Architektur benötigt. Die Cross-Toolchain wird auf der Bauarchitektur gebaut (oder emuliert ausgeführt) und läuft dann auf der Host-Architektur und baut (oder emuliert) dann selbst Code für die Ziel-Architektur.

=item Debian-Architektur

Die in Binärpaketen verwandte Debian-Architektur-Zeichenkette, die den binären Baum in einem Paket-Depot spezifiziert.

Beispiele: i386, sparc, hurd-i386.

=item Debian-Architekturtupel

Ein Debian-Architekturtupel ist eine vollqualifizierte Architektur mit allen Komponenten ausgeschrieben. Dies unterscheidet sich von der Debian-Architektur zumindest in der Weise, dass das I<ABI> nicht eingebettet ist. Das aktuelle Tupel hat die Form I<ABI>-I<Libc>-I<OS>-I<CPU>.

Beispiele: base-gnu-linux-amd64, eabihf-musl-linux-arm.

=item Debian-Architektur-Platzhalter

Ein Debian-Architektur-Platzhalter ist eine spezielle Architektur-Zeichenkette, die auf jede reale Architektur, die ein Teil davon ist, passt. Die allgemeine Form ist ein Debian-Architektur-Tupel mit vier oder weniger Elementen und bei dem mindestens eines B<any> ist. Fehlende Elemente des Tupels werden implizit als B<any> vorangestellt und daher sind die folgenden Tupel äquivalent:

=over 

=item B<any>-B<any>-B<any>-B<any> = B<any>

=item B<any>-B<any>-I<os>-B<any> = I<os>-B<any>

=item B<any>-I<libc>-B<any>-B<any> = I<libc>-B<any>-B<any>

=back

Beispiele: linux-any, any-i386, hurd-any, eabi-any-any-arm, musl-any-any.

=item GNU-Systemtyp

Eine Architekturspezifikationszeichenkette besteht aus zwei, durch einen Bindestrich getrennten Teilen: CPU und System.

Der CPU-Anteil enthält niemals einen Bindestrich, während der Systemanteil einen Bindestrich enthalten könnte, um einen Kernel von seiner allgemeinen ABI zu trennen, wobei die allgemeine ABI sowohl Laufzeit- (wie Libc) als auch Ausführungs-ABI-Kennzeichner enthalten kann, die ohne Bindestrich aneinandergefügt sind.

Beispiele: i586-linux-gnu, sparc-linux-gnu, i686-gnu, x86_64-netbsd.

=item Multiarch-Tripel

Der bereinigte GNU-Systemtyp; wird für Dateipfade verwandt. Dieses Tripel ändert sich auch nicht, wenn das zugrundeliegende ISA erhöht wird, so dass die daraus resultierenden Pfade dauerhaft stabil bleiben. Derzeit ist der einzige Unterschied zum GNU-Sytemtyp, dass der CPU-Anteil für i386-basierte Systeme immer „i386“ lautet.

Beispiele: i386-linux-gnu, x86_64-linux-gnu. Beispielpfade: /lib/powerpc64le-linux-gnu/, /usr/lib/i386-kfreebsd-gnu/.

=back

=head1 VARIABLEN

Die folgenden Variablen werden von der Umgebung gelesen (außer B<--force> wurde angegeben) und durch B<dpkg-architecture> gesetzt (siehe den Abschnitt B<AUSDRÜCKE> für eine Beschreibung des Benennungsschemas):

=over 

=item B<DEB_BUILD_ARCH>

Die Debian-Architektur der Baumaschine.

B<Hinweis>: Falls Sie kein Werkzeug bauen, das während des Baus ausgeführt werden muss, sind dies wahrscheinlich nicht die Variablen, die Sie suchen. Lesen Sie den Abschnitt L</AUSDRÜCKE> für die Bedeutung dieser Ausdrücke.

=item B<DEB_BUILD_ARCH_ABI>

Der Debian-ABI-Name der Baumaschine. (Seit Dpkg 1.18.11).

=item B<DEB_BUILD_ARCH_LIBC>

Der Debian-Libc-Name der Baumaschine. (Seit Dpkg 1.18.11).

=item B<DEB_BUILD_ARCH_OS>

Der Debian-Systemname der Baumaschine. (Seit Dpkg 1.13.2).

=item B<DEB_BUILD_ARCH_CPU>

Der Debian-CPU-Name der Baumaschine. (Seit Dpkg 1.13.2).

=item B<DEB_BUILD_ARCH_BITS>

Die Zeigergröße der Baumaschine in Bits. (Seit Dpkg 1.15.4).

=item B<DEB_BUILD_ARCH_ENDIAN>

Die Bytereihenfolge der Baumaschine (little/big; seit Dpkg 1.15.4).

=item B<DEB_BUILD_GNU_CPU>

Der GNU-CPU-Teil von B<DEB_BUILD_GNU_TYPE>.

=item B<DEB_BUILD_GNU_SYSTEM>

Der GNU-System-Teil von B<DEB_BUILD_GNU_TYPE>.

=item B<DEB_BUILD_GNU_TYPE>

Der GNU-Systemtyp der Baumaschine.

=item B<DEB_BUILD_MULTIARCH>

Der klargestellte GNU-Systemtyp der Baumaschine, der für Dateisystempfade benutzt wird.

=item B<DEB_HOST_ARCH>

Die Debian-Architektur der Host-Maschine.

=item B<DEB_HOST_ARCH_ABI>

Der Debian-ABI-Name der Host-Maschine. (Seit Dpkg 1.18.11).

=item B<DEB_HOST_ARCH_LIBC>

Der Debian-Libc-Name der Host-Maschine. (Seit Dpkg 1.18.11).

=item B<DEB_HOST_ARCH_OS>

Der Debian-Systemname der Host-Maschine. (Seit Dpkg 1.13.2).

=item B<DEB_HOST_ARCH_CPU>

Der Debian-CPU-Name der Host-Maschine. (Seit Dpkg 1.13.2).

=item B<DEB_HOST_ARCH_BITS>

Die Zeigergröße der Host-Maschine in Bits. (Seit Dpkg 1.15.4).

=item B<DEB_HOST_ARCH_ENDIAN>

Die Bytereihenfolge der Host-Maschine (little/big; seit Dpkg 1.15.4).

=item B<DEB_HOST_GNU_CPU>

Der GNU-CPU-Teil von B<DEB_HOST_GNU_TYPE>.

=item B<DEB_HOST_GNU_SYSTEM>

Der GNU-System-Teil von B<DEB_HOST_GNU_TYPE>.

=item B<DEB_HOST_GNU_TYPE>

Der GNU-Systemtyp der Host-Maschine.

=item B<DEB_HOST_MULTIARCH>

Der klargestellte GNU-Systemtyp der Host-Maschine, wird für Dateisystempfade benutzt. (Seit Dpkg 1.16.0).

=item B<DEB_TARGET_ARCH>

Die Debian-Architektur der Ziel-Maschine (seit Dpkg 1.17.14).

B<Hinweis>: Falls keine keine Cross-Werkzeugketten (oder Emulatoren) bauen, sind dies wahrscheinlich nicht die Variablen, die Sie suchen. Bitte lesen Sie den Abschnitt L</AUSDRÜCKE> für die Bedeutung dieser Ausdrücke.

=item B<DEB_TARGET_ARCH_ABI>

Der Debian-ABI-Name der Ziel-Maschine. (Seit Dpkg 1.18.11).

=item B<DEB_TARGET_ARCH_LIBC>

Der Debian-Libc-Name der Ziel-Maschine. (Seit Dpkg 1.18.11).

=item B<DEB_TARGET_ARCH_OS>

Der Debian-Systemname der Ziel-Maschine. (Seit Dpkg 1.17.14).

=item B<DEB_TARGET_ARCH_CPU>

Der Debian-CPU-Name der Ziel-Maschine. (Seit Dpkg 1.17.14).

=item B<DEB_TARGET_ARCH_BITS>

Die Zeigergröße der Ziel-Maschine in Bits. (Seit Dpkg 1.17.14).

=item B<DEB_TARGET_ARCH_ENDIAN>

Die Bytereihenfolge der Ziel-Maschine (little/big; seit Dpkg 1.17.14).

=item B<DEB_TARGET_GNU_CPU>

Der GNU-CPU-Teil von B<DEB_TARGET_GNU_TYPE>. (Seit Dpkg 1.17.14).

=item B<DEB_TARGET_GNU_SYSTEM>

Der GNU-System-Teil von B<DEB_TARGET_GNU_TYPE>. (Seit Dpkg 1.17.14).

=item B<DEB_TARGET_GNU_TYPE>

Der GNU-Systemtyp der Ziel-Maschine. (Seit Dpkg 1.17.14).

=item B<DEB_TARGET_MULTIARCH>

Der klargestellte GNU-Systemtyp der Ziel-Maschine, wird für Dateisystempfade benutzt. (Seit Dpkg 1.17.14).

=back

=head1 DATEIEN

=head2 Architekturtabellen

Alle diese Dateien müssen vorhanden sein, damit B<dpkg-architecture> funktioniert. Ihr Ort kann zur Laufzeit mit der Umgebungsvariable B<DPKG_DATADIR> überschrieben werden. Diese Tabellen enthalten in der ersten Zeile ein Format-B<Version>s-Pseudofeld, um ihre Version zu kennzeichnen, so dass Auswerteprogramme prüfen können, ob sie es verstehen. Beispiel: „# Version=1.0“.

=over 

=item I<%PKGDATADIR%/cputable>

Tabelle der bekannten CPU-Namen und Abbildungen auf ihre GNU-Namen. Formatversion 1.0 (seit Dpkg 1.13.2).

=item I<%PKGDATADIR%/ostable>

Tabelle der bekannten Betriebssystemnamen und Abbildungen auf ihre GNU-Namen. Formatversion 2.0 (seit Dpkg 1.18.11).

=item I<%PKGDATADIR%/tupletable>

Abbildung zwischen den Debian-Architektur-Tupeln und den Debian-Architekturnamen. Formatversion 1.0 (seit Dpkg 1.18.11).

=item I<%PKGDATADIR%/abitable>

Tabelle von Debian-Architektur-ABI-Attributs-Hinwegsetzung. Formatversion 2.0 (seit Dpkg 1.18.11).

=back

=head2 Paketierungsunterstützung

=over 

=item I<%PKGDATADIR%/architecture.mk>

Make-Steuerdateischnipsel, das alle Variablen, die B<dpkg-architecture> ausgibt, korrekt setzt und exportiert (seit Dpkg 1.16.1).

=back

=head1 BEISPIELE

B<dpkg-buildpackage> akzeptiert die Option B<-a> und gibt diese an B<dpkg-architecture> weiter. Weitere Beispiele:

=over 

 CC=i386-gnu-gcc dpkg-architecture -c debian/rules build

 eval $(dpkg-architecture -u)

=back

Überprüfen, ob die aktuelle oder angegebene Host-Architektur identisch zu einer Architektur ist:

=over 

 dpkg-architecture -elinux-arm64

 dpkg-architecture -ariscv64 -elinux-riscv64

=back

Überprüfen, ob die aktuelle oder angegebene Host-Architektur ein Linux-System ist:

=over 

 dpkg-architecture -ilinux-any

 dpkg-architecture -aamd64 -ilinux-any

=back

=head2 Verwendung in debian/rules

Die Umgebungsvariablen, die von B<dpkg-architecture> gesetzt werden, werden an I<debian/rules> als Make-Variablen weitergegeben (lesen Sie hierzu die Make-Dokumentation). Allerdings sollten Sie sich nicht auf diese verlassen, da damit der manuelle Aufruf des Skripts verhindert wird. Stattdessen sollten Sie sie immer mittels B<dpkg-architecture> mit der Option B<-q> initialisieren. Hier sind einige Beispiele, die auch zeigen, wie Sie die Cross-Kompilierungs-Unterstützung in Ihrem Paket verbessern können:

Ermitteln des GNU-Systemtyps und dessen Weiterleitung an ./configure:

=over 

 DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
 DEB_HOST_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
 […]
 ifeq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
   confflags += --build=$(DEB_HOST_GNU_TYPE)
 else
   confflags += --build=$(DEB_BUILD_GNU_TYPE) \
                --host=$(DEB_HOST_GNU_TYPE)
 endif
 […]
 ./configure $(confflags)

=back

Etwas nur für eine bestimmte Architektur erledigen:

=over 

 DEB_HOST_ARCH ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)

 ifeq ($(DEB_HOST_ARCH),arm64)
   […]
 endif

=back

oder, falls Sie nur den CPU- oder OS-Typ überprüfen müssen, verwenden Sie die Variablen B<DEB_HOST_ARCH_CPU> oder B<DEB_HOST_ARCH_OS>.

Um alle Variablen, die B<dpkg-architecture> bereitstellen kann, korrekt zu setzen, können Sie auch extern ein Make-Steuerdateischnipsel verwenden:

=over 

 include %PKGDATADIR%/architecture.mk

 ifeq ($(DEB_HOST_ARCH),arm64)
   […]
 endif

=back

Auf jeden Fall sollten Sie niemals B<dpkg --print-architecture> verwenden, um die Architekturinformationen während eines Paketbaus zu erhalten.

=head1 UMGEBUNG

=over 

=item B<DPKG_DATADIR>

Falls dies gesetzt ist, wird es als Datenverzeichnis von B<dpkg> verwandt, in dem sich die Architekturtabellen befinden (seit Dpkg 1.14.17). Standardmäßig „%PKGDATADIR%“.

=item B<DPKG_COLORS>

Setzt den Farbmodus (seit Dpkg 1.18.5). Die derzeit unterstützten Werte sind: B<auto> (Vorgabe), B<always> und B<never>.

=item B<DPKG_NLS>

Falls dies gesetzt ist, wird es zur Entscheidung, ob Native Language Support, auch als Unterstützung für Internationalisierung (oder i18n) bekannt, aktiviert wird (seit Dpkg 1.19.0). Die akzeptierten Werte sind: B<0> und B<1> (Vorgabe).

=back

=head1 BEMERKUNGEN

Alle langen Befehle und Optionennamen sind seit Dpkg 1.17.17 verfügbar.

=head1 SIEHE AUCH

L<dpkg-buildpackage(1)>.


=head1 ÜBERSETZUNG

Die deutsche Übersetzung wurde 2004, 2006-2025 von Helge Kreutzmann
<debian@helgefjell.de>, 2007 von Florian Rehnisch <eixman@gmx.de> und
2008 von Sven Joachim <svenjoac@gmx.de>
angefertigt. Diese Übersetzung ist Freie Dokumentation; lesen Sie die
GNU General Public License Version 2 oder neuer für die Kopierbedingungen.
Es gibt KEINE HAFTUNG.
