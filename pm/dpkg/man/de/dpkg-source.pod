
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 BEZEICHNUNG

dpkg-source - Debian Quellpaket- (.dsc) Manipulations-Werkzeuge

=head1 ÜBERSICHT

B<dpkg-source> [I<Option> …] I<Befehl>

=head1 BESCHREIBUNG

B<dpkg-source> packt und entpackt Debian-Quellarchive.

Keiner dieser Befehle erlaubt es, mehrere Optionen zu einer zu kombinieren, und sie erlauben es nicht, den Wert einer Option in einem separaten Argument zu speichern.

=head1 BEFEHLE

=over 

=item B<-x>, B<--extract> I<Dateiname>.dsc [I<Ausgabe-Verzeichnis>]

Entpackt ein Quellpaket (B<--extract> seit Dpkg 1.17.14). Ein nicht-Options-Argument muss angegeben werden, der Name der Debian Quell-Steuer-Datei (B<.dsc>). Optional kann ein zweites nicht-Options-Argument angegeben werden, um das Verzeichnis anzugeben, in das das Quellpaket entpackt werden soll. Dieses Verzeichnis darf dann nicht existieren. Falls kein Ausgabeverzeichnis angegeben ist, wird das Quellpaket in das Verzeichnis namens I<Quelle>-I<Version> unterhalb des aktuellen Arbeitsverzeichnisses entpackt.

B<dpkg-source> wird die Namen der anderen Datei(en) aus der Steuerdatei einlesen, die das Quellpaket ergeben; es wird angenommen, dass diese im gleichen Verzeichnis wie die B<.dsc> liegen.

Die Dateien in dem entpackten Paket werden die Rechte und Eigentümer haben, die erwartet würden, falls die Dateien und Verzeichnisse einfach angelegt worden wären - Verzeichnisse und Programmdateien werden 0777 und einfache Dateien 0666, beide durch die umask der Person, die entpackt, entsprechend angepasst; falls das übergeordnete Verzeichnis setgid ist, werden dies die entpackten Verzeichnisse auch sein, und alle Dateien und Verzeichnisse werden die Gruppeneigentümerschaft erben.

Falls das Quellpaket ein nicht-Standard-Format verwendet (derzeit bedeutet dies alle Formate außer „1.0“)) wird sein Name in B<debian/source/format> gespeichert, so dass alle folgenden Bauversuche des Quellpakets standardmäßig das gleiche Format verwenden.

=item B<-b>, B<--build> I<Verzeichnis> [I<Format-abhängige-Parameter>]

Baut ein Quellpaket (B<--build> seit Dpkg 1.17.14). Das erste nicht-Options-Argument wird als Name des Verzeichnisses verwandt, das den debianisierten (d.h. mit einem Unterverzeichnis „debian“ und ggf. Änderungen an den Originaldateien versehenen) Quellbaum enthält. Abhängig vom dem zum Bau verwandten Quellpaketformat könnten zusätzliche Parameter akzeptiert werden.

B<dpkg-source> wird das Quellpaket mit dem ersten gefundenen Format aus der folgenden geordneten Liste bauen: dem mit der Befehlszeilenoption(en) I<--format> angegebenen Format, dem in B<debian/source/format> angegebenen Format, „1.0“. Die Rückfalloption „1.0“ ist veraltet und wird irgendwann in der Zukunft entfernt werden, Sie sollten das gewünschte Quellformat immer in B<debian/source/format> dokumentieren. Die verschiedenen Quellpaketformate werden im Abschnitt L</QUELLPAKET-FORMATE> ausführlich beschrieben.

=item B<--print-format> I<Verzeichnis>

Gibt das Quellformat aus, dass zum Bau des Quellpakets verwandt würde, falls B<dpkg-source --build> I<Verzeichnis> aufgerufen würde (unter den gleichen Bedingungen und mit den gleichen Parametern, seit Dpkg 1.15.5).

=item B<--before-build> I<Verzeichnis>

Der entsprechende Hook des Quellpaketformats soll ausgeführt werden (seit Dpkg 1.15.8). Dieser Hook wird vor jedem Bau des Pakets aufgerufen (B<dpkg-buildpackage> ruft ihn sehr früh, sogar vor B<debian/rules clean> auf). Dieser Befehl ist idempotent und kann mehrfach aufgerufen werden. Nicht alle Quellformate implementieren in diesem Hook etwas und wenn dies erfolgt, dann gewöhnlich zur Vorbereitung des Quellbaums für den Bau, in dem beispielsweise sichergestellt wird, dass alle Debian-Patches angewandt sind.

=item B<--after-build> I<Verzeichnis>

Der entsprechende Hook des Quellpaketformats soll ausgeführt werden (seit Dpkg 1.15.8). Dieser Hook wird nach jedem Bau des Pakets aufgerufen (B<dpkg-buildpackage> ruft als Letztes auf). Dieser Befehl ist idempotent und kann mehrfach aufgerufen werden. Nicht alle Quellformate implementieren in diesem Hook etwas und wenn dies erfolgt, dann gewöhnlich um rückgängig zu machen, was B<--before-build> durchgeführt hat.

=item B<--commit> [I<Verzeichnis>] …

Zeichnet Änderungen am in I<Verzeichnis> entpackten Quellbaum auf (seit Dpkg 1.16.1). Dieser Befehl kann zusätzliche Parameter akzeptieren, abhängig vom Quellformat. Er wird zu einer Fehlermeldung bei Formaten, für denen dieser Vorgang keine Bedeutung hat, führen.

=item B<-?>, B<--help>

Zeigt die Hinweise zur Benutzung und beendet das Programm. Die formatspezifischen Bau- und Entpackoptionen können mit der Option B<--format> angezeigt werden.

=item B<--version>

Gibt die Version aus und beendet das Programm.

=back

=head1 OPTIONEN

=head2 Generische Bau-Optionen

=over 

=item B<-c>I<Steuerdatei>

Bestimmt die Hauptquell-B<control>-Datei, aus der Informationen ausgelesen werden sollen. Der Standardwert ist B<debian/control>. Falls der Pfadname relativ ist, wird dieser relativ zum obersten Verzeichnis des Quellbaums interpretiert.

=item B<-l>I<Changelog-Datei>

Bestimmt die Changelog-Datei, aus der Informationen ausgelesen werden sollen. Der Standardwert ist B<debian/changelog>. Falls der Pfadname relativ ist, wird dieser relativ zum obersten Verzeichnis des Quellbaums interpretiert.

=item B<-F>I<Changelog-Format>

Spezifiziert das Format des Changelogs. Lesen Sie L<dpkg-parsechangelog(1)> für Informationen über alternative Formate.

=item B<--format=>I<Wert>

Verwendet das angegebene Format zum Bau des Quellpakets (seit Dpkg 1.14.17). Es überschreibt jedes in B<debian/source/format> angegebene Format.

=item B<-V>I<Name>B<=>I<Wert>

Setzt eine Ausgabeersetzungsvariable. Lesen Sie L<deb-substvars(5)> für eine Besprechung der Ausgabeersetzung.

=item B<-T>I<Substvars-Datei>

Liest Ersetzungsvariablen aus I<Substvars-Datei>; standardmäßig wird keine Datei gelesen. Diese Option kann mehrfach verwandt werden, um Ersetzungsvariablen aus mehreren Dateien einzulesen (seit Dpkg 1.15.6).

=item B<-D>I<Feld>B<=>I<Wert>

Überschreibt oder ergänzt ein Ausgabesteuerdateifeld.

=item B<-U>I<field>

Entfernt ein Ausgabesteuerdateifeld.

=item B<-Z>I<Komprimierung>, B<--compression>=I<Komprimierung>

Gibt die Komprimierung an, die für die angelegten Tarbälle und Diff-Dateien verwendet wird (B<--compression> seit Dpkg 1.15.5). Beachten Sie, dass diese Option nicht dazu führt, dass existierende Tarbälle rekomprimiert werden, sie betrifft nur neue Dateien. Unterstützte Werte sind I<gzip>, I<bzip2>, I<lzma> und I<xz>. I<xz> ist für Format 2.0 und neuer, I<gzip> für Format 1.0 voreingestellt. I<xz> wird erst seit Dpkg 1.15.5 unterstützt.

=item B<-z>I<Stufe>, B<--compression-level>=I<Stufe>

Zu verwendende Komprimierstufe (B<--compression-level> seit Dpkg 1.15.5). Wie bei B<-Z> betrifft dies nur neu angelegte Dateien. Unterstützte Werte sind I<1> bis I<9>, I<best> (am besten) und I<fast> (schnell). Der Standardwert ist I<9> für Gzip und Bzip2, I<6> für Xz und Lzma.

=item B<-i>[I<regex>], B<--diff-ignore>[=I<regex>]

Sie können einen regulären Perl-Ausdruck angeben, der auf Dateien passt, die Sie aus der Liste der Dateien für den Diff entfernen möchten ((B<--diff-ignore> seit Dpkg 1.15.6); diese Liste wird von einem Find-Befehl generiert. Falls das Quellpaket als Version 3-Quellpaket mittels eines VCS gebaut wird, ignoriert dies stattdessen Änderungen an bestimmten Dateien, die noch nicht übertragen („committed“) wurden (mit -i.* werden alle davon ignoriert).

Die Option B<-i> selbst aktiviert diese Einstellung mit einem voreingestellten regulären Ausdruck (der alle Änderungen durch einen standardmäßigen regulären Ausdruck erhält, die durch einen früheren Aufruf von B<--extend-diff-ignore> erfolgten), der Steuerdateien und -Verzeichnisse der häufigsten Revisionskontrollsysteme, Sicherungskopien, Swap-Dateien und Bau-Ausgabeverzeichnisse von Libtool herausgefiltert. Es kann nur einen aktiven regulären Ausdruck geben, von mehrfach angegebenen Optionen B<-i> wird nur die letzte berücksichtigt.

Dies ist sehr hilfreich, um irrelevante Dateien, die im Diff aufgenommen werden, zu entfernen. Falls Sie zum Beispiel Ihre Quellen in einem Revisionskontrollsystem speichern und „Checkout“ verwenden möchten, um Ihr Quellpaket zu bauen, ohne die zusätzlichen Dateien und Verzeichnisse, die darin typischerweise enthalten sind (z.B. CVS/, .cvsignore, .svn/), mit aufzunehmen. Der voreingestellte reguläre Ausdruck ist bereits sehr erschöpfend, aber falls Sie ihn ersetzen müssen, beachten Sie, dass er standardmäßig auf alle Teile des Pfades passen kann. Falls Sie daher nur den Anfang eines Pfades oder komplette Dateinamen vergleichen wollen, müssen Sie die notwendigen Anker (z.B. ‚(^|/)’, ‚($|/)’) selbst bereitstellen.

=item B<--extend-diff-ignore>=I<regex>

Der angegebene reguläre Ausdruck (Perl-Format) wird den standardmäßigen von B<--diff-ignore> verwandten Wert und dessen aktuellen Wert, falls gesetzt, erweitern (seit Dpkg 1.15.6). Dies erfolgt, indem „B<|>I<regex>“ an den existierenden Wert angehängt wird. Diese Option ist bequem in B<debian/source/options> zu nutzen, um einige automatisch erstellte Dateien von der automatischen Patch-Erzeugung auszuschließen.

=item B<-I>[I<Dateimuster>], B<--tar-ignore>[=I<Dateimuster>]

Falls diese Option angegeben wird, wird der Dateiname an die Option B<--exclude> von L<tar(1)> weitergegeben, wenn es zur Erstellung der Datei .orig.tar oder .tar aufgerufen wird (B<--tar-ignore> seit Dpkg 1.15.6). Zum Beispiel führt B<-I>CVS dazu, dass Tar CVS-Verzeichnisse überspringt, wenn es eine .tar-Datei erstellt. Diese Option kann mehrfach wiederholt werden, um mehrere Muster aufzuführen, die ausgeschlossen werden sollen.

B<-I> fügt standardmäßig von selbst B<--exclude>-Optionen hinzu, die die Steuerdateien und -verzeichnisse der häufigsten Revisionskontrollsysteme, Sicherungs- und Swap-Dateien sowie Bau-Ausgabeverzeichnisse von Libtool herausfiltern.

=back

B<Hinweis>: Obwohl sie ähnlichen Zwecken dienen, haben B<-i> und B<-I> eine sehr verschiedene Syntax und Semantik. B<-i> kann nur einmal angegeben werden und nimmt einen regulären Perl-Ausdruck an, der gegen den vollen relativen Pfad jeder Datei geprüft wird. B<-I> kann mehrfach angegeben werden und nimmt ein Dateinamen-Muster mit Shell-Platzhalter an. Das Muster wird gegen den vollen relativen Pfad, aber auch individuell auf jeden Teil des Pfades angewendet. Die exakte Semantik der Option B<--exclude> ist etwas kompliziert, lesen Sie L<https://www.gnu.org/software/tar/manual/tar.html#wildcards> für eine komplette Dokumentation.

Der voreingestellte reguläre Ausdruck und Muster für beide Optionen können in der Ausgabe des Befehls B<--help> gesehen werden.

=head2 Generische Entpackoptionen

=over 

=item B<--no-copy>

Kopiert die Original-Tarbälle nicht in die Nähe des entpackten Quellpakets (seit 1.14.17).

=item B<--no-check>

Prüft Signaturen und Prüfsummen vor dem Entpacken nicht (seit Dpkg 1.14.17).

=item B<--no-overwrite-dir>

Das Entpackverzeichnis nicht überschreiben, falls es bereits existiert (seit Dpkg 1.18.8).

=item B<--require-valid-signature>

Lehnt das Entpacken des Quellpakets ab, falls es keine OpenPGP-Signatur enthält, die entweder mit dem I<trustedkeys.gpg>-Schlüsselbund des Benutzers, mit einem der Schlüsselbunde des Lieferanten oder mit einem der offiziellen Debian-Schüsselbunde (I</usr/share/keyrings/debian-keyring.gpg>, I</usr/share/keyrings/debian-nonupload.gpg> und I</usr/share/keyrings/debian-maintainers.gpg>) überprüft werden kann (seit Dpkg 1.15.0).

=item B<--require-strong-checksums>

Lehnt das Entpacken des Quellpakets ab, falls es keine starken Prüfsummen enthält (seit Dpkg 1.18.7). Derzeit wird nur die Prüfsumme B<SHA-256> als stark betrachtet.

=item B<--ignore-bad-version>

Wandelt die Prüfung auf eine defekte Quellpaketversion in eine nicht-fatale Warnung (seit Dpkg 1.17.7). Diese Option sollte nur notwendig sein, wenn ein historisches Quellpaket mit defekten Versionen entpackt wird, lediglich zur Rückwärtskompatibilität.

=back

=head2 Generische allgemeine Optionen

=over 

=item B<--threads-max=>I<Threads>

Setzt die maximale Anzahl an Threads, die für Komprimierer erlaubt sind, die multi-threaded Aktionen erlauben (seit Dpkg 1.21.14).

=item B<-q>

Setzt den stillen Modus, um Warnungen zu unterdürcken.

=back

=head1 QUELLPAKET-FORMATE

Falls Sie nicht wissen, welches Quellformat Sie verwenden sollen, verwenden Sie wahrscheinlich am besten entweder „3.0 (quilt)“ oder „3.0 (native)“. Lesen Sie L<https://wiki.debian.org/Projects/DebSrc3.0> für Informationen über den Einsatz dieser Formate innerhalb von Debian.

=head2 Format: 1.0

Ein Quellpaket in diesem Format besteht entweder aus einem B<.orig.tar.gz> mit zugehörigem B<.diff.gz> oder einem einzelnen B<.tar.gz> (in diesem Fall wird das Paket als I<nativ> bezeichnet). Optional kann der ursprüngliche Tarball von einer separaten Signatur der Originalautoren B<.orig.tar.gz.asc> begleitet werden. Das Entpacken wird seit Dpkg 1.18.5 unterstützt.

B<Entpacken>

Entpacken eines nativen Pakets ist ein einfaches Entpacken eines einzelnen Tarballs in das Zielverzeichnis. Entpacken eines nicht-nativen Pakets erfolgt zuerst durch Entpacken des B<.orig.tar.gz> und dann durch Anwendung des Patches aus der B<.diff.gz>-Datei. Der Zeitstempel aller gepatchten Dateien wird auf den Zeitpunkt des Entpackens des Quellpakets zurückgesetzt (das vermeidet Zeitstempelversätze, die zu Problemen führen, wenn autogenerierte Dateien gepatcht werden). Der Diff kann neue Dateien anlegen (das gesamte Debian-Verzeichnis wird auf diese Weise erstellt), kann aber keine Dateien entfernen (leere Dateien bleiben zurück) und keine Symlinks erstellen oder ändern.

B<Bauen>

Bauen eines nativen Pakets besteht nur aus dem Erstellen eines einzigen Tarballs mit dem Quellverzeichnis. Bauen eines nicht-nativen Pakets schließt das Entpacken des Original-Tarballs in ein separates Verzeichnis „.orig“ und die Neuerstellung des B<.diff.gz> durch Vergleich des Quellpaket-I<Verzeichnisses> mit dem Verzeichnis .orig ein.

B<Bau-Optionen (mit --build):>

Falls ein zweites nicht-Options-Argument angegeben ist, sollte es der Name des Originalquellverzeichnisses oder der Tar-Datei sein. Falls das Paket Debian-spezifisch ist, dann sollte dieses Argument die leere Zeichenkette sein, da es keinen Debianisierungs-Diff gibt. Falls kein zweites Argument übergeben wird, dann schaut B<dpkg-source> nach der ursprünglichen Tar-Datei I<Paket>B<_>I<Upstream-Version>B<.orig.tar.>I<Erweiterung> oder dem ursprünglichen Quellverzeichnis I<Verzeichnis>B<.orig>, abhängig von den B<-sX>-Argumenten.

B<-sa>, B<-sp>, B<-sk>, B<-su> und B<-sr> werden keine existierenden Tar-Dateien oder Verzeichnisse überschreiben. Falls dies gewünscht ist, sollten stattdessen B<-sA>, B<-sP>, B<-sK>, B<-sU> und B<-sR> verwendet werden.

=over 

=item B<-sk>

Gibt an, dass die Originalquellen als Tar-Datei erwartet werden sollen, standardmäßig I<Paket>B<_>I<Ursprungsversion>B<.orig.tar>I<Erweiterung>. Es wird diese Originalquellen als Tar-Datei am Platz belassen, oder sie in das aktuelle Verzeichnis kopieren, falls sie dort noch nicht sind. Der Tarball wird nach I<Verzeichnis>B<.orig> für die Erstellung des Diffs entpackt.

=item B<-sp>

Wie B<-sk>, aber das Verzeichnis wird danach entfernt.

=item B<-su>

Gibt an, dass die Originalquellen als Verzeichnis erwartet werden, standardmäßig I<Paket>B<->I<Ursprungsversion>B<.orig>. B<dpkg-source> wird daraus ein neues Original-Quellarchiv erstellen.

=item B<-sr>

Wie B<-su>, aber das Verzeichnis wird nach der Verwendung entfernt.

=item B<-ss>

Gibt an, dass die Originalquellen sowohl als Verzeichnis als auch als Tar-Datei verfügbar sind. B<dpkg-source> wird das Verzeichnis zur Erstellung des Diffs verwenden, aber die Tar-Datei für die B<.dsc>. Diese Option muss mit Vorsicht verwendet werden - falls das Verzeichnis und die Tar-Datei nicht zusammen passen, wird ein fehlerhaftes Quellarchiv erstellt.

=item B<-sn>

Gibt an, dass nicht nach Originalquellen geschaut und kein Diff erstellt werden soll. Das zweite Argument, falls angegeben, muss die leere Zeichenkette sein. Dies wird für Debian-spezifische Pakete verwendet, die keine Quellen von Originalautoren und somit keinen Debianisierungs-Diff haben.

=item B<-sa> oder B<-sA>

Gibt an, dass nach dem Original-Quellarchiv als Tar-Datei oder als Verzeichnis gesucht werden soll - das zweite Argument, falls vorhanden, kann eines von beiden sein, oder die leere Zeichenkette (dies ist äquivalent zur Verwendung von B<-sn>). Falls eine Tar-Datei gefunden wird, wird diese zur Erstellung eines Diffs entpackt und danach entfernt (dies ist äquivalent zu B<-sp>); falls ein Verzeichnis gefunden wird, wird dieses gepackt, um die Originalquellen zu erstellen und danach entfernt (dies ist äquivalent zu B<-sr>); falls keines von beiden gefunden wird, wird angenommen, dass das Paket keinen Debianisierungs-Diff hat, sondern nur ein direktes Quellarchiv ist (dies ist äquivalent zu B<-sn>). Falls sowohl ein Verzeichnis als auch eine Tar-Datei gefunden werden, dann ignoriert B<dpkg-source> das Verzeichnis, und überschreibt es, falls B<-sA> angegeben wurde (dies ist äquivalent zu B<-sP>) oder löst einen Fehler aus, falls B<-sa> angegeben wurde. B<-sa> ist die Voreinstellung.

=item B<--abort-on-upstream-changes>

Der Prozess schlägt fehl, falls der erstellte Diff Änderungen an Dateien außerhalb des Unterverzeichnisses „debian“ enthält (seit Dpkg 1.15.8). Diese Option ist in B<debian/source/options> nicht erlaubt, kann aber in B<debian/source/local-options> verwandt werden.

=back

B<Entpackoptionen (mit --extract):>

In allen Fällen werden die Originalquellbäume entfernt.

=over 

=item B<-sp>

Wird beim Entpacken verwandt. Die Originalquellen (falls vorhanden) werden als Tar-Datei belassen. Falls diese sich nicht im aktuellen Verzeichnis befinden oder falls eine existierende, aber davon verschiedene Datei bereits vorhanden ist, wird sie dort hin kopiert. (B<Dies ist die Voreinstellung.>)

=item B<-su>

Entpackt den Originalquellbaum.

=item B<-sn>

Stellt sicher, dass die Originalquellen weder in das aktuelle Verzeichnis kopiert noch entpackt werden. Jeder Originalquellbaum, der im aktuellen Verzeichnis war, wird dennoch entfernt.

=back

Alle B<-s>I<X>-Optionen schließen sich gegenseitig aus. Falls Sie mehr als eine angeben, wird nur die letzte verwendet.

=over 

=item B<--skip-debianization>

Überspringt die Anwendung des Debian-Diffs über die Quellen der Originalautoren (seit Dpkg 1.15.1).

=back

=head2 Format: 2.0

Seit Dpkg 1.13.9 Unterstützung des Entpackens, seit Dpkg 1.14.8 Unterstützung des Bauens. Auch als „wig&pen“ bekannt. Dieses Format wird nicht für den breiten Einsatz empfohlen, es wird durch das Format „3.0 (quilt)“ ersetzt. Wig&pen war die erste Spezifikation eines Paketformats der nächsten Generation.

Das Verhalten dieses Formats ist identisch zum Format „3.0 (quilt)“, abgesehen davon, dass es keine explizite Liste von Patches verwendet. Alle Dateien in B<debian/patches/>, die auf den regulären Perl-Ausdruck B<[\w-]+> passen, müssen gültige Patches sein: sie werden zum Zeitpunkt des Entpackens angewandt.

Wenn ein neues Quellpaket gebaut wird, werden alle Änderungen an den Quellen der Originalautoren in einem Patch mit Namen B<zz_debian-diff-auto> gespeichert.

=head2 Format: 3.0 (native)

Seit Dpkg 1.14.17 unterstützt. Dieses Format ist eine Erweiterung des nativen Paketformats, wie es im 1.0-Format definiert ist. Es unterstützt alle Kompressionsmethoden und ignoriert standardmäßig alle VCS-spezifischen Dateien und Verzeichnisse sowie viele temporäre Dateien (lesen Sie den Standardwert der Option B<-I> bei der Ausgabe von B<--help>).

=head2 Format: 3.0 (quilt)

Seit Dpkg 1.14.17 unterstützt. Ein Quellpaket in diesem Format enthält mindestens einen Original-Tarball (B<.orig.tar.>I<Erw>, wobei I<Erw> B<gz>, B<bz2>, B<lzma> und B<xz> sein kann) und einen Debian-Tarball (B<.debian.tar.>I<Erw>). Es kann auch zusätzliche Original-Tarbälle (B<.orig->I<Komponente>B<.tar.>I<Erw>) enthalten. I<Komponente> kann nur alphanumerische Zeichen (‚a-zA-Z0-9’) und Bindestriche (‚-’) enthalten. Optional kann jeder Original-Tarball von einer separaten Signatur der Originalautoren (B<.orig.tar.>I<Erw>B<.asc> und B<.orig->I<Komponente>B<.tar.>I<Erw>B<.asc>) begleitet werden. Das Entpacken wird seit Dpkg 1.17.20, das Bauen seit Dpkg 1.18.5 unterstützt.

B<Entpacken>

Der Haupt-Originaltarball wird zuerst entpackt, dann werden alle zusätzlichen Originaltarbälle in Unterverzeichnisse entpackt, die nach dem I<Komponente>n-Teil ihres Dateinamens benannt werden (jedes bereits existierende Verzeichnis wird ersetzt). Der Debian-Tarball wird über das Quellverzeichnis entpackt, nachdem jedes bereits existierende B<debian>-Verzeichnis entfernt wurde. Beachten Sie, dass der Debian-Tarball ein B<debian>-Unterverzeichnis enthalten muss, er aber auch Binärdateien außerhalb dieses Verzeichnisses enthalten darf (sehen Sie hierzu die Option B<--include-binaries>).

Dann werden alle in B<debian/patches/>I<Lieferant>B<.series> oder B<debian/patches/series> aufgeführten Patches angewandt, wobei I<Lieferant> der Name des aktuellen Lieferanten in Kleinbuchstaben ist oder B<debian>, falls kein Lieferant definiert ist. Falls die erstere Datei verwandt wird und die Letztere nicht existiert (oder ein Symlink ist), dann wird die Letztere durch einen Symlink zu Ersterer ersetzt. Dies ist zur Vereinfachung der Verwendung von B<quilt> gedacht, um die Gruppe von Patches zu verwalten. Lieferantenspezifische Seriendateien sind dazu gedacht, es zu ermöglichen, mehrere Entwicklungszweige basierend auf dem Lieferanten auf eine deklarative Art zu serialisieren, und diese gegenüber der offenen Codierung dieser Handhabung in B<debian/rules> zu bevorzugen. Dies ist insbesondere nützlich, wenn die Quellen mit Bedingungen gepacht werden müssten, da die betroffenen Dateien keine eingebaute abhängige Okklusionsunterstützung haben. Beachten Sie allerdings, dass B<dpkg-source> zwar Seriendateien auswertet, in denen explizite Optionen für die Anwendung der Patches verwandt werden (diese werden auf jede Zeile nach dem Patch-Dateinamen und einem oder mehreren Leerzeichen gespeichert), diese Optionen dann aber ignoriert und immer erwartet, dass die Patches mit der Option B<-p1> von B<patch> angewandt werden können. Es wird daher eine Warnung ausgegeben, wenn es auf solche Optionen trifft, und der Bau wird wahrscheinlich fehlschlagen.

Beachten Sie, dass L<lintian(1)> aufgrund Debian-spezifischer Regularien bedingungslos Warnungen ausgeben wird, wenn Lieferantenserien verwandt werden. Dies sollte die Verwendung außerhalb von Debian nicht betreffen. Um diese Warnungen auszublenden, kann das Dpkg-Lintian-Profil mittels Übergabe von „B<--profile dpkg>“ an L<lintian(1)> verwandt werden.

Der Zeitstempel aller gepatchten Dateien wird auf die Entpackzeit des Quellpakets zurückgesetzt. Damit werden Zeitstempelversätze vermieden, die zu Problemen führen, wenn automatisch erzeugte Dateien gepatcht werden.

Im Gegensatz zum Standardverhalten bei B<quilt> wird erwartet, dass die Patches ohne Unschärfe angewandt werden können. Wenn das nicht der Fall ist, sollten Sie die Patches mit B<quilt> erneuern oder B<dpkg-source> wird mit einer Fehlermeldung beim Versuch, sie anzuwenden, abbrechen.

Ähnlich wie bei B<quilt> können Patches auch Dateien entfernen.

Die Datei B<.pc/applied-patches> wird angelegt, falls einige Patches während des Entpackens angewandt wurden.

B<Bauen>

Alle im aktuellen Verzeichnis gefundenen Original-Tarbälle werden in ein temporäres Verzeichnis entpackt. Hierbei wird die gleiche Logik wie für das Entpacken verwandt, das debian-Verzeichnis wird in das temporäre Verzeichnis kopiert und alle Patches außer dem automatischen Patch (B<debian-changes->I<Version> oder B<debian-changes>, abhängig von B<--single-debian-patch>) werden angewandt. Das temporäre Verzeichnis wird mit dem Quellpaketverzeichnis verglichen. Wenn der Diff nicht leer ist, schlägt der Bau fehl, falls nicht B<--single-debian-patch> oder B<--auto-commit> verwandt wurde; in diesem Fall wird der Diff im automatischen Patch gespeichert. Falls der automatische Patch erzeugt/gelöscht wird, wird er zu der Datei „series“ und den B<quilt>-Metadaten hinzugefügt bzw. aus diesen gelöscht.

Änderungen an Binärdateien können in einem Diff nicht dargestellt werden und führen daher zu einem Fehlschlag, es sei denn, der Betreuer hat sich absichtlich dazu entschlossen, die veränderte Binärdatei dem Debian-Tarball hinzuzufügen (indem er sie in B<debian/source/include-binaries> aufgeführt hat). Der Bau wird auch fehlschlagen, falls er Binärdateien im „debian“-Unterverzeichnis findet, die nicht über B<debian/source/include-binaries> freigegeben wurden.

Das aktualisierte debian-Verzeichnis und die Liste der veränderten Programme wird dann zur Erstellung des Debian-Tarballs verwandt.

Der automatisch erstellte Diff enthält keine Änderungen an VCS-spezifischen sowie vielen temporären Dateien (lesen Sie hierzu den zur Option B<-i> zugeordneten Standardwert in der Ausgabe von B<--help>). Insbesondere wird das von B<quilt> verwandte B<.pc>-Verzeichnis während der Erstellung des automatischen Patches ignoriert.

B<Hinweis>: B<dpkg-source> B<--before-build> (und B<--build>) stellen sicher, dass alle in der Series-Datei aufgeführten Patches angewendet sind, so dass ein Paketbau immer mit allen angewandten Patches durchgeführt wird. Dies erfolgt, indem nicht angewandte Patches ermittelt werden (sie sind in der Datei B<series>, aber nicht in der Datei B<.pc/applied-patches> aufgeführt) und wenn der erste Patch in dem Satz ohne Fehler angewandt werden kann, werden sie alle angewandt. Die Option B<--no-preparation> kann zum Abschalten dieses Verhaltens verwandt werden.

B<Änderungen aufzeichnen>

=over 

=item B<--commit> [I<Verzeichnis>] [I<Patch-Name>] [I<Patch-Datei>]

Erstellt einen Patch, der den lokalen Änderungen entspricht, die nicht vom B<quilt>-Patch-System verwaltet werden und integriert ihn unter dem Namen I<Patch-Name> in das Patch-System. Falls der Name fehlt, wird er interaktiv erfragt. Falls I<Patch-Datei> angegeben ist, wird er als Patch, der zu den lokalen Änderungen, die integriert werden sollen, gehört, verwandt. Sobald der Patch integriert wurde, wird ein Editor (der erste aus B<sensible-editor>, C<$VISUAL>, C<$EDITOR>, B<vi>) gestartet, so dass Sie die Metainformationen in den Kopfzeilen des Patches einfügen können.

Die Verwendung von I<patch-Datei> ist primär nach einem Baufehler nützlich, der diese Datei vorgenerierte und daher wird die übergebene Datei nach der Integration entfernt. Beachten Sie auch, dass die Änderungen, die in der Patch-Datei angegeben sind, bereits im Baum angewandt worden sein müssen und dass die Dateien, die von diesem Patch geändert werden, keine zusätzlichen, nicht aufgezeichneten Änderungen enthalten dürfen.

Falls die Patch-Erzeugung veränderte Binärdateien erkennt, werden diese automatisch zu B<debian/source/include-binaries> hinzugefügt, so dass sie im Debian-Tarball landen (genau wie dies B<dpkg-source --include-binaries --build> machen würde).

=back

B<Bau-Optionen>

=over 

=item B<--allow-version-of-quilt-db=>I<Version>

Erlaubt es B<dpkg-source>, ein Quellpaket zu bauen, falls die Version der B<quilt>-Metadaten die angegebene ist, selbst falls B<dpkg-source> nichts davon weiß (seit Dpkg 1.15.5.4). Effektiv teilt dies mit, dass die angegebene Version der B<quilt>-Metadaten zu Version 2, die B<dpkg-source> derzeit unterstützt, kompatibel ist. Die Version der B<quilt>-Metadaten wird in B<.pc/.version> gespeichert.

=item B<--include-removal>

Ignoriert entfernte Dateien nicht und fügt sie zu dem automatisch generierten Patch hinzu.

=item B<--include-timestamp>

Fügt Zeitstempel zu dem automatisch generierten Patch hinzu.

=item B<--include-binaries>

Fügt alle veränderten Programme zu dem debian-Tarball hinzu. Fügt sie auch in B<debian/source/include-binaries> hinzu: sie werden in folgenden Bauten standardmäßig hinzugefügt und diese Option wird daher dann nicht mehr benötigt.

=item B<--no-preparation>

Versucht nicht, den Bau-Baum durch Anwenden aller derzeit nicht angewandten Patches vorzubereiten (seit Dpkg 1.14.18).

=item B<--single-debian-patch>

Verwendet B<debian/patches/debian-changes> statt B<debian/patches/debian-changes->I<Version> als Namen für den während des Baus automatisch generierten Patch (seit Dpkg 1.15.5.4). Diese Option ist insbesondere nützlich, wenn das Paket in einem VCS betreut wird und ein Patch-Satz nicht zuverlässig erstellt werden kann. Stattdessen sollte der aktuelle Diff zu den Quellen der Originalautoren in einem einzelnen Patch gespeichert werden. Diese Option sollte in B<debian/source/local-options> eingestellt werden und würde dann von einer Datei B<debian/source/local-patch-header> begleitet, in der erklärt wird, wie die Debian-Änderungen am besten begutachtet werden können, beispielsweise im eingesetzten VCS.

=item B<--create-empty-orig>

Erstellt den Hauptoriginal-Tarball automatisch als leer, falls er fehlt und falls es ergänzende Original-Tarbälle gibt (seit Dpkg 1.15.6). Diese Option ist dafür gedacht, wenn das Quellpaket nur eine Sammlung von mehreren Stücken Software der Originalautoren ist und es keine „Haupt“-Software gibt.

=item B<--no-unapply-patches, --unapply-patches>

Standardmäßig wird B<dpkg-source> die Patches im B<--after-build>-Hook entfernen, falls es sie in B<--before-build> angewandt hat (B<--unapply-patches> seit Dpkg 1.15.8, B<--no-unapply-patches> seit Dpkg 1.16.5). Diese Optionen erlauben es Ihnen, den Patch-Anwendungs- oder -Entfernungs-Prozess zwangsweise zu aktivieren bzw. zu deaktivieren. Diese Optionen sind nur in B<debian/source/local-options> erlaubt, so dass alle erstellten Quellpakete standardmäßig das gleiche Verhalten zeigen.

=item B<--abort-on-upstream-changes>

Dieser Prozess schlägt fehl, falls ein automatischer Patch erstellt wurde (seit Dpkg 1.15.8). Diese Option kann dazu verwandt werden, sicherzustellen, dass alle Änderungen korrekt in separaten B<quilt>-Patches aufgezeichnet wurden, bevor das Paket gebaut wurde. Diese Option ist in B<debian/source/options> nicht erlaubt, kann aber in B<debian/source/local-options> verwandt werden.

=item B<--auto-commit>

Der Vorgang schlägt nicht fehl, falls ein automatischer Patch erstellt wurde, stattdessen wird dieser sofort in die B<quilt>-Serie aufgenommen.

=back

B<Entpackoptionen>

=over 

=item B<--skip-debianization>

Überspringt das Entpacken des Debian-Tarballs über die Quellen der Originalautoren (seit Dpkg 1.15.1).

=item B<--skip-patches>

Wendet am Ende des Entpackens keine Patches an (seit Dpkg 1.14.18).

=back

=head2 Format: 3.0 (custom)

Seit Dpkg 1.14.17 unterstützt. Dieses Format ist besonders. Es stellt kein echtes Quellpaket dar, kann aber zur Erstellung eines Quellpakets mit beliebigen Dateien verwandt werden.

B<Bau-Optionen>

Alle Argumente, die keine Optionen sind, werden als Dateien verstanden, die in das generierte Quellpaket integriert werden sollen. Sie müssen existieren und sich bevorzugt im aktuellen Verzeichnis befinden. Mindestens eine Datei muss angegeben werden.

=over 

=item B<--target-format=>I<Wert>

B<Notwendig>. Definiert das echte Format des generierten Quellpakets. Die generierte .dsc-Datei wird diesen Wert und nicht „3.0 (custom)“ in ihrem B<Format>-Feld enthalten.

=back

=head2 Format: 3.0 (git)

Seit Dpkg 1.14.17 unterstützt. Dieses Format ist experimentell.

Ein Quellpaket in diesem Format besteht aus einem einzelnen Bündel eines Git-Depots B<.git>, um die Quellen des Pakets zu verwahren. Es kann auch eine Datei B<.gitshallow> geben, die die Revisionen für einen flachen Git-Clone aufführt.

B<Entpacken>

Das Bündel wird als Git-Depot in das Zielverzeichnis geklont. Falls es eine gitshallow-Datei gibt, wird diese als I<.git/shallow> innerhalb des geklonten Git-Depots installiert.

Beachten Sie, dass standardmäßig im neuen Depot der gleiche Zweig ausgecheckt ist, der auch in der ursprünglichen Quelle ausgecheckt war (typischerweise „main“, es könnte aber auch was beliebig anderes sein). Alle anderen Zweige sind unter I<remotes/origin/> verfügbar.

B<Bauen>

Bevor fortgefahren wird, werden einige Überprüfungen ausgeführt, um sicherzustellen, dass keine nicht-ignorierten, nicht-übertragenen („uncommitted“) Änderungen vorliegen.

L<git-bundle(1)> wird zur Erstellung des Bündels des Git-Depots verwandt. Standardmäßig werden alle Zweige und Markierungen im Depot im Bündel einbezogen.

B<Bau-Optionen>

=over 

=item B<--git-ref=>I<Referenz>

Erlaubt die Angabe einer Git-Referenz zur Aufnahme in dem Git-Bündel. Die Verwendung deaktiviert das standardmäßige Verhalten, alle Zweige und Markierungen aufzunehmen. Kann mehrfach angegeben werden. I<Referenz> kann der Name eines Zweiges oder einer Markierung, der/die aufgenommen werden soll, sein. Es kann auch ein Parameter sein, der an L<git-rev-list(1)> übergeben werden kann. Verwenden Sie beispielsweise B<--git-ref=>main, um nur den Main-Zweig aufzunehmen. Um alle Markierungen und Zweige außer dem Zweig „private“ aufzunehmen, verwenden Sie B<--git-ref=>--all B<--git-ref=>^private.

=item B<--git-depth=>I<Zahl>

Erstellt einen flachen Klon mit einem Verlauf, der bei der angegebenen Anzahl an Revisionen abgeschnitten wird.

=back

=head2 Format: 3.0 (bzr)

Seit Dpkg 1.14.17 unterstützt. Dieses Format ist experimentell. Es erstellt einen einzigen Tarball, der das Bzr-Depot enthält.

B<Entpacken>

Der Tarball wird entpackt und dann wird Bzr verwandt, um den aktuellen Zweig auszuchecken.

B<Bauen>

Bevor fortgefahren wird, werden einige Überprüfungen ausgeführt, um sicherzustellen, dass keine nicht-ignorierten, nicht-übertragenen („uncommitted“) Änderungen vorliegen.

Dann wird der VCS-spezifische Teil des Quellpakets in ein temporäres Verzeichnis kopiert. Bevor dieses temporäre Verzeichnis in einen Tarball gepackt wird, werden verschiedene Bereinigungen durchgeführt, um Platz zu sparen.

=head1 DIAGNOSE

=head2 kein Quellformat in debian/source/format angegeben

Die Datei B<debian/source/format> sollte immer existieren und das gewünschte Quellformat angeben. Für Rückwärtskompatibilität wird das Format „1.0“ angenommen, wenn die Datei nicht existiert, aber Sie sollten sich nicht darauf verlassen: Irgendwann in der Zukunft wird B<dpkg-source> verändert und dann fehlschlagen, wenn diese Datei nicht existiert.

Die Begründung liegt darin, dass „1.0“ nicht mehr das empfohlene Format ist, Sie sollten normalerweise eines der neueren Formate („3.0 (quilt)“, „3.0 (native)“) auswählen, aber B<dpkg-source> wird dies nicht für Sie automatisch vornehmen. Falls Sie weiterhin das alte Format verwenden möchten, sollten Sie dies explizit angeben und „1.0“ in B<debian/source/format> eintragen.

=head2 der Diff verändert die folgenden Dateien der Originalautoren

Beim Einsatz des Quellformats „1.0“ ist es normalerweise keine gute Idee, die Dateien der Originalautoren direkt zu verändern, da die Änderungen größtenteils versteckt und undokumentiert in der diff.gz-Datei verschwinden. Stattdessen sollten Sie Ihre Änderungen als Patches im debian-Verzeichnis speichern und während des Baus anwenden. Um diese Komplexität zu vermeiden, können Sie auch das Format „3.0 (quilt)“ verwenden, das dies von sich aus anbietet.

=head2 kann Änderungen an I<Datei> nicht darstellen

Änderungen an den Quellen der Originalautoren werden normalerweise als Patch-Dateien gespeichert, aber nicht alle Änderungen können als Patches dargestellt werden: Sie können nur Änderungen am Inhalt einfacher Textdateien vornehmen. Falls Sie versuchen, eine Datei durch etwas eines anderen Typs zu ersetzen (beispielsweise eine einfache Datei durch einen Symlink oder ein Verzeichnis), werden Sie diese Fehlermeldung erhalten.

=head2 neu angelegte leere Datei I<Datei> wird im Diff nicht dargestellt werden

Leere Dateien können nicht mit Patchdateien erstellt werden. Daher wird diese Änderung nicht im Quellpaket aufgezeichnet und Sie erhalten dazu diese Warnung.

=head2 ausführbarer Modus I<Rechte> von I<Datei> wird nicht im Diff dargestellt
werden

Patch-Dateien speichern nicht die Rechte von Dateien und daher werden Ausführbarkeitsrechte nicht im Quellpaket gespeichert. Diese Warnung erinnert Sie an diese Tatsache.

=head2 besonderer Modus I<Rechte> von I<Datei> wird nicht im Diff dargestellt
werden

Patch-Dateien speichern nicht die Rechte von Dateien und daher werden geänderte Rechte nicht im Quellpaket gespeichert. Diese Warnung erinnert Sie an diese Tatsache.

=head1 UMGEBUNG

=over 

=item B<DPKG_COLORS>

Setzt den Farbmodus (seit Dpkg 1.18.5). Die derzeit unterstützten Werte sind: B<auto> (Vorgabe), B<always> und B<never>.

=item B<DPKG_NLS>

Falls dies gesetzt ist, wird es zur Entscheidung, ob Native Language Support, auch als Unterstützung für Internationalisierung (oder i18n) bekannt, aktiviert wird (seit Dpkg 1.19.0). Die akzeptierten Werte sind: B<0> und B<1> (Vorgabe).

=item B<SOURCE_DATE_EPOCH>

Falls gesetzt, wird sie als Zeitstempel (als Sekunden seit der Epoche) zum Festlegen der Mtime in den Dateieinträgen von L<tar(5)> verwandt.

Seit Dpkg 1.18.11.

=item B<VISUAL>

=item B<EDITOR>

Von den „2.0“- und „3.0 (quilt)“-Quellformatmodulen verwandt.

=item B<GIT_DIR>

=item B<GIT_INDEX_FILE>

=item B<GIT_OBJECT_DIRECTORY>

=item B<GIT_ALTERNATE_OBJECT_DIRECTORIES>

=item B<GIT_WORK_TREE>

Von dem „3.0 (quilt)“-Quellformatmodul verwandt.

=back

=head1 DATEIEN

=head2 debian/source/format

Diese Datei enthält auf einer einzelnen Zeile das Format, das zum Bau des Quellpakets verwandt werden soll (mögliche Formate sind oben beschrieben). Leerzeichen am Zeilenanfang oder -ende sind nicht erlaubt.

=head2 debian/source/include-binaries

Diese Datei enthält eine Liste von Pfadnamen von Binärdateien (eine pro Zeile), relativ zum Quellwurzelverzeichnis, die in den Debian-Tarball aufgenommen werden sollen. Leerzeichen am Anfang und Ende der Zeile werden entfernt. Zeilen, die mit ‚B<#>’ anfangen, sind Kommentare und werden übersprungen. Leere Zeilen werden ignoriert.

=head2 debian/source/options

Diese Datei enhält eine Liste an Optionen, die automatisch vor den Satz an Befehlszeilenoptionen bei einem Aufruf B<dpkg-source --build> oder B<dpkg-source --print-format> gesetzt werden sollen. Optionen wie B<-compression> und B<--compression-level> sind für diese Datei gut geeignet.

Jede Option sollte auf einer separaten Zeile stehen. Leerzeilen und Zeilen, die mit ‚B<#>’ beginnen, werden ignoriert. Das einleitende ‚B<-->’ sollte entfernt werden und kurze Optionen sind nicht erlaubt. Optionale Leerzeichen um das ‚B<=>’-Symbol sowie optionale Anführungszeichen um den Wert sind erlaubt. Hier ist ein Beispiel für so eine Datei:

 # lass dpkg-source ein debian.tar.bz2 mit maximaler Komprimierung
 # erstellen
 compression = "bzip2"
 compression-level = 9
 # verwende debian/patches/debian-changes als automatischen Patch
 single-debian-patch
 # ignoriere Änderungen von config.{sub,guess}
 extend-diff-ignore = "(^|/)(config.sub|config.guess)$"

B<Hinweis>: B<--format>-Optionen werden in dieser Datei nicht akzeptiert, Sie sollten stattdessen B<debian/source/format> verwenden.

=head2 debian/source/local-options

Genau wie B<debian/source/options>, außer dass die Datei nicht in das erstellte Quellpaket aufgenommen wird. Dies kann nützlich sein, um Voreinstellungen zu speichern, die an einen bestimmten Betreuer oder an ein bestimmtes VCS, in dem das Paket gewartet wird, gebunden sind.

=head2 debian/source/local-patch-header

=head2 debian/source/patch-header

Formloser Text, der an den Anfang des in den Formaten „2.0“ und „3.0 (quilt)“ generierten automatischen Patches gestellt wird. B<local-patch-header> wird dem erstellten Quellpaket nicht hinzugefügt, B<patch-header> dagegen schon.

=head2 debian/patches/I<Lieferant>.series

=head2 debian/patches/series

Diese Datei führt alle Patches auf, die (in der angegebenen Reihenfolge) auf das Quellpaket der Originalautoren angewandt werden müssen. Leerzeichen am Anfang und Ende werden entfernt. I<Lieferant> ist der Name des aktuellen Lieferanten in Kleinschreibung oder B<debian>, falls kein Lieferant definiert ist. Falls die lieferantenspezifische Seriendatei nicht existiert, wird eine lieferantenfreie Seriendatei verwandt. Zeilen, die mit ‚B<#>’ anfangen, sind Kommentare und werden übersprungen. Leere Zeilen werden ignoriert. Die verbleibenden Zeilen beginnen mit dem Dateinamen eines Patches (relativ zum Verzeichnis B<debian/patches/>) bis zum ersten Leerzeichen oder bis zum Zeilenende. Bis zum Ende der Zeile oder bis zum ersten ‚B<#>’ gefolgt von einem oder mehreren Leerzeichen (dies markiert den Beginn eines Kommentars, der bis zum Zeilenende geht) können optionale B<quilt>-Befehle folgen.

=head1 SICHERHEIT

Untersuchen nicht vertrauenswürdiger Quellpakete oder ihr Entpacken in ein Arbeitsverzeichnis sollte als Sicherheitsgrenze betrachtet werden und jede Verletzung dieser Grenze, die aus diesen Aktionen resultiert, sollte als Sicherheitsverwundbarkeit betrachtet werden. Allerdings sollte der Umgang mit nicht vertrauenswürdigen Quellpaketen nicht leichtherzig erfolgen, da die Oberfläche alle unterstützten Komprimierungsbefehle und Befehle zum Umgang mit bestimmten Datenformaten (wie L<tar(1)> oder L<patch(1)>) umfasst, zusätzliche zu den Quellpaketformaten und Steuerdateien selbst. Es wird nachdrücklich davon abgeraten, diese Aktionen auf nicht vertrauenswürdigen Daten als Root durchzuführen.

Das Bauen von Quellpaketen sollte nur mit vertrauenswürdigen Daten erfolgen.

=head1 FEHLER

Die Stelle, an der das Überschreiben von Feldern passiert, verglichen mit bestimmten Standard-Ausgabe-Feldeinstellungen, ist eher verwirrend.

=head1 SIEHE AUCH

L<deb-src-control(5)>, L<deb-changelog(5)>, L<deb-substvars(5)>, L<dsc(5)>.


=head1 ÜBERSETZUNG

Die deutsche Übersetzung wurde 2004, 2006-2025 von Helge Kreutzmann
<debian@helgefjell.de>, 2007 von Florian Rehnisch <eixman@gmx.de> und
2008 von Sven Joachim <svenjoac@gmx.de>
angefertigt. Diese Übersetzung ist Freie Dokumentation; lesen Sie die
GNU General Public License Version 2 oder neuer für die Kopierbedingungen.
Es gibt KEINE HAFTUNG.
