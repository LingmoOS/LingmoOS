
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 BEZEICHNUNG

dpkg-buildpackage - Binär- oder Quellpakete aus Quellen bauen

=head1 ÜBERSICHT

B<dpkg-buildpackage> [I<Option>…] [B<-->] [I<Dateiname>.dsc|I<Verzeichnis>]

=head1 BESCHREIBUNG

B<dpkg-buildpackage> ist ein Programm, das den Prozess des Bauens eines Debian-Paketes automatisiert.

Die Argumente I<Dateiname>.dsc und I<Verzeichnis> werden seit Dpkg 1.22.7 unterstützt. Ihre Semantik ist experimentell.

Der Bauprozess besteht aus den folgenden Schritten:

=over 

=item B<1.>

Es wird der Hook B<preinit> ausgeführt, bevor irgendeine Quelldatei gelesen wird. Falls eine B<.dsc>-Datei angegeben wurde, wird diese erneut entpackt und in das Verzeichnis hinein gewechselt, falls ein I<Verzeichnis> angegeben wurde, wird hinein gewechselt, andernfalls wird erwartet, dass das aktuelle Verzeichnis den Qellbaum enthält. Die Bauumgebung wird vorbereitet, indem verschiedene Umgebungsvariablen gesetzt werden (siehe B<UMGEBUNG>), der B<init>-Hook ausgeführt und B<dpkg-source --before-build> aufgerufen wird (es sei denn, B<-T> oder B<--target> wurde verwandt).

=item B<2.>

Es wird geprüft, dass Bauabhängigkeiten und -konflikte erfüllt sind (falls B<-d> oder B<--no-check-builddeps> nicht angegeben ist).

=item B<3.>

Falls eines oder mehrere spezielle Ziele mit der Option B<-T> oder B<--target> ausgewählt wurden, werden diese Ziele aufgerufen und es wird hier beendet. Andernfalls wird der Hook B<preclean> ausgeführt und B<fakeroot debian/ rules clean> aufgerufen, um den Bau-Baum zu bereinigen (falls B<-nc> oder B<--no-pre-clean> nicht angegeben ist).

=item B<4.>

Der Hook B<source> wird ausgeführt und B<dpkg-source -b> aufgerufen, um das Quellpaket zu erstellen (falls mit B<--build> oder äquivalenten Optionen ein B<source> (Quell-)Bau erbeten wurde und keine B<.dsc> angegeben wurde).

=item B<5.>

Es führt den Hook B<build> aus und ruft B<debian/rules> I<Bauziel> auf. Dann führt es den Hook B<binary> aus, gefolgt von B<fakeroot debian/rules> I<Binärziel> auf (falls nicht ein reiner Quellbau mit B<--build=source> oder äquivalenten Optionen erbeten wurde). Beachten Sie, dass I<Bauziel> und I<Binärziel> entweder B<build> und B<binary> (Standardfall, oder falls B<any>- und B<all>-Bau mit B<--build> oder äquivalenten Optionen erbeten wurde) oder B<build-arch> und B<binary-arch> (falls ein B<any>- und nicht B<all>-Bau mit B<--build> oder äquivalenten Optionen erbeten wurde) oder B<build-indep> und B<binary-indep> (falls ein B<all>- und nicht B<any>-Bau mit B<--build> oder äquivalenten Optionen erbeten wurde).

=item B<6.>

Der Hook B<buildinfo> wird ausgeführt und B<dpkg-genbuildinfo> aufgerufen, um eine B<.buildinfo>-Datei zu erstellen. Viele Optionen von B<dpkg-buildpackage> werden an B<dpkg-genbuildinfo> weitergeleitet. Falls eine I<.dsc> angegeben wurde, dann wird sie in der erstellten B<.buildinfo>-Datei referenziert, da die Herkunft des Quellbaums sichergestellt werden kann.

=item B<7.>

Der Hook B<changes> wird ausgeführt und B<dpkg-genchanges> aufgerufen, um eine B<.changes>-Datei zu erstellen. Der Name der B<.changes>-Datei hängt von der Art des Baus ab und wird so spezifisch wie notwendig sein, aber nicht mehr; der Name wird

=over 

=item I<Quellname>B<_>I<Binärversion>B<_>I<Arch>B<.changes>

lauten, wenn ein Bau B<any> einschließt und andernfalls

=item I<Quellname>B<_>I<Binärversion>B<_>B<all.changes>

wenn ein Bau B<all> einschließt und andernfalls

=item I<Quellname>B<_>I<Quellversion>B<_>B<source.changes>.

wenn ein Bau B<source> einschließt.

=back

Viele Optionen von B<dpkg-buildpackage> werden an B<dpkg-genchanges> weitergeleitet.

=item B<8.>

Der Hook B<postclean> wird ausgeführt und, falls B<-tc> oder B<--post-clean> angegeben ist, erneut B<fakeroot debian/rules clean> aufgerufen.

=item B<9.>

B<dpkg-source --after-build> wird aufgerufen.

=item B<10.>

Der Hook B<check> wird ausgeführt und ein Paketprüfprogramm für die Datei B<.changes> aufgerufen (falls ein Befehl in B<DEB_CHECK_COMMAND> oder mit B<--check-command> angegeben ist).

=item B<11.>

Der Hook B<sign> wird ausgeführt und mittels eines OpenPGP-Backends signiert (so lange es sich nicht um einen „UNRELEASED“-Bau handelt oder B<--no-sign> angegeben wurde), um die B<.dsc>-Datei (falls vorhanden und B<-us> oder B<--unsigned-source> nicht angegeben wurde), die B<.buildinfo>-Datei (falls B<-ui>, B<--unsigned-buildinfo>, B<-uc> oder B<--unsigned-changes> nicht angegeben wurden) und die B<.changes>-Datei (falls B<-uc> oder B<--unsigned-changes> nicht angegeben wurde) zu signieren.

=item B<12.>

Falls eine B<.dsc>-Datei angegeben wurde, wird das extrahierte Quellverzeichnis entfernt.

=item B<13.>

Der Hook B<done> wird ausgeführt.

=back

=head1 OPTIONEN

Alle langen Optionen können auf der Befehlszeile oder im B<dpkg-buildpackage>-System und Benutzerkonfigurationsdateien angegeben werden. Jede Zeile in der Konfigurationsdatei ist entweder eine Option (exakt die gleiche wie die Befehlszeilenoption, nur ohne führende Bindestriche) oder ein Kommentar (falls sie mit ‚B<#>’) beginnt).

=over 

=item B<--build=>I<Typ>

Spezifiziert den Bau-I<Typ> aus einer Kommata-getrennten Liste von Komponenten (seit Dpkg 1.18.5). Alle angegebenen Komponenten werden kombiniert, umn den einzigen zu verwendenen Bautyp auszuwählen. Dies impliziert einen einzelnen Baudurchlauf, wodurch eine einzelne Datei F<.changes> erstellt wird. Wird an B<dpkg-genchanges> weitergegeben.

Die erlaubten Werte sind:

=over 

=item B<source>

Baut das Quellpaket.

B<Hinweis>: Falls Sie diesen Wert alleine verwenden und falls Sie einfach das Quellpaket aus einem sauberen Quellbaum (neu) bauen möchten, ist die Verwendung von B<dpkg-source> immer die bessere Option, da dafür keine Bauabhängigkeiten installiert sein müssen, die ansonsten benötigt werden, um das Ziel B<clean> aufzurufen.

=item B<any>

Baut das architekturspezifische Binärpaket.

=item B<all>

Baut die architekturunabhängigen Binärpakete.

=item B<binary>

Baut die architekturspezifischen und -unabhängigen Binärpakete. Dies ist ein Alias für B<any,all>.

=item B<full>

Baut alles. Dies ist ein Alias für B<source,any,all> und identisch zum Standardfall, wenn keine Bauoptionen festgelegt werden.

=back

=item B<-g>

Äquivalent zu B<--build=source,all> (seit Dpkg 1.17.11).

=item B<-G>

Äquivalent zu B<--build=source,any> (seit Dpkg 1.17.11).

=item B<-b>

Äquivalent zu B<--build=binary> oder B<--build=any,all>.

=item B<-B>

Äquivalent zu B<--build=any>.

=item B<-A>

Äquivalent zu B<--build=all>.

=item B<-S>

Äquivalent zu B<--build=source>.

=item B<-F>

Äquivalent zu B<--build=full>, B<--build=source,binary> oder B<--build=source,any,all> (seit Dpkg 1.15.8).

=item B<--target=>I<Ziel>[,…]

=item B<--target> I<Ziel>[,…]

=item B<-T>, B<--rules-target=>I<Ziel>[,…]

Ruft B<debian/rules> I<Ziel> einmal pro angegebenem Ziel auf, nachdem die Bauumgebung eingerichtet wurde (außer dass B<dpkg-source --before-build> aufgerufen wird) und beendet den Paketbauprozess hier (seit Dpkg 1.15.0, lange Optionen seit Dpkg 1.18.8, Unterstützung für mehrere Ziele seit Dpkg 1.18.16). Falls auch B<--as-root> angegeben wurde, wird der Befehl mit root-Rechten ausgeführt (siehe B<--root-command>). Beachten Sie, dass bekannte Ziele, die als Root ausgeführt werden müssen, diese Option nicht benötigen (d.h. die Ziele B<clean>, B<binary>, B<binary-arch> und B<binary-indep>).

=item B<--as-root>

Ergibt nur mit B<--target> einen Sinn (seit Dpkg 1.15.0). Erfordert, dass das Ziel mit Root-Rechten ausgeführt wird.

=item B<-si>

=item B<-sa>

=item B<-sd>

=item B<-v>I<Version>

=item B<-C>I<Änderungsbeschreibung>

=item B<-m>I<Betreueradresse>

=item B<-e>I<Betreueradresse>

Wird unverändert an B<dpkg-genchanges> weitergegeben. Lesen Sie dessen Handbuchseite.

=item B<--build-by=>I<Betreueradresse>

=item B<--source-by=>I<Betreueradresse> (seit Dpkg 1.21.10)

Wird als B<-m> unverändert an B<dpkg-genchanges> weitergegeben. Lesen Sie dessen Handbuchseite.

=item B<--release-by=>I<Betreueradresse>

=item B<--changed-by=>I<Betreueradresse> (seit Dpkg 1.21.10)

Wird unverändert als B<-e> an B<dpkg-genchanges> weitergegeben. Lesen Sie dessen Handbuchseite.

=item B<-a>, B<--host-arch> I<Architektur>

Gibt die Debian-Architektur, für die gebaut wird, an (lange Option seit Dpkg 1.17.17). Die Architektur der Maschine, auf der gebaut wird, wird automatisch bestimmt, und ist auch die Voreinstellung für die Wirtmaschine („host machine“).

=item B<-t>, B<--host-type> I<GNU-Systemtyp>

Gibt den GNU-Systemtyp, für den wir bauen, an (lange Option seit Dpkg 1.17.17). Er kann anstelle von B<--host-arch> oder als Ergänzung verwandt werden, um den Standard-GNU-Systemtyp der Host-Debian-Architektur außer Kraft zu setzen.

=item B<--target-arch> I<Architektur>

Gibt die Debian-Architektur, für die die gebauten Programme bauen werden, an (seit Dpkg 1.17.17). Die Voreinstellung ist die Host-Maschine.

=item B<--target-type> I<GNU-Systemtyp>

Gibt den GNU-Systemtyp, für den die gebauten Programme bauen werden, an (seit Dpkg 1.17.17). Er kann anstelle von B<--target-arch> oder als Ergänzung verwandt werden, um den Standard-GNU-Systemtyp der Ziel-Debian-Architektur zu überschreiben.

=item B<-P>, B<--build-profiles=>I<Profil>[B<,>…]

Gibt als Kommata-getrennte Liste die zu bauenden Profile an (seit Dpkg 1.17.2, lange Optionen seit Dpkg 1.18.8). Standardmäßig wird für kein bestimmtes Profil gebaut. Setzt sie auch (als durch Leerzeichen getrennte Liste) in die Umgebungsvariable B<DEB_BUILD_PROFILES>. Dies erlaubt beispielsweise B<debian/rules>-Dateien, diese Information für den Bau unter bestimmten Bedingungen zu nutzen.

=item B<-j>, B<--jobs>[=I<Aufträge>|B<auto>]

Gibt die Anzahl an Aufträgen, die simultan laufen dürfen, an (seit Dpkg 1.14.7, lange Option seit Dpkg 1.18.8). Die Anzahl von Aufträgen, die zur Anzahl der verfügbaren Prozessoren passt, falls B<auto> angegeben ist (seit Dpkg 1.17.10) oder eine unbegrenzte Anzahl, falls I<Aufträge> nicht angegeben ist. Das Vorgabeverhalten ist B<auto> (seit Dpkg 1.18.11) im nicht erzwungenen Modus (seit Dpkg 1.21.10) und daher ist es immer sicherer, dies mit jedem Paket zu verwenden, einschließlich solchen, die kein sicheres paralleles Bauen ermöglichen. Durch Setzen von Aufträgen auf B<1> wird die serielle Ausführung wiederhergestellt.

Wird B<parallel=>I<Aufträge> oder B<parallel> zu der Umgebungsvariablen B<DEB_BUILD_OPTIONS> hinzufügen, was debian/rules-Dateien die Zustimmung erlaubt, diese Information für eigene Zwecke zu verwenden. Der Wert B<Aufträge> setzt die Option B<parallel=>I<Aufträge> oder die Option B<parallel> in der Umgebungsvariable B<DEB_BUILD_OPTIONS> außer Kraft. Beachten Sie, dass der Wert B<auto> durch die tatsächliche Anzahl der derzeitig aktiven Prozessoren ersetzt wird und somit nicht an irgendeinen Kindprozess weitergereicht wird. Falls die Anzahl der verfügbaren Prozessoren nicht ermittelt werden kann, fällt der Code auf eine serielle Abarbeitung zurück (seit Dpkg 1.18.15). Dies sollte aber nur auf exotischen und nicht unterstützten Systemen passieren.

=item B<-J>, B<--jobs-try>[=I<Aufträge>|B<auto>]

Diese Option (seit Dpkg 1.18.2, lange Option seit Dpkg 1.18.8) ist äquivalent zu der obigen B<-j>.

Da das Verhalten von B<-j> in Dpkg 1.21.10 auf den Opt-In-Modus geändert wurde, können Sie diese Option stattdessen verwenden, falls Sie die Semantik über die Dpkg-Veröffentlichungsserie hinweg garantieren müssen.

=item B<--jobs-force>[=I<Aufträge>|B<auto>]

Diese Option (seit Dpkg 1.21.10) ist zu der Option B<--jobs> äquivalent, außer dass der erzwungene parallele Modus aktivieren wird, indem die Option B<make> B<-j> mit der berechneten Anzahl an parallelen Aufträgen zu der Umgebungsvariablen B<MAKEFLAGS> hinzugefügt wird.

Dies sollte dazu führen, dass alle nachfolgenden Aufrufe von Make diese Option erben, und daher die parallele Einstellung für die Paketierung erzwingen (und möglicherweise für das Bausystem der Originalautoren, falls dieses L<make(1)> nutzt), unabhängig von ihrer Einstellung für paralleles Bauen. Dies kann zu Baufehlern führen.

B<Hinweis>: Jedes Makefile, das kein sicheres paralleles Bauen unterstützt, sollte als fehlerhaft betrachtet werden. Entweder sollte es korrigiert werden, so dass sicheres paralleles Bauen ermöglicht wird, oder es sollte mit dem Ziel B<.NOTPARALLEL> von L<make(1)> als unsicher markiert werden.

=item B<-D>, B<--check-builddeps>

Prüft Bauabhängigkeiten und -konflikte; Abbruch, falls diese nicht erfüllt sind (lange Option seit Dpkg 1.18.8). Dies ist das Standardverhalten.

=item B<-d>, B<--no-check-builddeps>

Überprüft Bauabhängigkeiten und -konflikte nicht (lange Option seit Dpkg 1.18.8).

=item B<--ignore-builtin-builddeps>

Prüft die eingebauten Bauabhängigkeiten und -konflikte nicht (seit Dpkg 1.18.2). Es gibt distributionsabhängige spezifische implizite Abhängigkeiten, die normalerweise in der Bauumgebung benötigt werden, die sogenannte „Build-Essential“-Paketgruppe.

=item B<--rules-requires-root>

Berücksichtigt das Feld B<Rules-Requires-Root> nicht, sondern fällt auf den alten Vorgabewert B<binary-targets> zurück (seit Dpkg 1.19.1).

=item B<-nc>, B<--no-pre-clean>

Bereinigt den Quellbaum vor dem Bau nicht (lange Option seit Dpkg 1.18.8). Impliziert B<-b>, falls ansonsten nichts aus B<-F>, B<-g>, B<-G>, B<-B>, B<-A> oder B<-S> gewählt wurde. Impliziert B<-d> mit B<-S> (seit Dpkg 1.18.0).

=item B<--pre-clean>

Bereinigt den Quellbaum vor dem Bau (seit Dpkg 1.18.8). Dies ist das Standardverhalten.

=item B<-tc>, B<--post-clean>

Bereinigt den Quellbaum (verwendet I<root-werde-Befehl> B<debian/rules clean>), nachdem das Paket gebaut wurde (lange Option seit Dpkg 1.18.8).

=item B<--no-post-clean>

Bereinigt den Quellbaum nicht, nachdem das Paket gebaut wurde (seit Dpkg 1.19.1). Dies ist das Standardverhalten.

=item B<--sanitize-env>

Bereinigt die Bauumgebung (seit Dpkg 1.20.0). Dies setzt die Umgebungsvariablen, die Umask und alle anderen Prozessattribute, die den Bau von Paketen negativ beeinflussen könnten, zurück oder entfernt sie. Da der offizielle Einstiegspunkt zum Bau von Paketen B<debian/rules> ist, können sich Pakete nicht darauf verlassen, dass diese Einstellungen erfolgt sind, und sollten daher funktionieren, selbst wenn dies nicht der Fall ist. Was genau bereinigt wird, hängt vom Lieferanten ab.

=item B<-r>, B<--root-command=>I<root-werde-Befehl>

Wenn B<dpkg-buildpackage> einen Teil des Bauprozesses als Root ausführen muss, stellt es dem auszuführenden Befehl den I<root-werde-Befehl> voran, falls dieser angegeben wurde (lange Option seit Dpkg 1.18.8). Andernfalls wird standardmäßig B<fakeroot> verwendet, falls es vorhanden ist. Der I<root-werde-Befehl> sollte der Name des Programmes im B<PATH> sein und wird als Argumente den Namen des wirklich auszuführenden Befehles und dessen Argumente erhalten. I<root-werde-Befehl> kann Parameter enthalten (die durch Leerzeichen voneinander getrennt sein müssen), aber keine Shell-Metazeichen. Typischerweise ist der I<root-werde-Befehl> B<fakeroot>, B<sudo>, B<super> oder B<really>. B<su> ist nicht geeignet, da es nur die Shell des Benutzers mit B<-c> aufrufen kann, anstatt Argumente individuell zur Ausführung des Programms zu übergeben.

=item B<-R>, B<--rules-file=>I<rules-Datei>

Der Bau eines Debian-Pakets erfolgt gewöhnlich durch Aufruf von B<debian/rules> als ein Befehl mit mehreren Standardparametern (seit Dpkg 1.14.17, lange Option seit Dpkg 1.18.8). Mit dieser Option ist es möglich, einen anderen Programmaufruf zum Bau des Paketes zu verwenden (es können durch Leerzeichen getrennte Parameter angegeben werden). Alternativ kann die Standard-rules-Datei mit einem anderen Make-Programm ausgeführt werden (zum Beispiel durch die Verwendung von B</usr/local/bin/make -f debian/rules> als I<rules-Datei>).

=item B<--check-command=>I<Prüfbefehl>

Befehl, der zum Prüfen der B<.changes>-Datei selbst und sämtlichen in der Datei referenzierten Artefakten verwandt wird (seit Dpkg 1.17.6). Der Befehl sollte den Pfadnamen der B<.changes> als Argument erhalten. Dieser Befehl ist normalerweise B<lintian>.

=item B<--check-option=>I<Opt>

Option I<Opt> an den I<Prüfbefehl>, der mit B<DEB_CHECK_COMMAND> oder B<--check-command> angegeben wurde, übergeben (seit Dpkg 1.17.6). Kann mehrfach verwandt werden.

=item B<--hook->I<Hook-Name>B<=>I<Hook-Befehl>

Setzt den angegebenen Shell-Code I<Hook-Befehl> als den Hook I<Hook-Name>, der an den Zeitpunkten läuft, die in den Ablaufschritten angegeben sind (seit Dpkg 1.17.6). Die Hooks werden immer ausgeführt, selbst falls die folgende Aktion nicht durchgeführt wird (außer beim Hook B<binary>). Alle Hooks werden in dem entpackten Quellverzeichnis ausgeführt.

Einige Hooks können zusätzliche Informationen über Umgebungsvariablen erhalten (seit Dpkg 1.22.0). Alle Hooks erhalten den Hook-Namen in der Umgebungsvariablen B<DPKG_BUILDPACKAGE_HOOK_NAME> (seit Dpkg 1.22.0).

B<Hinweis>: Hooks können den Bauprozess beeinflussen und zu Baufehlern führen, falls ihre Befehle fehlschlagen, was unerwartete Folgen haben könnte. Passen Sie daher auf.

Die derzeit unterstützten I<Hook-Name>n sind:

=over 

=item B<preinit>

=item B<init>

=item B<preclean>

=item B<source>

Erhält B<DPKG_BUILDPACKAGE_HOOK_SOURCE_OPTIONS> mit einer Leerzeichen-getrennten Liste von Optionen, die an den Aufruf von B<dpkg-source> übergeben werden.

=item B<build>

Erhält B<DPKG_BUILDPACKAGE_HOOK_BUILD_TARGET> mit den Namen des von B<debian/rules> aufgerufenen Bauziels. Vor Dpkg 1.22.7 wurde diese Variable nur gesetzt, falls das Ziel aufgerufen wurde.

=item B<binary>

Erhält B<DPKG_BUILDPACKAGE_HOOK_BINARY_TARGET> mit dem Namen des von B<debian/rules> aufgerufenen Binärziels, aber nur, wenn eines aufgerufen wurde.

=item B<buildinfo>

Erhält B<DPKG_BUILDPACKAGE_HOOK_BUILDINFO_OPTIONS> mit einer Leerzeichen-getrennten Liste von Optionen, die an den Aufruf von B<dpkg-genbuildinfo> übergeben werden.

=item B<changes>

Erhält B<DPKG_BUILDPACKAGE_HOOK_CHANGES_OPTIONS> mit einer Leerzeichen-getrennten Liste von Optionen, die an den Aufruf von B<dpkg-genchanges> übergeben werden.

=item B<postclean>

=item B<check>

Erhält B<DPKG_BUILDPACKAGE_HOOK_CHECK_OPTIONS> mit einer Leerzeichen-getrennten Liste von Optionen, die an den Aufruf des Befehls »check« übergeben werden.

=item B<sign>

=item B<done>

=back

Der I<Hook-Befehl> unterstützt die folgende Ersetzungsformatzeichenkette, die vor seiner Ausführung angewandt wird:

=over 

=item B<%%>

Ein einzelnes %-Zeichen.

=item B<%a>

Ein logischer Wert (0 oder 1), der darstellt, ob die folgende Aktion ausgeführt wird oder nicht.

=item B<%p>

Der Quellpaketname.

=item B<%v>

Die Quellpaket-Version.

=item B<%s>

Die Quellpaket-Version (ohne die Epoche).

=item B<%u>

Die Original- (Upstream-)Version.

=back

=item B<--buildinfo-file=>I<Dateiname>

Den B<Dateinamen> für die erstellte B<.buildinfo>-Datei setzen (seit Dpkg 1.21.0).

=item B<--buildinfo-option=>I<Opt>

Option I<Opt> an B<dpkg-genbuildinfo> weitergeben (seit Dpkg 1.18.11). Kann mehrfach verwandt werden.

=item B<--sign-backend=>I<Signatur-Backend>

Gibt eine OpenPGP-Backend-Schnittstelle an, die beim Aufruf von I<sign-command> verwandt wird (seit Dpkg 1.21.10).

Die Vorgabe ist B<auto>, bei der das beste derzeit verfügbare Backend verwandt wird. Die bestimmten unterstützten OpenPGP-Backends in bevorzugter Reihenfolge sind:

=over 4

=item B<sop>

(jede normgerechte zustandslose OpenPGP-Implementierung)

=item B<sq>

(von Sequoia-PGP)

=item B<gpg>

(von GnuPG)

=back

=item B<-p>, B<--sign-command=>I<Signaturbefehl>

Wenn B<dpkg-buildpackage> ein OpenPGP-Backend-Befehl zum Signieren einer Quellsteuerdatei (B<.dsc>), einer B<.buildinfo>-Datei oder einer B<.changes>-Datei benötigt, wird es statt des standardmäßigen oder automatisch erkannten Backend-Befehls den I<Signaturbefehl> ausführen (und dabei falls notwendig den B<PATH> durchsuchen) (lange Option seit Dpkg 1.18.8). I<Signaturbefehl> wird alle Backend-spezifischen Argumente gemäß des ausgewählten B<--sign-backend> erhalten. I<Signaturbefehl> sollte keine Leerzeichen oder andere Metazeichen der Shell enthalten.

=item B<-k>, B<--sign-keyid=>I<Schlüsselkennung>

=item B<--sign-key=>I<Schlüsselkennung>

Geben Sie eine OpenPGP-Schlüsselkennung (entweder einen Fingerabdruck oder eine Benutzerkennung) für den geheimen Schlüssel zur Signatur von Paketen an (B<--sign-key> seit Dpkg 1.18.8, B<--sign-keyid> seit Dpkg 1.21.10).

=item B<--sign-keyfile=>I<Schlüsseldatei>

Geben Sie eine OpenPGP-I<Schlüsseldatei>, die den geheimen Schlüssel zur Signatur von Paketen enthält, an (seit Dpkg 1.21.10).

B<Hinweis>: Aus Sicherheitsgründen wird die I<Schlüsseldatei> am besten mit einem Passwort gesperrt.

=item B<-us>, B<--unsigned-source>

Das Quellpaket nicht signieren (lange Option seit Dpkg 1.18.8).

=item B<-ui>, B<--unsigned-buildinfo>

Die B<.buildinfo>-Datei nicht signieren (seit Dpkg 1.18.19).

=item B<-uc>, B<--unsigned-changes>

Die B<.changes>- und die B<.buildinfo> Datei nicht signieren (lange Option seit Dpkg 1.18.8).

=item B<--no-sign>

Keine Datei signieren, das schließt Quellpakete, die Datei B<.buildinfo> und die Datei B<.changes> ein (seit Dpkg 1.18.20).

=item B<--force-sign>

Das Signieren der entstehenden Dateien erzwingen (seit Dpkg 1.17.0), unabhängig von B<-us>, B<--unsigned-source>, B<-ui>, B<--unsigned-buildinfo>, B<-uc>, B<--unsigned-changes> oder anderen internen Heuristiken.

=item B<-sn>

=item B<-ss>

=item B<-sA>

=item B<-sk>

=item B<-su>

=item B<-sr>

=item B<-sK>

=item B<-sU>

=item B<-sR>

=item B<-i>, B<--diff-ignore>[=I<regex>]

=item B<-I>, B<--tar-ignore>[=I<Muster>]

=item B<-z>, B<--compression-level=>I<Stufe>

=item B<-Z>, B<--compression=>I<Komprimierer>

Wird unverändert an B<dpkg-source> weitergegeben. Lesen Sie dessen Handbuchseite.

=item B<--source-option=>I<Opt>

Option I<Opt> an B<dpkg-source> weitergeben (seit Dpkg 1.15.6). Kann mehrfach verwandt werden.

=item B<--changes-file=>I<Dateiname>

Den I<Dateiname>n für die erstellte B<.changes>-Datei setzen (seit Dpkg 1.21.0).

=item B<--changes-option=>I<Opt>

Option I<Opt> an B<dpkg-genchanges> weitergeben (seit Dpkg 1.15.6). Kann mehrfach verwandt werden.

=item B<--admindir=>I<Verz>

=item B<--admindir> I<Verz>

Ändert den Ablageort der B<dpkg>-Datenbank (seit Dpkg 1.14.0). Der Standardort ist I<%ADMINDIR%>.

=item B<-?>, B<--help>

Zeigt einen Hinweis zum Aufruf und beendet das Programm.

=item B<--version>

Gibt die Version aus und beendet das Programm.

=back

=head1 UMGEBUNG

=head2 Externe Umgebung

=over 

=item B<DEB_CHECK_COMMAND>

Falls gesetzt, wird er zum Prüfen der B<.changes>-Datei verwandt (seit Dpkg 1.17.6). Wird durch die Option B<--check-command> außer Kraft gesetzt.

=item B<DEB_SIGN_KEYID>

Falls gesetzt, wird er zum Signieren der B<.changes>-, B<.buildinfo>- und B<.dsc>-Dateien verwandt (seit Dpkg 1.17.2). Wird durch die Option B<--sign-keyid> außer Kraft gesetzt.

=item B<DEB_SIGN_KEYFILE>

Falls gesetzt, wird er zum Signieren der B<.changes>-, B<.buildinfo>- und B<.dsc>-Dateien verwandt (seit Dpkg 1.21.10). Wird durch die Option B<--sign-keyfile> außer Kraft gesetzt.

=item B<DEB_BUILD_OPTIONS>

Falls gesetzt, wird sie eine durch Leerraumzeichen getrennte Liste von Optionen enthalten, die das Verhalten einiger im Paketbau beteiligter Dpkg-Werkzeuge beeinflusst und möglicherweise den Paketbauprozess beeinflusst, falls der Code in F<debian/rules> sie berücksichtigt. Bei diesen Optionen können Parameter direkt nach einem Gleichzeichen (»B<=>«) gesetzt werden. Für Optionen, die mehrere Parameter akzeptieren, werden diese nicht durch Leerzeichen getrennt, da diese für separate Optionen reserviert sind.

Die folgenden Optionen sind den Dpkg-Werkzeugen bekannt und werden von ihnen unterstützt, andere von F<debian/rules> berücksichtigte Optionen könnnten in Distributions-spezifischen Richtlinien definiert sein.

=over 

=item B<parallel=>I<N>

Das F<debian/rules> in der Paketierung könnte diese Option zur Einrichtung des Bauprozesses für die Verwendung von I<N> parallelen Aufträgen verwenden. Sie wird von den Optionen B<--jobs> und B<--jobs-force> außer Kraft gesetzt.

=item B<nocheck>

B<dpkg-buildpackage> wird die Variable B<DEB_CHECK_COMMAND> ignorieren. Es wird nicht erwartet, dass das F<debian/rules> in der Paketierung die Test-Sammlungen während des Baus ausführt.

=item B<noopt>

Falls F<debian/rules> B<dpkg-buildflags> zum Einrichten der Bauschalter aufruft, werden diese gesetzt, damit keine Optimierungen aktiviert werden.

=item B<nostrip>

Das F<debian/rules> in der Paketierung sollte sicherstellen, dass die Fehlersuchinformationen nicht von Objekten entfernt werden. Falls F<debian/rules> das Make-Fragment B<mk/buildtools.mk> einbindet, dann wir die Make-Variable B<STRIP> diese Option respektieren.

=item B<terse>

B<dpkg-buildpackage> wird den Schalter B<--no-print-directory> von L<make(1)> an die Umgebungsvariable B<MAKEFLAGS> anhängen. Das F<debian/rules> in der Paketierung sollte die Ausführlichkeit reduzieren, aber nicht komplett still sein.

=item B<hardening=>I<Funktionalitätspezi>

=item B<reproducible=>I<Funktionalitätspezi>

=item B<abi=>I<Funktionalitätspezi>

=item B<future=>I<Funktionalitätspezi>

=item B<qa=>I<Funktionalitätspezi>

=item B<optimize=>I<Funktionalitätspezi>

=item B<sanitize=>I<Funktionalitätspezi>

Dies sind die Funktionalitätsbereiche, die die Bauschalter-Funktionalitäten steuern. Lesen Sie L<dpkg-buildflags(1)> zu weiteren Details.

=back

=item B<DEB_BUILD_PROFILES>

Falls gesetzt, wird es als aktive(s) Bau-Profil(e) für das zu bauende Paket verwandt (seit Dpkg 1.17.2). Es ist eine durch Leerzeichen getrennte Liste von Profilnamen. Wird durch die Option B<-P> außer Kraft gesetzt.

=item B<DPKG_COLORS>

Setzt den Farbmodus (seit Dpkg 1.18.5). Die derzeit unterstützten Werte sind: B<auto> (Vorgabe), B<always> und B<never>.

=item B<DPKG_NLS>

Falls dies gesetzt ist, wird es zur Entscheidung, ob Native Language Support, auch als Unterstützung für Internationalisierung (oder i18n) bekannt, aktiviert wird (seit Dpkg 1.19.0). Die akzeptierten Werte sind: B<0> und B<1> (Vorgabe).

=back

=head2 Interne Umgebung

Selbst falls B<dpkg-buildpackage> einige Variablen exportiert, sollte B<debian/rules> sich nicht auf ihr Vorhandensein verlassen, sondern stattdessen die entsprechende Schnittstelle verwenden, um die benötigten Werte abzufragen, da diese Datei der Haupteintrittspunkt für den Bau von Paketen ist und es möglich sein soll, sie unabhängig aufrufen zu können.

=over 

=item B<DEB_BUILD_*>

=item B<DEB_HOST_*>

=item B<DEB_TARGET_*>

Beim Aufruf von B<dpkg-architecture> werden die Parameter von B<-a> und B<-t> durchgereicht. Jede Variable, die von seiner Option B<-s> ausgegeben wird, wird in die Bauumgebung integriert.

=item B<DEB_RULES_REQUIRES_ROOT>

Diese Variable wird auf den Wert, der aus dem Feld B<Rules-Requires-Root>, der Dpkg-Bau-API-Stufe oder von der Befehlszeile erhalten wird, gesetzt. Wenn gesetzt, wird er ein gültiger Wert für das Feld B<Rules-Requires-Root> sein. Er wird dazu verwandt, B<debian/rules> anzugeben, ob die Spezifikation B<rootless-builds.txt> unterstützt wird.

=item B<DEB_GAIN_ROOT_CMD>

Diese Variable wird auf I<root-werde-Befehl> gesetzt, wenn das Feld B<Rules-Requires-Root> auf einen von B<no> und B<binary-targets> verschiedenen Wert gesetzt wird.

=item B<SOURCE_DATE_EPOCH>

Diese Variable wird auf den Unix-Zeitstempel seit der Epoche des letzten Eintrags in I<debian/changelog> gesetzt, falls sie noch nicht definiert ist.

=back

=head1 DATEIEN

=over 

=item I<%PKGCONFDIR%/buildpackage.conf>

Systemweite Konfigurationsdatei

=item I<$XDG_CONFIG_HOME/dpkg/buildpackage.conf> oder

=item I<$HOME/.config/dpkg/buildpackage.conf>

Benutzerkonfigurationsdatei

=back

=head1 BEMERKUNGEN

=head2 Kompilierschalter werden nicht mehr exportiert

Zwischen Dpkg 1.14.17 and 1.16.1 exportierte B<dpkg-buildpackage> Kompilierschalter (B<CFLAGS>, B<CXXFLAGS>, B<FFLAGS>, B<CPPFLAGS> und B<LDFLAGS>) mit Werten, die von B<dpkg-buildflags> geliefert wurden. Dies ist nicht mehr der Fall.

=head2 Standard Bauziele

B<dpkg-buildpackage> verwendet die Ziele B<build-arch> und B<build-indep> seit Dpkg 1.16.2. Vor Dpkg 1.22.7 gab es Code, der versuchte, die fehlenden Ziele zu erkennen und auf das Ziel B<build> zurückzufallen. Diese Ziele sind daher verpflichtend.

=head1 SICHERHEIT

Das Bauen von Binär- oder Quellpaketen sollte nur mittels vertrauenswürdigen Quelldaten erfolgen.

=head1 FEHLER

Es sollte möglich sein, Leerzeichen und Metazeichen der Shell und Anfangsargumente für I<root-werde-Befehl> und I<Signaturbefehl> anzugeben.

=head1 SIEHE AUCH

I<%PKGDOCDIR%/spec/rootless-builds.txt>, L<dpkg-source(1)>, L<dpkg-architecture(1)>, L<dpkg-buildflags(1)>, L<dpkg-genbuildinfo(1)>, L<dpkg-genchanges(1)>, L<fakeroot(1)>, L<lintian(1)>, L<https://datatracker.ietf.org/doc/draft-dkg-openpgp-stateless-cli/>, L<sq(1)>, L<gpg(1)>.


=head1 ÜBERSETZUNG

Die deutsche Übersetzung wurde 2004, 2006-2025 von Helge Kreutzmann
<debian@helgefjell.de>, 2007 von Florian Rehnisch <eixman@gmx.de> und
2008 von Sven Joachim <svenjoac@gmx.de>
angefertigt. Diese Übersetzung ist Freie Dokumentation; lesen Sie die
GNU General Public License Version 2 oder neuer für die Kopierbedingungen.
Es gibt KEINE HAFTUNG.
