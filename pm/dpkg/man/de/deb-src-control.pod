
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 BEZEICHNUNG

deb-src-control - Dateiformat der Vorlagensteuerdatei von Debian-Quellpaketen

=head1 ÜBERSICHT

B<debian/control>

=head1 BESCHREIBUNG

Jedes Debian-Quellpaket enthält die Vorlagenquellsteuerdatei „B<debian/control>“. Deren L<deb822(5)>-Format ist eine Obermenge der in Debian-Binärpaketen ausgelieferten B<control>-Datei, siehe L<deb-control(5)>.

Diese Datei enthält mindestens zwei Absätze, die durch eine Leerzeile getrennt werden. Der erste Absatz heißt Quellpaketabsatz und führt alle allgemeinen Informationen über das Quellpaket auf, während alle folgende Absätze Binärpaketabsatz heißen und genau ein Binärpaket pro Absatz beschreiben. Jeder Absatz besteht aus mindestens einem Feld. Ein Feld beginnt mit einem Feldnamen, wie B<Package> oder B<Section> (Groß-/Kleinschreibung egal), gefolgt von einem Doppelpunkt, dem Inhalt des Feldes (Groß-/Kleinschreibung ist relevant, außer anders angegeben) und einem Zeilenumbruch. Mehrzeilige Felder sind auch erlaubt, aber jede ergänzende Zeile ohne Feldnamen muss mit mindestens einem Leerzeichen beginnen. Der Inhalt des mehrzeiligen Feldes wird durch die Werkzeuge im Allgemeinen zu einer Zeile zusammengeführt (das Feld B<Description> ist eine Ausnahme, siehe unten). Um Leerzeilen in ein mehrzeiliges Feld einzufügen, verwenden Sie einen Satzpunkt nach dem Leerzeichen. Zeilen, die mit ‚B<#>’ beginnen, werden als Kommentare betrachtet.

=head1 QUELLPAKET-FELDER

=over 

=item B<Source:> I<Quellpaketname> (verpflichtend)

Der Wert dieses Feldes ist der Name des Quellpakets und muss mit dem Namen des Quellpakets in der Datei I<debian/changelog> übereinstimmen. Ein Paketname darf nur aus Kleinbuchstaben (a-z), Ziffern (0-9), Plus- (+) und Minuszeichen (-) und Satzpunkten (.) bestehen. Paketnamen müssen mindestens zwei Zeichen lang sein und mit einem klein geschriebenen alphanumerischen Zeichen (a-z0-9) beginnen.

=item B<Maintainer:> I<Vollständiger-Name-und-E-Mail> (empfohlen)

Sollte in dem Format „Joe Bloggs E<lt>jbloggs@foo.comE<gt>“ sein und verweist auf die Person, die derzeit das Paket betreut, im Gegensatz zum Autor der Software, die paketiert wurde, oder dem ursprünglichen Paketierer.

=item B<Uploaders:> I<Vollständiger-Name-und-E-Mail>

Listet die Namen und E-Mail-Adressen der Ko-Betreuer des Pakets auf, im gleichen Format wie das Feld B<Maintainer>. Mehrere Ko-Betreuer sollten durch Kommata getrennt werden.

=item B<Standards-Version:>  I<Versionszeichenkette>

Dies dokumentiert die neuste Version der Standards der Distribution, an die sich das Paket hält.

=item B<Description> I<Kurzbeschreibung>

=item S< >I<Langbeschreibung>

Das Format der Quellpaketbeschreibung ist eine kurze knappe Zusammenfassung auf der ersten Zeile (nach dem Feld B<Description>). Die folgenden Zeilen sollten als längere, detailliertere Beschreibung verwendet werden. Jede Zeile der Langbeschreibung muss von einem Leerzeichen begonnen werden, und Leerzeilen in der Langbeschreibung müssen einen einzelnen ‚B<.>’ hinter dem einleitenden Leerzeichen enthalten.

=item B<Homepage:> I<URL>

Die URL des Original- (Upstream-)Projekts.

=item B<Bugs:> I<URL>

Die I<URL> der Fehlerdatenbank für dieses Paket. Das derzeit verwendete Format ist I<BTS-Art>B<://>I<BTS-Adresse> wie in B<debbugs://bugs.debian.org>. Dieses Feld wird normalerweise nicht benötigt.

=item B<Build-Driver:> I<Treibername>

Dieses experiementelle Feld legt den Namen des Bautreibers fest, der zum Bau dieses Pakets verwendet werden soll. Falls nicht angegeben, ist die Vorgabe für I<Treibername> B<debian-rules>.

Dieses Feld wird seit Dpkg 1.22.7 unterstützt.

=item B<Rules-Requires-Root:> B<no>|B<binary-targets>|I<impl-keywords>

Dieses Feld wird verwandt, um anzuzeigen, ob die Datei B<debian/rules> (fake)root-Priviliegien benötigt, um einige ihrer Ziele auszuführen, und falls ja, wann.

=over 

=item B<no>

Die Binärziele werden überhaupt kein (fake)root benötigen. Dies ist in B<dpkg-build-api> Stufe >=1 oder seit Dpkg 1.22.13 die Vorgabe.

=item B<binary-targets>

Die Binärziele müssen immer unter (fake)root ausgeführt werden. Dieser Wert ist in B<dpkg-build-api> Stufe 0 bis Dpkg 1.22.13 die Vorgabe, wenn die Datei fehlt. Die Aufnahme dieses Feldes mit einem expliziten B<binary-targets> ist zwar streng genommen nicht notwendig, markiert aber, dass es darauf untersucht wurde.

=item I<Impl-Schlüsselwörter>

Dies ist eine durch Leerzeichen getrennte Liste von Schlüsselwörtern, die festlegen, wann (fake)root benötigt wird.

Schlüsselwörter bestehen aus I<Namensraum>/I<Fälle>. Der Teil I<Namensraum> kann kein „/“ oder Leerraum enthalten. Der Teil I<Fälle> kann kein Leerraum enthalten. Desweiteren müssen beide Teile ausschließlich aus darstellbaren ASCII-Zeichen bestehen.

Jedes Werkzeug/Paket wird einen Namensraum nach sich selbst definieren und eine Reihe von Fällen bereitstellen, in denen (fake)root benötigt wird (siehe „Implementation provided keywords“ in I<rootless-builds.txt>).

Wenn das Feld auf eines der I<Impl-Schlüsselwörter> gesetzt wird, wird das Bauprogramm eine Schnittstelle bereitstellen, die zur Ausführung unter (fake)root verwandt wird (siehe „Gain Root API“ in I<rootless-builds.txt>).

=back

=item B<Testsuite:> I<Namenliste>

=item B<Testsuite-Triggers:> I<Paketliste>

Diese Felder sind in der Handbuchseite L<dsc(5)> beschrieben, da sie aus Informationen, die aus B<debian/tests/control> abgeleitet sind, erstellt oder wörtlich in die B<control>-Datei der Quellen kopiert werden.

=item B<Vcs-Arch*:> I<URL>

=item B<Vcs-Bzr:> I<URL>

=item B<Vcs-Cvs:> I<URL>

=item B<Vcs-Darcs:> I<URL>

=item B<Vcs-Git:> I<URL>

=item B<Vcs-Hg:> I<URL>

=item B<Vcs-Mtn:> I<URL>

=item B<Vcs-Svn:> I<URL>

Die I<URL> des Versionskontrollsystem-Depots, das für die Betreuung des Pakets verwandt wird. Derzeit werden B<Arch>, B<Bzr> (Bazaar), B<Cvs>, B<Darcs>, B<Git>, B<Hg> (Mercurial), B<Mtn> (Monotone) und B<Svn> (Subversion) unterstützt. Normalerweise zeigt dieses Feld auf die neuste Version des Pakets, wie den Hauptzweig oder den Trunk.

=item B<Vcs-Browser:> I<URL>

Die I<URL> der Webschnittstelle, um das Versionskontrollsystem-Depot anzuschauen.

=item B<Origin:> I<Name>

Der Name der Distribution, aus der dieses Paket ursprünglich stammt. Dieses Feld wird normalerweise nicht benötigt.

=item B<Section:> I<Sektion>

Dies ist ein allgemeines Feld, das das Paket in eine Kategorie einordnet, basierend auf der Software, die es installiert. Einige übliche Sektionen sind B<utils>, B<net>, B<mail>, B<text>, B<x11> usw.

Falls entfallen ist die Vorgabe von I<section> B<unknown> (seit Dpkg 1.22.13).

Die akzeptierten Werte hängen von den jeweiligen Distributionsrichtlinien ab.

=item B<Priority:> I<Priorität>

Setzt die Bedeutung dieses Pakets in Bezug zu dem Gesamtsystem. Die bekannten Prioritäten sind B<required>, B<important>, B<standard>, B<optional>, B<extra> und B<unknown>, es können aber auch andere Werte verwandt werden.

Falls entfallen ist die Vorgabe von I<priority> B<optional> (seit Dpkg 1.22.13).

Wie diese Werte angewandt werden, hängt von den jeweiligen Distributionsrichtlinien ab.

=item B<Build-Depends:> I<Paketliste>

Eine Liste der Pakete, die installiert und konfiguriert sein müssen, um das Paket aus den Quellen zu bauen. Diese Abhängigkeiten müssen erfüllt wein, wenn binäre architekturabhängige und unabhängige und Quellpakete gebaut werden. Die Aufnahme einer Abhängigkeit in diese Liste hat nicht den gleichen Effekt wie die Aufnahme in B<Build-Depends-Arch> und B<Build-Depends-Indep>, da die Abhängigkeit auch beim Bau des Quellpaketes erfüllt sein muss.

=item B<Build-Depends-Arch:> I<Paketliste>

Identisch zu B<Build-Depends>, wird aber nur zum Bau der architekturabhängigen Pakete benötigt. In diesem Fall sind die B<Build-Depends> auch installiert. Dieses Feld wurde seit Dpkg 1.16.4 unterstützt; um mit älteren Dpkg-Versionen zu bauen, sollte stattdessen B<Build-Depends> verwandt werden.

=item B<Build-Depends-Indep:> I<Paketliste>

Identisch zu B<Build-Depends>, wird aber nur zum Bau der architekturunabhängigen Pakete benötigt. In diesem Fall sind die B<Build-Depends> auch installiert.

=item B<Build-Conflicts:> I<Paketliste>

Eine Liste von Paketen, die beim Bau des Pakets nicht installiert sein sollten, beispielsweise da sie mit dem verwandten Bausystem in Konflikt geraten. Die Aufnahme einer Abhängigkeit in diese Liste hat den gleichen Effekt wie die Aufnahme in B<Build-Conflicts-Arch> und B<Build-Conflicts-Indep> mit dem zusätzlichen Effekt, dass es für reine Quellen-Bauten verwandt wird.

=item B<Build-Conflicts-Arch:> I<Paketliste>

Identisch zu B<Build-Conflicts>, aber nur beim Bau der architekturabhängigen Pakete. Dieses Feld wird seit Dpkg 1.16.4 unterstützt; um mit älteren Dpkg-Versionen zu bauen, sollte stattdessen B<Build-Conflicts> verwandt werden.

=item B<Build-Conflicts-Indep:> I<Paketliste>

Identisch zu B<Build-Conflicts>, wird aber nur zum Bau der architekturunabhängigen Pakete benötigt.

=back

Die Syntax der Felder B<Build-Depends>, B<Build-Depends-Arch> und B<Build-Depends-Indep> ist eine Liste von Gruppen von alternativen Paketen. Jede Gruppe ist eine Liste von durch vertikale Striche (oder „Pipe“-Symbole) ‚B<|>’ getrennten Paketen. Die Gruppen werden durch Kommata ‚B<,>’ getrennt. Sie können mit einem abschließenden Komma enden, das beim Erstellen der Felder für L<deb-control(5)> entfernt wird (seit Dpkg 1.10.14). Kommata müssen als „UND“, vertikale Striche als „ODER“ gelesen werden, wobei die vertikalen Striche stärker binden. Jedem Paketnamen folgt optional eine Architekturspezifikation, die nach einem Doppelpunkt ‚B<:>’ angehängt wird, optional gefolgt von einer Versionsnummer-Spezifikation in Klammern ‚B<(>’ und ‚B<)>’, einer Architekturspezifikation in eckigen Klammern ‚B<[>’ und ‚B<]>’ und einer Einschränkungsformel, die aus einer oder mehr Listen von Profilnamen in spitzen Klammern ‚B<E<lt>>’ und ‚B<E<gt>>’ besteht.

Syntaxtisch werden die Felder B<Build-Conflicts>, B<Build-Conflicts-Arch> und B<Build-Conflicts-Indep> durch eine Kommata-getrennte Liste von Paketnamen dargestellt, wobei das Komma als „UND“ verstanden wird. Die Liste kann mit einem abschließenden Komma enden, das beim Erstellen der Felder für L<deb-control(5)> entfernt wird (seit Dpkg 1.10.14). Die Angabe alternativer Pakete mit dem „Pipe“-Symbol wird nicht unterstützt. Jedem Paketnamen folgt optional eine Versionsnummerangabe in Klammern, eine Architekturspezifikation in eckigen Klammern und einer Einschränkungsformel, die aus einer oder mehr Listen von Profilnamen in spitzen Klammern besteht.

Eine Architekturspezifikation kann ein echter Debian-Architekturname sein (seit Dpkg 1.16.5), B<any> (seit Dpkg 1.16.2) oder B<native> (seit Dpkg 1.16.5). Falls er fehlt, ist die Vorgabe für das Feld B<Build-Depends> die aktuelle Host-Architektur, die Vorgabe für das Feld B<Build-Conflicts> ist B<any>. Jeder echte Debian-Architekturname passt genau auf diese Architektur für diesen Paketnamen, B<any> passt auf jede Architektur für diesen Paketnamen, falls das Paket mit B<Multi-Arch: allowed> markiert ist, und B<native> passt auf die aktuelle Bau-Architektur, falls das Paket nicht mit B<Multi-Arch: foreign> markiert ist.

Eine Versionsnummer kann mit ‚B<E<gt>E<gt>>’ beginnen, in diesem Falle passen alle neueren Versionen, und kann die Debian-Paketrevision (getrennt durch einen Bindestrich) enthalten oder auch nicht. Akzeptierte Versionsbeziehungen sind ‚B<E<gt>E<gt>>’ für größer als, ‚B<E<lt>E<lt>>’ für kleiner als, ‚B<E<gt>=>’ für größer als oder identisch zu, ‚B<E<lt>=>’ für kleiner als oder identisch zu und ‚B<=>’ für identisch zu.

Eine Architekturspezifikation besteht aus einer oder mehreren durch Leerraumzeichen getrennten Architekturnamen. Jedem Namen darf ein Ausrufezeichen vorangestellt werden, das „NICHT“ bedeutet.

Eine Einschränkungsformel besteht aus einer oder mehrerer durch Leerraum getrennten Einschränkungslisten. Jede Einschränkungsliste wird in spitze Klammern eingeschlossen. Einträge in den Einschränkungslisten sind Bauprofilnamen, getrennt durch Leerraum. Diesen Listen kann ein Ausrufezeichen vorangestellt werden, das „NICHT“ bedeutet. Eine Einschränkungsformel stellt einen Ausdruck in einer disjunkten Normalform dar.

Beachten Sie, dass die Abhängigkeiten von Paketen aus der Menge der B<build-essential> entfallen kann und die Angabe von Baukonflikten gegen sie nicht möglich ist. Eine Liste dieser Pakete befindet sich im Paket build-essential.

=head1 BINÄRPAKET-FELDER

Beachten Sie, dass die Felder B<Priority>, B<Section> und B<Homepage> sich auch im Binärprogrammabsatz befinden können, um die globalen Werte des Quellpakets zu überschreiben.

=over 

=item B<Package:> I<Binärpaketname> (verpflichtend)

Dieses Feld wird zur Angabe des Binärpaketnamens verwandt. Es gelten die gleichen Einschränkungen wie beim Quellpaketnamen.

=item B<Package-Type:> B<deb>|B<udeb>|I<type>

Dieses Feld definiert die Art des Pakets. B<udeb> ist für größenbegrenzte Pakete, wie sie vom Debian-Installer verwandt werden. B<deb> ist der Standardwert, er wird angenommen, falls das Feld fehlt. Weitere Typen könnten in der Zukunft hinzugefügt werden.

=item B<Architecture:> I<arch>|B<all>|B<any> (verpflichtend)

Die Architektur gibt an, auf welcher Art von Hardware dieses Paket läuft. Bei Paketen, die auf allen Architekturen laufen, verwenden Sie den Wert B<any>. Für Pakete, die architekturunabhängig sind, wie Shell- und Perl-Skripte oder Dokumentation, verwenden Sie den Wert B<all>. Um das Paket für einen bestimmten Satz von Architekturen zu begrenzen, geben Sie die durch Leerzeichen getrennten Namen der Architekturen an. Es ist auch möglich, Platzhalter für Architekturen in dieser Liste anzugeben (lesen Sie L<dpkg-architecture(1)> für weitere Informationen dazu).

=item B<Build-Profiles:> I<Einschränkungsformel>

Dieses Feld legt die Bedingungen fest, zu denen dieses Binärpaket (nicht) baut. Um diese Bedingung auszudrücken, wird die Einschränkungsformelsyntax aus dem Feld B<Build-Depends> verwandt (einschließlich der spitzen Klammern).

Falls der Absatz eines binären Pakets dieses Feld nicht enthält, dann bedeutet dies implizit, dass es mit allen Bauprofilen (darunter auch keinem) baut.

Mit anderen Worten: Falls der Absatz eines Binärpaketes mit einem nicht leeren Feld B<Build-Profiles> kommentiert wird, dann wird dieses Binärpaket erstellt, falls und nur falls der Ausdruck in konjunktiver Normalform sich auf „wahr“ berechnet.

=item B<Protected:> B<yes>|B<no>

=item B<Essential:> B<yes>|B<no>

=item B<Build-Essential:> B<yes>|B<no>

=item B<Multi-Arch:> B<same>|B<foreign>|B<allowed>|B<no>

=item B<Tag:>  I<Liste-von-Markierungen>

=item B<Description:> I<Kurzbeschreibung> (empfohlen)

Diese Felder sind in der Handbuchseite L<deb-control(5)> beschrieben, da sie wörtlich in die I<control>-Datei des Binärpakets kopiert werden.

=item B<Depends:>  I<Paketliste>

=item B<Pre-Depends:>  I<Paketliste>

=item B<Recommends:>  I<Paketliste>

=item B<Suggests:>  I<Paketliste>

=item B<Breaks:>  I<Paketliste>

=item B<Enhances:>  I<Paketliste>

=item B<Replaces:> I<Paketliste>

=item B<Conflicts:>  I<Paketliste>

=item B<Provides:>  I<Paketliste>

=item B<Built-Using:>  I<Paketliste>

=item B<Static-Built-Using:> I<Paketliste>

Diese Felder geben Beziehungen zwischen Paketen an. Sie werden in der Handbuchseite L<deb-control(5)> erläutert. In I<debian/control> können diese Felder auch mit einem abschließenden Komma enden (seit Dpkg 1.10.14), Architekturspezifikations- und -einschränkungsformeln enthalten, die alle beim Erstellen von L<deb-control(5)> reduziert werden.

=item B<Subarchitecture:>  I<Wert>

=item B<Kernel-Version:>  I<Wert>

=item B<Installer-Menu-Item:>  I<Wert>

Diese Felder werden im Debian-Installer in B<udeb>s verwandt und werden normalerweise nicht benötigt. Für weitere Informationen über sie, siehe L<https://salsa.debian.org/installer-team/debian-installer/-/raw/master/doc/devel/modules.txt>.

=back

=head1 BENUTZERDEFINIERTE FELDER

Es ist erlaubt, zusätzliche benutzerdefinierte Felder zu der Steuerdatei hinzuzufügen. Die Werkzeuge werden diese Felder ignorieren. Falls Sie möchten, dass diese Felder in die Ausgabedateien, wie das Binärpaket, rüberkopiert werden sollen, müssen Sie ein angepasstes Namensschema verwenden: Die Felder sollten mit einem B<X>, gefolgt von Null oder mehreren Buchstaben aus B<SBC> und einem Bindestrich, beginnen.

=over 

=item B<S>

Das Feld wird in der Steuerdatei des Quellpakets auftauchen, siehe L<dsc(5)>.

=item B<B>

Das Feld wird in der Steuerdatei des Binärpakets auftauchen, siehe L<deb-control(5)>.

=item B<C>

Das Feld wird in der Steuerdatei des Uploads (.changes) auftauchen, siehe L<deb-changes(5)>.

=back

Beachten Sie, dass die Präfixe B<X>[B<SBC>]B<-> abgeschnitten werden, wenn die Felder in die Ausgabedateien rüberkopiert werden. Ein Feld B<XC-Approved-By> wird als B<Approved-By> in der .changes-Datei und nicht in der Steuerdatei des Binär- und Quellpakets auftauchen.

Beachten Sie, dass diese benutzerdefinierten Felder den globalen Namensraum nutzen werden und somit in der Zukunft mit offiziell erkannten Feldern kollidieren könnten. Um solche möglichen Situationen zu vermeiden, können Sie den Feldern B<Private->, wie in B<XB-Private-Neues-Feld>, voranstellen.

=head1 BEISPIEL

 # Kommentar
 Source: dpkg
 Section: admin
 Priority: required
 Maintainer: Dpkg Developers <debian-dpkg@lists.debian.org>
 # Dieses Feld wird in das Binär- und Quellpaket kopiert.
 XBS-Upstream-Release-Status: stable
 Homepage: https://wiki.debian.org/Teams/Dpkg
 Vcs-Browser: https://git.dpkg.org/cgit/dpkg/dpkg.git
 Vcs-Git: https://git.dpkg.org/git/dpkg/dpkg.git
 Standards-Version: 4.7.0
 Build-Depends:
  debhelper-compat (= 13),
  debhelper (>= 13.10~),
  pkgconf,
  libselinux1-dev (>= 1.28-4) [!linux-any],

 Package: dpkg-dev
 Section: utils
 Priority: optional
 Architecture: all
 # Dies ist ein spezielles Feld im Binärpaket.
 XB-Mentoring-Contact: Raphael Hertzog <hertzog@debian.org>
 Depends:
  binutils,
  bzip2,
  cpio (>= 2.4.2-2),
 # This is a comment in the middle of a field value.
  dpkg (>= 1.14.6),
  libtimedate-perl,
  lzma,
  make,
  patch (>= 2.2-1),
  perl-modules,
  perl5,
 Recommends:
  gcc | c-compiler,
  build-essential,
 Suggests:
  gnupg,
  debian-keyring,
 Conflicts:
  dpkg-cross (<< 2.0.0),
  devscripts (<< 2.10.26),
 Replaces:
  manpages-pl (<= 20051117-1),
 Description: Debian package development tools
  This package provides the development tools (including dpkg-source)
  required to unpack, build and upload Debian source packages.
  .
  Most Debian source packages will require additional tools to build;
  for example, most packages need make and the C compiler gcc.

=head1 SIEHE AUCH

I<%PKGDOCDIR%/spec/rootless-builds.txt>, L<deb822(5)>, L<deb-control(5)>, L<deb-version(7)>, L<dpkg-source(1)>


=head1 ÜBERSETZUNG

Die deutsche Übersetzung wurde 2004, 2006-2025 von Helge Kreutzmann
<debian@helgefjell.de>, 2007 von Florian Rehnisch <eixman@gmx.de> und
2008 von Sven Joachim <svenjoac@gmx.de>
angefertigt. Diese Übersetzung ist Freie Dokumentation; lesen Sie die
GNU General Public License Version 2 oder neuer für die Kopierbedingungen.
Es gibt KEINE HAFTUNG.
