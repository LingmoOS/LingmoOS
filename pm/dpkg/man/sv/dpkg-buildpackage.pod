
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 NAMN

dpkg-buildpackage - bygg binär- eller källkodspaket från källkod

=head1 SYNOPS

B<dpkg-buildpackage> [I<flagga>...] [B<-->] [I<filnamn>.dsc|I<katalog>]

=head1 BESKRIVNING

B<dpkg-buildprogram> är ett program som automatiserar processen med att bygga ett Debianpaket.

Flagoorna I<filnamn>.dsc och I<katalog> stöds sedan dpkg 1.22.7. Semantiken för dessa flaggor är experimentella.

Det består av följande steg:

=over 

=item B<1.>

Kroken B<preinit> körs innan några källkodsfiler läses. Om en B<.dsc>-fil anges packar programmet upp den på nytt och byter katalog till den, om en I<katalog> anges byter det katalog till den, annars förväntar det att den aktuella katalogen innehåller källkodsträdet. Byggmiljön förbereds genom att diverse miljövariabler sätts (se B<MILJÖ>), kroken B<init> körs och B<dpkg-source --before-build> anropas (såvida inte B<-T> eller B<--target> används).

=item B<2.>

Byggberoenden och -konflikter kontrolleras att de uppfylls (såvida inte B<-d> eller B<--no-check-builddeps> anges).

=item B<3.>

Om ett eller flera specifika mål har valts med flaggan B<-T> eller B<--target> anropas de målen, varpå programmet avslutas. I annat fall körs kroken B<preclean> och anropas B<fakeroot debian/rules clean> för att städa byggträdet (såvida inte B<-nc> eller  B<--no-pre-clean> anges).

=item B<4.>

Kör kroken B<source> och anropar B<dpkg-source -b> för att skapa källkodspaketet (om ett B<source>-bygge (källkod) har ombetts via B<--build> eller liknande flaggor, och om ingen B<.dsc> har angivits).

=item B<5.>

Kör kroken B<build> och anropar B<debian/rules> I<byggmål>, därefter körs kroken B<binary> följt av B<fakeroot debian/rules> I<binärmål> (såvida inte ett bygge av enbart källkod har valts med B<--build=source> eller liknande flaggor). Observera att I<byggmål> och I<binärmål> är ett av B<build> och B<binary> (förval, eller om ett B<any>- eller B<all>-bygge har valts med B<--build> eller motsvarande flaggor), eller B<build-arch> och B<binary-arch> (om ett B<any>- men inte ett B<all>-bygge har valts med B<--build> eller liknande flaggor), eller B<build-indep> och B<binary-indep> (om ett B<all>- men inte ett B<any>-bygge har valts med B<--build> eller liknande flaggor).

=item B<6.>

Kör kroken B<buildinfo> och anropar B<dpkg-genbuildinfo> för att skapa en B<.buildinfo>-fil. Många av flaggorna till B<dpkg-buildpackage> vidaresänds till B<dpkg-genchanges>. Om en I<.dsc> har angivits kommer den att refereras till i den genererade B<.buildinfo>-filen, så att vi kan fastställa källkodsträdets ursprung.

=item B<7.>

Kör kroken B<changes> och anropar B<dpkg-genchanges> för att skapa en B<.changes>-fil. Namnet på B<.changes>-filen kommer att bero på byggtypen och kommer vara så specifik som möjligt, men inte mer; namnet kommer att vara:

=over 

=item I<källkodsnamn>B<_>I<binärversion>B<_>I<ark>B<.changes>

för ett bygge som innehåller B<any> (någon)

=item I<källkodsnamn>B<_>I<binärversion>B<_>B<all.changes>

annars för ett bygge som innehåller B<all> (alla)

=item I<källkodsnamn>B<_>I<källkodsversion>B<_>B<source.changes>.

annars för ett bygge som innehåller B<source> (källkod)

=back

Många av flaggorna till B<dpkg-buildpackage> vidaresänds till B<dpkg-genchanges>.

=item B<8.>

Kör kroken B<postclean> och, om B<-tc> eller B<--post-clean> anges, anropar B<fakeroot debian/rules clean> ytterligare en gång.

=item B<9.>

Anropar B<dpkg-source --after-build>.

=item B<10.>

Kör kroken B<check> och anropar en paketkontrollerare för B<.changes>-filen (om ett kommando har angivits med B<DEB_CHECK_COMMAND> eller med B<--check-command>).

=item B<11.>

Kör kroken B<sign> och signerar med OpenPGP-programmet (såvida det inte är ett UNRELEASED-bygge, eller om B<--no-sign> angavs) för att signera B<.dsc>-filen (om sådan finns, såvida inte B<-us> eller B<--unsigned-source> anges), B<.buildinfo>-filen (såvida inte B<-ui>, B<--unsigned-buildinfo>, B<-uc> eller B<--unsigned-changes> anges) och B<.changes>-filen (såvida inte B<-uc> eller B<--unsigned-changes> anges).

=item B<12.>

Om en B<.dsc>-fil har angivits tas den uppackade källkodskatalogen bort.

=item B<13.>

Kör kroken B<done>.

=back

=head1 FLAGGOR

Alla långa flaggor kan ges både på kommandoraden och i B<dpkg-buildpackage>:s system- och användarkonfigurationsfiler. En rad i konfigurationsfilen är antingen en flagga (precis samma som på kommandoraden, men utan inledande bindestreck) eller en kommentar (om den börjar med ett ”B<#>”).

=over 

=item B<--build=>I<typ>

Anger bygg-I<type> från en kommaavdelad lista med komponenter (sedan dpkg 1.18.5). Alla angivna komponenter kombineras för att välja den byggtypen som ska användas i den enda körningen, vilket leder till en enda byggkörning som skapar en F<.changes>-fil. Sänds vidare till B<dpkg-genchanges>.

Tillåtna värden är:

=over 

=item B<source>

Bygger källkodspaketet.

B<Observera>: När det här värdets används på egen hand och om du bara vill bygga (om) källkodspaketet från ett rent källkodsträd, är det alltid ett bättre alternativ att köra B<dpkg-source> direkt eftersom det inte kräver att några byggberoenden som annars krävs för att anropa målet B<clean> installeras.

=item B<any>

Bygger arkitekturspecifika binärpaket.

=item B<all>

Bygger de arkitekturoberoende binärpaketen.

=item B<binary>

Bygger arkitekturspecifika och -oberoende binärpaket. Detta är ett alias till B<any,all>.

=item B<full>

Bygger allting. Detta är ett alias för B<source,any,all>, och är detsamma som standardläget om inga byggflaggor anges.

=back

=item B<-g>

Motsvarar B<--build=source,all> (sedan dpkg 1.17.11).

=item B<-G>

Motsvarar B<--build=source,any> (sedan dpkg 1.17.11).

=item B<-b>

Motsvarar B<--build=binary> eller B<--build=any,all>.

=item B<-B>

Motsvarar B<--build=any>.

=item B<-A>

Motsvarar B<--build=all>.

=item B<-S>

Motsvarar B<--build=source>.

=item B<-F>

Motsvarar B<--build=full>, B<--build=source,binary> eller B<--build=source,any,all> (sedan dpkg 1.15.8).

=item B<--target=>I<mål>[,...]

=item B<--target> I<mål>[,...]

=item B<-T>, B<--rules-target=>I<mål>[,...]

Anropar B<debian/rules> I<mål> en gång per angivet mål, efter att ha konfigurerat byggmiljön (förutom att anropa B<dpkg-source --before-build>), och avbryter byggprocessen efteråt (sedan dpkg 1.15.0, lång flagga sedan dpkg 1.18.8, stöd för flera mål sedan dpkg 1.18.16). Om B<--as-root> också anges körs kommandot som root (se B<--root-command>). Observera att kända mål som måste köras som root inte behöver flaggan (dvs. målen B<clean>, B<binary>, B<binary-arch> och B<binary-indep>).

=item B<--as-root>

Ger endast mening tillsammans med B<--target> (sedan dpkg 1.15.0). Kräver att målet körs med root-behörighet.

=item B<-si>

=item B<-sa>

=item B<-sd>

=item B<-v>I<version>

=item B<-C>I<ändringsbeskrivning>

=item B<-m>I<paketansvarige-adress>

=item B<-e>I<paketansvarige-adress>

Sänds vidare utan ändringar till B<dpkg-genchanges>. Se dess manualsida.

=item B<--build-by=>I<paketansvarige-adress>

=item  B<--source-by=>I<paketansvarige-adress> (sedan dpkg 1.21.10)

Sänds som B<-m> till B<dpkg-genchanges>. Se dess manualsida.

=item B<--release-by=>I<paketansvarige-adress>

=item B<--changed-by=>I<paketansvarige-adress> (sedan dpkg 1.21.10)

Sänds som B<-e> till B<dpkg-genchanges>. Se dess manualsida.

=item B<-a>, B<--host-arch> I<arkitektur>

Ange Debianarkitekturen vi bygger för (lång flagga sedan dpkg 1.17.17). Arkitekturen för maskinen vi bygger på bestäms automatiskt, och är även standard för värdmaskinen.

=item B<-t>, B<--host-type> I<gnu-system-typ>

Ange GNU-systemtyp vi bygger för (lång flagga sedan dpkg 1.17.17). Den kan användas i stället för B<--host-arch> eller som ett komplement för att överstyra standard-GNU-systemtypen för Debian-målarkitekturen.

=item B<--target-arch> I<arkitektur>

Ange Debianarkitekturen binärerna som byggs bygger för (sedan dpkg 1.17.17). Standardvärde är värdmaskinen.

=item B<--target-type> I<gnu-system-type>

Ange GNU-systemtyp vi binärerna vi som byggs bygger för (sedan dpkg 1.17.17). Den kan användas i stället för B<--target-arch> eller som ett komplement för att överstyra standard-GNU-systemtypen för Debian-målarkitekturen.

=item B<-P>, B<--build-profile=>I<profil>[B<,>...]

Ange profil(er) vi bygger, som en kommaavdelad lista (sedan dpkg 1.17.2, lång flagga sedan dpkg 1.18.8). Standardbeteendet är att inte bygga för någon specifik profil. Lägger även till dem (som en blankstegsavdelad lista) till miljövariabeln B<DEB_BUILD_PROFILES> vilket, till exempel, gör det möjligt för B<debian/rules>-filer att använda informationen för villkorliga byggen.

=item B<-j>, B<--jobs>[=I<jobb>|B<auto>]

Antalet jobb som tillåts att köras samtidigt (sedan dpkg 1.14.7, lång flagga sedan dpkg 1.18.8). Antal jobb motsvarande antalet tillgängliga processorer om B<auto> anges (sedan dpkg 1.17.10), eller ett obegränsat antal om I<jobb> inte anges. Förvalt beteende är B<auto> (sedan dpkg 1.18.11) i icke-tvingat läge (sedan dpkg 1.21.10), och som sådant är det alltid säkrare att använda med alla paket, däribland de som inte kan byggas parallellt på ett säkert sätt. Om antal jobb sätts till B<1> kommer seriell exekvering att återställas.

Lägger till B<parallel=>I<jobb> eller B<parallel> till miljövariabeln B<DEB_BUILD_OPTIONS>, vilket gör det möjligt för debian/rules-filer att använda informationen för egna ändamål om de önskar. Värdet för I<jobb> kommer att överstyra värdet B<parallel=>I<jobb> eller B<parallel> i miljövariabeln B<DEB_BUILD_OPTIONS>. Observera att B<auto>-värdet kommer ersättas av det faktiska antalet för närvarande aktiva processorer, och därför inte kommer sändas med till barnprocesser. Om antalet tillgängliga processorer inte kan tas fram kommer koden att falla tillbaka till seriell exekvering (sedan dpkg 1.18.15), även om detta bara borde ske på exotiska och icke stödda system.

=item B<-J>, B<--jobs-try>[=I<jobb>|B<auto>]

Den här flaggan (sedan dpkg 1.18.2, lång flagga sedan dpkg 1.18.8) motsvarar B<-j> ovan.

Eftersom beteendet för B<-j> ändrades i dpkg 1.21.10 till att vara valfritt kan du använda den här flaggan istället om du måste garantera semantiken över flera dpkg-utgivningsserier.

=item B<--jobs-force>[=I<jobs>|B<auto>]

Den här flaggan (sedan dpkg 1.12.10) motsvarar flaggan B<--jobs> med undantaget att det aktiverar tvingat parallellt läge, genom att lägga till B<make> B<-j>-flaggan med antalet beräknade parallella jobb i miljövariabeln B<MAKEFLAGS>.

Detta borde göra så att alla senare make-anrop ärver flaggan och därmed påtvinga parallelliseringsinställningen i paketeringen (och möjligen uppströmsbyggsystemet om det det använder L<make(1)>), oberoende av om det stöder parallella bygg, något som kan komma att orsaka byggfel.

B<Observera>: Makefiler som inte kan köras parallellt bör anses felaktiga. De bör antingen göras säkra för parallellisering, eller markeras som osäkra med L<make(1)>-målet B<.NOTPARALLEL>.

=item B<-D>, B<--check-builddeps>

Kontrollera  byggberoenden och -konflikter; avbryt om de inte uppfylls (lång flagga sedan dpkg 1.18.8). Detta är standardbeteendet.

=item B<-d>, B<--no-check-builddeps>

Kontrollera inte byggberoenden eller -konflikter (lång flagga sedan dpkg 1.18.8).

=item B<--ignore-builtin-builddeps>

Kontrollera inte inbyggda byggberoenden och -konflikter (sedan dpkg 1.18.2). Detta är de distributionsberoende byggberoendena som vanligtvis krävs i en byggmiljö, paketuppsättningen som kallas Build-Essential (”Bygg-Nödvändiga”).

=item B<--rules-requires-root>

Följ inte fältet B<Rules-Requires-Root>, fall tillbaka på dess gamla förval B<binary-targets> (sedan dpkg 1.19.1).

=item B<-nc>, B<--no-pre-clean>

Städa inte upp byggträdet före bygget (lång flagga sedan dpkg 1.18.8). Implicerar B<-b> om inget annat har valts bland B<-F>, B<-g>, B<-G>, B<-B>, B<-A> eller B<-S>. Implicerar B<-d> med B<-S> (sedan dpkg 1.18.0).

=item B<--pre-clean>

Städa källkodsträdet före bygget (sedan dpkg 1.18.8). Detta är standardbeteendet.

=item B<-tc>, B<--post-clean>

Städa källkodsträdet (använder I<få-root-kommando> B<debian/rules clean>) efter att paketet har byggts (lång flagga sedan dpkg 1.18.8).

=item B<--no-post-clean>

Städa inte upp byggträdet efter bygget (sedan dpkg 1.19.1). Detta är standardbeteendet.

=item B<--sanitize-env>

Sanera byggmiljön (sedan dpkg 1.20.0). Detta återställer eller tar bort miljövariabler, umask, och eventuella andra processattribut som annars kan påverka paketbygget ogynnsamt. Eftersom den officiella startpunkten för att bygga paket är B<debian/rules> kan inte paket vara beroende av att de här inställningarna är på plats, och bör därför fungera även när de inte är det. Vad som saneras är återförsäljarspecifikt.

=item B<-r>, B<--root-command=>I<gain-root-command>

När B<dpkg-buildpackages> behöver exekvera delar av byggprocessen som root sätter den kommandot som ska exekveras efter I<få-root-kommando> om ett sådant har angivits (lång flagga sedan dpkg 1.18.8). Om inte kommer B<fakeroot> att användas som standard, om kommandot existerar. I<få-root-kommando> måste börja med namnet på det faktiska kommandot som ska anropas samt de parametrar det ska anropas med. I<få-root-kommando> kan innehålla parametrar (de måste vara avdelade med blanksteg) men inga skalmetatecken. I<få-root-kommando> kan typiskt vara B<fakeroot>, B<sudo>, B<super> eller B<really>. B<su> är inte lämpligt eftersom det kräver flaggan B<-c> för att köra ett kommando och även då kan det bara starta användarens skal med B<-c> istället för att sända flaggor individuellt till kommandot som ska startas.

=item B<-R>, B<--rules-file=>I<rules-fil>

För att bygga ett Debianpaket körs normalt kommandot B<debian/rules> med flera olika standardparametrar (sedan dpkg 1.14.17, lång flagga sedan dpkg 1.18.8). Den här flaggan gör det möjligt att använda ett annat programanrop för att bygga paketet (det kan innehålla blankstegsavdelade parametrar). Den kan även användas för att exekvera standardregelfilen med ett annat make-program (till exempel genom att använda B</usr/local/bin/make -f debian/rules> som I<regelfil>).

=item B<--check-command=>I<kontrollkommando>

Kommando som kontrollerar själva B<.changes>-filen och byggda artefakter som refereras i filen (sedan dpkg 1.17.6). Kommandot ska ta sökvägen till B<.changes> som argument. Kommandot är normalt B<lintian>.

=item B<--check-option=>I<val>

Sänder flaggan I<val> till det I<kontrollkommando> som anges med B<DEB_CHECK_COMMAND> eller B<--check-command> (sedan dpkg 1.17.6). Kan användas flera gånger.

=item B<--hook->I<kroknamn>B<=>I<krokkommando>

Sätter den angivna skalkoden i I<krokkommando> som kroken I<kroknamn>, vilket körs vid de tidpunkter som anges i byggstegen (sedan dpkg 1.17.6). Kroken kommer alltid att exekveras även om de efterföljande funktionerna inte utförs (förutom kroken B<binary>). Alla krokar körs i den uppackade källkodskatalogen.

Några krokar kan få ytterligare information genom miljövariabler (sedan dpkg 1.22.0). Alla krokar får krokens namn i miljövariabeln B<DPKG_BUILDPACKAGE_HOOK_NAME> (since dpkg 1.22.0).

B<Observera>: Hakar kan påverka byggprocessen och orsaka att byggen misslyckas om deras kommandon misslyckas, så se upp för oförutsedda konsekvenser.

För närvarande stöds följande I<kroknamn>:

=over 

=item B<preinit>

=item B<init>

=item B<preclean>

=item B<source>

Hämtar B<DPKG_BUILDPACKAGE_HOOK_SOURCE_OPTIONS> med den blankstegsavdelade listan över flaggor som kommer sändas med i anropet till B<dpkg-source>.

=item B<build>

Hämtar B<DPKG_BUILDPACKAGE_HOOK_BUILD_TARGET> med namnet på det byggmål i B<debian/rules> som anropades. Före dpkg 1.22.7 sattes bara variabeln om måket anropats.

=item B<binary>

Hämtar B<DPKG_BUILDPACKAGE_HOOK_BINARY_TARGET> med namnet på det binärmål i B<debian/rules> som anropades, men bara om anropat.

=item B<buildinfo>

Hämtar B<DPKG_BUILDPACKAGE_HOOK_BUILDINFO_OPTIONS> med den blankstegsavdelade listan över flaggor som kommer sändas med i anropet till B<dpkg-genbuildinfo>.

=item B<changes>

Hämtar B<DPKG_BUILDPACKAGE_HOOK_CHANGES_OPTIONS> med den blankstegsavdelade listan över flaggor som kommer sändas med i anropet till B<dpkg-genchanges>.

=item B<postclean>

=item B<check>

Hämtar B<DPKG_BUILDPACKAGE_HOOK_CHECK_OPTIONS> med den blankstegsavdelade listan över flaggor som kommer sändas med i kontroll-kommandanropet.

=item B<sign>

=item B<done>

=back

I<krokkommando> stöder följande substitueringsformatsträng, som appliceras på den föra exekvering:

=over 

=item B<%%>

Ett ensamt %-tecken.

=item B<%a>

Ett booleskt värde (0 eller 1) som anger om följande funktion utförs.

=item B<%p>

Namnet på källkodspaketet.

=item B<%v>

Version för källkodspaketet.

=item B<%s>

Version för källkodspaketet (utan epoken).

=item B<%u>

Uppströmsversionen.

=back

=item B<--buildinfo-file=>I<filnamn>

Ange I<filnamn> att använda för den skapade B<.buildinfo>-filen (sedan dpkg 1.21.0).

=item B<--buildinfo-option=>I<val>

Sänder flaggan I<val> till B<dpkg-genbuildinfo> (sedan dpkg 1.18.11). Kan användas flera gånger.

=item B<--sign-backend=>I<signeringsfunktion>

Ange ett OpenPGP-funktionsgränssnitt att använda när I<sign-command> körs (sedan dpkg 1.21.10).

Förvalet är B<auto>, där det bästa för närvarande tillgängliga funktionen kommer användas. De specifika OpenPGP-funktioner som stöds är, med det bästa först:

=over 4

=item B<sop>

(valfri korrekt implementation av ”Stateless OpenPGP”)

=item B<sq>

(från Sequoia-PGP)

=item B<gpg>

(från GnuPG)

=back

=item B<-p>, B<--sign-command=>I<signeringskommando>

När B<dpkg-buildpackage> måste exekvera en OpenGPG-funktion för att signera ett källkodsstyrfil (B<.dsc>), en B<.buildinfo>-fil eller en B<.changes>-fil kör det I<signeringskommando> (det letar i B<PATH> om så behövs) istället för förvalet eller autodetekterat funktionskommando (lång flagga sedan dpkg 1.18.8). I<signeringskommando> får alla de argument specifika för programmet som anges av B<--sign-backend>. I<signeringskommando> bör inte innehålla blanksteg eller andra skalmetatecken.

=item B<-k>, B<--sign-keyid=>I<nyckel-id>

=item B<--sign-key=>I<nyckel-id>

Ange en Open PGP-nyckel-id (antingen ett fingeravtryck eller ett användar-ID) för den hemliga nyckeln att använda vid signering av paket (B<--sign-key> sedan dpkg 1.18.8, B<--sign-keyid> sedan dpkg 1.21.10).

=item B<--sign-keyfile=>I<nyckelfil>

Ange en OpenPGP-I<nyckelfil> som innehåller den hemliga nyckeln att använda vid signering av paket (sedan dpkg 1.21-10).

B<Observera>: Av säkerhetsskäl är det bäst att hålla I<nyckelfil> låst med ett lösenord.

=item B<-us>, B<--unsigned-source>

Signera inte källkodspaketet (lång flagga sedan dpkg 1.18.8).

=item B<-ui>, B<--unsigned-buildinfo>

Signera inte B<.buildinfo>-filen (sedan dpkg 1.18.19).

=item B<-uc>, B<--unsigned-changes>

Signera inte B<.buildinfo>- och B<.changes>-filerna (lång flagga sedan dpkg 1.18.8).

=item B<--no-sign>

Signera inga filer, detta omfattar källkodspaketet, B<.buildinfo>-filen och B<.changes>-filen (sedan dpkg 1.18.20).

=item B<--force-sign>

Tvinga signering av de slutliga filerna (sedan dpkg 1.17.0), oberoende av B<-us>, B<--unsigned-source>, B<-ui>, B<--unsigned-buildinfo>, B<-uc>, B<--unsigned-changes> eller annan intern heuristik.

=item B<-sn>

=item B<-ss>

=item B<-sA>

=item B<-sk>

=item B<-su>

=item B<-sr>

=item B<-sK>

=item B<-sU>

=item B<-sR>

=item B<-i>, B<--diff-ignore>[=I<reg.uttr>]

=item B<-I>, B<--tar-ignore>[=I<mönster>]

=item B<-z>, B<--compression-level>=I<nivå>

=item B<-Z>, B<--compression>=I<komprimering>

Sänds vidare utan ändringar till B<dpkg-source>. Se dess manualsida.

=item B<--source-option=>I<val>

Sänd flaggan I<val> till B<dpkg-source> (sedan dpkg 1.15.6). Kan användas flera gånger.

=item B<--changes-file=>I<filnamn>

Använd I<filnamn> för den genererade B<.changes>-filen (sedan dpkg 1.21.0).

=item B<--changes-option=>I<val>

Sänder flaggan I<val> till B<dpkg-genchanges> (sedan dpkg 1.15.6). Kan användas flera gånger.

=item B<--admindir=>I<kat>

=item B<--admindir> I<kat>

Ändra platsen för B<dpkg>-databasen (sedan dpkg 1.14.0). Förvald plats är I<%ADMINDIR%>.

=item B<-?>, B<--help>

Visar hjälpskärm och avslutar.

=item B<--version>

Visar version och avslutar.

=back

=head1 MILJÖVARIABLER

=head2 Extern miljö

=over 

=item B<DEB_CHECK_COMMAND>

Om satt, används som kommandot för att kontrollera B<.changes>-filen (sedan dpkg 1.17.6). Överstyrs av flaggan B<--check-command>.

=item B<DEB_SIGN_KEYID>

Används för att signera filerna B<.changes>, B<.buildinfo> och B<.dsc>-filerna om satt (sedan dpkg 1.17.2). Överstyrs av flaggan B<--sign-keyid>.

=item B<DEB_SIGN_KEYFILE>

Används för att signera filerna B<.changes>, B<.buildinfo> och B<.dsc>-filerna om satt (sedan dpkg 1.21.10). Överstyrs av flaggan B<--sign-keyfile>.

=item B<DEB_BUILD_OPTIONS>

Om satt, innehåller en blankstegsavdelad lista med flaggor som påverkar beteendet för några dpkg-verktyg som används i paketbyggandet, och kan påverka paketbyggprocessen om koden i F<debian/rules> stöder dem. Dessa flaggor kan ha parametrar angivna omedelbart efter ett likhetstecken (”B<=>”). För flaggor som stöder flera parametrar avdelas de inte med blanksteg, eftersom dessa reserverats för att avdela flaggor.

Följande flaggor känns och stöds av dpkg-verktygen, andra flaggor som stöds av F<debian/rules> kan anges av distributionsspecifika policydokument.

=over 

=item B<parallel=>I<N>

Paketets F<debian/rules> kan använda den här flaggan för att ställa in byggprocessen att utföra I<N> parallella jobb. Överstyrs av flaggorna B<--jobs> och B<--jobs-force>.

=item B<nocheck>

B<dpkg-buildpackage> ignorerar variabeln B<DEB_CHECK_COMMAND>. Paketets F<debian/rules> förvändas inte att köra testsviter under bygget.

=item B<noopt>

Om F<debian/rules> anropar B<dpkg-buildflags> för att ställa in byggflaggorna kommer de ställas in till att inte aktivera några optimaliseringar.

=item B<nostrip>

Paketets F<debian/rules> bör se till att objekt inte får felsökningsinformation borttagen. Om F<debian/rules> innehåller fragmentet B<mk/buildtools.mk> kommer make-variabeln B<STRIP> respektera denna flagga.

=item B<terse>

B<dpkg-buildpackage> lägger till L<make(1)>-flaggan B<--no-print-directory> till miljövariabeln B<MAKEFLAGS>. Paketets F<debian/rules> bör minska pratsamheten, utan att bli helt tyst.

=item B<hardening=>I<funktionsangivelse>

=item B<reproducible=>I<funktionsangivelse>

=item B<abi=>I<funktionsangivelse>

=item B<future=>I<funktionsangivelse>

=item B<qa=>I<funktionsangivelse>

=item B<optimize=>I<funktionsangivelse>

=item B<sanitize=>I<funktionsangivelse>

Detta är funktionsområden som styr funktioner i byggflaggor. Se L<dpkg-buildflags(1)> för ytterligare detaljer.

=back

=item B<DEB_BUILD_PROFILES>

Om satt, används som aktiv(a) byggprofil(er) för paketet som byggs (sedan dpkg 1.17.2). Det är en blankstegsavdelad lista med profilnamn. Överstyrs av flaggan B<-P>.

=item B<DPKG_COLORS>

Väljer färgläge (sedan dpkg 1.18.5). För närvarande godtas följande värden: B<auto> (förval), B<always> och B<never>.

=item B<DPKG_NLS>

Om satt, används för att bestämma om lokalt språkstöd ska aktiveras, även känt som internationaliseringsstöd (eller i18n) (sedan dpkg 1.19.0). Tillåtna värden är: B<0> och B<1> (förval).

=back

=head2 Intern miljö

Även om B<dpkg-buildpackage> exporterar några variabler bör inte B<debian/rules> vara beroende av deras närvaro och bör istället använda respektive gränssnitt för att hämta de värden som behövs, eftersom filen är huvudstartpunkt för att bygga paket och det även bör stödas att köra den fristående.

=over 

=item B<DEB_BUILD_*>

=item B<DEB_HOST_*>

=item B<DEB_TARGET_*>

B<dpkg-architecture> anropas med flaggorna B<-a> och B<-t> vidaresända. Variabler som skrivs ut via dess B<-s>-flagga integreras i byggmiljön.

=item B<DEB_RULES_REQUIRES_ROOT>

Den här variabeln sätts till värdet som hämtas från fältet B<Rules-Requires-Root>, dpkg-build-api-nivån eller från kommandoraden. När satt kommer det vara ett giltigt värde för fältet B<Rules-Requires-Root>. Det används för att meddela B<debian/rules> huruvida B<rootless-builds.txt>-specifikation stöds.

=item B<DEB_GAIN_ROOT_CMD>

Den här variabeln sätts till I<få-root-kommando> när fältet B<Rules-Requires-Root> är satt till ett värde annat än B<no> och B<binary-targets>.

=item B<SOURCE_DATE_EPOCH>

Den är variabeln sätts till Unix-tidsstämpeln sedan epoken för den senaste posten i I<debian/changelog>, om den inte redan definierats.

=back

=head1 FILER

=over 

=item B<%PKGCONFDIR%/buildpackage.conf>

Konfigurationsfil för hela systemet

=item I<$XDG_CONFIG_HOME/dpkg/buildflags.conf> eller 

=item I<$HOME/.config/dpkg/buildflags.conf>

Användarens konfigurationsfil.

=back

=head1 ANTECKNINGAR

=head2 Kompileringsflaggor exporteras inte längre.

Mellan dpkg 1.14.17 och 1.16.1 exporterade B<dpkg-buildpackage> kompilatorflaggor (B<CFLAGS>, B<CXXFLAGS>, B<CPPFLAGS> och B<LDFLAGS>) med värden enligt B<dpkg-buildflags>. Detta gäller inte längre.

=head2 Förvalda byggmål

B<dpkg-buildpackage> använder målen B<build-arch> och B<build-indep> sedan dpkg 1.16.2. Före dpkg 1.22.7 fanns det kod för att försöka detektera de saknade målen och falla tillbaka på målet B<build>. Dessa mål är därför obligatoriska.

=head1 SÄKERHET

Bygga binär- eller källkodspaket ska bara göras med betrodd källdata.

=head1 PROGRAMFEL

Det borde vara möjligt att ange blanksteg och skalmetatecken och inledande argument för I<få-root-kommando> och I<signeringskommando>.

=head1 SE ÄVEN

I<%PKGDOCDIR%/spec/rootless-builds.txt>, L<dpkg-source(1)>, L<dpkg-architecture(1)>, L<dpkg-buildflags(1)>, L<dpkg-genbuildinfo(1)>, L<dpkg-genchanges(1)>, L<fakeroot(1)>, L<lintian(1)>, L<https://datatracker.ietf.org/doc/draft-dkg-openpgp-stateless-cli/>, L<sq(1)>, L<gpg(1)>.


=head1 ÖVERSÄTTNING

Peter Krefting och Daniel Nylander.
