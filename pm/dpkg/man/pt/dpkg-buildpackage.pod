
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 NOME

dpkg-buildpackage - compila pacotes binários ou fonte a partir de fontes

=head1 RESUMO

B<dpkg-buildpackage> [I<opção>...] [B<-->] [I<nomeficheiro>.dsc|I<directório>]

=head1 DESCRIÇÃO

B<dpkg-buildpackage> é um programa que automatiza os processos de compilar um pacote Debian.

Os argumentos I<filename>.dsc e I<directory> são suportados desde dpkg 1.22.7.  As suas semânticas são experimentais.

Consiste dos seguintes passos:

=over 

=item B<1.>

Corre o hook B<preinit> antes de ler qualquer ficheiro fonte. Se um ficheiro B<.dsc> foi especificado, descompacta-o de  novo e muda de directório para ele, se um I<directory> foi especificado muda de directório para ele, caso contrário espera que o directório actual contenha a árvore fonte. Prepara o ambiente de compilação ao definir várias variáveis de ambiente. (veja B<ENVIRONMENT>), corre o hook B<init>, e chama B<dpkg-source --before-build> (a menos que B<-T> ou B<--target> sejam usados).

=item B<2.>

Verifica se as dependências de compilação e os conflitos de compilação estão satisfeitos (a menos que B<-d> ou B<--no-check-builddeps> seja especificado).

=item B<3.>

Se um ou mais alvos específicos foram seleccionado com a opção B<-T> ou B<--target>, chama esses alvos e pára aqui. Caso contrário corre o hook B<preclean> e chama B<fakeroot debian/rules clean> para limpar a árvore de compilação (a menos que B<-nc> ou B<--no-pre-clean> seja especificado).

=item B<4.>

Corre o hook B<source> e chama B<dpkg-source -b> para gerar o pacote fonte. (se foi requerida uma compilação B<source> com B<--build> ou com opções equivalentes, e se nenhum B<.dsc> foi especificado).

=item B<5.>

Corre o hook B<build> e chama B<debian/rules> I<build-target>, depois corre o hook B<binary> seguido de B<fakeroot debian/rules> I<binary-target> (a menos que tenha sido requerido uma compilação apenas-fonte com B<--build=source> ou opções equivalentes). Note que I<build-target> e I<binary-target> são ou B<build> e B<binary> (caso predefinido, ou se uma compilação B<any> e B<all> foi requerida com B<--build> ou opções equivalentes), ou B<build-arch> e B<binary-arch> (se uma compilação B<any> e não B<all> foi requerida com B<--build> ou opções equivalentes), ou B<build-indep> e B<binary-indep> (se uma compilação B<all> e não B<any> foi requerida com B<--build> ou opções equivalentes).

=item B<6.>

Corre o hook B<buildinfo>, e chama B<dpkg-genbuildinfo> para gerar um ficheiro B<.buildinfo>. Várias opções de B<dpkg-buildpackage> são reencaminhadas para o B<dpkg-genbuildinfo>. Se foi especificado um I<.dsc>, então será referenciado no ficheiro B<.buildinfo> gerado, pois assim podemos verificar a proveniência da árvore fonte.

=item B<7.>

Corre o hook B<changes> e chama B<dpkg-genchanges> para gerar um ficheiro B<.changes>. O nome do ficheiro B<.changes> irá depender do tipo de compilação e será tão específico quanto necessário mas não mais; o nome irá ser:

=over 

=item I<source-name>B<_>I<binary-version>B<_>I<arch>B<.changes>

para uma compilação que inclua B<any>

=item I<source-name>B<_>I<binary-version>B<_>B<all.changes>

caso contrário para uma compilação que inclua B<all>

=item I<source-name>B<_>I<source-version>B<_>B<source.changes>.

caso contrário para uma compilação que inclua B<source>

=back

Muitas opções do B<dpkg-buildpackage> são reencaminhadas para B<dpkg-genchanges>.

=item B<8.>

Corre o hook B<postclean> e se B<-tc> ou B<--post-clean> for especificado, irá chamar B<fakeroot debian/rules clean> outra vez.

=item B<9.>

Chama B<dpkg-source --after-build>.

=item B<10.>

Corre o hook B<check> e chama um verificados de pacote para o ficheiro B<.changes> (se um comando for especificado em B<DEB_CHECK_COMMAND> ou com B<--check-command>).

=item B<11.>

Corre o hook B<sign> e assina usando o backend OpenPGP (desde que não seja uma compilação NÃO-LANÇADA, ou se B<--no-sign> for especificado) para assinar o ficheiro B<.dsc> (se algum, a menos que B<-us> ou B<--unsigned-source> sejam especificados), o ficheiro B<.buildinfo> (a menos que B<-ui>, B<--unsigned-buildinfo>, B<-uc> ou B<--unsigned-changes> sejam especificados) e os ficheiros B<.changes> (a menos que B<-uc> ou B<--unsigned-changes> sejam especificados).

=item B<12.>

Se um ficheiro B<.dsc> foi especificado, remove o directório de fonte extraída.

=item B<13.>

Corre o hook B<done>.

=back

=head1 OPÇÕES

Todas as opções longas podem ser especificadas em ambos linha de comandos e no sistema  B<dpkg-buildpackage> e nos ficheiros de configuração do utilizador. Cada linha no ficheiro de configuração é ou uma opção (exatamente igual a uma opção de linha de comandos mas sem os hífens iniciais) ou um comentário (se começar com ‘B<#>’).

=over 

=item B<--build=>I<type>

Especifica o I<type> de compilação a partir de uma lista separada por vírgulas de componentes (desde dpkg 1.18.5). Todos os componentes especificados são combinados para selecionar o único tipo de compilação a usar, o que implica uma única execução de compilação com um único ficheiro F<changes> gerado.  Passado para B<dpkg-genchanges>.

Os valores permitidos são:

=over 

=item B<source>

Compila o pacote fonte.

B<Nota>: Quando se usa este valor autónomo e se o que você quer é simplesmente (re-)compilar o pacote fonte a partir de uma árvore fonte limpa, usar B<dpkg-source> directamente é sempre uma melhor opção pois não requer que sejam instaladas quaisquer dependências de compilação as quais, caso contrário, são precisas para ser capaz de chamar o alvo B<clean>.

=item B<any>

Compila os pacotes binários específicos de arquitectura.

=item B<all>

Compila os pacotes binários independentes de arquitectura.

=item B<binary>

Compila os pacotes binários independentes e específicos de arquitectura. Isto é um alias para B<any,all>.

=item B<full>

Compila tudo. Isto é um alias para B<source,any,all>, e o mesmo que o caso predefinido quando não é especificada nenhuma opção de compilação.

=back

=item B<-g>

Equivalente a B<--build=source,all> (desde dpkg 1.17.11).

=item B<-G>

Equivalente a B<--build=source,any> (desde dpkg 1.17.11).

=item B<-b>

Equivalente a B<--build=binary> ou B<--build=any,all>.

=item B<-B>

Equivalente a B<--build=any>.

=item B<-A>

Equivalente a B<--build=all>.

=item B<-S>

Equivalente a B<--build=source>.

=item B<-F>

Equivalente a B<--build=full>, B<--build=source,binary> ou B<--build=source,any,all> (desde dpkg 1.15.8).

=item B<--target=>I<target>[,...]

=item B<--target> I<target>[,...]

=item B<-T>, B<--rules-target=>I<target>[,...]

Chama B<debian/rules> I<target> uma vez por cada alvo especificado, após ter configurado o ambiente de compilação (excepto para chamar B<dpkg-source --before-build>), e pára o processo de compilação do pacote aqui (desde dpkg 1.15.0, opção longa desde dpkg 1.18.8, suporte a multi-alvo desde dpkg 1.18.16).  Se B<--as-root> for também fornecido, então o comando é executado como root (veja B<--root-command>).  Note que alvos conhecidos que são obrigados a correr como root não precisam desta opção (isto é, os alvos B<clean>, B<binary>, B<binary-arch> e B<binary-indep>).

=item B<--as-root>

Apenas significativo junto com B<--target> (desde dpkg 1.15.0). Requer que o alvo seja corrido com direitos de root.

=item B<-si>

=item B<-sa>

=item B<-sd>

=item B<-v>I<version>

=item B<-C>I<changes-description>

=item B<-m>I<maintainer-address>

=item B<-e>I<maintainer-address>

Passado sem alterações ao B<dpkg-genchanges>. Veja o seu manual.

=item B<--build-by=>I<maintainer-address>

=item B<--source-by=>I<maintainer-address> (desde dpkg 1.21.10)

Passa como B<-m> ao B<dpkg-genchanges>. Veja o seu manual.

=item B<--release-by=>I<maintainer-address>

=item B<--changed-by=>I<maintainer-address> (desde dpkg 1.21.10)

Passa como B<-e> ao B<dpkg-genchanges>. Veja o seu manual.

=item B<-a>, B<--host-arch> I<architecture>

Especifica a arquitectura Debian para qual compilamos (opção longa desde dpkg 1.17.17). A arquitectura da máquina onde compilamos é determinada automaticamente, e é também a predefinida para a máquina anfitriã.

=item B<-t>, B<--host-type> I<gnu-system-type>

Especifica o tipo de sistema GNU para qual compilamos (opção longa desde dpkg 1.17.17). Pode ser usado no lugar de B<--host-arch> ou como um complemento para sobrepor o tipo de sistema GNU predefinido da arquitectura Debian anfitriã.

=item B<--target-arch> I<architecture>

Especifica a arquitectura Debian para que os binários são compilados (desde dpkg 1.17.17). O valor predefinido é o da máquina anfitriã.

=item B<--target-type> I<gnu-system-type>

Especifica o tipo de sistema GNU para que os binários são compilados (desde dpkg 1.17.17). Pode ser usado no lugar de B<--target-arch> ou como um complemento para sobrepor o tipo de sistema GNU predefinido da arquitectura Debian do alvo.

=item B<-P>, B<--build-profiles=>I<profile>[B<,>...]

Especifica os perfil(es) que compilamos, como uma lista separada por vírgulas (desde dpkg 1.17.2, opção longa desde dpkg 1.18.8). O comportamento predefinido é compilar para nenhum perfil específico. Também os define (como uma lista separada por espaços) como a variável de ambiente B<DEB_BUILD_PROFILES> o que permite, por exemplo, ficheiros B<debian/rules> usarem esta informação para compilações condicionais.

=item B<-j>, B<--jobs>[=I<jobs>|B<auto>]

Especifica se o número de trabalhos permitidos para serem corridos em simultâneo (desde dpkg 1.14.7, opção longa desde dpkg 1.18.8).  O número de trabalhos correspondente ao número de processadores online se B<auto> for especificado (desde dpkg 1.17.10), ou número ilimitado se I<jobs> não for especificado. O comportamento predefinido é B<auto> (desde dpkg 1.18.11) em modo não-forçado (desde dpkg 1.21.10), e como tal é sempre mais seguro usar com qualquer pacote incluindo aqueles que não seguros para compilação paralela. Definir o número de trabalhos para B<1> irá restaurar a execução em série.

Irá adicionar B<parallel=>I<jobs> ou B<parallel> à variável de ambiente B<DEB_BUILD_OPTIONS> que permite a ficheiros debian/rules optarem por usar esta informação para os seus próprios objectivos. O valor B<jobs> irá sobrepor a opção B<parallel=>I<jobs> ou B<parallel> na variável de ambiente B<DEB_BUILD_OPTIONS>. Note que o valor B<auto> irá ser substituído pelo número real de processadores actuais activos, e como tal, não será propagado para nenhum processo filho. Se o número de processadores online não poder ser deduzido, então o código ira cair para o uso de execução em série (desde dpkg 1.18.15), no entanto isto apenas deverá acontecer em sistemas exóticos e não suportados.

=item B<-J>, B<--jobs-try>[=I<jobs>|B<auto>]

Esta opção (desde dpkg 1.18.2, opção longa desde dpkg 1.18.8) é equivalente a B<-j> em cima.

Como o comportamento do B<-j> alterou no dpkg 1.21.10 para o modo opt-in, você pode usar esta opção se precisar de garantir semânticas entre séries de lançamento do dpkg.

=item B<--jobs-force>[=I<jobs>|B<auto>]

Esta opção (desde dpkg 1.21.10) é equivalente à opção B<--jobs> excepto que irá activar o modo paralelo forçado, ao adicionar a opção B<make> B<-j> com o número computado de trabalhos em paralelo para a variável de ambiente B<MAKEFLAGS>.

Isto deverá causar que todas as invocações make subsequentes herdam a opção assim forçando a definição paralela no empacotamento (e possivelmente o sistema de compilação do autor se isso usar L<make(1)>) independentemente do seu suporte para compilações paralelas, o que pode causar falhas na compilação.

B<Nota>: Qualquer Makefile que não seja seguro-paralelo deve ser considerado defeituoso. Estes devem ou tornados seguro-paralelo, ou marcados como não seguros com o alvo L<make(1)> B<.NOTPARALLEL>.

=item B<-D>, B<--check-builddeps>

Verifica dependências e conflitos de compilação; aborta se não satisfeitos (opção longa desde dpkg 1.18.8). Este é o comportamento predefinido.

=item B<-d>, B<--no-check-builddeps>

Não verifica dependências e conflitos de compilação (opção longa desde dpkg 1.18.8).

=item B<--ignore-builtin-builddeps>

Não verifica dependências de compilação embutidas e conflitos (desde dpkg 1.18.2). Estas as dependências de compilação implícitas e específicas da distribuição requeridas num ambiente de compilação, o chamado conjunto de pacotes Build-Essential.

=item B<--rules-requires-root>

Não respeita o campo B<Rules-Requires-Root>, caindo para o seu valor de predefinição antigo B<binary-targets> (desde dpkg 1.19.1).

=item B<-nc>, B<--no-pre-clean>

Não limpa a árvore fonte antes de compilar (opção longa desde dpkg 1.18.8). Implica B<-b> se nada mais foi seleccionado entre B<-F>, B<-g>, B<-G>, B<-B>, B<-A> ou B<-S>. Implica B<-d> com B<-S> (desde dpkg 1.18.0).

=item B<--pre-clean>

Limpa a árvore fonte antes de compilar (desde dpkg 1.18.8). Este é o comportamento predefinido.

=item B<-tc>, B<--post-clean>

Limpa a árvore fonte (usando I<gain-root-command> B<debian/rules clean>) após o pacote ter sido compilado (opção longa desde dpkg 1.18.8).

=item B<--no-post-clean>

Não limpa a árvore fonte após o pacote ter sido compilado (desde dpkg 1.19.1). Este é o comportamento predefinido.

=item B<--sanitize-env>

Higieniza o ambiente de compilação (desde dpkg 1.20.0). Isto irá repor ou remover variáveis de ambiente, umask, e quaisquer outros atributos de processo que poderiam caso contrário afectar adversamente a compilação dos pacotes. Porque o ponto de entrada oficial para compilar pacotes é B<debian/rules>, os pacotes não podem confiar que estas definições estejam no lugar, e assim devem funcionar mesmo quando elas não estão. O que há a higienizar é específico do fornecedor.

=item B<-r>, B<--root-command=>I<gain-root-command>

Quando o B<dpkg-buildpackage> precisa de executar parte do processo de compilação como root, prefixa o comando que executa com I<gain-root-command> se foi especificado um (opção longa desde dpkg 1.18.8). Caso contrário, se nenhum foi especificado, será usado por predefinição o B<fakeroot>, se o comando estiver presente. I<gain-root-command> deverá começar com o nome de um programa presente na B<PATH> e receberá como argumentos o nome do comando real a correr e os argumentos que este deve receber. O I<gain-root-command> pode incluir parâmetros (têm se ser separados por espaços) mas não meta-caracteres da shell. O I<gain-root-command>pode ser tipicamente B<fakeroot>, B<sudo>, B<super> ou B<really>. O B<su> não é apropriado, pois ele só pode invocar a shell do utilizador com B<-c> em vez de passar argumentos individualmente aos comandos que corre.

=item B<-R>, B<--rules-file=>I<rules-file>

Compilar um pacote Debian geralmente involve invocar B<debian/rules> como um comando com vários parâmetros standard (desde dpkg 1.14.17, opção longa desde dpkg 1.18.8). Com esta opção é possível usar outra invocação de programa para compilar o pacote (pode incluir parâmetros separados por espaços). Em alternativa pode ser usado para executar o ficheiro de regras standard com outro programa make (por exemplo ao usar B</usr/local/bin/make -f debian/rules> como I<rules-file>).

=item B<--check-command=>I<check-command>

Comando usado para verificar o próprio ficheiro B<.changes> e qualquer artefacto de compilação referenciado no ficheiro (desde dpkg 1.17.6). O comando deve receber o nome de caminho de B<.changes> como um argumento. Este comando é geralmente o B<lintian>.

=item B<--check-option=>I<opt>

Passa a opção I<opção> ao I<comando-de-verificação> especificado com B<DEB_CHECK_COMMAND> ou B<--check-command> (desde dpkg 1.17.6). Pode ser usado várias vezes.

=item B<--hook->I<hook-name>B<=>I<hook-command>

Define o código shell especificado I<hook-command> como o hook I<hook-name>, o qual vai correr nos tempos especificados nos passos de execução (desde dpkg 1.17.6). Os hooks irão sempre ser executados mesmo que a acção seguinte não seja executada (excepto para o hook B<binary>). Todos os hooks irão correr no directório fonte desempacotado.

Alguns hooks podem receber informação adicional através de variáveis de ambiente (desde dpkg 1.22.0). Todos os hooks obtêm o nome de hook na variável de ambiente B<DPKG_BUILDPACKAGE_HOOK_NAME> (desde dpkg 1.22.0).

B<Nota>: Os hooks podem afectar o processo de compilação, e causar falhas ao compilar se os seus comandos falharem,  portanto esteja atento a consequências indesejadas.

Os I<nome-de-hook> actualmente suportados são:

=over 

=item B<preinit>

=item B<init>

=item B<preclean>

=item B<source>

Obtém B<DPKG_BUILDPACKAGE_HOOK_SOURCE_OPTIONS> com as listas de opções separadas-por-espaços que serão passadas à chamada B<dpkg-source>.

=item B<build>

Obtém B<DPKG_BUILDPACKAGE_HOOK_BUILD_TARGET> com o nome do alvo de compilação B<debian/rules> chamado. Antes do dpkg 1.22.7 a variável só era definida apenas se o alvo fosse chamado.

=item B<binary>

Obtém B<DPKG_BUILDPACKAGE_HOOK_BINARY_TARGET> com o nome de alvo binário B<debian/rules> chamado, mas apenas se chamado.

=item B<buildinfo>

Obtém B<DPKG_BUILDPACKAGE_HOOK_BUILDINFO_OPTIONS> com as listas de opções separadas-por-espaços que serão passadas à chamada B<dpkg-genbuildinfo>.

=item B<changes>

Obtém B<DPKG_BUILDPACKAGE_HOOK_CHANGES_OPTIONS> com as listas de opções separadas-por-espaços que serão passadas à chamada B<dpkg-genchanges>.

=item B<postclean>

=item B<check>

Obtém B<DPKG_BUILDPACKAGE_HOOK_CHECK_OPTIONS> com as listas de opções separadas-por-espaços que serão passadas à chamada do comando de verificação.

=item B<sign>

=item B<done>

=back

O I<comando-hook> suporta as seguintes strings de formato de substituição, que lhes serão aplicadas antes da execução.

=over 

=item B<%%>

Um único caracteres %.

=item B<%a>

Um valor booleano (0 ou 1), que representa se a seguinte acção foi executada.

=item B<%p>

O nome do pacote fonte.

=item B<%v>

A versão do pacote fonte

=item B<%s>

A versão do pacote fonte (sem a época).

=item B<%u>

A versão do autor.

=back

=item B<--buildinfo-file=>I<filename>

Define o I<nome-ficheiro> para o ficheiro B<.buildinfo> gerado (desde dpkg 1.21.0).

=item B<--buildinfo-option=>I<opt>

Passa a opção I<opt> ao B<dpkg-genbuildinfo> (desde dpkg 1.18.11).  Pode ser usado várias vezes.

=item B<--sign-backend=>I<sign-backend>

Especifica uma interface backend OpenPGP a usar quando se invoca o I<sign-command> (desde dpkg 1.21.10).

A predefinição é B<auto>, onde o melhor backend actual disponível irá ser usado. Os backends OpenPGP específicos suportados em ordem de preferência são:

=over 4

=item B<sop>

(qualquer implementação em conformidade com Stateless OpenPGP)

=item B<sq>

(de Sequoia-PGP)

=item B<gpg>

(de GnuPG)

=back

=item B<-p>, B<--sign-command=>I<sign-command>

Quando B<dpkg-buildpackage> precisa de executar comando backend OpenPGP para assinar um ficheiro de controle de fonte (B<.dsc>), um ficheiro B<.buildinfo> ou um ficheiro B<.changes> irá correr I<sign-command> (procurando na B<PATH> se necessário) em vez do predefinido ou auto-detectado comando backend (opção longa desde dpkg 1.18.8). O I<sign-command> irá obter todos os argumentos específicos de backend de acordo com o B<--sign-backend> selecionado. I<sign-command> não deve conter espaços ou outros meta-caracteres de shell.

=item B<-k>, B<--sign-keyid=>I<key-id>

=item B<--sign-key=>I<key-id>

Especifica um ID-chave OpenPGP (seja uma impressão digital ou um ID de utilizador) para a chave secreta a usar ao assinar pacotes (B<--sign-key> desde dpkg 1.18.8, B<--sign-keyid> desde dpkg 1.21.10).

=item B<--sign-keyfile=>I<key-file>

Especifica um I<key-file> OpenPGP que contem a chave secreta usada quando assinar pacotes (desde dpkg 1.21.10).

B<Nota>: Por razões de segurança é melhor o I<key-file> ser mantido bloqueado com uma palavra passe.

=item B<-us>, B<--unsigned-source>

Não assina o pacote fonte (opção longa desde dpkg 1.18.8).

=item B<-ui>, B<--unsigned-buildinfo>

Não assina o ficheiro B<.buildinfo> (desde dpkg 1.18.19).

=item B<-uc>, B<--unsigned-changes>

Não assina os ficheiros B<.buildinfo> e B<.changes> (opção longa desde dpkg 1.18.8).

=item B<--no-sign>

Não assina nenhum ficheiro, isto inclui o pacote fonte, o ficheiro B<.buildinfo> e o ficheiro B<.changes> (desde dpkg 1.18.20).

=item B<--force-sign>

Força o assinar dos ficheiros resultantes (desde dpkg 1.17.0), independentemente de B<-us>, B<--unsigned-source>, B<-ui>, B<--unsigned-buildinfo>, B<-uc>, B<--unsigned-changes> ou de outras heurísticas internas.

=item B<-sn>

=item B<-ss>

=item B<-sA>

=item B<-sk>

=item B<-su>

=item B<-sr>

=item B<-sK>

=item B<-sU>

=item B<-sR>

=item B<-i>, B<--diff-ignore>[=I<regex>]

=item B<-I>, B<--tar-ignore>[=I<pattern>]

=item B<-z>, B<--compression-level=>I<level>

=item B<-Z>, B<--compression=>I<compressor>

Passado sem alterações ao B<dpkg-source>. Veja o seu manual.

=item B<--source-option=>I<opt>

Passa a opção I<opção> ao B<dpkg-source> (desde dpkg 1.15.6. Pode ser usado várias vezes.

=item B<--changes-file=>I<filename>

Define o I<nome-ficheiro> para o ficheiro B<.changes> gerado (desde dpkg 1.21.0).

=item B<--changes-option=>I<opt>

Passa a opção I<opção> ao B<dpkg-genchanges> (desde dpkg 1.15.6).  Pode ser usado várias vezes.

=item B<--admindir=>I<dir>

=item B<--admindir> I<dir>

Altera a localização da base de dados do B<dpkg> (desde dpkg 1.14.0). A localização predefinida é I<%ADMINDIR%>.

=item B<-?>, B<--help>

Mostra a mensagem de utilização e termina.

=item B<--version>

Mostra a versão e termina.

=back

=head1 AMBIENTE

=head2 Ambiente externo

=over 

=item B<DEB_CHECK_COMMAND>

Se definido, será usado como o comando para verificar o ficheiro B<.changes> (desde dpkg 1.17.6). Sobreposto pela opção B<--check-command>.

=item B<DEB_SIGN_KEYID>

Se definido, será usado para assinar os ficheiros B<.changes>, B<.buildinfo> e B<.dsc> (desde dpkg 1.17.2). Sobreposto pela opção B<--sign-keyid>.

=item B<DEB_SIGN_KEYFILE>

Se definido, será usado para assinar os ficheiros B<.changes>, B<.buildinfo> e B<.dsc> (desde dpkg 1.21.10). Sobreposto pela opção B<--sign-keyfile>.

=item B<DEB_BUILD_OPTIONS>

Se definido, irá conter uma lista de opções separadas por espaços que afectam o comportamento de algumas ferramentas do dpkg envolvidas na compilação de pacote, e pode afectar o processo de compilação se o código em I<debian/rules> as honrar. Estas opções podem ter parâmetros especificados imediatamente após um sinal de igual (‘B<=>‘).  Para opções que suportem múltiplos parâmetros, estes não serão separadas por espaços, pois estes estão reservados para opções separadas.

O seguinte são opções conhecidas e suportadas pelas ferramentas do dpkg, outras opções honradas por F<debian/rules> podem ser definidas por políticas específicas da distribuição.

=over 

=item B<parallel=>I<N>

O F<debian/rules> no empacotamento pode usar esta opção para definir o processo de compilação a usar I<N> trabalhos em paralelo. É sobreposto pelas opções B<--jobs> e B<--jobs-force>.

=item B<nocheck>

B<dpkg-buildpackage> irá ignorar a variável B<DEB_CHECK_COMMAND>. Não é esperado que o F<debian/rules> no empacotamento corra suites de teste durante a compilação.

=item B<noopt>

Se F<debian/rules> chamar B<dpkg-buildflags> para definir as bandeiras de compilação, essas serão definidas para não activar nenhumas optimizações.

=item B<nostrip>

O F<debian/rules> no empacotamento deve assegurar que os objectos não ficam com a sua informação de depuração removida. Se F<debian/rules> incluir o fragmento de make B<mk/buildtools.mk> a variável de make B<STRIP> irá respeitar esta opção.

=item B<terse>

B<dpkg-buildpackage> irá acrescentar a bandeira B<--no-print-directory> L<make(1)> à variável de ambiente B<MAKEFLAGS>. O F<debian/rules> no empacotamento deve reduzir nos detalhes, não sendo completamente silencioso.

=item B<hardening=>I<feature-spec>

=item B<reproducible=>I<feature-spec>

=item B<abi=>I<feature-spec>

=item B<future=>I<feature-spec>

=item B<qa=>I<feature-spec>

=item B<optimize=>I<feature-spec>

=item B<sanitize=>I<feature-spec>

Estas são áreas de característica que controlam as características da bandeira de compilação. Veja L<dpkg-buildflags(1)> para mais detalhes.

=back

=item B<DEB_BUILD_PROFILES>

Se definido, será usado como perfil(es) de compilação activos para o pacote a ser compilado (desde dpkg 1.17.2). É uma lista separada por espaços de nomes de perfis. Sobreposto pela opção B<-P>.

=item B<DPKG_COLORS>

Define o modo de cor (desde dpkg 1.18.5). Os valores actualmente aceites são: B<auto> (predefinido), B<always> e B<never>.

=item B<DPKG_NLS>

Se definida, será usada para decidir se deve activar o Suporte a Linguagem Nativa. Também como conhecido como suporte de internacionalização (ou i18n) (desde dpkg 1.19.0). Os valores aceites são B<0> e B<1> (predefinição).

=back

=head2 Ambiente interno

Mesmo que B<dpkg-buildpackage> exporte algumas variáveis, o B<debian/rules> não deve confiar na sua presença e deve em vez disso usar a interface respectiva para obter os valore que precisa, porque esse ficheiro é o ponto de entrada principal para compilar pacotes e deve ser suportado poder fazê-lo sozinho.

=over 

=item B<DEB_BUILD_*>

=item B<DEB_HOST_*>

=item B<DEB_TARGET_*>

B<dpkg-architecture> é chamado com os parâmetros B<-a> e B<-t> reencaminhados. Qualquer variável  que seja resultante da sua opção B<-s> é integrada no ambiente de compilação.

=item B<DEB_RULES_REQUIRES_ROOT>

Esta variável é definida para o valor obtido a partir do campo B<Rules-Requires-Root>, o nível dpkg-build-api ou a partir da linha de comandos. Quando definida, será um valor válido para o campo B<Rules-Requires-Root>. É usada para notificar B<debian/rules> se a especificação B<rootless-builds.txt> é suportada.

=item B<DEB_GAIN_ROOT_CMD>

Esta variável é definida para I<gain-root-command> quando o campo B<Rules-Requires-Root> é definido para um valor diferente de B<no> e B<binary-targets>.

=item B<SOURCE_DATE_EPOCH>

Esta variável é definida à marca temporal de Unix desde a época da última entrada em I<debian/changelog>, se não estiver já definida.

=back

=head1 FICHEIROS

=over 

=item I<%PKGCONFDIR%/buildpackage.conf>

Ficheiro de configuração geral do sistema

=item I<$XDG_CONFIG_HOME/dpkg/buildpackage.conf> ou

=item I<$HOME/.config/dpkg/buildpackage.conf>

Ficheiro de configuração do utilizador.

=back

=head1 NOTAS

=head2 As bandeiras de compilador já não são exportadas

Entre dpkg 1.14.17 e 1.16.1, B<dpkg-buildpackage> exportava as bandeiras de compilador (B<CFLAGS>, B<CXXFLAGS>, B<FFLAGS>, B<CPPFLAGS> e B<LDFLAGS>) com valores como retornados por B<dpkg-buildflags>. Isto já não acontece.

=head2 Metas de compilação predefinidas

B<dpkg-buildpackage> está a usar os alvos B<build-arch> e B<build-indep> desde o dpkg 1.16.2.  Antes do dpkg 1.22.7, existia código para tentar detectar os alvos em falta e regressar ao alvo B<build>.  Esses alvos são assim obrigatórios.

=head1 SEGURANÇA

A compilação de pacotes binário ou fonte só deve ser executada sobre dados de fonte de confiança.

=head1 BUGS

Deverá ser possível especificar espaços e meta-caracteres de shell e argumentos iniciais para I<gain-root-command> e I<sign-command>.

=head1 VEJA TAMBÉM

I<%PKGDOCDIR%/spec/rootless-builds.txt>, L<dpkg-source(1)>, L<dpkg-architecture(1)>, L<dpkg-buildflags(1)>, L<dpkg-genbuildinfo(1)>, L<dpkg-genchanges(1)>, L<fakeroot(1)>, L<lintian(1)>, L<https://datatracker.ietf.org/doc/draft-dkg-openpgp-stateless-cli/>, L<sq(1)>, L<gpg(1)>.


=head1 TRADUÇÃO

Américo Monteiro

Se encontrar algum erro na tradução deste documento, por favor comunique para
Américo Monteiro <a_monteiro@gmx.com>.
