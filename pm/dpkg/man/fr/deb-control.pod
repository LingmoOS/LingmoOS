
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 NOM

deb-control - Debian binary package control file format

=head1 SYNOPSIS

B<DEBIAN/control>

=head1 DESCRIPTION

Each Debian binary package contains a B<control> file in its B<control> member, and its L<deb822(5)> format is a subset of the B<debian/control> template source control file in Debian source packages, see L<deb-src-control(5)>.

Ce fichier contient un certain nombre de champs. Chaque champ commence par une étiquette, telle que B<Package> ou B<Version> (la casse n'importe pas), suivie d'un « : », et du contenu du champ (sensible à la casse à moins que cela ne soit spécifié autrement). Les champs sont séparés seulement par des étiquettes de champ. En d'autres termes, le contenu d'un champ peut s'étendre sur plusieurs lignes, mais les outils d'installation joindront en général les lignes pendant le traitement du contenu du champ (sauf pour le champ B<Description>, voir ci-dessous).

=head1 LES CHAMPS

=over 

=item B<Package:> I<nom-du-paquet> (requis)

La valeur de ce champ donne le nom du paquet, et la plupart des outils d'installation s'en servent pour produire les noms des paquets.

=item B<Package-Type:> B<deb>|B<udeb>|I<type>

Ce champ indique le type de paquet. La valeur B<udeb> est à utiliser pour les paquets à taille contrôlée utilisés par l'installateur Debian. La valeur B<deb> est la valeur par défaut qui est utilisée si le champ n'est pas présent. De nouveaux types pourraient être ajoutés au fil du temps.

=item B<Version:> I<chaîne-de-la-version> (requis)

Typically, this is the original package's version number in whatever form the program's author uses.  It may also include a Debian revision number (for non-native packages).  The exact format and sorting algorithm are described in L<deb-version(7)>.

=item B<Maintainer:> I<nom-complet-et-adresse-électronique> (recommandé)

Le format de ce champ sera « Jean Dupont E<lt>jdupont@foo.comE<gt> » ; et c'est bien sûr le créateur du paquet, par opposition à l'auteur du programme mis en paquet.

=item B<Description:> I<description-courte> (recommandé)

=item S< >I<description-longue>

Le format de la description du paquet est un résumé bref sur la première ligne (après le champ B<Description>). Les lignes suivantes peuvent servir à une description plus longue et plus détaillée. Chaque ligne de cette description longue doit être précédée d'une espace ; quand c'est une ligne blanche, elle doit contenir un seul « B<.> » après cette espace.

=item B<Section:> I<section>

Champ général qui indique la catégorie d'un paquet ; cette catégorie est fondée sur le programme que ce paquet installe. B<utils>, B<net>, B<mail>, B<text>, B<x11>, etc., représentent quelques catégories habituelles.

The accepted values are based on the specific distribution policy.

=item B<Priority:> I<priorité>

Sets the importance of this package in relation to the system as a whole. The known priorities are B<required>, B<important>, B<standard>, B<optional>, B<extra>, and B<unknown>, but other values can be used as well.

How to apply these values depends on the specific distribution policy.

=item B<Installed-Size:> I<taille>

La taille approximative totale des fichiers installés du paquet, en Kio. L'algorithme de calcul de la taille est décrit dans L<deb-substvars(5)>.

=item B<Protected:> B<yes>|B<no>

On se sert habituellement de ce champ uniquement si la réponse est B<yes>. Cela signifie que ce paquet est exigé principalement pour un démarrage correct du système ou utilisé pour des méta-paquets personnalisés du système local. L<dpkg(1)> et les autres outils d'installation interdisent la suppression d'un paquet B<Protected> (du moins tant qu'une des options de forçage n'est pas utilisée).

Pris en charge depuis dpkg 1.20.1.

=item B<Essential:> B<yes>|B<no>

On se sert habituellement de ce champ uniquement si la réponse est B<yes>. Cela signifie que ce paquet est exigé pour le système d'empaquetage, pour un fonctionnement correct du système en général ou durant le démarrage (même si dans ce dernier cas, il devrait être converti en champ B<Protected>). L<dpkg(1)> et les autres outils d'installation interdisent la suppression d'un paquet B<Essential> (du moins tant qu'une des options de forçage n'est pas utilisée).

=item B<Build-Essential:> B<yes>|B<no>

Ce champ est habituellement nécessaire seulement si la réponse est B<yes>, et il est généralement injecté par le logiciel d'archive. Il désigne un paquet qui est requis lors de la construction d'autres paquets.

=item B<Architecture:> I<arch>|B<all> (requis)

L'architecture précise pour quel type de matériel le paquet a été compilé. Voici quelques architectures habituelles : B<amd64>, B<armel>, B<i386>, B<powerpc>, etc. Remarquez que l'option B<all> signifie que le paquet est indépendant de toute architecture. C'est le cas, par exemple, des scripts d'interpréteur de commandes (shell) ou Perl, ainsi que de la documentation.

=item B<Origin:> I<nom>

Nom de la distribution dont ce paquet provient.

=item B<Bugs:> I<URL>

L'I<URL> du système de suivi de bogues (BTS) de ce paquet. Le format utilisé est I<type_de_bts>B<://>I<adresse-du-bts>, par exemple B<debbugs://bugs.debian.org>.

=item B<Homepage:> I<URL>

I<URL> de la page d'accueil du projet amont.

=item B<Tag:> I<liste-d'étiquettes>

Liste d'étiquettes décrivant les qualités du paquet. La description et la liste des étiquettes (« tags ») prises en charge peuvent être trouvées dans le paquet B<debtags>.

=item B<Multi-Arch:> B<no>|B<same>|B<foreign>|B<allowed>

Ce champ est utilisé pour indiquer comment ce paquet se comportera sur les installations multi-architectures.

=over 

=item B<no>

C'est la valeur par défaut quand le champ est omis ; dans ce cas, ajouter le champ avec une valeur B<no> explicite est généralement inutile.

=item B<same>

Ce paquet est co-installable avec lui-même, mais il ne doit pas être utilisé pour satisfaire la dépendance d'un paquet d'une autre architecture que la sienne.

=item B<foreign>

Ce paquet n'est pas co-installable avec lui-même, mais il pourra être autorisé pour permettre de satisfaire les dépendances sans qualification d'architecture d'un paquet d'une architecture différente de la sienne (si une dépendance a une qualification d'architecture explicite, alors la valeur B<foreign> est ignorée).

=item B<allowed>

Cela permet aux dépendances inverses d'indiquer dans leur champ B<Depends> qu'elles acceptent ce paquet d'une autre architecture en qualifiant le nom du paquet avec B<:any>, mais n'a pas d'autres effets.

=back

=item B<Source:> I<nom-du-paquet-source> [B<(>I<version-source>B<)>]

Le nom du paquet source d'où est issu ce paquet binaire, s'il est différent du nom du paquet lui-même. Si la version des sources diffère de la version du binaire, alors le I<nom-du-paquet-source> sera suivi par la I<version-source> entre parenthèses. Cela peut arriver par exemple sur un envoi seulement binaire NMU (« non-maintainer upload »), ou lorsqu'une version différente de binaire est fixée avec « B<dpkg-gencontrol -v> ».

=item B<Subarchitecture:> I<valeur>

=item B<Kernel-Version:> I<valeur>

=item B<Installer-Menu-Item:> I<valeur>

Ces champs sont utilisés par l'installateur et ne sont en général pas nécessaires. Pour plus de détails, consultez L<https://salsa.debian.org/installer-team/debian-installer/-/raw/master/doc/devel/modules.txt>.

=item B<Depends:> I<liste-de-paquets>

C'est la liste des paquets exigés pour que ce paquet procure un nombre important de fonctionnalités. Le programme de maintenance des paquets interdit l'installation d'un paquet quand les paquets répertoriés dans le champ B<Depends> ne sont pas installés (du moins tant qu'une option de forçage n'est pas utilisée). Lors d'une installation, il lance les scripts « postinst » des paquets répertoriés dans les champs B<Depends> avant les scripts « postinst » des paquets qui dépendent d'eux. À l'inverse, lors d'une suppression, le script « prerm » d'un paquet est lancé avant ceux des paquets listés dans son champ B<Depends>.

=item B<Pre-Depends:> I<liste-de-paquets>

C'est la liste des paquets qui doivent être installés B<et> configurés avant que ce paquet puisse être installé. Habituellement, on utilise ce champ quand un paquet a besoin d'un autre paquet pour lancer son script « preinst ».

=item B<Recommends:> I<liste-de-paquets>

C'est la liste des paquets qu'on trouverait avec ce paquet dans toute installation standard. Le programme de maintenance des paquets avertit l'utilisateur quand il installe un paquet sans installer les paquets répertoriés dans le champ B<Recommends>.

=item B<Suggests:> I<liste-de-paquets>

C'est la liste des paquets qui, associés avec ce paquet, peuvent améliorer son utilité ; néanmoins, une installation sans ces paquets est parfaitement raisonnable.

=back

La syntaxe des champs B<Depends>, B<Pre-Depends>, B<Recommends> et B<Suggests> est une liste d'ensembles de paquets alternatifs. Chaque ensemble est une liste de paquets séparés par des barres verticales (le symbole du tube) « B<|> ». Les ensembles sont séparés par des virgules. Une virgule représente un « ET » logique et une barre verticale représente un « OU » logique ; le tube a la précédence dans l'évaluation de l'expression. Chaque nom de paquet est suivi éventuellement par un type d'architecture après deux-points « B<:> », et par une contrainte sur le numéro de version mise entre parenthèses.

Un nom de type d'architecture peut être un nom d'architecture réelle de Debian (depuis dpkg 1.16.5) ou B<any> (depuis dpkg 1.16.2). S'il est omis, la valeur par défaut est l'architecture du paquet binaire actuel. Un nom d'architecture réelle de Debian correspondra exactement à l'architecture pour ce nom de paquet, B<any> correspondra à toute architecture pour ce nom de paquet si le paquet a été marqué B<Multi-Arch: allowed>.

Une contrainte sur le numéro de version peut commencer par « B<E<gt>E<gt>> », et dans ce cas toute version supérieure correspondra, et il peut indiquer (ou pas) le numéro de révision pour le paquet Debian (les deux numéros étant séparés par un trait d'union). Voici les relations acceptées pour les versions : « B<E<gt>E<gt>> » pour supérieur à, « B<E<lt>E<lt>> » pour inférieur à, « B<E<gt>=> » pour supérieur ou égal, « B<E<lt>=> » pour inférieur ou égal, et « B<=> » pour égal à.

=over 

=item B<Breaks:> I<liste-de-paquets>

C'est une liste de paquets que ce paquet « casse », par exemple en révélant des bogues quand les paquets concernés dépendent de celui-ci. Le programme de maintenance des paquets interdit la configuration de paquets cassés ; une méthode usuelle de résolution est la mise à niveau des paquets mentionnés dans le champ B<Breaks>.

=item B<Conflicts:> I<liste-de-paquets>

C'est une liste de paquets qui sont en conflit avec ce paquet ; ils contiennent par exemple des fichiers qui ont le même nom. Le programme de maintenance des paquets interdit l'installation simultanée de paquets en conflit. Deux paquets en conflit renseigneront une ligne B<Conflicts> avec le nom de l'autre paquet.

=item B<Replaces:> I<liste-de-paquets>

C'est une liste de paquets que ce paquet remplace. Il peut ainsi remplacer les fichiers de ces autres paquets ; on se sert pour cela du champ B<Conflicts> pour forcer la suppression des autres paquets, si celui-là possède aussi les mêmes fichiers que le paquet en conflit.

=back

La syntaxe des champs B<Breaks>, B<Conflicts> et B<Replaces> est une liste de noms de paquets, séparés par des virgules (et des espaces facultatives). Dans les champs B<Breaks> et B<Conflicts>, la virgule sera lue comme un « OU ». Un type d'architecture optionnel peut être aussi ajouté au nom de paquet avec la même syntaxe que ci-dessus, mais par défaut la valeur est B<any> plutôt que l'architecture du paquet binaire. On peut donner une version optionnelle de la même façon que ci-dessus dans les champs B<Breaks>, B<Conflicts> et B<Replaces>.

=over 

=item B<Enhances:> I<liste-de-paquets>

C'est une liste de paquets que ce paquet améliore. C'est similaire à B<Suggests> mais en sens inverse.

=item B<Provides:> I<liste-de-paquets>

C'est une liste de paquets virtuels que ce paquet procure. On s'en sert habituellement pour des paquets qui offrent le même service. Par exemple, sendmail et exim sont des serveurs de courrier, et donc ils procurent chacun un paquet commun (« mail-transport-agent ») duquel d'autres paquets peuvent dépendre. Sendmail et exim peuvent ainsi servir d'option valable pour satisfaire la dépendance. Cela permet aux paquets qui dépendent d'un serveur de courrier de ne pas avoir à connaître les noms de paquet de tous les serveurs de courrier, en utilisant « B<|> » comme séparateur de liste.

=back

La syntaxe du champ B<Provides> est une liste de noms de paquets, séparés par des virgules (et des espaces facultatives). Un type d'architecture facultatif peut également être ajouté au nom de paquet de la même façon que ci-dessus. S'il est omis l'architecture par défaut est celle du paquet binaire actuel. Un numéro de version précis (égal à) optionnel peut être donné de la même façon que ci-dessus (pris en compte depuis dpkg 1.17.11).

=over 

=item B<Built-Using:> I<liste-de-paquets>

Ce champ de dépendance affiche les paquets source supplémentaires utilisés lors de la construction du paquet binaire, pour des raisons de conformité avec la licence. Il permet d'indiquer au logiciel de gestion de l'archive que des paquets source supplémentaires doivent être conservés tant que le paquet binaire est maintenu. Ce champ doit être une liste de paquets source, séparés par des virgules avec des références strictes de version « B<=> » et mise entre parenthèses. Veuillez noter que le logiciel de gestion de l'archive risque de ne pas accepter un envoi qui déclare une relation B<Built-Using> qui ne peut pas être satisfaite dans l'archive.

=item B<Static-Built-Using:> I<liste-de-paquets>

Ce champ de dépendance affiche les paquets source supplémentaires utilisés lors de la construction du paquet binaire, aux fins de construction statiques (par exemple, pour la liaison avec des bibliothèques statiques, les constructions pour des langages centrés sur le source tels que Go ou Rust, l'utilisation de bibliothèques C/C++ avec seulement des en-têtes, l'injection d'objets binaires (blob) de données dans le code, etc.). C'est utile pour vérifier si ce paquet devrait être reconstruit lorsque les paquets source listés ont été mis à jour, par exemple à cause d'annonces de sécurité. Ce champ doit être une liste de noms de paquets source, séparés par des virgules avec des références strictes de version « B<=> », mise entre parenthèses.

Pris en charge depuis dpkg 1.21.3.

=item B<Built-For-Profiles:> I<liste-de-profils> (obsolète)

Ce champ sert à spécifier une liste, séparée par des espaces, de profils de construction avec lesquels ce paquet binaire a été construit (depuis dpkg 1.17.2 et jusqu'à la version 1.18.18). Les informations précédemment trouvées dans ce champ sont maintenant dans le champ B<.buildinfo> qui l'a remplacé.

=item B<Auto-Built-Package:> I<liste-de-raisons>

This field specifies a whitespace separated list of reasons why this package was auto-generated.  Binary packages marked with this field will not appear in the I<debian/control> template source control file.  The only currently used reason is B<debug-symbols>.

=item B<Build-Ids:> I<liste-identifiants-de-construction-elf>

Ce champ définit une liste, séparée par des espaces, des identifiants de construction ELF. Il s'agit des identifiants uniques d'objets ELF sémantiquement identiques, pour chacun de ces objets présents dans le paquet.

Le format ou la manière de calculer chaque identifiant de construction n'est pas défini par nature.

=back

=head1 EXEMPLE

 Package: grep
 Essential: yes
 Priority: required
 Section: base
 Maintainer: Wichert Akkerman <wakkerma@debian.org>
 Architecture: sparc
 Version: 2.4-1
 Pre-Depends: libc6 (>= 2.0.105)
 Provides: rgrep
 Conflicts: rgrep
 Description: GNU grep, egrep and fgrep.
  Il se peut que le grep de la famille GNU des utilitaires grep soit
  le plus rapide de l'ouest ! Le grep de GNU est fondé sur un mécanisme
  rapide de mise en correspondance déterministe d'états simples (environ
  deux fois plus rapide que le « egrep » standard d'Unix), modifié par une
  recherche de type Boyer-Moore-Gosper qui cherche une chaîne donnée en
  empêchant que les textes impossibles soient analysés par le mécanisme de
  mise en correspondance d'expressions rationnelles et sans avoir
  nécessairement besoin de voir chaque caractère. C'est beaucoup plus
  rapide que les « grep » ou « egrep » d'Unix.
  (Des expressions rationnelles contenant des références circulaires
  ralentissent cependant le programme.)

=head1 BOGUES

Le champ B<Build-Ids> utilise un nom plutôt générique à partir de son contexte original dans l'objet ELF qui sert un objectif très spécifique et a un format exécutable.

=head1 VOIR AUSSI

L<deb822(5)>, L<deb-src-control(5)>, L<deb(5)>, L<deb-version(7)>, L<debtags(1)>, L<dpkg(1)>, L<dpkg-deb(1)>.


=head1 TRADUCTION

Ariel VARDI <ariel.vardi@freesbee.fr>, 2002.
Philippe Batailler, 2006.
Nicolas François, 2006.
Veuillez signaler toute erreur à <debian-l10n-french@lists.debian.org>.
