
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 NOM

dpkg-architecture - Fixer et déterminer l'architecture pour la construction d'un paquet

=head1 SYNOPSIS

B<dpkg-architecture> [I<option>...] [I<commande>]

=head1 DESCRIPTION

B<dpkg-architecture> aide à déterminer et à fixer l'architecture de construction et l'architecture hôte pour la création d'un paquet.

The build architecture is always determined by either the B<DEB_BUILD_ARCH> variable if set (and B<--force> not being specified) or by an external call to L<dpkg(1)>, and cannot be set at the command line.

You can specify the host architecture by providing one or both of the options B<--host-arch> and B<--host-type>, otherwise the B<DEB_HOST_ARCH> variable is used if set (and B<--force> not being specified).  The default is determined by an external call to L<gcc(1)>, or the same as the build architecture if B<CC> or gcc are both not available.  One out of B<--host-arch> and B<--host-type> is sufficient, the value of the other will be set to a usable default.  Indeed, it is often better to only specify one, because B<dpkg-architecture> will warn you if your choice does not match the default.

=head1 COMMANDES

=over 

=item B<-l>, B<--list>

Afficher les variables d'environnement, une par ligne, en utilisant le format I<VARIABLE=valeur>. C'est l'action par défaut.

=item B<-e>, B<--equal> I<architecture>

Vérifier l'égalité d'architectures (depuis dpkg 1.13.13). Cela compare l'architecture Debian en cours (ou celle spécifiée) à I<architecture> afin de vérifier leur égalité. Cette action ne gère pas les architectures joker. La commande quitte avec un code de retour de B<0> si l'architecture correspond et de B<1> dans le cas contraire.

=item B<-i>, B<--is> I<architecture-joker>

Vérifier l'identité des architectures (depuis dpkg 1.13.13). Cela compare l'architecture Debian en cours (ou celle spécifiée) à I<architecture-joker> (après expansion de celle-ci) afin de vérifier leur correspondance. La commande quitte avec un code de retour de B<0> si l'architecture correspond et de B<1> dans le cas contraire.

=item B<-q>, B<--query> I<nom-de-variable>

Afficher la valeur d'une seule variable.

=item B<-s>, B<--print-set>

Produire une commande d'exportation, qui peut être utilisée pour positionner les variables d'environnement utilisant le B<shell> POSIX ou « make B<eval> », selon le format de sortie.

=item B<-u>, B<--print-unset>

Afficher une commande similaire à celle produite par B<--print-set>, mais pour supprimer toutes les variables.

=item B<-c>, B<--command> I<chaîne-de-commande>

Exécuter une I<chaîne-de-commande> dans un environnement où toutes les variables sont positionnées aux valeurs spécifiées.

If the I<command-string> contains shell metacharacters, then it will be invoked through the system bourne shell.

=item B<-L>, B<--list-known>

Afficher une liste des architectures valables. Elle peut être restreinte par une ou plusieurs des options correspondantes B<--match-wildcard>, B<--match-bits> ou B<--match-endian> (depuis dpkg 1.17.14).

=item B<-?>, B<--help>

Afficher un message d'aide puis quitter.

=item B<--version>

Afficher le numéro de version puis quitter.

=back

=head1 OPTIONS

=over 

=item B<-a>, B<--host-arch> I<architecture>

Définir l'architecture Debian en cours.

=item B<-t>, B<--host-type> I<type-de-système-gnu>

Définir le type de système GNU en cours.

=item B<-A>, B<--target-arch> I<architecture>

Définir l'architecture Debian de la cible (depuis dpkg 1.17.14).

=item B<-T>, B<--target-type> I<type-de-système-gnu>

Définir le type de système GNU de la cible (depuis dpkg 1.17.14).

=item B<-W>, B<--match-wildcard> I<architecture-joker>

Restreindre les architectures listées par B<--list-known> à celles correspondant à l'architecture-joker (depuis dpkg 1.17.14).

=item B<-B>, B<--match-bits> I<bits-de-l'architecture>

Restreindre les architectures listées par B<--list-known> à celles employant un CPU disposant du nombre de bits indiqués (depuis dpkg 1.17.14). Soit B<32>, soit B<64>.

=item B<-E>, B<--match-endian> I<boutisme-d'architecture>

Restreindre les architectures listées par B<--list-known> à celles correspondant au boutisme spécifié (depuis dpkg 1.17.14). Soit B<little>, soit B<big>.

=item B<--print-format> I<format>

Configurer le format de sortie de B<--print-set> et B<--print-unset> (depuis dpkg 1.20.6), pour B<shell> (par défaut) ou B<make>.

=item B<-f>, B<--force>

Values set by existing environment variables with the same name as used by the scripts are honored (i.e. used by B<dpkg-architecture>), except if this force flag is present.  This allows the user to override a value even when the call to B<dpkg-architecture> is buried in some other script (for example L<dpkg-buildpackage(1)>).

=back

=head1 TERMINOLOGIE

=over 

=item Machine de construction

Machine sur laquelle le paquet est construit.

=item Machine hôte

Machine pour laquelle le paquet est construit.

=item Machine cible

The machine the compiler is building for, or the emulator will run code for.  This is only needed when building a cross-toolchain (or emulator), one that will be built on the build architecture, to be run on the host architecture, and that itself will build (or run emulated) code for the target architecture.

=item Architecture Debian

The Debian architecture string, used in binary packages, which specifies the binary tree in a package repository.

Examples: i386, sparc, hurd-i386.

=item N-uplet d'architecture Debian

A Debian architecture tuple is the fully qualified architecture with all its components spelled out.  This differs with Debian architectures in that at least the I<cpu> component does not embed the I<abi>.  The current tuple has the form I<abi>-I<libc>-I<os>-I<cpu>.

Examples: base-gnu-linux-amd64, eabihf-musl-linux-arm.

=item Architecture Debian joker

Une architecture Debian joker est une architecture spéciale qui correspond à toutes les architectures réelles qui en font partie. Il est en général de la forme d'un n-uplet d'architecture Debian avec quatre éléments ou moins dont au moins l'un d'eux est B<any>. Les éléments manquants du n-uplet sont préfixés implicitement par B<any>, et donc les paires suivantes sont équivalentes.

=over 

=item B<any>-B<any>-B<any>-B<any> = B<any>

=item B<any>-B<any>-I<os>-B<any> = I<os>-B<any>

=item B<any>-I<libc>-B<any>-B<any> = I<libc>-B<any>-B<any>

=back

Exemples : linux-any, any-i386, hurd-any, eabi-any-any-arm, musl-any-any.

=item Type de système GNU

An architecture specification string consisting of two parts separated by a hyphen: CPU and system.

The CPU part never contains a hyphen, while the system part might itself contain a hyphen to separate a kernel from its general ABI, where the general ABI might contain both runtime (such as libc) and executable ABI specifiers joined without a hyphen.

Examples: i586-linux-gnu, sparc-linux-gnu, i686-gnu, x86_64-netbsd.

=item n-uplet multiarchitecture

The clarified GNU system type, used for filesystem paths.  This triplet does not change even when the baseline ISA gets bumped, so that the resulting paths are stable over time.  The only current difference with the GNU system type is that the CPU part for i386 based systems is always i386.

Examples: i386-linux-gnu, x86_64-linux-gnu.  Example paths: /lib/powerpc64le-linux-gnu/, /usr/lib/i386-kfreebsd-gnu/.

=back

=head1 VARIABLES D'ENVIRONNEMENT

Les variables suivantes sont lues à partir de l'environnement (à moins que B<--force> n'ait été spécifié) et sont positionnées par B<dpkg-architecture> (voir la section B<TERMS> pour une description du schéma de nommage) :

=over 

=item B<DEB_BUILD_ARCH>

Architecture Debian de la machine de construction.

B<Note>: If you are not building tools that need to run during the build, these are probably not the variables you are looking for.  Please see L</TERMS> section for the meanings of these terms.

=item B<DEB_BUILD_ARCH_ABI>

Nom de l'ABI Debian de la machine de construction (depuis dpkg 1.18.11).

=item B<DEB_BUILD_ARCH_LIBC>

Nom de la libc Debian de la machine de construction (depuis dpkg 1.18.11).

=item B<DEB_BUILD_ARCH_OS>

Nom du système Debian de la machine de construction (depuis dpkg 1.13.2).

=item B<DEB_BUILD_ARCH_CPU>

Nom de processeur Debian de la machine de construction (depuis dpkg 1.13.2).

=item B<DEB_BUILD_ARCH_BITS>

Taille de pointeur de la machine de construction (en bits, depuis dpkg 1.15.4).

=item B<DEB_BUILD_ARCH_ENDIAN>

Boutisme de la machine de construction (petit ou gros, depuis dpkg 1.15.4).

=item B<DEB_BUILD_GNU_CPU>

Partie CPU GNU de B<DEB_BUILD_GNU_TYPE>.

=item B<DEB_BUILD_GNU_SYSTEM>

Partie système GNU de B<DEB_BUILD_GNU_TYPE>.

=item B<DEB_BUILD_GNU_TYPE>

Type de système GNU de la machine de construction.

=item B<DEB_BUILD_MULTIARCH>

Le type en clair de système GNU de la machine de construction, utilisé pour les chemins du système de fichiers (depuis dpkg 1.16.0).

=item B<DEB_HOST_ARCH>

Architecture Debian de la machine hôte.

=item B<DEB_HOST_ARCH_ABI>

Nom de l'ABI Debian de la machine hôte (depuis dpkg 1.18.11).

=item B<DEB_HOST_ARCH_LIBC>

Nom de la libc Debian de la machine hôte (depuis dpkg 1.18.11).

=item B<DEB_HOST_ARCH_OS>

Nom du système Debian de la machine hôte (depuis dpkg 1.13.2).

=item B<DEB_HOST_ARCH_CPU>

Nom du processeur Debian de la machine hôte (depuis dpkg 1.13.2).

=item B<DEB_HOST_ARCH_BITS>

Taille de pointeur de la machine hôte (en bits, depuis dpkg 1.15.4).

=item B<DEB_HOST_ARCH_ENDIAN>

Boutisme de la machine hôte (petit ou gros, depuis dpkg 1.15.4).

=item B<DEB_HOST_GNU_CPU>

Partie CPU GNU de B<DEB_HOST_GNU_TYPE>.

=item B<DEB_HOST_GNU_SYSTEM>

Partie système GNU de B<DEB_HOST_GNU_TYPE>.

=item B<DEB_HOST_GNU_TYPE>

Type de système GNU de la machine hôte.

=item B<DEB_HOST_MULTIARCH>

Le type en clair de système GNU de la machine hôte, utilisé pour les chemins du système de fichiers (depuis dpkg 1.16.0).

=item B<DEB_TARGET_ARCH>

L'architecture Debian de la machine cible (depuis dpkg 1.17.14).

B<Note>: If you are not building cross-toolchains (or emulators), these are probably not the variables you are looking for.  Please see L</TERMS> section for the meanings of these terms.

=item B<DEB_TARGET_ARCH_ABI>

Nom de l'ABI Debian de la machine cible (depuis dpkg 1.18.11).

=item B<DEB_TARGET_ARCH_LIBC>

Nom de la libc Debian de la machine cible (depuis dpkg 1.18.11).

=item B<DEB_TARGET_ARCH_OS>

Nom du système Debian de la machine cible (depuis dpkg 1.17.14).

=item B<DEB_TARGET_ARCH_CPU>

Nom du processeur Debian de la machine cible (depuis dpkg 1.17.14).

=item B<DEB_TARGET_ARCH_BITS>

Taille de pointeur de la machine cible (en bits, depuis dpkg 1.17.14).

=item B<DEB_TARGET_ARCH_ENDIAN>

Boutisme de la machine cible (petit ou gros, depuis dpkg 1.17.14).

=item B<DEB_TARGET_GNU_CPU>

Partie CPU GNU de B<DEB_TARGET_GNU_TYPE> (depuis dpkg 1.17.14).

=item B<DEB_TARGET_GNU_SYSTEM>

Partie système GNU de B<DEB_TARGET_GNU_TYPE> (depuis dpkg 1.17.14).

=item B<DEB_TARGET_GNU_TYPE>

Type du système GNU de la machine cible (depuis dpkg 1.17.14).

=item B<DEB_TARGET_MULTIARCH>

Le type en clair du système GNU de la machine cible, utilisé pour les chemins du système de fichiers (depuis dpkg 1.17.14).

=back

=head1 FICHIERS

=head2 Tables d'architectures

Tous ces fichiers sont nécessaires afin que B<dpkg-architecture> puisse fonctionner. Leurs emplacements peuvent être modifiés lors du traitement à l'aide de la variable d'environnement B<DPKG_DATADIR>. Ces tables contiennent en première ligne un pseudo-champ de B<Version> de format pour indiquer leur format de sorte que les analyseurs peuvent vérifier s'ils les comprennent, tel que « # Version=1.0 ».

=over 

=item I<%PKGDATADIR%/table-processeur>

Table des noms de processeurs connus et liaison avec leur nom GNU. Version 1.0 de format (depuis dpkg 1.13.2).

=item I<%PKGDATADIR%/table-système-exploitation>

Table des noms des systèmes d'exploitation connus et liaison avec leurs noms GNU. Version 2.0 de format (depuis dpkg 1.18.11).

=item I<%PKGDATADIR%/table-n-uplet>

Correspondances entre les n-uplets de l'architecture Debian et les noms des architectures Debian. Format version 1.0 (depuis dpkg 1.18.11).

=item I<%PKGDATADIR%/table-ABI>

Table des substituts d'attributs d'ABI d'architecture Debian. Format version 2.0 (depuis dpkg 1.18.11).

=back

=head2 Gestion de l'empaquetage

=over 

=item I<%PKGDATADIR%/architecture.mk>

Un fragment de fichier Makefile qui définit correctement et exporte toutes les variables que B<dpkg-architecture> peut fournir (depuis dpkg 1.16.1).

=back

=head1 EXEMPLES

B<dpkg-buildpackage> accepte l'option B<-a>, et la passe à B<dpkg-architecture>. Voici d'autres exemples :

=over 

 CC=i386-gnu-gcc dpkg-architecture -c debian/rules build

 eval $(dpkg-architecture -u)

=back

Vérifier si l'architecture en cours (ou celle spécifiée) est identique à une architecture :

=over 

 dpkg-architecture -elinux-arm64

 dpkg-architecture -ariscv64 -elinux-riscv64

=back

Vérifier si l'architecture en cours (ou celle spécifiée) est un système Linux :

=over 

 dpkg-architecture -ilinux-any

 dpkg-architecture -aamd64 -ilinux-any

=back

=head2 Utilisation dans debian/rules

Les variables d'environnement définies par B<dpkg-architecture> sont fournies à I<debian/rules> comme variables pour make (consultez la documentation de make). Cependant, vous ne devez pas compter là-dessus puisque cela empêche les appels manuels à ce script. À la place, vous devez toujours les initialiser en utilisant B<dpkg-architecture> avec l'option B<-q>. Voici quelques exemples, qui indiquent aussi comment améliorer la gestion des compilations croisées de votre paquet :

Récupération du type de système GNU et passage à ./configure :

=over 

 DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
 DEB_HOST_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
 [...]
 ifeq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
   confflags += --build=$(DEB_HOST_GNU_TYPE)
 else
   confflags += --build=$(DEB_BUILD_GNU_TYPE) \
                --host=$(DEB_HOST_GNU_TYPE)
 endif
 [...]
 ./configure $(confflags)

=back

Effectuer une action pour une architecture spécifique :

=over 

 DEB_HOST_ARCH ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)

 ifeq ($(DEB_HOST_ARCH),arm64)
   [...]
 endif

=back

Ou, si vous n'avez besoin que de vérifier le type du processeur et du système, utilisez les variables B<DEB_HOST_ARCH_CPU> ou B<DEB_HOST_ARCH_OS>.

Veuillez noter qu'il est également possible d'utiliser un fragment externe de fichier Makefile pour définir correctement toutes les variables que B<dpkg-architecture> peut fournir :

=over 

 include %PKGDATADIR%/architecture.mk

 ifeq ($(DEB_HOST_ARCH),arm64)
   [...]
 endif

=back

Dans tous les cas, il ne faut jamais utiliser B<dpkg --print-architecture> pour récupérer les informations relatives à l'architecture pendant la construction d'un paquet.

=head1 ENVIRONNEMENT

=over 

=item B<DPKG_DATADIR>

Si cette variable est définie, elle sera utilisée comme répertoire de données de B<dpkg> où sont placées les tables d'architecture (depuis dpkg 1.14.17). Par défaut «%PKGDATADIR%».

=item B<DPKG_COLORS>

Définit le mode de couleur (depuis dpkg 1.18.5). Les valeurs actuellement acceptées sont B<auto> (par défaut), B<always> et B<never>.

=item B<DPKG_NLS>

Si cette variable est définie, elle sera utilisée pour décider l'activation de la prise en charge des langues (NLS – Native Language Support), connu aussi comme la gestion de l'internationalisation (ou i18n) (depuis dpkg 1.19.0). Les valeurs permises sont : B<0> et B<1> (par défaut).

=back

=head1 NOTES

Tous les noms de commandes et d'options longs ne sont disponibles qu'à partir de dpkg 1.17.17.

=head1 VOIR AUSSI

L<dpkg-buildpackage(1)>.


=head1 TRADUCTION

Ariel VARDI <ariel.vardi@freesbee.fr>, 2002.
Philippe Batailler, 2006.
Nicolas François, 2006.
Veuillez signaler toute erreur à <debian-l10n-french@lists.debian.org>.
