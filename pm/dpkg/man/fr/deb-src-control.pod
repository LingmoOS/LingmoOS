
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 NOM

deb-src-control - Debian source package template control file format

=head1 SYNOPSIS

B<debian/control>

=head1 DESCRIPTION

Each Debian source package contains the «B<debian/control>» template source control file, and its L<deb822(5)> format is a superset of the B<control> file shipped in Debian binary packages, see L<deb-control(5)>.

This file contains at least 2 stanzas, separated by a blank line.  The first stanza is called the source package stanza and lists all information about the source package in general, while each following stanzas are called the binary package stanzas and describe exactly one binary package per stanza. Each stanza consists of at least one field.  A field starts with a field name, such as B<Package> or B<Section> (case insensitive), followed by a colon, the body of the field (case sensitive unless stated otherwise) and a newline.  Multi-line fields are also allowed, but each supplementary line, without a field name, must start with at least one space.  The content of the multi-line fields is generally joined to a single line by the tools (except in the case of the B<Description> field, see below).  To insert empty lines into a multi-line field, insert a dot after the space.  Lines starting with a ‘B<#>’ are treated as comments.

=head1 LES CHAMPS SOURCE

=over 

=item B<Source:> I<nom-du-paquet-source> (requis)

The value of this field is the name of the source package, and must match the name of the source package in the debian/changelog file.  A package name must consist only of lowercase letters (a-z), digits (0-9), plus (+) and minus (-) signs, and periods (.).  Package names must be at least two characters long and must start with a lowercase alphanumeric character (a-z0-9).

=item B<Maintainer:> I<nom-complet-et-adresse-électronique> (recommandé)

Le format de ce champ sera « Jean Dupont E<lt>jdupont@foo.comE<gt> » ; il indique le responsable actuel du paquet, par opposition à l'auteur du logiciel ou au responsable originel.

=item B<Uploaders:> I<nom-complet-et-adresse-électronique>

Affiche les noms et les adresses électroniques des co-responsables du paquet, au même format que le champ B<Maintainer>. Des co-responsables multiples peuvent être séparés par des virgules.

=item B<Standards-Version:> I<chaîne-de-la-version>

Ce champ indique la version la plus récente des normes de la charte de la distribution auxquelles ce paquet se conforme.

=item B<Description> I<description-courte>

=item S< >I<description-longue>

Le format de la description du paquet est un résumé bref sur la première ligne (après le champ B<Description>). Les lignes suivantes peuvent servir à une description plus longue et plus détaillée. Chaque ligne de cette description longue doit être précédée d'une espace ; quand c'est une ligne blanche, elle doit contenir un seul « B<.> » après cette espace.

=item B<Homepage:> I<URL>

URL de la page d'accueil du projet amont.

=item B<Bugs:> I<URL>

L'I<URL> du système de suivi de bogues (BTS) de ce paquet. Le format utilisé est I<type_de_bts>B<://>I<adresse_du_btsE>, par exemple B<debbugs://bugs.debian.org>. Ce champ est en général inutile.

=item B<Build-Driver:> I<driver-name>

This experimental field specifies the name of the build driver to use to build this package.  When omitted the I<driver-name> defaults to B<debian-rules>.

This field is supported since dpkg 1.22.7.

=item B<Rules-Requires-Root:> B<no>|B<binary-targets>|I<mots-clés-implémentation>

Ce champ est utilisé pour indiquer si le fichier B<debian/rules> exige des droits (fake)root pour exécuter certaines de ses cibles et quand, si c'est le cas.

=over 

=item B<no>

The binary targets will not require (fake)root at all.  This is the default in B<dpkg-build-api> level >= 1, or since dpkg 1.22.13.

=item B<binary-targets>

The binary targets must always be run under (fake)root.  This value is the default in B<dpkg-build-api> level 0 until dpkg 1.22.13, when the field is omitted; adding the field with an explicit B<binary-targets>, while not strictly needed, marks it as having been analyzed for this requirement.

=item I<mots-clés-implémentation>

Il s'agit d'une liste, séparée par des espaces, de mots-clés qui définissent quand (fake)root est exigé.

Les mots-clés sont composés de I<espace-de-nommage>/I<cas>. La partie I<espace-de-nommage> ne peut pas inclure de « / » ou d'espace. La partie I<cas> ne peut pas inclure d'espace. Par ailleurs, les deux parties doivent être entièrement composées de caractères ASCII imprimables.

Chaque outil ou paquet définira un espace de nommage nommé d'après lui-même et fournira le nombre des cas où (fake)root est exigé. (Voir « Mots-clés fournis par l'implémentation » dans I<rootless-builds.txt>).

Quand le champ est défini pour un des I<mots-clés-implémentation>, le constructeur exposera une interface qui est utilisée pour exécuter une commande avec les droits (fake)root. (Voir « API pour obtenir les droits root » dans I<rootless-builds.txt>).

=back

=item B<Testsuite:> I<liste-de-noms>

=item B<Testsuite-Triggers:> I<liste-de-paquets>

These fields are described in the L<dsc(5)> manual page, as they are generated from information inferred from B<debian/tests/control> or copied literally to the source control file.

=item B<Vcs-Arch:> I<URL>

=item B<Vcs-Bzr:> I<URL>

=item B<Vcs-Cvs:> I<URL>

=item B<Vcs-Darcs:> I<URL>

=item B<Vcs-Git:> I<URL>

=item B<Vcs-Hg:> I<URL>

=item B<Vcs-Mtn:> I<URL>

=item B<Vcs-Svn:> I<URL>

Ce champ indique l'I<URL> du système de gestion de version utilisé pour la gestion du paquet. Les systèmes gérés sont B<Arch>, B<Bzr> (Bazaar), B<Cvs>, B<Darcs>, B<Git>, B<Hg> (Mercurial), B<Mtn> (Monotone) et B<Svn> (Subversion). En général, ce champ fait référence à la dernière version du paquet, c'est-à-dire la branche principale ou le « trunk ».

=item B<Vcs-Browser:> I<URL>

Indique l'I<URL> de l'interface web permettant de parcourir le dépôt du système de gestion de versions.

=item B<Origin:> I<nom>

Indique le nom de la distribution dont le paquet provient. Ce champ n'est souvent pas nécessaire.

=item B<Section:> I<section>

Champ général qui indique la catégorie d'un paquet ; cette catégorie est fondée sur le programme que ce paquet installe. B<utils>, B<net>, B<mail>, B<text>, B<x11>, etc., représentent quelques catégories habituelles.

When omitted, the I<section> defaults to B<unknown> (since dpkg 1.22.13).

The accepted values are based on the specific distribution policy.

=item B<Priority:> I<priorité>

Sets the importance of this package in relation to the system as a whole. The known priorities are B<required>, B<important>, B<standard>, B<optional>, B<extra>, and B<unknown>, but other values can be used as well.

When omitted, the I<priority> defaults to B<optional> (since dpkg 1.22.13).

How to apply these values depends on the specific distribution policy.

=item B<Build-Depends:> I<liste-de-paquets>

Liste de paquets à installer et configurer pour pouvoir construire à partir du paquet source. Ces dépendances doivent être satisfaites lors de la construction des paquets binaires dépendant ou non de l'architecture, et des paquets source. Ajouter une dépendance à ce champ n'aura pas exactement le même effet que de l'inclure à la fois dans B<Build-Depends-Arch> et B<Build-Depends-Indep>, parce que la dépendance a aussi besoin d'être prise en compte lors de la construction du paquet source.

=item B<Build-Depends-Arch:>I<liste-de-paquets>

Liste analogue à B<Build-Depends>, mais restreinte aux paquets nécessaires pour construire les paquets dépendants de l'architecture. Les paquets indiqués dans B<Build-Depends> sont alors également installés. Ce champ est géré depuis la version 1.16.4 de dpkg ; pour pouvoir construire des paquets avec des versions plus anciennes de dpkg, il est préférable d'utiliser B<Build-Depends>.

=item B<Build-Depends-Indep:> I<liste-de-paquets>

Liste analogue à B<Build-Depends>, mais restreinte aux paquets nécessaires pour construire les paquets indépendants de l'architecture. Les paquets indiqués dans B<Build-Depends> sont alors aussi installés.

=item B<Build-Conflicts:> I<liste de paquets>

Liste de paquets qui ne doivent pas être installés lors de la construction du paquet, par exemple s'ils interfèrent avec le système de construction utilisé. Si une dépendance est ajoutée à cette liste, l'effet sera le même que si elle était ajoutée à la fois dans B<Build-Conflicts-Arch> et B<Build-Conflicts-Indep>, en ayant de plus l'effet d'être prise en compte pour les constructions de paquets uniquement source (« source-only builds »).

=item B<Build-Conflicts-Arch:> I<liste-de-paquets>

Identique à B<Build-Conflicts>, mais n'est prise en compte que pour les paquets dépendants de l'architecture. Ce champ est géré depuis la version 1.16.4 de dpkg ; pour pouvoir construire des paquets avec des versions plus anciennes de dpkg, il est préférable d'utiliser B<Build-Conflicts>.

=item B<Build-Conflicts-Indep:> I<liste-de-paquets>

liste analogue à B<Build-Conflicts> mais restreinte à la construction des paquets indépendants de l'architecture.

=back

The syntax of the B<Build-Depends>, B<Build-Depends-Arch> and B<Build-Depends-Indep> fields is a list of groups of alternative packages. Each group is a list of packages separated by vertical bar (or “pipe”) symbols, ‘B<|>’.  The groups are separated by commas ‘B<,>’, and can end with a trailing comma that will be eliminated when generating the fields for L<deb-control(5)> (since dpkg 1.10.14).  Commas are to be read as “AND”, and pipes as “OR”, with pipes binding more tightly.  Each package name is optionally followed by an architecture qualifier appended after a colon ‘B<:>’, optionally followed by a version number specification in parentheses ‘B<(>’ and ‘B<)>’, an architecture specification in square brackets ‘B<[>’ and ‘B<]>’, and a restriction formula consisting of one or more lists of profile names in angle brackets ‘B<E<lt>>’ and ‘B<E<gt>>’.

The syntax of the B<Build-Conflicts>, B<Build-Conflicts-Arch> and B<Build-Conflicts-Indep> fields is a list of comma-separated package names, where the comma is read as an “AND”, and where the list can end with a trailing comma that will be eliminated when generating the fields for L<deb-control(5)> (since dpkg 1.10.14).  Specifying alternative packages using a “pipe” is not supported.  Each package name is optionally followed by a version number specification in parentheses, an architecture specification in square brackets, and a restriction formula consisting of one or more lists of profile names in angle brackets.

Un nom de type d'architecture peut être un nom d'architecture réelle de Debian (depuis dpkg 1.16.5), B<any> (depuis dpkg 1.16.2) ou B<native> (depuis dpkg 1.16.5). S'il est omis, la valeur par défaut des champs B<Build-Depends> est l'architecture de l'hôte actuel, la valeur par défaut des champs B<Build-Conflicts> est B<any>. Un nom d'architecture réelle de Debian correspondra exactement à l'architecture pour ce nom de paquet, B<any> correspondra à toute architecture pour ce nom de paquet si le paquet a été marqué B<Multi-Arch: allowed>, et B<native> correspondra à l'architecture de construction actuelle si le paquet n'a pas été marqué B<Multi-Arch: foreign>.

Une contrainte sur le numéro de version peut commencer par « B<E<gt>E<gt>> », et dans ce cas toute version supérieure correspondra, et il peut indiquer (ou pas) le numéro de révision pour le paquet Debian (les deux numéros étant séparés par un trait d'union). Voici les relations acceptées pour les versions : « B<E<gt>E<gt>> » pour supérieur à, « B<E<lt>E<lt>> » pour inférieur à, « B<E<gt>=> » pour supérieur ou égal, « B<E<lt>=> » pour inférieur ou égal, et « B<=> » pour égal à.

Une indication d'architecture consiste en un ou plusieurs noms d'architectures, séparés par des espaces. Un nom d'architecture peut être précédé d'un point d'exclamation qui correspond alors au « NON » logique.

Une formule de restriction consiste en une ou plusieurs listes de restriction séparées par des espaces. Chaque liste de restriction est incluse entre chevrons. Les éléments des listes de restriction sont des noms de profils de construction séparés par des espaces et pouvant être préfixés d'un point d'exclamation représentant un « NON » logique. Une formule de restriction représente une forme normale disjonctive.

Veuillez noter que les dépendances des paquets du jeu B<build-essential> peuvent être omises et qu'il n'est pas possible de déclarer des conflits avec ces paquets. La liste des paquets concernés est fournie par le paquet build-essential.

=head1 CHAMPS BINAIRES

Veuillez noter que les champs B<Priority>, B<Section> et B<Homepage> peuvent être placés dans le paragraphe d'un paquet binaire et leur valeur remplace alors celle du paquet source.

=over 

=item B<Package:> I<nom-du-paquet-binaire> (requis)

Ce champ sert à indiquer le nom du paquet binaire. Les restrictions sont les mêmes que celles des paquets source.

=item B<Package-Type:> B<deb>|B<udeb>|I<type>

Ce champ indique le type de paquet. La valeur B<udeb> est à utiliser pour les paquets à taille contrôlée utilisés par l'installateur Debian. La valeur B<deb> est la valeur par défaut qui est utilisée si le champ n'est pas présent. De nouveaux types pourraient être ajoutés au fil du temps.

=item B<Architecture:> I<arch>|B<all>|B<any> (requis)

The architecture specifies on which type of hardware this package runs.  For packages that run on all architectures, use the B<any> value.  For packages that are architecture independent, such as shell and Perl scripts or documentation, use the B<all> value.  To restrict the packages to a certain set of architectures, specify the architecture names, separated by a space. It's also possible to put architecture wildcards in that list (see L<dpkg-architecture(1)> for more information about them).

=item B<Build-Profiles:> I<formule-de-restriction>

Ce champ précise les conditions pour lesquelles ce paquet binaire est ou n'est pas construit. Cette condition est exprimée en utilisant la même syntaxe de formule de restriction qui provient du champ B<Build-Depends> (y compris les chevrons).

Si un paragraphe de paquet binaire ne contient pas ce champ, cela signifie de façon implicite que ce paquet se construit avec tous les profils de construction (y compris aucun profil).

En d'autres termes, si un paragraphe de paquet binaire est annoté d'un champ B<Build-Profiles> non vide, alors, ce paquet binaire est créé si et seulement si la condition exprimée par l'expression en forme normale conjonctive est évaluée à vrai.

=item B<Protected:> B<yes>|B<no>

=item B<Essential:> B<yes>|B<no>

=item B<Build-Essential:> B<yes>|B<no>

=item B<Multi-Arch:> B<same>|B<foreign>|B<allowed>|B<no>

=item B<Tag:> I<liste-d'étiquettes>

=item B<Description:> I<description-courte> (recommandé)

These fields are described in the L<deb-control(5)> manual page, as they are copied literally to the control file of the binary package.

=item B<Depends:> I<liste-de-paquets>

=item B<Pre-Depends:> I<liste-de-paquets>

=item B<Recommends:> I<liste-de-paquets>

=item B<Suggests:> I<liste-de-paquets>

=item B<Breaks:> I<liste-de-paquets>

=item B<Enhances:> I<liste-de-paquets>

=item B<Replaces:> I<liste-de-paquets>

=item B<Conflicts:> I<liste-de-paquets>

=item B<Provides:> I<liste-de-paquets>

=item B<Built-Using:> I<liste-de-paquets>

=item B<Static-Built-Using:> I<liste-de-paquets>

These fields declare relationships between packages.  They are discussed in the L<deb-control(5)> manual page.  When these fields are found in I<debian/control> they can also end with a trailing comma (since dpkg 1.10.14), have architecture specifications and restriction formulas which will all get reduced when generating the fields for L<deb-control(5)>.

=item B<Subarchitecture:> I<valeur>

=item B<Kernel-Version:> I<valeur>

=item B<Installer-Menu-Item:> I<valeur>

Ces champs sont utilisés par l'installateur dans les B<udeb> et ne sont en général pas nécessaires. Pour plus de détails à leur sujet, consultez L<https://salsa.debian.org/installer-team/debian-installer/-/raw/master/doc/devel/modules.txt>.

=back

=head1 LES CHAMPS UTILISATEUR

Il est autorisé d'ajouter au fichier de contrôle des champs supplémentaires définis par l'utilisateur. L'outil ignorera ces champs. Si vous souhaitez que ces champs soient copiés dans ces fichiers de sortie, tels que les paquets binaires, vous devez utiliser un schéma de nommage personnalisé : les champs démarreront par un B<X>, suivi de zéro ou plusieurs des lettres B<SBC> et un trait d'union.

=over 

=item B<S>

The field will appear in the source package control file, see L<dsc(5)>.

=item B<B>

The field will appear in the control file in the binary package, see L<deb-control(5)>.

=item B<C>

The field will appear in the upload control (.changes) file, see L<deb-changes(5)>.

=back

Veuillez noter que les préfixes B<X>[B<SBC>]B<-> sont retirés quand les champs sont copiés dans les fichiers de sortie. Un champ B<XC-Approved-By> apparaîtra sous la forme B<Approved-By> dans le fichier des modifications et n'apparaîtra pas dans les fichiers de contrôle des paquets binaires ou source.

Il faut prendre en compte le fait que ces champs définis par l'utilisateur se serviront de l'espace de nommage global, lequel pourrait, dans le futur, entrer en conflit avec des champs officiellement reconnus. Pour éviter de telles situations, il est conseillé de les préfixer avec B<Private-> (exemple : B<XB-Private-New-Field>).

=head1 EXEMPLE

 # Comment
 Source: dpkg
 Section: admin
 Priority: required
 Maintainer: Dpkg Developers <debian-dpkg@lists.debian.org>
 # This field is copied to the binary and source packages.
 XBS-Upstream-Release-Status: stable
 Homepage: https://wiki.debian.org/Teams/Dpkg
 Vcs-Browser: https://git.dpkg.org/cgit/dpkg/dpkg.git
 Vcs-Git: https://git.dpkg.org/git/dpkg/dpkg.git
 Standards-Version: 4.7.0
 Build-Depends:
  debhelper-compat (= 13),
  debhelper (>= 13.10~),
  pkgconf,
  libselinux1-dev (>= 1.28-4) [!linux-any],

 Package: dpkg-dev
 Section: utils
 Priority: optional
 Architecture: all
 # This is a custom field in the binary package.
 XB-Mentoring-Contact: Raphael Hertzog <hertzog@debian.org>
 Depends:
  binutils,
  bzip2,
  cpio (>= 2.4.2-2),
 # This is a comment in the middle of a field value.
  dpkg (>= 1.14.6),
  libtimedate-perl,
  lzma,
  make,
  patch (>= 2.2-1),
  perl-modules,
  perl5,
 Recommends:
  gcc | c-compiler,
  build-essential,
 Suggests:
  gnupg,
  debian-keyring,
 Conflicts:
  dpkg-cross (<< 2.0.0),
  devscripts (<< 2.10.26),
 Replaces:
  manpages-pl (<= 20051117-1),
 Description: Debian package development tools
  This package provides the development tools (including dpkg-source)
  required to unpack, build and upload Debian source packages.
  .
  Most Debian source packages will require additional tools to build;
  for example, most packages need make and the C compiler gcc.

=head1 VOIR AUSSI

I<%PKGDOCDIR%/spec/rootless-builds.txt>, L<deb822(5)>, L<deb-control(5)>, L<deb-version(7)>, L<dpkg-source(1)>


=head1 TRADUCTION

Ariel VARDI <ariel.vardi@freesbee.fr>, 2002.
Philippe Batailler, 2006.
Nicolas François, 2006.
Veuillez signaler toute erreur à <debian-l10n-french@lists.debian.org>.
