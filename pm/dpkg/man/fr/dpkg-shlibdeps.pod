
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 NOM

dpkg-shlibdeps - Générateur de variables de substitution de dépendances pour bibliothèques partagées

=head1 SYNOPSIS

B<dpkg-shlibdeps> [I<option>...] [B<-e>] I<exécutable> [I<option>...] 

=head1 DESCRIPTION

B<dpkg-shlibdeps> calcule, pour les exécutables indiqués dans ses paramètres, les dépendances envers les bibliothèques partagées. Ces dépendances sont ajoutées au fichier de variables de substitution B<debian/substvars> sous la forme B<shlibs:>I<champ-dépendance> où I<champ-dépendance> est le nom du champ de dépendance. Toute autre variable après I<shlibs:> est supprimée du fichier.

B<dpkg-shlibdeps> a deux sources possibles pour créer les informations concernant les dépendances, soit les fichiers I<symbols>, soit les fichiers I<shlibs>. Pour chaque fichier binaire qu'il analyse, B<dpkg-shlibdeps> recherche la liste des bibliothèques partagées qui lui sont liées. Puis, pour chacune d'elles il analyse soit le fichier I<symbols>, soit le fichier I<shlibs> (si le premier n'existe pas ou si debian/shlibs.local contient les dépendances appropriées). Ces deux fichiers sont censés être fournis par le paquet de la bibliothèque et disponibles dans %ADMINDIR%/info/I<paquet>.I<symbols> ou %ADMINDIR%/info/I<paquet>.I<shlibs>. Le nom du paquet est trouvé en deux étapes : en cherchant le fichier de la bibliothèque sur le système, dans le répertoire que B<ld.so> utiliserait, puis en utilisant B<dpkg -S> I<fichier-bibliothèque> pour trouver le paquet qui fournit cette bibliothèque.

=head2 Fichiers symboles

Les fichiers symboles contiennent des informations de dépendances plus fines en fournissant les dépendances minimales pour chaque symbole de la bibliothèque exportée. Le script essaie de trouver un fichier de symboles associé à un paquet de bibliothèque dans les emplacements suivants (le premier trouvé est utilisé) :

=over 

=item debian/*/DEBIAN/symbols

Shared library information generated by the current build process that also invoked B<dpkg-shlibdeps>.  They are generated by L<dpkg-gensymbols(1)>. They are only used if the library is found in a package's build tree.  The symbols file in that build tree takes precedence over symbols files from other binary packages.

=item %PKGCONFDIR%/symbols/I<paquet>.symbols.I<architecture>

=item %PKGCONFDIR%/symbols/I<paquet>.symbols

Les informations de dépendance de bibliothèque partagée principales par système. I<arch> est l'architecture du système actuel (obtenue par B<dpkg-architecture -qDEB_HOST_ARCH>).

=item Affichage de “B<dpkg-query --control-path> I<paquet> symbols”

Les informations de dépendance de bibliothèque partagée fournies par le paquet. Sauf indication contraire par le biais de B<--admindir>, ces fichiers sont par défaut dans %ADMINDIR%.

=back

Lors de l'analyse des symboles utilisés par tous les binaires, B<dpkg-shlibdeps> retient la (plus grande) version minimale nécessaire pour chaque bibliothèque. À la fin du processus, il est capable d'écrire la dépendance minimale pour toutes les bibliothèques utilisées (à condition que l'information des fichiers I<symbols> soit exacte).

As a safe-guard measure, a symbols file can provide a B<Build-Depends-Package> or B<Build-Depends-Packages> meta-information field and B<dpkg-shlibdeps> will extract the minimal version required by the corresponding package in the B<Build-Depends> field and use this version if it's higher than the minimal version computed by scanning symbols.

=head2 Fichiers Shlibs

Les fichiers Shlibs associent directement une bibliothèque à une dépendance (sans regarder les symboles). C'est donc souvent plus puissant que les besoins réels mais cela reste très sûr et facile à manipuler.

Les dépendances d'une bibliothèque sont recherchées à plusieurs endroits. Le premier fichier d'informations trouvé qui concerne la bibliothèque est utilisé :

=over 

=item debian/shlibs.local

Fichier particulier à un paquet remplaçant les informations qui concernent les dépendances envers des bibliothèques partagées.

=item %PKGCONFDIR%/shlibs.override

Fichier système remplaçant les informations qui concernent les dépendances envers des bibliothèques partagées.

=item debian/*/DEBIAN/shlibs

Information sur la bibliothèque partagée générée par le processus actuel de construction qui invoque aussi B<dpkg-shlibdeps>. Il n'est utilisé que si la bibliothèque se trouve dans l'arbre de construction du paquet. Le fichier shlibs qui construit l'arbre a priorité sur les fichiers shlibs des autres paquets binaires.

=item Affichage de « B<dpkg-query --control-path> I<paquet> shlibs »

Les informations de dépendance de bibliothèque partagée fournies par le paquet. Sauf indication contraire par le biais de B<--admindir>, ces fichiers sont par défaut dans %ADMINDIR%.

=item %PKGCONFDIR%/shlibs.default

Fichier système par défaut concernant les informations de dépendance envers des bibliothèques partagées.

=back

Les dépendances trouvées sont ensuite directement utilisées (sauf si elles sont filtrées parce qu'elles ont été identifiées comme étant en double, ou d'un niveau plus faible qu'une autre dépendance).

=head1 OPTIONS

B<dpkg-shlibdeps> interprète des arguments sans option comme des commandes exécutables, comme si on avait simplement donné B<-e>I<exécutable>.

=over 

=item B<-e>I<exécutable>

Cette option inclut les bonnes dépendances envers les bibliothèques partagées que demande I<exécutable>. Cette option peut être utilisée plusieurs fois.

=item B<-l>I<répertoire>

Ajoute I<répertoire> au début de la liste des répertoires où chercher des bibliothèques partagées privées (depuis dpkg 1.17.0). Cette option peut être utilisée plusieurs fois.

B<Note>: Use this option instead of setting B<LD_LIBRARY_PATH>, as that environment variable is used to control the run-time linker and abusing it to set the shared library paths at build-time can be problematic when cross-compiling for example.

=item B<-d>I<champ-dépendance>

Cette option ajoute les dépendances destinées au champ « dépendance » du fichier de contrôle I<champ-dépendance>. (Les dépendances pour ce champ sont dans la variable B<shlibs:>I<champ-dépendance>.)

L'option B<-d>I<champ-dépendance> concerne tous les exécutables qui suivent l'option, jusqu'à la prochaine option B<-d>I<champ-dépendance>. Par défaut, I<champ-dépendance> vaut B<Depends>.

Quand, dans plusieurs champs reconnus ayant trait aux dépendances comme les champs B<Pre-Depends>, B<Depends>, B<Recommends>, B<Enhances> ou B<Suggests> apparaît la même entrée (ou bien un ensemble d'alternatives), B<dpkg-shlibdeps> supprime automatiquement les dépendances dans tous les champs sauf celui qui représente les dépendances les plus importantes.

=item B<--package=>I<package>

Define the package name.

When specified, the package name will be used to change defaults based on the binary package metadata in F<debian/control>.

If the package is B<Essential: yes>, then the default dependency field is B<Pre-Depends>, otherwise B<Depends>.  The default package type is set from the B<Package-Type> field.  The package is added to the set of packages excluded by B<-x>.

Option supported since dpkg 1.22.7.

=item B<-p>I<préfixe-pour-le-nom-des-variables>

Fait commencer les variables de substitution par I<préfixe-pour-le-nom-des-variables>B<:> au lieu de B<shlibs:>. De même, toute variable de substitution commençant par I<préfixe-pour-le-nom-des-variables>B<:> (au lieu de B<shlibs:>) est enlevée du fichier de substitution des variables.

=item B<-O>[I<nom-de-fichier>]

Affiche les définitions des variables de substitution sur la sortie standard (ou I<nom-de-fichier> si spécifié, depuis dpkg 1.17.2), plutôt que de les ajouter dans le fichier de substitution des variables qui est par défaut B<debian/substvars>.

=item B<-t>I<type>

Préférer les informations sur les dépendances des bibliothèques partagées qui sont étiquetées pour un type de paquet donné. Si aucune information de type n'est donnée, il n'utilisera pas d'information. Par défaut, le type de paquet est B<deb>. On peut créer une étiquette pour ces informations en les préfixant par le nom du type, un deux-points et une espace.

=item B<-L>I<fichier-local-shlibs>

Lire les informations de remplacement concernant les dépendances envers les bibliothèques partagées dans I<fichier-local-shlibs> au lieu de B<debian/shlibs.local>.

=item B<-T>I<fichier-substvars>

Écrire les variables de substitution dans I<fichier-substvars> ; le fichier par défaut est B<debian/substvars>.

=item B<-v>

Active le mode bavard (depuis dpkg 1.14.8). De nombreux messages sont affichés pour expliquer ce que B<dpkg-shlibdeps> fait.

=item B<-x>I<package>

Exclut le paquet des dépendances générées (depuis dpkg 1.14.8). Cela évite les auto-dépendances pour les paquets fournissant des exécutables ELF (exécutables ou modules complémentaires de bibliothèque) qui utilisent une bibliothèque incluse dans ce même paquet. Cette option peut être utilisée plusieurs fois pour exclure plusieurs paquets.

=item B<-S>I<répertoire-construction-paquet>

Recherche dans I<répertoire-construction-paquet> en premier et essaie de trouver une bibliothèque (depuis dpkg 1.14.15). C'est utile lorsque le paquet source construit plusieurs saveurs de la même bibliothèque et que vous voulez vous assurer que vous obtiendrez la dépendance d'un paquet binaire donné. Cette option peut être utilisée plusieurs fois : les répertoires seront examinés dans le même ordre avant les répertoires d'autres paquets binaires.

=item B<-I>I<répertoire-construction-paquet>

Ignore I<répertoire-construction-paquet> lors de la recherche des fichiers shlibs, de symboles et des bibliothèques partagées (depuis dpkg 1.18.5). Cette option peut être utilisée plusieurs fois.

=item B<--ignore-missing-info>

Pas d'échec si l'information de dépendance ne peut pas être trouvée pour une bibliothèque partagée (depuis dpkg 1.14.8). L'utilisation de cette option est déconseillée, toutes les bibliothèques devraient fournir leurs informations de dépendance (que ce soit avec les fichiers shlibs, ou avec les fichiers symboles), même si elles ne sont pas encore utilisées par d'autres paquets.

=item B<--warnings=>[I<value>|I<string>[,...]]

Select the set of warnings that can be emitted by B<dpkg-shlibdeps> (since dpkg 1.14.17).

The warnings can be selected from a comma-separated list of symbolic names (since dpkg 1.22.12), or from a I<value> denoting a bit field for these warnings.

=over 

=item symbol-not-found (bit 0, value 1)

Selects the warning “symbol I<sym> used by I<binary> found in none of the libraries”.

Enabled by default.

=item avoidable-dependency (bit 1, value 2)

Selects the warning “package could avoid a useless dependency”.

Enabled by default.

=item useless-linkage (bit 2, value 4)

Select the warning “I<binary> should not be linked against I<library>”.

=back

=item B<--admindir>=I<répertoire>

Changer l'endroit où se trouve la base de données de B<dpkg> (depuis dpkg 1.14.0). Par défaut, c'est I<%ADMINDIR%>.

=item B<-?>, B<--help>

Afficher un message d'aide puis quitter.

=item B<--version>

Afficher le numéro de version puis quitter.

=back

=head1 ENVIRONNEMENT

=over 

=item B<DEB_HOST_ARCH>

Sets the host architecture.  This affects the objects and symbols files searched for and their default search pathnames.

=item B<DPKG_COLORS>

Définit le mode de couleur (depuis dpkg 1.18.5). Les valeurs actuellement acceptées sont B<auto> (par défaut), B<always> et B<never>.

=item B<DPKG_NLS>

Si cette variable est définie, elle sera utilisée pour décider l'activation de la prise en charge des langues (NLS – Native Language Support), connu aussi comme la gestion de l'internationalisation (ou i18n) (depuis dpkg 1.19.0). Les valeurs permises sont : B<0> et B<1> (par défaut).

=back

=head1 DIAGNOSTICS

=head2 Avertissements

Depuis que B<dpkg-shlibdeps> analyse l'ensemble des symboles utilisés par chaque binaire généré par le paquet, il est en mesure d'émettre des avertissements dans plusieurs cas. Ils vous informent des choses qui peuvent être améliorées dans le paquet. Dans la plupart des cas, ces améliorations concernent directement les sources amont. Dans l'ordre d'importance décroissant, voici les différents avertissements que vous pouvez rencontrer :

=over 

=item B<symbole> I<sym> B<utilisé par> I<binaire> B<trouvé dans aucune des
bibliothèques.>

Le symbole indiqué n'a pas été trouvé dans les bibliothèques liées au binaire. Le I<binaire> est probablement plutôt une bibliothèque et il doit être lié avec une bibliothèque supplémentaire durant le processus de construction (l'option B<-l>I<bibliothèque> de l'éditeur de liens).

=item I<binary> B<contient une référence non résolue au symbole> I<sym> B<: il
s'agit probablement d'un greffon (plugin)>

Le symbole indiqué n'a pas été trouvé dans les bibliothèques liées avec le fichier binaire. Le I<binaire> est très probablement un greffon (plugin) et le symbole est probablement fourni par le programme qui charge ce greffon. En théorie, un greffon n'a pas de « SONAME » mais ce binaire en possède un et n'a pas pu être identifié en tant que tel. Cependant, le fait que le binaire soit stocké dans un répertoire non public est une indication forte qu'il ne s'agit pas d'une bibliothèque partagée normale. Si le binaire est vraiment un greffon, vous pouvez ignorer cet avertissement. Il existe cependant une possibilité qu'il s'agisse d'un vrai binaire et que les programmes avec lequel il est lié utilisent un RPATH afin que le chargeur dynamique le trouve. Dans ce cas, la bibliothèque est incorrecte et doit être corrigée.

=item B<paquet pourrait éviter une dépendance inutile si> I<le binaire> B<n'était
pas lié avec> I<bibliothèque> B<(il ne fait usage d'aucun de ses symboles)>

Aucun des I<binaires> liés à la I<bibliothèque> n'utilise les symboles qu'elle fournit. En corrigeant tous les binaires, vous éviteriez la dépendance associée à cette bibliothèque (à moins que la même dépendance soit également liée à une autre bibliothèque qui est elle réellement utilisée).

=item B<paquet pourrait éviter une dépendance inutile si> I<les binaires>
B<n'étaient pas liés avec> I<bibliothèque> B<(ils ne font usage d'aucun de
ses symboles)>

Identique à l'avertissement précédent, pour des binaires multiples.

=item I<le binaire> B<ne devrait pas être lié avec la> I<bibliothèque> B<(il ne
fait usage d'aucun de ses symboles)>

Le I<binaire> est lié à une bibliothèque dont il n'a pas besoin. Ce n'est pas un problème, mais de petites améliorations de performance dans le temps de chargement de celui-ci peuvent être obtenues en ne le liant pas à cette bibliothèque. Cet avertissement vérifie la même information que la précédente mais elle le fait pour tous les binaires au lieu de ne faire le contrôle qu'au niveau global sur tous les binaires analysés.

=back

=head2 Erreurs

B<dpkg-shlibdeps> échouera s'il ne peut pas trouver de bibliothèque publique utilisée par un binaire ou si cette bibliothèque n'a pas d'informations sur les dépendances associées (soit le fichier shlibs, soit le fichier des symboles). Une bibliothèque publique a un SONAME et un numéro de version (libsomething.so.I<X>). Une bibliothèque privée (comme un module additionnel) ne devrait pas avoir de SONAME et n'a pas besoin d'avoir de version.

=over 

=item B<impossible de trouver la bibliothèque> I<library-soname> B<demandée par
le> I<binaire> B<(son RPATH est «> I<rpath>B< »)>

Le I<binaire> utilise une bibliothèque appelée I<library-soname> mais B<dpkg-shlibdeps> n'a pas été en mesure de trouver cette bibliothèque. B<dpkg-shlibdeps> crée une liste de répertoires à vérifier de la manière suivante : les répertoires énumérés dans le RPATH du binaire, les répertoires ajoutés par l'option B<-l>, les répertoires listés dans la variable d'environnement B<LD_LIBRARY_PATH>, les répertoires croisés multi-architerctures (par exemple, /lib/arm64-linux-gnu, /usr/lib/arm64-linux-gnu), les répertoires publics standard (/lib, /usr/lib), les répertoires listés dans /etc/ld.so.conf et les répertoires obsolètes multilib (/lib32, /usr/lib32, /lib64, /usr/lib64). Ensuite, il vérifie les répertoires qui sont dans l'arbre de construction du paquet binaire en cours d'analyse, dans l'arbre de construction du paquet indiqué avec l'option de ligne de commande B<-S>, dans les autres arbres de paquets qui contiennent un fichier DEBIAN/shlibs ou DEBIAN/symbols et enfin dans le répertoire racine. Si la bibliothèque n'est pas trouvée dans l'un de ces répertoires, alors ce message d'erreur est obtenu.

Si la bibliothèque non trouvée est cependant disponible dans le répertoire privé de ce même paquet, alors il vous faut ajouter ce répertoire avec B<-l>. S'il est dans un autre paquet binaire en cours de construction, alors assurez-vous que le fichier shlibs/symbols de ce paquet a déjà créé et que B<-l> contient le répertoire approprié si c'est aussi un répertoire privé.

=item B<aucune information de dépendance trouvée pour> I<la bibliothèque>
B<(utilisée par le> I<binaire>B<).>

La bibliothèque nécessaire au I<binaire> a été trouvée par B<dpkg-shlibdeps> dans I<fichier-bibliothèque> mais B<dpkg-shlibdeps> n'a pas été en mesure de trouver d'informations de dépendance pour cette bibliothèque. Pour trouver la dépendance, il a essayé de lier la bibliothèque à un paquet Debian avec l'aide de B<dpkg -S> I<fichier-bibliothèque>. Puis, il a vérifié les shlibs correspondants et les fichiers symboles de %ADMINDIR%/info/ et enfin les différents arbres des paquets construits (debian/*/DEBIAN/).

This failure can be caused by a bad or missing shlibs or symbols file in the package of the library.  It might also happen if the library is built within the same source package and if the shlibs files has not yet been created (in which case you must fix debian/rules to create the shlibs before calling B<dpkg-shlibdeps>).  Bad RPATH can also lead to the library being found under a non-canonical name (example: /usr/lib/openoffice.org/../lib/libssl.so.0.9.8 instead of /usr/lib/libssl.so.0.9.8) that's not associated to any package, B<dpkg-shlibdeps> tries to work around this by trying to fallback on a canonical name (using L<realpath(3)>)  but it might not always work.  It's always best to clean up the RPATH of the binary to avoid problems.

L'appel de B<dpkg-shlibdeps> en mode bavard (B<-v>) fournira beaucoup plus d'informations sur l'endroit où il a essayé de trouver l'information sur les dépendances. Cela peut être utile si vous ne comprenez pas pourquoi vous obtenez cette erreur.

=back

=head1 VOIR AUSSI

L<deb-substvars(5)>, L<deb-shlibs(5)>, L<deb-symbols(5)>, L<dpkg-gensymbols(1)>.


=head1 TRADUCTION

Ariel VARDI <ariel.vardi@freesbee.fr>, 2002.
Philippe Batailler, 2006.
Nicolas François, 2006.
Veuillez signaler toute erreur à <debian-l10n-french@lists.debian.org>.
