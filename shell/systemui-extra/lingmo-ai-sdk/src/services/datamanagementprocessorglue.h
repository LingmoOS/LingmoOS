/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __DATAMANAGEMENTPROCESSORGLUE_H__
#define __DATAMANAGEMENTPROCESSORGLUE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.lingmo.aisdk.DataManagementProcessor */

#define TYPE_AISDK_DATA_MANAGEMENT_PROCESSOR (aisdk_data_management_processor_get_type ())
#define AISDK_DATA_MANAGEMENT_PROCESSOR(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AISDK_DATA_MANAGEMENT_PROCESSOR, AisdkDataManagementProcessor))
#define IS_AISDK_DATA_MANAGEMENT_PROCESSOR(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AISDK_DATA_MANAGEMENT_PROCESSOR))
#define AISDK_DATA_MANAGEMENT_PROCESSOR_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_AISDK_DATA_MANAGEMENT_PROCESSOR, AisdkDataManagementProcessorIface))

struct _AisdkDataManagementProcessor;
typedef struct _AisdkDataManagementProcessor AisdkDataManagementProcessor;
typedef struct _AisdkDataManagementProcessorIface AisdkDataManagementProcessorIface;

struct _AisdkDataManagementProcessorIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_add_image_files) (
    AisdkDataManagementProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_fileinfos,
    gint arg_uid);

  gboolean (*handle_add_text_files) (
    AisdkDataManagementProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_fileinfos,
    gint arg_uid);

  gboolean (*handle_delete_files) (
    AisdkDataManagementProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_fileinfos,
    gint arg_uid);

  gboolean (*handle_get_all_fileinfos) (
    AisdkDataManagementProcessor *object,
    GDBusMethodInvocation *invocation,
    gint arg_uid);

  gboolean (*handle_get_feature_status) (
    AisdkDataManagementProcessor *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_similarity_search) (
    AisdkDataManagementProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_searchConditions,
    gint arg_uid);

  gboolean (*handle_update_files_content_data) (
    AisdkDataManagementProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_fileinfos,
    gint arg_uid);

  gboolean (*handle_update_files_name) (
    AisdkDataManagementProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_fileinfos,
    gint arg_uid);

};

GType aisdk_data_management_processor_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *aisdk_data_management_processor_interface_info (void);
guint aisdk_data_management_processor_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void aisdk_data_management_processor_complete_get_feature_status (
    AisdkDataManagementProcessor *object,
    GDBusMethodInvocation *invocation,
    gint status,
    gint errorMsg);

void aisdk_data_management_processor_complete_similarity_search (
    AisdkDataManagementProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *searchResult,
    gint errorMsg);

void aisdk_data_management_processor_complete_add_text_files (
    AisdkDataManagementProcessor *object,
    GDBusMethodInvocation *invocation,
    gint errorMsg);

void aisdk_data_management_processor_complete_add_image_files (
    AisdkDataManagementProcessor *object,
    GDBusMethodInvocation *invocation,
    gint errorMsg);

void aisdk_data_management_processor_complete_delete_files (
    AisdkDataManagementProcessor *object,
    GDBusMethodInvocation *invocation,
    gint errorMsg);

void aisdk_data_management_processor_complete_update_files_name (
    AisdkDataManagementProcessor *object,
    GDBusMethodInvocation *invocation,
    gint errorMsg);

void aisdk_data_management_processor_complete_update_files_content_data (
    AisdkDataManagementProcessor *object,
    GDBusMethodInvocation *invocation,
    gint errorMsg);

void aisdk_data_management_processor_complete_get_all_fileinfos (
    AisdkDataManagementProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *fileinfos,
    gint errorMsg);



/* D-Bus method calls: */
void aisdk_data_management_processor_call_get_feature_status (
    AisdkDataManagementProcessor *proxy,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_data_management_processor_call_get_feature_status_finish (
    AisdkDataManagementProcessor *proxy,
    gint *out_status,
    gint *out_errorMsg,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_data_management_processor_call_get_feature_status_sync (
    AisdkDataManagementProcessor *proxy,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    gint *out_status,
    gint *out_errorMsg,
    GCancellable *cancellable,
    GError **error);

void aisdk_data_management_processor_call_similarity_search (
    AisdkDataManagementProcessor *proxy,
    const gchar *arg_searchConditions,
    gint arg_uid,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_data_management_processor_call_similarity_search_finish (
    AisdkDataManagementProcessor *proxy,
    gchar **out_searchResult,
    gint *out_errorMsg,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_data_management_processor_call_similarity_search_sync (
    AisdkDataManagementProcessor *proxy,
    const gchar *arg_searchConditions,
    gint arg_uid,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    gchar **out_searchResult,
    gint *out_errorMsg,
    GCancellable *cancellable,
    GError **error);

void aisdk_data_management_processor_call_add_text_files (
    AisdkDataManagementProcessor *proxy,
    const gchar *arg_fileinfos,
    gint arg_uid,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_data_management_processor_call_add_text_files_finish (
    AisdkDataManagementProcessor *proxy,
    gint *out_errorMsg,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_data_management_processor_call_add_text_files_sync (
    AisdkDataManagementProcessor *proxy,
    const gchar *arg_fileinfos,
    gint arg_uid,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    gint *out_errorMsg,
    GCancellable *cancellable,
    GError **error);

void aisdk_data_management_processor_call_add_image_files (
    AisdkDataManagementProcessor *proxy,
    const gchar *arg_fileinfos,
    gint arg_uid,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_data_management_processor_call_add_image_files_finish (
    AisdkDataManagementProcessor *proxy,
    gint *out_errorMsg,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_data_management_processor_call_add_image_files_sync (
    AisdkDataManagementProcessor *proxy,
    const gchar *arg_fileinfos,
    gint arg_uid,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    gint *out_errorMsg,
    GCancellable *cancellable,
    GError **error);

void aisdk_data_management_processor_call_delete_files (
    AisdkDataManagementProcessor *proxy,
    const gchar *arg_fileinfos,
    gint arg_uid,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_data_management_processor_call_delete_files_finish (
    AisdkDataManagementProcessor *proxy,
    gint *out_errorMsg,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_data_management_processor_call_delete_files_sync (
    AisdkDataManagementProcessor *proxy,
    const gchar *arg_fileinfos,
    gint arg_uid,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    gint *out_errorMsg,
    GCancellable *cancellable,
    GError **error);

void aisdk_data_management_processor_call_update_files_name (
    AisdkDataManagementProcessor *proxy,
    const gchar *arg_fileinfos,
    gint arg_uid,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_data_management_processor_call_update_files_name_finish (
    AisdkDataManagementProcessor *proxy,
    gint *out_errorMsg,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_data_management_processor_call_update_files_name_sync (
    AisdkDataManagementProcessor *proxy,
    const gchar *arg_fileinfos,
    gint arg_uid,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    gint *out_errorMsg,
    GCancellable *cancellable,
    GError **error);

void aisdk_data_management_processor_call_update_files_content_data (
    AisdkDataManagementProcessor *proxy,
    const gchar *arg_fileinfos,
    gint arg_uid,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_data_management_processor_call_update_files_content_data_finish (
    AisdkDataManagementProcessor *proxy,
    gint *out_errorMsg,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_data_management_processor_call_update_files_content_data_sync (
    AisdkDataManagementProcessor *proxy,
    const gchar *arg_fileinfos,
    gint arg_uid,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    gint *out_errorMsg,
    GCancellable *cancellable,
    GError **error);

void aisdk_data_management_processor_call_get_all_fileinfos (
    AisdkDataManagementProcessor *proxy,
    gint arg_uid,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_data_management_processor_call_get_all_fileinfos_finish (
    AisdkDataManagementProcessor *proxy,
    gchar **out_fileinfos,
    gint *out_errorMsg,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_data_management_processor_call_get_all_fileinfos_sync (
    AisdkDataManagementProcessor *proxy,
    gint arg_uid,
    GDBusCallFlags call_flags,
    gint timeout_msec,
    gchar **out_fileinfos,
    gint *out_errorMsg,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_AISDK_DATA_MANAGEMENT_PROCESSOR_PROXY (aisdk_data_management_processor_proxy_get_type ())
#define AISDK_DATA_MANAGEMENT_PROCESSOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AISDK_DATA_MANAGEMENT_PROCESSOR_PROXY, AisdkDataManagementProcessorProxy))
#define AISDK_DATA_MANAGEMENT_PROCESSOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_AISDK_DATA_MANAGEMENT_PROCESSOR_PROXY, AisdkDataManagementProcessorProxyClass))
#define AISDK_DATA_MANAGEMENT_PROCESSOR_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_AISDK_DATA_MANAGEMENT_PROCESSOR_PROXY, AisdkDataManagementProcessorProxyClass))
#define IS_AISDK_DATA_MANAGEMENT_PROCESSOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AISDK_DATA_MANAGEMENT_PROCESSOR_PROXY))
#define IS_AISDK_DATA_MANAGEMENT_PROCESSOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_AISDK_DATA_MANAGEMENT_PROCESSOR_PROXY))

typedef struct _AisdkDataManagementProcessorProxy AisdkDataManagementProcessorProxy;
typedef struct _AisdkDataManagementProcessorProxyClass AisdkDataManagementProcessorProxyClass;
typedef struct _AisdkDataManagementProcessorProxyPrivate AisdkDataManagementProcessorProxyPrivate;

struct _AisdkDataManagementProcessorProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AisdkDataManagementProcessorProxyPrivate *priv;
};

struct _AisdkDataManagementProcessorProxyClass
{
  GDBusProxyClass parent_class;
};

GType aisdk_data_management_processor_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AisdkDataManagementProcessorProxy, g_object_unref)
#endif

void aisdk_data_management_processor_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AisdkDataManagementProcessor *aisdk_data_management_processor_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
AisdkDataManagementProcessor *aisdk_data_management_processor_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void aisdk_data_management_processor_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AisdkDataManagementProcessor *aisdk_data_management_processor_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
AisdkDataManagementProcessor *aisdk_data_management_processor_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_AISDK_DATA_MANAGEMENT_PROCESSOR_SKELETON (aisdk_data_management_processor_skeleton_get_type ())
#define AISDK_DATA_MANAGEMENT_PROCESSOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AISDK_DATA_MANAGEMENT_PROCESSOR_SKELETON, AisdkDataManagementProcessorSkeleton))
#define AISDK_DATA_MANAGEMENT_PROCESSOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_AISDK_DATA_MANAGEMENT_PROCESSOR_SKELETON, AisdkDataManagementProcessorSkeletonClass))
#define AISDK_DATA_MANAGEMENT_PROCESSOR_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_AISDK_DATA_MANAGEMENT_PROCESSOR_SKELETON, AisdkDataManagementProcessorSkeletonClass))
#define IS_AISDK_DATA_MANAGEMENT_PROCESSOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AISDK_DATA_MANAGEMENT_PROCESSOR_SKELETON))
#define IS_AISDK_DATA_MANAGEMENT_PROCESSOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_AISDK_DATA_MANAGEMENT_PROCESSOR_SKELETON))

typedef struct _AisdkDataManagementProcessorSkeleton AisdkDataManagementProcessorSkeleton;
typedef struct _AisdkDataManagementProcessorSkeletonClass AisdkDataManagementProcessorSkeletonClass;
typedef struct _AisdkDataManagementProcessorSkeletonPrivate AisdkDataManagementProcessorSkeletonPrivate;

struct _AisdkDataManagementProcessorSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AisdkDataManagementProcessorSkeletonPrivate *priv;
};

struct _AisdkDataManagementProcessorSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType aisdk_data_management_processor_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AisdkDataManagementProcessorSkeleton, g_object_unref)
#endif

AisdkDataManagementProcessor *aisdk_data_management_processor_skeleton_new (void);


G_END_DECLS

#endif /* __DATAMANAGEMENTPROCESSORGLUE_H__ */
