/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __KEYWORDRECOGNIZERGLUE_H__
#define __KEYWORDRECOGNIZERGLUE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.lingmo.aisdk.KeywordRecognizer */

#define TYPE_AISDK_KEYWORD_RECOGNIZER (aisdk_keyword_recognizer_get_type ())
#define AISDK_KEYWORD_RECOGNIZER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AISDK_KEYWORD_RECOGNIZER, AisdkKeywordRecognizer))
#define IS_AISDK_KEYWORD_RECOGNIZER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AISDK_KEYWORD_RECOGNIZER))
#define AISDK_KEYWORD_RECOGNIZER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_AISDK_KEYWORD_RECOGNIZER, AisdkKeywordRecognizerIface))

struct _AisdkKeywordRecognizer;
typedef struct _AisdkKeywordRecognizer AisdkKeywordRecognizer;
typedef struct _AisdkKeywordRecognizerIface AisdkKeywordRecognizerIface;

struct _AisdkKeywordRecognizerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_destroy_keyword_recognizer) (
    AisdkKeywordRecognizer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_init_keyword_recognizer) (
    AisdkKeywordRecognizer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_start_keyword_recognizer) (
    AisdkKeywordRecognizer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop_keyword_recognizer) (
    AisdkKeywordRecognizer *object,
    GDBusMethodInvocation *invocation);

};

GType aisdk_keyword_recognizer_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *aisdk_keyword_recognizer_interface_info (void);
guint aisdk_keyword_recognizer_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void aisdk_keyword_recognizer_complete_init_keyword_recognizer (
    AisdkKeywordRecognizer *object,
    GDBusMethodInvocation *invocation);

void aisdk_keyword_recognizer_complete_destroy_keyword_recognizer (
    AisdkKeywordRecognizer *object,
    GDBusMethodInvocation *invocation);

void aisdk_keyword_recognizer_complete_start_keyword_recognizer (
    AisdkKeywordRecognizer *object,
    GDBusMethodInvocation *invocation);

void aisdk_keyword_recognizer_complete_stop_keyword_recognizer (
    AisdkKeywordRecognizer *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void aisdk_keyword_recognizer_call_init_keyword_recognizer (
    AisdkKeywordRecognizer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_keyword_recognizer_call_init_keyword_recognizer_finish (
    AisdkKeywordRecognizer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_keyword_recognizer_call_init_keyword_recognizer_sync (
    AisdkKeywordRecognizer *proxy,
    GCancellable *cancellable,
    GError **error);

void aisdk_keyword_recognizer_call_destroy_keyword_recognizer (
    AisdkKeywordRecognizer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_keyword_recognizer_call_destroy_keyword_recognizer_finish (
    AisdkKeywordRecognizer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_keyword_recognizer_call_destroy_keyword_recognizer_sync (
    AisdkKeywordRecognizer *proxy,
    GCancellable *cancellable,
    GError **error);

void aisdk_keyword_recognizer_call_start_keyword_recognizer (
    AisdkKeywordRecognizer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_keyword_recognizer_call_start_keyword_recognizer_finish (
    AisdkKeywordRecognizer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_keyword_recognizer_call_start_keyword_recognizer_sync (
    AisdkKeywordRecognizer *proxy,
    GCancellable *cancellable,
    GError **error);

void aisdk_keyword_recognizer_call_stop_keyword_recognizer (
    AisdkKeywordRecognizer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_keyword_recognizer_call_stop_keyword_recognizer_finish (
    AisdkKeywordRecognizer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_keyword_recognizer_call_stop_keyword_recognizer_sync (
    AisdkKeywordRecognizer *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_AISDK_KEYWORD_RECOGNIZER_PROXY (aisdk_keyword_recognizer_proxy_get_type ())
#define AISDK_KEYWORD_RECOGNIZER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AISDK_KEYWORD_RECOGNIZER_PROXY, AisdkKeywordRecognizerProxy))
#define AISDK_KEYWORD_RECOGNIZER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_AISDK_KEYWORD_RECOGNIZER_PROXY, AisdkKeywordRecognizerProxyClass))
#define AISDK_KEYWORD_RECOGNIZER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_AISDK_KEYWORD_RECOGNIZER_PROXY, AisdkKeywordRecognizerProxyClass))
#define IS_AISDK_KEYWORD_RECOGNIZER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AISDK_KEYWORD_RECOGNIZER_PROXY))
#define IS_AISDK_KEYWORD_RECOGNIZER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_AISDK_KEYWORD_RECOGNIZER_PROXY))

typedef struct _AisdkKeywordRecognizerProxy AisdkKeywordRecognizerProxy;
typedef struct _AisdkKeywordRecognizerProxyClass AisdkKeywordRecognizerProxyClass;
typedef struct _AisdkKeywordRecognizerProxyPrivate AisdkKeywordRecognizerProxyPrivate;

struct _AisdkKeywordRecognizerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AisdkKeywordRecognizerProxyPrivate *priv;
};

struct _AisdkKeywordRecognizerProxyClass
{
  GDBusProxyClass parent_class;
};

GType aisdk_keyword_recognizer_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AisdkKeywordRecognizerProxy, g_object_unref)
#endif

void aisdk_keyword_recognizer_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AisdkKeywordRecognizer *aisdk_keyword_recognizer_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
AisdkKeywordRecognizer *aisdk_keyword_recognizer_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void aisdk_keyword_recognizer_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AisdkKeywordRecognizer *aisdk_keyword_recognizer_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
AisdkKeywordRecognizer *aisdk_keyword_recognizer_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_AISDK_KEYWORD_RECOGNIZER_SKELETON (aisdk_keyword_recognizer_skeleton_get_type ())
#define AISDK_KEYWORD_RECOGNIZER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AISDK_KEYWORD_RECOGNIZER_SKELETON, AisdkKeywordRecognizerSkeleton))
#define AISDK_KEYWORD_RECOGNIZER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_AISDK_KEYWORD_RECOGNIZER_SKELETON, AisdkKeywordRecognizerSkeletonClass))
#define AISDK_KEYWORD_RECOGNIZER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_AISDK_KEYWORD_RECOGNIZER_SKELETON, AisdkKeywordRecognizerSkeletonClass))
#define IS_AISDK_KEYWORD_RECOGNIZER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AISDK_KEYWORD_RECOGNIZER_SKELETON))
#define IS_AISDK_KEYWORD_RECOGNIZER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_AISDK_KEYWORD_RECOGNIZER_SKELETON))

typedef struct _AisdkKeywordRecognizerSkeleton AisdkKeywordRecognizerSkeleton;
typedef struct _AisdkKeywordRecognizerSkeletonClass AisdkKeywordRecognizerSkeletonClass;
typedef struct _AisdkKeywordRecognizerSkeletonPrivate AisdkKeywordRecognizerSkeletonPrivate;

struct _AisdkKeywordRecognizerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AisdkKeywordRecognizerSkeletonPrivate *priv;
};

struct _AisdkKeywordRecognizerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType aisdk_keyword_recognizer_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AisdkKeywordRecognizerSkeleton, g_object_unref)
#endif

AisdkKeywordRecognizer *aisdk_keyword_recognizer_skeleton_new (void);


G_END_DECLS

#endif /* __KEYWORDRECOGNIZERGLUE_H__ */
