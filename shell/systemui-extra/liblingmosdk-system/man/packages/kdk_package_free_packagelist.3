.TH "KDK_PACKAGE_FREE_PACKAGELIST" 3 "Mon Sep 18 2023" "Linux Programmer's Manual" \"
.SH NAME
kdk_package_free_packagelist - 释放由kdk_package_get_packagelist返回的包信息结构体
.SH SYNOPSIS
.nf
.B #include <libkynetinfo.h>
.sp
.BI "extern void kdk_package_free_packagelist(kdk_package_list *"list ");" 
.sp
Link with \fI\-lkynetinfo\fP.
.SH "Detailed Description"
The main function of the interface is to release the package information structure returned by the 
.I kdk_package_get_packagelist.
.PP
The argument
.I list
is the return value of the 
.I kdk_package_get_packagelist.
.SH "RETURN VALUE"
No return value
.SH EXAMPLES
.EX
#include "libkypackages.h"
#include <stdio.h>

static void print_package(kdk_package_t *package)
{
    printf("包名：%s\t", package->name);
    printf("版本号：%s\t", package->version);
    printf("包类型：%s\t", package->section);
    printf("包状态：%s\t", package->status);
    printf("包大小：%lu\n", package->size_kb);
}

int main()
{
    kdk_package_list *list = kdk_package_get_packagelist();
    printf("系统中一共%u个软件包\n", list->nums);
    for (size_t i = 0; i < list->nums; i ++)
    {
        print_package(list->list[i]);
    }
    kdk_package_free_packagelist(list);

    printf("Evolution是否安装：%s\n", kdk_package_is_installed("evolution", NULL) == 1 ? "是" : "否");
    char *version = kdk_package_get_version("evolution");
    printf("Evolution版本号：%s\n", version);
    free(version);

    return 0;
}

.SH "CONFORMING TO"
These functions are as per the withdrawn POSIX.1e draft specification.
The following functions are Linux extensions:
.BR kdk_package_get_packagelist (),
.BR kdk_package_get_version ()
and
.BR kdk_package_is_installed ().
.SH "SEE ALSO"
.BR kdk_package_get_packagelist (3),
.BR kdk_package_get_version (3)
and
.BR kdk_package_is_installed (3).