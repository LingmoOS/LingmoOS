/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp com.lingmo.weather.xml -a dbusadaptor -c DbusAdaptor -l MainWindow
 *
 * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "dbus.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

const QByteArray GSETTINGS_SCHEMA_LINGMO_NM = "org.lingmo.lingmo-nm.switch";
const QString    KEY_WIRELESS_SWITCH          = "wirelessswitch";
const QString    KEY_WIRED_SWITCH             = "wiredswitch";

/*
 * Implementation of adaptor class DbusAdaptor
 */

DbusAdaptor::DbusAdaptor(QString display, MainWindow *m, QObject *parent)
    : QObject(parent),
      m_display(display),
      m_mainWindow(m)
{
    // constructor
    qDBusRegisterMetaType<QMap<QString, bool> >();
    qDBusRegisterMetaType<QMap<QString, int> >();
    qDBusRegisterMetaType<QList<QStringList> >();
    qDBusRegisterMetaType<QMap<QString, QList<QStringList> >>();

    bool isServiceRegistered = QDBusConnection::sessionBus().interface()->isServiceRegistered(QStringLiteral("com.lingmo.network"));
    if(!isServiceRegistered) {
        registerService();
    }

    m_watcher = new QDBusServiceWatcher(QStringLiteral("com.lingmo.network"),QDBusConnection::sessionBus(), QDBusServiceWatcher::WatchForOwnerChange, this);
    connect(m_watcher, &QDBusServiceWatcher::serviceOwnerChanged, this, &DbusAdaptor::onServiceOwnerChanged);

    connectToMainwindow();
}

void DbusAdaptor::onServiceOwnerChanged(const QString &service, const QString &oldOwner, const QString &newOwner)
{
    if (newOwner.isEmpty()) {
        bool success = registerService();
        if (success) {
            m_watcher->deleteLater();
        }
        qDebug() << "try to register service:" << success;
        return;
    }

    uint newOwnerPid = QDBusConnection::sessionBus().interface()->servicePid(newOwner);
    qDebug() << "newOwnerPid:" << newOwnerPid << ", myPid:" << QCoreApplication::applicationPid() << ", display:" << m_display;
}

bool DbusAdaptor::registerService()
{
    new NetworkAdaptor(this);

    QDBusConnection conn = QDBusConnection::sessionBus();
    auto reply = conn.interface()->registerService(QStringLiteral("com.lingmo.network"),
                                                          QDBusConnectionInterface::ReplaceExistingService,
                                                          QDBusConnectionInterface::DontAllowReplacement);
    if (reply.value() == QDBusConnectionInterface::ServiceNotRegistered) {
        return false;
    }

    bool res = QDBusConnection::sessionBus().registerObject("/com/lingmo/network", this);
    if (!res) {
        QDBusConnection::sessionBus().interface()->unregisterService(QStringLiteral("com.lingmo.network"));
    }
    return res;
}


//无线列表
QVariantList DbusAdaptor::getWirelessList(QString devName)
{
    QList<QStringList> list;
    m_mainWindow->getWirelessList(devName, list);
    QVariantList vList;
    for (int i = 0; i < list.size(); ++i) {
        vList.append(QVariant::fromValue(list.at(i)));
    }
    return vList;
}

bool DbusAdaptor::getWirelessSwitchBtnState()
{
    return m_mainWindow->getWirelessSwitchBtnState();
}

//有线列表
QVariantList DbusAdaptor::getWiredList(QString devName)
{
    QList<QStringList> list;
    m_mainWindow->getWiredList(devName, list);
    QVariantList vList;
    for (int i = 0; i < list.size(); ++i) {
        vList.append(QVariant::fromValue(list.at(i)));
    }
    return vList;

}

//有线开关
void DbusAdaptor::setWiredSwitchEnable(bool enable)
{
    //todo mainwindow调用backend 对开关 打开/关闭
    if (QGSettings::isSchemaInstalled(GSETTINGS_SCHEMA_LINGMO_NM)) {
        QGSettings *gsetting = new QGSettings(GSETTINGS_SCHEMA_LINGMO_NM);
        if (gsetting->get(KEY_WIRED_SWITCH).toBool() != enable) {
            gsetting->set(KEY_WIRED_SWITCH, enable);
        }
        delete gsetting;
        gsetting = nullptr;
    } else {
        qDebug()<<"isSchemaInstalled false";
    }
}

//无线开关
void DbusAdaptor::setWirelessSwitchEnable(bool enable)
{
    //todo mainwindow调用backend 对开关 打开/关闭
//    if (QGSettings::isSchemaInstalled(GSETTINGS_SCHEMA_LINGMO_NM)) {
//        QGSettings *gsetting = new QGSettings(GSETTINGS_SCHEMA_LINGMO_NM);
//        if (gsetting->get(KEY_WIRELESS_SWITCH).toBool() != enable) {
//            gsetting->set(KEY_WIRELESS_SWITCH, enable);
//        }
//        delete gsetting;
//        gsetting = nullptr;
//    } else {
//        qDebug()<<"isSchemaInstalled false";
//    }
    m_mainWindow->setWirelessSwitchEnable(enable);
}

//启用/禁用网卡
void DbusAdaptor::setDeviceEnable(QString devName, bool enable)
{
    m_mainWindow->setWiredDeviceEnable(devName, enable);
}

//设置默认网卡
//void DbusAdaptor::setDefaultWiredDevice(QString deviceName)
//{
//    if (!checkDeviceExist(WIRED, deviceName)) {
//        return;
//    }
//    setDefaultDevice(WIRED, deviceName);
//    parent()->setWiredDefaultDevice(deviceName);
//    return;
//}

//QString DbusAdaptor::getDefaultWiredDevice()
//{
//    QSettings * m_settings = new QSettings(CONFIG_FILE_PATH, QSettings::IniFormat);
//    m_settings->beginGroup("DEFAULTCARD");
//    QString key("wired");
//    QString deviceName = m_settings->value(key, "").toString();
//    m_settings->endGroup();
//    delete m_settings;
//    m_settings = nullptr;
//    return deviceName;
//}

//void DbusAdaptor::setDefaultWirelessDevice(QString deviceName)
//{
//    if (!checkDeviceExist(WIRED, deviceName)) {
//        return;
//    }
//    setDefaultDevice(WIRELESS, deviceName);
//    parent()->setWirelessDefaultDevice(deviceName);
//    return;
//}

//QString  DbusAdaptor::getDefaultWirelessDevice()
//{
//    QSettings * m_settings = new QSettings(CONFIG_FILE_PATH, QSettings::IniFormat);
//    m_settings->beginGroup("DEFAULTCARD");
//    QString key("wireless");
//    QString deviceName = m_settings->value(key, "").toString();
//    m_settings->endGroup();
//    delete m_settings;
//    m_settings = nullptr;
//    return deviceName;
//}

//删除
void DbusAdaptor::deleteConnect(int type, QString ssid)
{
    if (type == WIRED) {
        m_mainWindow->deleteWired(ssid);
    } else if (type == WIRELESS) {
        //待实现
    } else {
        qDebug() << "[DbusAdaptor] deleteConnect type is invalid";
    }
}

//连接 根据网卡类型 参数1 0:lan 1:wlan 参数3 为ssid/uuid
void DbusAdaptor::activateConnect(int type, QString devName, QString ssid)
{
    if (type == WIRED) {
        m_mainWindow->activateWired(devName,ssid);
    } else if (type == WIRELESS) {
        m_mainWindow->activateWireless(devName,ssid);
    } else {
        qDebug() << "[DbusAdaptor] activateConnect type is invalid";
    }
}

//断开连接 根据网卡类型 参数1 0:lan 1:wlan 参数3 为ssid/uuid
void DbusAdaptor::deActivateConnect(int type, QString devName, QString ssid)
{
    if (type == WIRED) {
        qDebug()  << "deactivateWired";
        m_mainWindow->deactivateWired(devName,ssid);
    } else if (type == WIRELESS) {
        m_mainWindow->deactivateWireless(devName,ssid);
    } else {
        qDebug() << "[DbusAdaptor] deactivateConnect type is invalid";
    }
}

//获取设备列表和启用/禁用状态
QVariantMap DbusAdaptor::getDeviceListAndEnabled(int devType)
{
    QMap<QString, bool> map;
    map.clear();
    getDeviceEnableState(devType, map);
    QVariantMap vMap;
    QMap<QString, bool>::const_iterator item = map.cbegin();
    while (item != map.cend()) {
        vMap.insert(item.key(), QVariant::fromValue(item.value()));
        item ++;
    }
    return vMap;
}

//获取无线设备能力
QVariantMap DbusAdaptor::getWirelessDeviceCap()
{
    QMap<QString, int> map;
    m_mainWindow->getWirelessDeviceCap(map);
    QVariantMap vMap;
    QMap<QString, int>::const_iterator item = map.cbegin();
    while (item != map.cend()) {
        vMap.insert(item.key(), QVariant::fromValue(item.value()));
        item ++;
    }
    return vMap;
}

//唤起属性页 根据网卡类型 参数2 为ssid/uuid
void DbusAdaptor::showPropertyWidget(QString devName, QString ssid)
{
    QString display = checkDisplay();
    if (m_display == display) {
        m_mainWindow->showPropertyWidget(devName,ssid);
    } else {
        Q_EMIT showPropertyWidgetSignal(display, devName, ssid);
    }
}

//唤起新建有线连接界面
void DbusAdaptor::showCreateWiredConnectWidget(QString devName)
{
    QString display = checkDisplay();
    if (m_display == display) {
        m_mainWindow->showCreateWiredConnectWidget(devName);
    } else {
        Q_EMIT showCreateWiredConnectWidgetSignal(display, devName);
    }
}

//唤起加入其他无线网络界面
void DbusAdaptor::showAddOtherWlanWidget(QString devName)
{
    QString display = checkDisplay();
    if (m_display == display) {
        qDebug() << "showAddOtherWlanWidget";
        m_mainWindow->showAddOtherWlanWidget(devName);
    } else {
        qDebug() << display;
        Q_EMIT showAddOtherWlanWidgetSignal(display, devName);
    }
}

//开启热点
void DbusAdaptor::activeWirelessAp(const QString apName, const QString apPassword, const QString band, const QString apDevice)
{
    m_mainWindow->activeWirelessAp(apName, apPassword, band, apDevice);
}

//断开热点
void DbusAdaptor::deactiveWirelessAp(const QString apName, const QString uuid)
{
    m_mainWindow->deactiveWirelessAp(apName, uuid);
}

//获取热点
QStringList DbusAdaptor::getStoredApInfo()
{
    QStringList list;
    list.clear();
    m_mainWindow->getStoredApInfo(list);
    return list;
}

//获取热点path
QString DbusAdaptor::getApConnectionPath(QString uuid)
{
    QString path;
    path.clear();
    m_mainWindow->getApConnectionPath(path, uuid);
    return path;
}

//获取热点path
QString DbusAdaptor::getActiveConnectionPath(QString uuid)
{
    QString path;
    path.clear();
    m_mainWindow->getActiveConnectionPath(path, uuid);
    return path;
}

QStringList DbusAdaptor::getApInfoBySsid(QString devName, QString ssid)
{
    QStringList list;
    list.clear();
    m_mainWindow->getApInfoBySsid(devName, ssid, list);
    return list;
}

void DbusAdaptor::showLingmoNM(int type)
{
    qDebug() << "display" << checkDisplay();
    QString display = checkDisplay();
    if (m_display == display) {
        m_mainWindow->onShowMainWindow(type);
    } else {

        Q_EMIT showLingmoNMSignal(display, type);
    }
}

//扫描
void DbusAdaptor::reScan()
{
    m_mainWindow->rescan();
}

void DbusAdaptor::keyRingInit()
{
    m_mainWindow->keyRingInit();
}

void DbusAdaptor::keyRingClear()
{
    m_mainWindow->keyRingClear();
}

void DbusAdaptor::connectToMainwindow()
{
    connect(m_mainWindow, &MainWindow::lanAdd, this, &DbusAdaptor::lanAdd);
    connect(m_mainWindow, &MainWindow::lanRemove, this, &DbusAdaptor::lanRemove);
    connect(m_mainWindow, &MainWindow::lanUpdate, this, &DbusAdaptor::lanUpdate);
    connect(m_mainWindow, &MainWindow::wlanAdd, this, &DbusAdaptor::wlanAdd);
    connect(m_mainWindow, &MainWindow::wlanRemove, this, &DbusAdaptor::wlanRemove);
    connect(m_mainWindow, &MainWindow::wlanactiveConnectionStateChanged, this, &DbusAdaptor::wlanactiveConnectionStateChanged);
    connect(m_mainWindow, &MainWindow::lanActiveConnectionStateChanged, this, &DbusAdaptor::lanActiveConnectionStateChanged);
    connect(m_mainWindow, &MainWindow::activateFailed, this, &DbusAdaptor::activateFailed);
    connect(m_mainWindow, &MainWindow::deactivateFailed, this, &DbusAdaptor::deactivateFailed);
    connect(m_mainWindow, &MainWindow::deviceStatusChanged, this, &DbusAdaptor::deviceStatusChanged);
    connect(m_mainWindow, &MainWindow::wirelessDeviceStatusChanged, this, &DbusAdaptor::wirelessDeviceStatusChanged);
    connect(m_mainWindow, &MainWindow::deviceNameChanged, this, &DbusAdaptor::deviceNameChanged);
    connect(m_mainWindow, &MainWindow::wirelessSwitchBtnChanged, this, &DbusAdaptor::wirelessSwitchBtnChanged);
    connect(m_mainWindow, &MainWindow::hotspotDeactivated, this, &DbusAdaptor::hotspotDeactivated);
    connect(m_mainWindow, &MainWindow::hotspotActivated, this, &DbusAdaptor::hotspotActivated);
    connect(m_mainWindow, &MainWindow::signalStrengthChange, this, &DbusAdaptor::signalStrengthChange);
    connect(m_mainWindow, &MainWindow::secuTypeChange, this, &DbusAdaptor::secuTypeChange);
    connect(m_mainWindow, &MainWindow::timeToUpdate, this, &DbusAdaptor::timeToUpdate);
}

QString DbusAdaptor::checkDisplay()
{
    uint pid = 0;
    QDBusReply<uint> pidReply = connection().interface()->servicePid(message().service());
    qDebug() << "caller pid: " << pidReply.value();
    if(pidReply.isValid()) {
        pid = pidReply.value();
    } else {
        return {};
    }
    return displayFromPid(pid);;
}

QString DbusAdaptor::displayFromPid(uint pid)
{
    QFile environFile(QStringLiteral("/proc/%1/environ").arg(QString::number(pid)));
    if (environFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
        const QByteArray DISPLAY = qApp->property("sessionType").toString() == "wayland" ? QByteArrayLiteral("WAYLAND_DISPLAY")
                                                                      : QByteArrayLiteral("DISPLAY");
        const auto lines = environFile.readAll().split('\0');
        for (const QByteArray &line : lines) {
            const int equalsIdx = line.indexOf('=');
            if (equalsIdx <= 0) {
                continue;
            }
            const QByteArray key = line.left(equalsIdx);
            if (key == DISPLAY) {
                const QByteArray value = line.mid(equalsIdx + 1);
                return value;
            }
        }
    }
    return {};
}

