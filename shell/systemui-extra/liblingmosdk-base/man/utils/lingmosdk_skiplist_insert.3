.TH "LINGMOSDK_SKIPLIST_INSERT" 3 "Fri Sep 22 2023" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lingmosdk_skiplist_insert \- 插入节点  

.SH SYNOPSIS
br
.PP
\fC#include <skip_linklist\&.h>\fP
.br

.SS "Functions"
.SS "int lingmosdk_skiplist_insert (\fBlingmosdk_skiplist\fP * list, int key, lingmosdk_listdata data)"

.PP
插入节点 
.PP
\fBParameters\fP
.RS 4
\fIlist\fP 需要操作的链表 
.br
\fIkey\fP 键 
.br
\fIdata\fP 数据 
.RE
.PP
\fBReturns\fP
.RS 4
int， 成功插入返回0，失败返回-1 
.RE
.PP
Link with \fI\-lkydatastruct\fP.
.SH "Detailed Description"
.PP 
接口的主要功能是插入节点
.SH EXAMPLES
.EX
#include <skip_linklist.h>
#include <stdlib.h>
#include <time.h>
#include <stdio.h>
#include <unistd.h>

void print_list(lingmosdk_skiplist *list)
{
    for (int i = list->max_levels - 1; i >= 0; i --)
    {
        lingmosdk_skiplist_node *curnode = list->children[i];
        printf("Level[%d]: ", i);
        while (curnode)
        {
            printf("%d->", curnode->key);
            curnode = curnode->next[i];
        }
        printf("NULL\n");
    }
}

int test_list_search(lingmosdk_skiplist *list)
{
    for (int i = 0; i < 5; i ++)
    {
        int target = random() % 50 + 1;
        lingmosdk_listdata data = lingmosdk_skiplist_search(list, target);
        printf("Searching for %d, data is %d\n", target, data.num);

        lingmosdk_skiplist_node *curnode = list->children[0];
        short finded = 0;
        while (curnode)
        {
            if (curnode->key == target)
            {
                finded = 1;
                break;
            }
            curnode = curnode->next[0];
        }
        
        if (finded && data.num == -1)
        {
            printf("Skiplist search test failed.\n");
            return -1;
        }
    }

    printf("Skiplist search test pass.\n");

    return 0;
}

int main()
{
    lingmosdk_skiplist *list = lingmosdk_create_skiplist();

    lingmosdk_skiplist_setmaxlevels(list, 5);
    
    srand(time(NULL));
    for (int i = 0; i < 20; i ++)
    {
        int num = random() % 50 + 1;
        lingmosdk_listdata data;
        data.num = i;
        lingmosdk_skiplist_insert(list, num, data);
        printf("[%d] %d has been insert.\n", i, num);
        sleep(1);
    }
    
    print_list(list);

    int res = test_list_search(list);

    lingmosdk_destroy_skiplist(list);

    return res;
}
.SH "CONFORMING TO"
These functions are as per the withdrawn POSIX.1e draft specification.
The following functions are Linux extensions:
.BR lingmosdk_create_skiplist (),
.BR lingmosdk_destroy_skiplist (),
.BR lingmosdk_skiplist_setmaxlevels (),
.BR lingmosdk_skiplist_delete ()
and
.BR lingmosdk_skiplist_search ().
.SH "SEE ALSO"
.BR lingmosdk_create_skiplist (3),
.BR lingmosdk_destroy_skiplist (3),
.BR lingmosdk_skiplist_setmaxlevels (3),
.BR lingmosdk_skiplist_delete (3)
and
.BR lingmosdk_skiplist_search (3).

.SH "Author"
.PP 
Generated automatically by Doxygen for skip_linklist.h  from the source code\&.
