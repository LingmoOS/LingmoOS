.TH "FormModule" 3 "Thu Oct 12 2023" "Version version:2.3" "LIBLINGMOSDK-APPLICATIONS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FormModule
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBkdk::KWidget\fP"
.br
.RI "继承自QWidget,支持响应主题背景切换，图标主题切换，标题颜色响应窗口激活状态，内容区域分为side区和base区 "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBkdk::KWidget::KWidget\fP (QWidget *parent=nullptr)"
.br
.ti -1c
.RI "void \fBkdk::KWidget::setIcon\fP (const QIcon &icon)"
.br
.RI "设置窗体图标 "
.ti -1c
.RI "void \fBkdk::KWidget::setIcon\fP (const QString &iconName)"
.br
.RI "设置窗体图标 "
.ti -1c
.RI "void \fBkdk::KWidget::setWidgetName\fP (const QString &widgetName)"
.br
.RI "设置窗体名称 "
.ti -1c
.RI "QWidget * \fBkdk::KWidget::sideBar\fP ()"
.br
.RI "获取左边栏widget,通过setlayout添加自定义内容 "
.ti -1c
.RI "QWidget * \fBkdk::KWidget::baseBar\fP ()"
.br
.RI "获取主内容区widget,通过setlayout添加自定义内容 "
.ti -1c
.RI "\fBKWindowButtonBar\fP * \fBkdk::KWidget::windowButtonBar\fP ()"
.br
.RI "获取窗口三联组合控件，以控制是否显示最大化、最小化按钮和下拉菜单按钮；也可增加自定义按钮 "
.ti -1c
.RI "\fBKIconBar\fP * \fBkdk::KWidget::iconBar\fP ()"
.br
.RI "获取窗口标题、图标组合控件，以控制相关样式 "
.ti -1c
.RI "void \fBkdk::KWidget::setLayoutType\fP (LayoutType type)"
.br
.RI "设置布局结构类型 "
.ti -1c
.RI "void \fBkdk::KWidget::setWindowFlags\fP (Qt::WindowFlags type)"
.br
.RI "设置窗口标志 "
.ti -1c
.RI "void \fBkdk::KWidget::setWindowFlag\fP (Qt::WindowType flag, bool on=true)"
.br
.RI "设置窗口标志 "
.ti -1c
.RI "void \fBkdk::KWidget::setSidebarFollowMode\fP (bool flag)"
.br
.RI "设置sidebar是否遵循系统更改宽度 "
.ti -1c
.RI "bool \fBkdk::KWidget::sidebarFollowMode\fP ()"
.br
.RI "返回sidebar是否遵循系统更改宽度 "
.ti -1c
.RI "bool \fBkdk::KWidget::eventFilter\fP (QObject *target, QEvent *event) override"
.br
.ti -1c
.RI "virtual void \fBkdk::KWidget::changeIconStyle\fP ()"
.br
.ti -1c
.RI "virtual void \fBkdk::KWidget::changeTheme\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Function Documentation"
.PP 
.SS "QWidget* kdk::KWidget::baseBar ()"

.PP
获取主内容区widget,通过setlayout添加自定义内容 
.PP
\fBReturns\fP
.RS 4
返回主内容区widget 
.RE
.PP

.SS "\fBKIconBar\fP* kdk::KWidget::iconBar ()"

.PP
获取窗口标题、图标组合控件，以控制相关样式 
.PP
\fBReturns\fP
.RS 4
返回窗口标题、图标组合控件 
.RE
.PP

.SS "void kdk::KWidget::setIcon (const QIcon & icon)"

.PP
设置窗体图标 
.PP
\fBParameters\fP
.RS 4
\fIicon\fP 
.RE
.PP

.SS "void kdk::KWidget::setIcon (const QString & iconName)"

.PP
设置窗体图标 
.PP
\fBParameters\fP
.RS 4
\fIiconName\fP 直接指定系统目录中的图标名称，如'lingmo-music' 
.RE
.PP

.SS "void kdk::KWidget::setSidebarFollowMode (bool flag)"

.PP
设置sidebar是否遵循系统更改宽度 
.PP
\fBParameters\fP
.RS 4
\fIflag\fP 
.RE
.PP
\fBSince\fP
.RS 4
1\&.2 
.RE
.PP

.SS "void kdk::KWidget::setWidgetName (const QString & widgetName)"

.PP
设置窗体名称 
.PP
\fBParameters\fP
.RS 4
\fIwidgetName\fP 
.RE
.PP

.SS "void kdk::KWidget::setWindowFlag (Qt::WindowType flag, bool on = \fCtrue\fP)"

.PP
设置窗口标志 
.PP
\fBParameters\fP
.RS 4
\fIflag\fP 
.br
\fIon\fP 
.RE
.PP
\fBSince\fP
.RS 4
1\&.2 
.RE
.PP

.SS "void kdk::KWidget::setWindowFlags (Qt::WindowFlags type)"

.PP
设置窗口标志 
.PP
\fBParameters\fP
.RS 4
\fItype\fP 
.RE
.PP
\fBSince\fP
.RS 4
1\&.2 
.RE
.PP

.SS "QWidget* kdk::KWidget::sideBar ()"

.PP
获取左边栏widget,通过setlayout添加自定义内容 
.PP
\fBReturns\fP
.RS 4
返回左边栏widget 
.RE
.PP

.SS "bool kdk::KWidget::sidebarFollowMode ()"

.PP
返回sidebar是否遵循系统更改宽度 
.PP
\fBReturns\fP
.RS 4

.RE
.PP
\fBSince\fP
.RS 4
1\&.2 
.RE
.PP

.SS "\fBKWindowButtonBar\fP* kdk::KWidget::windowButtonBar ()"

.PP
获取窗口三联组合控件，以控制是否显示最大化、最小化按钮和下拉菜单按钮；也可增加自定义按钮 
.PP
\fBReturns\fP
.RS 4
返回窗口三联组合控件 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for LIBLINGMOSDK-APPLICATIONS from the source code\&.
