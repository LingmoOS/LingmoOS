.TH "BarModule" 3 "Thu Oct 12 2023" "Version version:2.3" "LIBLINGMOSDK-APPLICATIONS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BarModule
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBkdk::KIconBar\fP"
.br
.RI "图标和标题组合控件 "
.ti -1c
.RI "class \fBkdk::KNavigationBar\fP"
.br
.RI "导航栏控件 "
.ti -1c
.RI "class \fBkdk::KPixmapContainer\fP"
.br
.RI "为指定的pixmap添加右上角消息提示气泡，样式类似微信头像的消息提示 "
.ti -1c
.RI "class \fBkdk::KProgressBar\fP"
.br
.RI "进度条，支持三种状态显示 "
.ti -1c
.RI "class \fBkdk::KTabBar\fP"
.br
.RI "支持三种样式 "
.ti -1c
.RI "class \fBkdk::KWindowButtonBar\fP"
.br
.RI "窗口三联按钮和菜单按钮的集合 "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBkdk::ProgressBarState\fP { \fBNormalProgress\fP, \fBFailedProgress\fP, \fBSuccessProgress\fP }"
.br
.RI "支持三种状态 "
.ti -1c
.RI "enum \fBkdk::KTabBarStyle\fP { \fBSegmentDark\fP, \fBSegmentLight\fP, \fBSliding\fP }"
.br
.RI "支持三种样式 "
.ti -1c
.RI "enum \fBkdk::MaximumButtonState\fP { \fBMaximum\fP, \fBRestore\fP }"
.br
.RI "最大化按钮提供两种状态响应 "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBkdk::KIconBar::KIconBar\fP (QWidget *parent=nullptr)"
.br
.ti -1c
.RI "\fBkdk::KIconBar::KIconBar\fP (const QString &iconName, const QString &text, QWidget *parent=nullptr)"
.br
.ti -1c
.RI "void \fBkdk::KIconBar::setIcon\fP (const QString &iconName)"
.br
.RI "设置图标 "
.ti -1c
.RI "void \fBkdk::KIconBar::setIcon\fP (const QIcon &icon)"
.br
.RI "设置图标 "
.ti -1c
.RI "void \fBkdk::KIconBar::setWidgetName\fP (const QString &widgetName)"
.br
.RI "设置标题 "
.ti -1c
.RI "QLabel * \fBkdk::KIconBar::nameLabel\fP ()"
.br
.RI "获取标题label "
.ti -1c
.RI "QLabel * \fBkdk::KIconBar::iconLabel\fP ()"
.br
.RI "获取图标label "
.ti -1c
.RI "void \fBkdk::KIconBar::mouseDoubleClickEvent\fP (QMouseEvent *event)"
.br
.ti -1c
.RI "void \fBkdk::KIconBar::resizeEvent\fP (QResizeEvent *event)"
.br
.ti -1c
.RI "QSize \fBkdk::KIconBar::sizeHint\fP () const override"
.br
.ti -1c
.RI "\fBkdk::KNavigationBar::KNavigationBar\fP (QWidget *parent)"
.br
.ti -1c
.RI "void \fBkdk::KNavigationBar::addItem\fP (QStandardItem *item)"
.br
.RI "增加常规Item "
.ti -1c
.RI "void \fBkdk::KNavigationBar::addSubItem\fP (QStandardItem *subItem)"
.br
.RI "增加次级Item "
.ti -1c
.RI "void \fBkdk::KNavigationBar::addGroupItems\fP (QList< QStandardItem * >items, const QString &tag)"
.br
.RI "成组增加Item,在导航栏中会显示tag "
.ti -1c
.RI "void \fBkdk::KNavigationBar::addTag\fP (const QString &tag)"
.br
.RI "添加tag "
.ti -1c
.RI "QStandardItemModel * \fBkdk::KNavigationBar::model\fP ()"
.br
.RI "获取model "
.ti -1c
.RI "QListView * \fBkdk::KNavigationBar::listview\fP ()"
.br
.RI "获取view "
.ti -1c
.RI "\fBkdk::KPixmapContainer::KPixmapContainer\fP (QWidget *parent=nullptr)"
.br
.ti -1c
.RI "int \fBkdk::KPixmapContainer::value\fP () const"
.br
.RI "获取值 "
.ti -1c
.RI "void \fBkdk::KPixmapContainer::setValue\fP (int \fBvalue\fP)"
.br
.RI "设置值 "
.ti -1c
.RI "void \fBkdk::KPixmapContainer::setValueVisiable\fP (bool flag)"
.br
.RI "设置值是否可见 "
.ti -1c
.RI "bool \fBkdk::KPixmapContainer::isValueVisiable\fP () const"
.br
.RI "获取值是否可见 "
.ti -1c
.RI "void \fBkdk::KPixmapContainer::setPixmap\fP (const QPixmap &\fBpixmap\fP)"
.br
.RI "设置pixmap "
.ti -1c
.RI "QPixmap \fBkdk::KPixmapContainer::pixmap\fP () const"
.br
.RI "获取pixmap "
.ti -1c
.RI "void \fBkdk::KPixmapContainer::clearValue\fP ()"
.br
.RI "清除值 "
.ti -1c
.RI "QColor \fBkdk::KPixmapContainer::color\fP ()"
.br
.RI "返回背景色 "
.ti -1c
.RI "void \fBkdk::KPixmapContainer::setColor\fP (const QColor &\fBcolor\fP)"
.br
.RI "设置背景色 "
.ti -1c
.RI "int \fBkdk::KPixmapContainer::fontSize\fP ()"
.br
.RI "返回字体大小 "
.ti -1c
.RI "void \fBkdk::KPixmapContainer::setFontSize\fP (int size)"
.br
.RI "设置字体大小 "
.ti -1c
.RI "void \fBkdk::KPixmapContainer::paintEvent\fP (QPaintEvent *event)"
.br
.ti -1c
.RI "\fBkdk::KProgressBar::KProgressBar\fP (QWidget *parent)"
.br
.ti -1c
.RI "\fBProgressBarState\fP \fBkdk::KProgressBar::state\fP ()"
.br
.RI "获取状态 "
.ti -1c
.RI "void \fBkdk::KProgressBar::setState\fP (\fBProgressBarState\fP \fBstate\fP)"
.br
.RI "设置状态 "
.ti -1c
.RI "QString \fBkdk::KProgressBar::text\fP () const override"
.br
.RI "获取文本 "
.ti -1c
.RI "void \fBkdk::KProgressBar::setOrientation\fP (Qt::Orientation)"
.br
.RI "设置方向 "
.ti -1c
.RI "void \fBkdk::KProgressBar::setBodyWidth\fP (int width)"
.br
.RI "设置进度条宽度 "
.ti -1c
.RI "void \fBkdk::KProgressBar::paintEvent\fP (QPaintEvent *event) override"
.br
.ti -1c
.RI "QSize \fBkdk::KProgressBar::sizeHint\fP () const"
.br
.ti -1c
.RI "\fBkdk::KTabBar::KTabBar\fP (\fBKTabBarStyle\fP \fBbarStyle\fP=SegmentLight, QWidget *parent=nullptr)"
.br
.ti -1c
.RI "void \fBkdk::KTabBar::setTabBarStyle\fP (\fBKTabBarStyle\fP \fBbarStyle\fP)"
.br
.RI "设置TabBar样式 "
.ti -1c
.RI "\fBKTabBarStyle\fP \fBkdk::KTabBar::barStyle\fP ()"
.br
.RI "返回TabBar样式 "
.ti -1c
.RI "void \fBkdk::KTabBar::setBorderRadius\fP (int radius)"
.br
.RI "设置圆角半径，只对SegmentDark，SegmentLight样式生效 "
.ti -1c
.RI "int \fBkdk::KTabBar::borderRadius\fP ()"
.br
.RI "获取圆角半径 "
.ti -1c
.RI "void \fBkdk::KTabBar::setBackgroundColor\fP (const QColor &color)"
.br
.RI "设置背景色 "
.ti -1c
.RI "QSize \fBkdk::KTabBar::sizeHint\fP () const"
.br
.ti -1c
.RI "QSize \fBkdk::KTabBar::minimumTabSizeHint\fP (int index) const"
.br
.ti -1c
.RI "QSize \fBkdk::KTabBar::tabSizeHint\fP (int index) const"
.br
.ti -1c
.RI "void \fBkdk::KTabBar::paintEvent\fP (QPaintEvent *event)"
.br
.ti -1c
.RI "\fBkdk::KWindowButtonBar::KWindowButtonBar\fP (QWidget *parent=nullptr)"
.br
.ti -1c
.RI "QPushButton * \fBkdk::KWindowButtonBar::minimumButton\fP ()"
.br
.RI "获取最小化按钮 "
.ti -1c
.RI "QPushButton * \fBkdk::KWindowButtonBar::maximumButton\fP ()"
.br
.RI "获取最大化按钮 "
.ti -1c
.RI "QPushButton * \fBkdk::KWindowButtonBar::closeButton\fP ()"
.br
.RI "获取关闭按钮 "
.ti -1c
.RI "\fBKMenuButton\fP * \fBkdk::KWindowButtonBar::menuButton\fP ()"
.br
.RI "获取菜单按钮 "
.ti -1c
.RI "\fBMaximumButtonState\fP \fBkdk::KWindowButtonBar::maximumButtonState\fP ()"
.br
.RI "获取最大化按钮的状态(最大化/恢复) "
.ti -1c
.RI "void \fBkdk::KWindowButtonBar::setMaximumButtonState\fP (\fBMaximumButtonState\fP state)"
.br
.RI "设置最大化按钮图标状态（最大化/恢复） "
.ti -1c
.RI "void \fBkdk::KWindowButtonBar::setFollowMode\fP (bool flag)"
.br
.RI "设置是否遵循模式 "
.ti -1c
.RI "bool \fBkdk::KWindowButtonBar::followMode\fP ()"
.br
.RI "返回是否遵循模式 "
.ti -1c
.RI "void \fBkdk::KWindowButtonBar::mouseDoubleClickEvent\fP (QMouseEvent *event)"
.br
.ti -1c
.RI "bool \fBkdk::KWindowButtonBar::eventFilter\fP (QObject *watched, QEvent *event)"
.br
.ti -1c
.RI "QSize \fBkdk::KWindowButtonBar::sizeHint\fP () const override"
.br
.in -1c
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBkdk::KIconBar::doubleClick\fP ()"
.br
.RI "双击会发出双击信号，父widget可以绑定相应槽函数 "
.ti -1c
.RI "void \fBkdk::KWindowButtonBar::doubleClick\fP ()"
.br
.RI "双击会发出双击信号，父widget可以绑定相应槽函数 "
.in -1c
.SH "Detailed Description"
.PP 

.SH "Function Documentation"
.PP 
.SS "void kdk::KNavigationBar::addGroupItems (QList< QStandardItem * > items, const QString & tag)"

.PP
成组增加Item,在导航栏中会显示tag 
.PP
\fBParameters\fP
.RS 4
\fIitems\fP 
.br
\fItag\fP 
.RE
.PP

.SS "void kdk::KNavigationBar::addItem (QStandardItem * item)"

.PP
增加常规Item 
.PP
\fBParameters\fP
.RS 4
\fIitem\fP 
.RE
.PP

.SS "void kdk::KNavigationBar::addSubItem (QStandardItem * subItem)"

.PP
增加次级Item 
.PP
\fBParameters\fP
.RS 4
\fIsubItem\fP 
.RE
.PP

.SS "void kdk::KNavigationBar::addTag (const QString & tag)"

.PP
添加tag 
.PP
\fBParameters\fP
.RS 4
\fItag\fP 
.RE
.PP

.SS "\fBKTabBarStyle\fP kdk::KTabBar::barStyle ()"

.PP
返回TabBar样式 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "int kdk::KTabBar::borderRadius ()"

.PP
获取圆角半径 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "QPushButton* kdk::KWindowButtonBar::closeButton ()"

.PP
获取关闭按钮 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "QColor kdk::KPixmapContainer::color ()"

.PP
返回背景色 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "bool kdk::KWindowButtonBar::followMode ()"

.PP
返回是否遵循模式 
.PP
\fBSince\fP
.RS 4
2\&.0 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "int kdk::KPixmapContainer::fontSize ()"

.PP
返回字体大小 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "QLabel* kdk::KIconBar::iconLabel ()"

.PP
获取图标label 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "QListView* kdk::KNavigationBar::listview ()"

.PP
获取view 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "QPushButton* kdk::KWindowButtonBar::maximumButton ()"

.PP
获取最大化按钮 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "\fBMaximumButtonState\fP kdk::KWindowButtonBar::maximumButtonState ()"

.PP
获取最大化按钮的状态(最大化/恢复) 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "\fBKMenuButton\fP* kdk::KWindowButtonBar::menuButton ()"

.PP
获取菜单按钮 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "QPushButton* kdk::KWindowButtonBar::minimumButton ()"

.PP
获取最小化按钮 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "QStandardItemModel* kdk::KNavigationBar::model ()"

.PP
获取model 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "QLabel* kdk::KIconBar::nameLabel ()"

.PP
获取标题label 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "void kdk::KTabBar::setBackgroundColor (const QColor & color)"

.PP
设置背景色 
.PP
\fBParameters\fP
.RS 4
\fIcolor\fP 
.RE
.PP
\fBSince\fP
.RS 4
1\&.2 
.RE
.PP

.SS "void kdk::KProgressBar::setBodyWidth (int width)"

.PP
设置进度条宽度 
.PP
\fBParameters\fP
.RS 4
\fIwidth\fP 
.RE
.PP
\fBSince\fP
.RS 4
1\&.2 
.RE
.PP

.SS "void kdk::KTabBar::setBorderRadius (int radius)"

.PP
设置圆角半径，只对SegmentDark，SegmentLight样式生效 
.PP
\fBParameters\fP
.RS 4
\fIradius\fP 
.RE
.PP

.SS "void kdk::KPixmapContainer::setColor (const QColor & color)"

.PP
设置背景色 
.PP
\fBParameters\fP
.RS 4
\fIcolor\fP 
.RE
.PP

.SS "void kdk::KWindowButtonBar::setFollowMode (bool flag)"

.PP
设置是否遵循模式 
.PP
\fBSince\fP
.RS 4
2\&.0 
.RE
.PP
\fBParameters\fP
.RS 4
\fIflag\fP 
.RE
.PP

.SS "void kdk::KPixmapContainer::setFontSize (int size)"

.PP
设置字体大小 
.PP
\fBParameters\fP
.RS 4
\fIsize\fP 
.RE
.PP

.SS "void kdk::KIconBar::setIcon (const QIcon & icon)"

.PP
设置图标 
.PP
\fBParameters\fP
.RS 4
\fIicon\fP 
.RE
.PP

.SS "void kdk::KIconBar::setIcon (const QString & iconName)"

.PP
设置图标 
.PP
\fBParameters\fP
.RS 4
\fIiconName\fP 
.RE
.PP

.SS "void kdk::KWindowButtonBar::setMaximumButtonState (\fBMaximumButtonState\fP state)"

.PP
设置最大化按钮图标状态（最大化/恢复） 
.PP
\fBParameters\fP
.RS 4
\fIstate\fP 
.RE
.PP

.SS "void kdk::KPixmapContainer::setPixmap (const QPixmap & pixmap)"

.PP
设置pixmap 
.PP
\fBParameters\fP
.RS 4
\fIpixmap\fP 
.RE
.PP

.SS "void kdk::KProgressBar::setState (\fBProgressBarState\fP state)"

.PP
设置状态 
.PP
\fBParameters\fP
.RS 4
\fIstate\fP 
.RE
.PP

.SS "void kdk::KTabBar::setTabBarStyle (\fBKTabBarStyle\fP barStyle)"

.PP
设置TabBar样式 
.PP
\fBParameters\fP
.RS 4
\fIbarStyle\fP 
.RE
.PP

.SS "void kdk::KPixmapContainer::setValue (int value)"

.PP
设置值 
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP 
.RE
.PP

.SS "void kdk::KPixmapContainer::setValueVisiable (bool flag)"

.PP
设置值是否可见 
.PP
\fBParameters\fP
.RS 4
\fIflag\fP 
.RE
.PP

.SS "void kdk::KIconBar::setWidgetName (const QString & widgetName)"

.PP
设置标题 
.PP
\fBParameters\fP
.RS 4
\fIwidgetName\fP 
.RE
.PP

.SS "\fBProgressBarState\fP kdk::KProgressBar::state ()"

.PP
获取状态 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "QString kdk::KProgressBar::text () const\fC [override]\fP"

.PP
获取文本 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for LIBLINGMOSDK-APPLICATIONS from the source code\&.
