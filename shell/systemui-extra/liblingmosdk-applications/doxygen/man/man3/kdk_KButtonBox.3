.TH "kdk::KButtonBox" 3 "Thu Oct 12 2023" "Version version:2.3" "LIBLINGMOSDK-APPLICATIONS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kdk::KButtonBox \- 提供了一个按钮类容器  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <kbuttonbox\&.h>\fP
.PP
Inherits QWidget\&.
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBbuttonClicked\fP (QAbstractButton *)"
.br
.ti -1c
.RI "void \fBbuttonPressed\fP (QAbstractButton *)"
.br
.ti -1c
.RI "void \fBbuttonReleased\fP (QAbstractButton *)"
.br
.ti -1c
.RI "void \fBbuttonToggled\fP (QAbstractButton *, bool)"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBKButtonBox\fP (QWidget *parent=nullptr)"
.br
.ti -1c
.RI "Qt::Orientation \fBorientation\fP ()"
.br
.RI "获取KButtonBox的布局类型 "
.ti -1c
.RI "void \fBsetOrientation\fP (Qt::Orientation \fBorientation\fP)"
.br
.RI "设置KButtonBox的布局类型,包括水平类型和垂直类型 "
.ti -1c
.RI "void \fBaddButton\fP (\fBKPushButton\fP *\fBbutton\fP, int i=\-1)"
.br
.RI "添加按钮 "
.ti -1c
.RI "void \fBremoveButton\fP (\fBKPushButton\fP *\fBbutton\fP)"
.br
.RI "删除按钮 "
.ti -1c
.RI "void \fBremoveButton\fP (int i)"
.br
.RI "按id删除指定按钮 "
.ti -1c
.RI "void \fBsetButtonList\fP (const QList< \fBKPushButton\fP * > &list)"
.br
.RI "以列表形式向KButtonBox中添加按钮 "
.ti -1c
.RI "QList< \fBKPushButton\fP * > \fBbuttonList\fP ()"
.br
.RI "获取KButtonBox中的按钮列表 "
.ti -1c
.RI "void \fBsetBorderRadius\fP (int radius)"
.br
.RI "设置KButtonBox首尾部分按钮的圆角 "
.ti -1c
.RI "int \fBborderRadius\fP ()"
.br
.RI "获取KButtonBox首尾部分按钮的圆角 "
.ti -1c
.RI "void \fBsetId\fP (\fBKPushButton\fP *\fBbutton\fP, int \fBid\fP)"
.br
.RI "设置按钮id "
.ti -1c
.RI "int \fBid\fP (\fBKPushButton\fP *\fBbutton\fP)"
.br
.RI "获取按钮id "
.ti -1c
.RI "\fBKPushButton\fP * \fBcheckedButton\fP ()"
.br
.RI "返回已选中的按钮 "
.ti -1c
.RI "\fBKPushButton\fP * \fBbutton\fP (int \fBid\fP)"
.br
.RI "通过按钮id获取按钮 "
.ti -1c
.RI "int \fBcheckedId\fP ()"
.br
.RI "返回已选中按钮的id "
.ti -1c
.RI "void \fBsetExclusive\fP (bool)"
.br
.RI "设置KButtonBox按钮间是否互斥 "
.ti -1c
.RI "bool \fBexclusive\fP ()"
.br
.RI "返回KButtonBox按钮间是否互斥 "
.ti -1c
.RI "void \fBsetCheckable\fP (bool flag)"
.br
.RI "设置KButtonBox中的按钮是否可选中 "
.ti -1c
.RI "bool \fBisCheckable\fP ()"
.br
.RI "返回KButtonBox中的按钮是否可选中 "
.in -1c
.SH "Detailed Description"
.PP 
提供了一个按钮类容器 


.PP
\fBSince\fP
.RS 4
2\&.0 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void kdk::KButtonBox::addButton (\fBKPushButton\fP * button, int i = \fC\-1\fP)"

.PP
添加按钮 
.PP
\fBParameters\fP
.RS 4
\fIbutton\fP 
.RE
.PP

.SS "int kdk::KButtonBox::borderRadius ()"

.PP
获取KButtonBox首尾部分按钮的圆角 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "\fBKPushButton\fP* kdk::KButtonBox::button (int id)"

.PP
通过按钮id获取按钮 
.PP
\fBParameters\fP
.RS 4
\fIid\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "QList<\fBKPushButton\fP *> kdk::KButtonBox::buttonList ()"

.PP
获取KButtonBox中的按钮列表 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "\fBKPushButton\fP* kdk::KButtonBox::checkedButton ()"

.PP
返回已选中的按钮 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "int kdk::KButtonBox::checkedId ()"

.PP
返回已选中按钮的id 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "bool kdk::KButtonBox::exclusive ()"

.PP
返回KButtonBox按钮间是否互斥 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "int kdk::KButtonBox::id (\fBKPushButton\fP * button)"

.PP
获取按钮id 
.PP
\fBParameters\fP
.RS 4
\fIbutton\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "bool kdk::KButtonBox::isCheckable ()"

.PP
返回KButtonBox中的按钮是否可选中 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "Qt::Orientation kdk::KButtonBox::orientation ()"

.PP
获取KButtonBox的布局类型 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "void kdk::KButtonBox::removeButton (int i)"

.PP
按id删除指定按钮 
.PP
\fBParameters\fP
.RS 4
\fIi\fP 
.RE
.PP

.SS "void kdk::KButtonBox::removeButton (\fBKPushButton\fP * button)"

.PP
删除按钮 
.PP
\fBParameters\fP
.RS 4
\fIbutton\fP 
.RE
.PP

.SS "void kdk::KButtonBox::setBorderRadius (int radius)"

.PP
设置KButtonBox首尾部分按钮的圆角 
.PP
\fBParameters\fP
.RS 4
\fIradius\fP 
.RE
.PP

.SS "void kdk::KButtonBox::setButtonList (const QList< \fBKPushButton\fP * > & list)"

.PP
以列表形式向KButtonBox中添加按钮 
.PP
\fBParameters\fP
.RS 4
\fIlist\fP 
.br
\fIcheckable\fP 
.RE
.PP

.SS "void kdk::KButtonBox::setId (\fBKPushButton\fP * button, int id)"

.PP
设置按钮id 
.PP
\fBParameters\fP
.RS 4
\fIbutton\fP 
.br
\fIid\fP 
.RE
.PP

.SS "void kdk::KButtonBox::setOrientation (Qt::Orientation orientation)"

.PP
设置KButtonBox的布局类型,包括水平类型和垂直类型 
.PP
\fBParameters\fP
.RS 4
\fIorientation\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for LIBLINGMOSDK-APPLICATIONS from the source code\&.
