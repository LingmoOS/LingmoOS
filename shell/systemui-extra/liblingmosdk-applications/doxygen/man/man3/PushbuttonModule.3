.TH "PushbuttonModule" 3 "Thu Oct 12 2023" "Version version:2.3" "LIBLINGMOSDK-APPLICATIONS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PushbuttonModule
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBkdk::KBorderButton\fP"
.br
.RI "带边框的按钮 "
.ti -1c
.RI "class \fBkdk::KBorderlessButton\fP"
.br
.RI "无边框按钮 "
.ti -1c
.RI "class \fBkdk::KMenuButton\fP"
.br
.RI "下拉菜单按钮 "
.ti -1c
.RI "class \fBkdk::KSwitchButton\fP"
.br
.RI "指示打开/关闭两种状态 "
.ti -1c
.RI "class \fBkdk::KToolButton\fP"
.br
.RI "提供了一个快速访问按钮，暂不支持显示文本 "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBkdk::KToolButtonType\fP { \fBFlat\fP, \fBSemiFlat\fP, \fBBackground\fP }"
.br
.RI "支持三种样式,暂不支持文字显示 "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBkdk::KBorderButton::KBorderButton\fP (QWidget *parent=nullptr)"
.br
.ti -1c
.RI "\fBkdk::KBorderButton::KBorderButton\fP (const QString &text, QWidget *parent=nullptr)"
.br
.ti -1c
.RI "\fBkdk::KBorderButton::KBorderButton\fP (const QIcon &icon, const QString &text, QWidget *parent=nullptr)"
.br
.ti -1c
.RI "\fBkdk::KBorderButton::KBorderButton\fP (const QIcon &icon, QWidget *parent=nullptr)"
.br
.ti -1c
.RI "void \fBkdk::KBorderButton::setIcon\fP (const QIcon &icon)"
.br
.RI "设置按钮图标 "
.ti -1c
.RI "bool \fBkdk::KBorderButton::eventFilter\fP (QObject *watched, QEvent *event)"
.br
.ti -1c
.RI "void \fBkdk::KBorderButton::paintEvent\fP (QPaintEvent *event)"
.br
.ti -1c
.RI "QSize \fBkdk::KBorderButton::sizeHint\fP () const override"
.br
.ti -1c
.RI "\fBkdk::KBorderlessButton::KBorderlessButton\fP (QWidget *parent=nullptr)"
.br
.ti -1c
.RI "\fBkdk::KBorderlessButton::KBorderlessButton\fP (const QString &text, QWidget *parent=nullptr)"
.br
.ti -1c
.RI "\fBkdk::KBorderlessButton::KBorderlessButton\fP (const QIcon &icon, const QString &text, QWidget *parent=nullptr)"
.br
.ti -1c
.RI "\fBkdk::KBorderlessButton::KBorderlessButton\fP (const QIcon &icon, QWidget *parent=nullptr)"
.br
.ti -1c
.RI "void \fBkdk::KBorderlessButton::setIcon\fP (const QIcon &icon)"
.br
.RI "设置按钮图标 "
.ti -1c
.RI "bool \fBkdk::KBorderlessButton::eventFilter\fP (QObject *watched, QEvent *event)"
.br
.ti -1c
.RI "void \fBkdk::KBorderlessButton::paintEvent\fP (QPaintEvent *event)"
.br
.ti -1c
.RI "QSize \fBkdk::KBorderlessButton::sizeHint\fP () const"
.br
.ti -1c
.RI "\fBkdk::KMenuButton::KMenuButton\fP (QWidget *parent=nullptr)"
.br
.ti -1c
.RI "QMenu * \fBkdk::KMenuButton::menu\fP ()"
.br
.RI "获取主菜单 "
.ti -1c
.RI "QMenu * \fBkdk::KMenuButton::themeMenu\fP ()"
.br
.RI "获取主题菜单 "
.ti -1c
.RI "QAction * \fBkdk::KMenuButton::settingAction\fP ()"
.br
.RI "获取设置action "
.ti -1c
.RI "QAction * \fBkdk::KMenuButton::themeAction\fP ()"
.br
.RI "获取主题Action "
.ti -1c
.RI "QAction * \fBkdk::KMenuButton::assistAction\fP ()"
.br
.RI "获取帮助Action "
.ti -1c
.RI "QAction * \fBkdk::KMenuButton::aboutAction\fP ()"
.br
.RI "获取关于Action "
.ti -1c
.RI "QAction * \fBkdk::KMenuButton::quitAction\fP ()"
.br
.RI "获取离开Action "
.ti -1c
.RI "QAction * \fBkdk::KMenuButton::autoAction\fP ()"
.br
.RI "获取跟随主题Action "
.ti -1c
.RI "QAction * \fBkdk::KMenuButton::lightAction\fP ()"
.br
.RI "获取浅色主题Action "
.ti -1c
.RI "QAction * \fBkdk::KMenuButton::darkAction\fP ()"
.br
.RI "获取深色Action "
.ti -1c
.RI "void \fBkdk::KMenuButton::changeTheme\fP () override"
.br
.ti -1c
.RI "void \fBkdk::KMenuButton::paintEvent\fP (QPaintEvent *painteEvent)"
.br
.ti -1c
.RI "QSize \fBkdk::KMenuButton::sizeHint\fP () const override"
.br
.ti -1c
.RI "\fBkdk::KSwitchButton::KSwitchButton\fP (QWidget *parent=0)"
.br
.ti -1c
.RI "void \fBkdk::KSwitchButton::setCheckable\fP (bool)"
.br
.RI "设置是否可选中 "
.ti -1c
.RI "bool \fBkdk::KSwitchButton::isCheckable\fP () const"
.br
.RI "返回是否可选中 "
.ti -1c
.RI "bool \fBkdk::KSwitchButton::isChecked\fP () const"
.br
.RI "返回是否选中 "
.ti -1c
.RI "void \fBkdk::KSwitchButton::setChecked\fP (bool)"
.br
.RI "设置是否选中 "
.ti -1c
.RI "void \fBkdk::KSwitchButton::setTranslucent\fP (bool flag)"
.br
.RI "设置是否启用半透明效果 "
.ti -1c
.RI "bool \fBkdk::KSwitchButton::isTranslucent\fP ()"
.br
.RI "获取是否启用半透明效果 "
.ti -1c
.RI "void \fBkdk::KSwitchButton::paintEvent\fP (QPaintEvent *event) override"
.br
.ti -1c
.RI "void \fBkdk::KSwitchButton::resizeEvent\fP (QResizeEvent *event) override"
.br
.ti -1c
.RI "QSize \fBkdk::KSwitchButton::sizeHint\fP () const"
.br
.ti -1c
.RI "\fBkdk::KToolButton::KToolButton\fP (QWidget *parent)"
.br
.ti -1c
.RI "\fBKToolButtonType\fP \fBkdk::KToolButton::type\fP ()"
.br
.RI "返回类型 "
.ti -1c
.RI "void \fBkdk::KToolButton::setType\fP (\fBKToolButtonType\fP \fBtype\fP)"
.br
.RI "设置类型 "
.ti -1c
.RI "void \fBkdk::KToolButton::setIcon\fP (const QIcon &\fBicon\fP)"
.br
.RI "设置Icon "
.ti -1c
.RI "void \fBkdk::KToolButton::setLoading\fP (bool flag)"
.br
.RI "设置正在加载状态,仅不带箭头的toolbuttuon支持该状态 "
.ti -1c
.RI "bool \fBkdk::KToolButton::isLoading\fP ()"
.br
.RI "返回是否正在加载 "
.ti -1c
.RI "QIcon \fBkdk::KToolButton::icon\fP ()"
.br
.RI "获取Icon "
.ti -1c
.RI "void \fBkdk::KToolButton::setArrow\fP (bool flag)"
.br
.RI "设置是否显示向下箭头，默认不显示 "
.ti -1c
.RI "bool \fBkdk::KToolButton::hasArrow\fP () const"
.br
.RI "返回是否显示箭头 "
.ti -1c
.RI "bool \fBkdk::KToolButton::eventFilter\fP (QObject *watched, QEvent *event)"
.br
.ti -1c
.RI "QSize \fBkdk::KToolButton::sizeHint\fP () const"
.br
.ti -1c
.RI "void \fBkdk::KToolButton::paintEvent\fP (QPaintEvent *event)"
.br
.in -1c
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBkdk::KSwitchButton::stateChanged\fP (bool)"
.br
.RI "当选中状态发生变化时，发出此信号 "
.in -1c
.SH "Detailed Description"
.PP 

.SH "Function Documentation"
.PP 
.SS "QAction* kdk::KMenuButton::aboutAction ()"

.PP
获取关于Action 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "QAction* kdk::KMenuButton::assistAction ()"

.PP
获取帮助Action 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "QAction* kdk::KMenuButton::autoAction ()"

.PP
获取跟随主题Action 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "QAction* kdk::KMenuButton::darkAction ()"

.PP
获取深色Action 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "bool kdk::KToolButton::hasArrow () const"

.PP
返回是否显示箭头 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "QIcon kdk::KToolButton::icon ()"

.PP
获取Icon 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "bool kdk::KSwitchButton::isCheckable () const"

.PP
返回是否可选中 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "bool kdk::KSwitchButton::isChecked () const"

.PP
返回是否选中 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "bool kdk::KToolButton::isLoading ()"

.PP
返回是否正在加载 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "bool kdk::KSwitchButton::isTranslucent ()"

.PP
获取是否启用半透明效果 
.PP
\fBSince\fP
.RS 4
1\&.2 
.RE
.PP
\fBReturns\fP
.RS 4
flag 
.RE
.PP

.SS "QAction* kdk::KMenuButton::lightAction ()"

.PP
获取浅色主题Action 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "QMenu* kdk::KMenuButton::menu ()"

.PP
获取主菜单 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "QAction* kdk::KMenuButton::quitAction ()"

.PP
获取离开Action 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "void kdk::KToolButton::setArrow (bool flag)"

.PP
设置是否显示向下箭头，默认不显示 
.PP
\fBParameters\fP
.RS 4
\fIflag\fP 
.RE
.PP

.SS "void kdk::KSwitchButton::setChecked (bool)"

.PP
设置是否选中 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "void kdk::KBorderButton::setIcon (const QIcon & icon)"

.PP
设置按钮图标 
.PP
\fBParameters\fP
.RS 4
\fIicon\fP 
.RE
.PP

.SS "void kdk::KBorderlessButton::setIcon (const QIcon & icon)"

.PP
设置按钮图标 
.PP
\fBParameters\fP
.RS 4
\fIicon\fP 
.RE
.PP

.SS "void kdk::KToolButton::setIcon (const QIcon & icon)"

.PP
设置Icon 
.PP
\fBParameters\fP
.RS 4
\fIicon\fP 
.RE
.PP

.SS "void kdk::KToolButton::setLoading (bool flag)"

.PP
设置正在加载状态,仅不带箭头的toolbuttuon支持该状态 
.PP
\fBParameters\fP
.RS 4
\fIflag\fP 
.RE
.PP

.SS "QAction* kdk::KMenuButton::settingAction ()"

.PP
获取设置action 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "void kdk::KSwitchButton::setTranslucent (bool flag)"

.PP
设置是否启用半透明效果 
.PP
\fBSince\fP
.RS 4
1\&.2 
.RE
.PP
\fBParameters\fP
.RS 4
\fIflag\fP 
.RE
.PP

.SS "void kdk::KToolButton::setType (\fBKToolButtonType\fP type)"

.PP
设置类型 
.PP
\fBParameters\fP
.RS 4
\fItype\fP 
.RE
.PP

.SS "QAction* kdk::KMenuButton::themeAction ()"

.PP
获取主题Action 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "QMenu* kdk::KMenuButton::themeMenu ()"

.PP
获取主题菜单 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "\fBKToolButtonType\fP kdk::KToolButton::type ()"

.PP
返回类型 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for LIBLINGMOSDK-APPLICATIONS from the source code\&.
