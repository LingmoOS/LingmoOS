/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __SPEECHPROCESSORGLUE_H__
#define __SPEECHPROCESSORGLUE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.lingmo.aisdk.SpeechProcessor */

#define TYPE_AISDK_SPEECH_PROCESSOR (aisdk_speech_processor_get_type ())
#define AISDK_SPEECH_PROCESSOR(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AISDK_SPEECH_PROCESSOR, AisdkSpeechProcessor))
#define IS_AISDK_SPEECH_PROCESSOR(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AISDK_SPEECH_PROCESSOR))
#define AISDK_SPEECH_PROCESSOR_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_AISDK_SPEECH_PROCESSOR, AisdkSpeechProcessorIface))

struct _AisdkSpeechProcessor;
typedef struct _AisdkSpeechProcessor AisdkSpeechProcessor;
typedef struct _AisdkSpeechProcessorIface AisdkSpeechProcessorIface;

struct _AisdkSpeechProcessorIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_init) (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_engine_name,
    const gchar *arg_config);

  gboolean (*handle_input_audio_data) (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_audioData,
    gint arg_audioDataLength,
    gint arg_session_Id);

  gboolean (*handle_input_continuous_text) (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_text,
    gint arg_session_Id);

  gboolean (*handle_recognizing_complete_audio) (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_audioProperties,
    const gchar *arg_audioData,
    gint arg_audioDataLength,
    gint arg_session_Id);

  gboolean (*handle_recognizing_complete_text) (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_voiceProperties,
    const gchar *arg_text,
    gint arg_session_Id);

  gboolean (*handle_start_recognizing_audio) (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_audioProperties,
    gint arg_session_Id);

  gboolean (*handle_start_synthesizing_audio) (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_voiceProperties,
    gint arg_session_Id);

  gboolean (*handle_stop_recognizing_audio) (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation,
    gint arg_session_Id);

  gboolean (*handle_stop_synthesizing_audio) (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation,
    gint arg_session_Id);

};

GType aisdk_speech_processor_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *aisdk_speech_processor_interface_info (void);
guint aisdk_speech_processor_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void aisdk_speech_processor_complete_init (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation,
    gint session_Id,
    gint errorCode);

void aisdk_speech_processor_complete_start_recognizing_audio (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation,
    gint errorCode);

void aisdk_speech_processor_complete_input_audio_data (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *textData,
    gint textDataLength,
    gint speakerId,
    gint errorCode);

void aisdk_speech_processor_complete_stop_recognizing_audio (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation);

void aisdk_speech_processor_complete_recognizing_complete_audio (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *textData,
    gint textDataLength,
    gint speakerId,
    gint errorCode);

void aisdk_speech_processor_complete_start_synthesizing_audio (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation,
    gint errorCode);

void aisdk_speech_processor_complete_input_continuous_text (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *audioFormat,
    gint audioRate,
    gint audioChannel,
    const gchar *audioData,
    gint audioDataLength,
    gint errorCode);

void aisdk_speech_processor_complete_stop_synthesizing_audio (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation);

void aisdk_speech_processor_complete_recognizing_complete_text (
    AisdkSpeechProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *audioFormat,
    gint audioRate,
    gint audioChannel,
    const gchar *audioData,
    gint audioDataLength,
    gint errorMsg);



/* D-Bus method calls: */
void aisdk_speech_processor_call_init (
    AisdkSpeechProcessor *proxy,
    const gchar *arg_engine_name,
    const gchar *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_speech_processor_call_init_finish (
    AisdkSpeechProcessor *proxy,
    gint *out_session_Id,
    gint *out_errorCode,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_speech_processor_call_init_sync (
    AisdkSpeechProcessor *proxy,
    const gchar *arg_engine_name,
    const gchar *arg_config,
    gint *out_session_Id,
    gint *out_errorCode,
    GCancellable *cancellable,
    GError **error);

void aisdk_speech_processor_call_start_recognizing_audio (
    AisdkSpeechProcessor *proxy,
    const gchar *arg_audioProperties,
    gint arg_session_Id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_speech_processor_call_start_recognizing_audio_finish (
    AisdkSpeechProcessor *proxy,
    gint *out_errorCode,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_speech_processor_call_start_recognizing_audio_sync (
    AisdkSpeechProcessor *proxy,
    const gchar *arg_audioProperties,
    gint arg_session_Id,
    gint *out_errorCode,
    GCancellable *cancellable,
    GError **error);

void aisdk_speech_processor_call_input_audio_data (
    AisdkSpeechProcessor *proxy,
    const gchar *arg_audioData,
    gint arg_audioDataLength,
    gint arg_session_Id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_speech_processor_call_input_audio_data_finish (
    AisdkSpeechProcessor *proxy,
    gchar **out_textData,
    gint *out_textDataLength,
    gint *out_speakerId,
    gint *out_errorCode,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_speech_processor_call_input_audio_data_sync (
    AisdkSpeechProcessor *proxy,
    const gchar *arg_audioData,
    gint arg_audioDataLength,
    gint arg_session_Id,
    gchar **out_textData,
    gint *out_textDataLength,
    gint *out_speakerId,
    gint *out_errorCode,
    GCancellable *cancellable,
    GError **error);

void aisdk_speech_processor_call_stop_recognizing_audio (
    AisdkSpeechProcessor *proxy,
    gint arg_session_Id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_speech_processor_call_stop_recognizing_audio_finish (
    AisdkSpeechProcessor *proxy,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_speech_processor_call_stop_recognizing_audio_sync (
    AisdkSpeechProcessor *proxy,
    gint arg_session_Id,
    GCancellable *cancellable,
    GError **error);

void aisdk_speech_processor_call_recognizing_complete_audio (
    AisdkSpeechProcessor *proxy,
    const gchar *arg_audioProperties,
    const gchar *arg_audioData,
    gint arg_audioDataLength,
    gint arg_session_Id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_speech_processor_call_recognizing_complete_audio_finish (
    AisdkSpeechProcessor *proxy,
    gchar **out_textData,
    gint *out_textDataLength,
    gint *out_speakerId,
    gint *out_errorCode,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_speech_processor_call_recognizing_complete_audio_sync (
    AisdkSpeechProcessor *proxy,
    const gchar *arg_audioProperties,
    const gchar *arg_audioData,
    gint arg_audioDataLength,
    gint arg_session_Id,
    gchar **out_textData,
    gint *out_textDataLength,
    gint *out_speakerId,
    gint *out_errorCode,
    GCancellable *cancellable,
    GError **error);

void aisdk_speech_processor_call_start_synthesizing_audio (
    AisdkSpeechProcessor *proxy,
    const gchar *arg_voiceProperties,
    gint arg_session_Id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_speech_processor_call_start_synthesizing_audio_finish (
    AisdkSpeechProcessor *proxy,
    gint *out_errorCode,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_speech_processor_call_start_synthesizing_audio_sync (
    AisdkSpeechProcessor *proxy,
    const gchar *arg_voiceProperties,
    gint arg_session_Id,
    gint *out_errorCode,
    GCancellable *cancellable,
    GError **error);

void aisdk_speech_processor_call_input_continuous_text (
    AisdkSpeechProcessor *proxy,
    const gchar *arg_text,
    gint arg_session_Id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_speech_processor_call_input_continuous_text_finish (
    AisdkSpeechProcessor *proxy,
    gchar **out_audioFormat,
    gint *out_audioRate,
    gint *out_audioChannel,
    gchar **out_audioData,
    gint *out_audioDataLength,
    gint *out_errorCode,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_speech_processor_call_input_continuous_text_sync (
    AisdkSpeechProcessor *proxy,
    const gchar *arg_text,
    gint arg_session_Id,
    gchar **out_audioFormat,
    gint *out_audioRate,
    gint *out_audioChannel,
    gchar **out_audioData,
    gint *out_audioDataLength,
    gint *out_errorCode,
    GCancellable *cancellable,
    GError **error);

void aisdk_speech_processor_call_stop_synthesizing_audio (
    AisdkSpeechProcessor *proxy,
    gint arg_session_Id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_speech_processor_call_stop_synthesizing_audio_finish (
    AisdkSpeechProcessor *proxy,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_speech_processor_call_stop_synthesizing_audio_sync (
    AisdkSpeechProcessor *proxy,
    gint arg_session_Id,
    GCancellable *cancellable,
    GError **error);

void aisdk_speech_processor_call_recognizing_complete_text (
    AisdkSpeechProcessor *proxy,
    const gchar *arg_voiceProperties,
    const gchar *arg_text,
    gint arg_session_Id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_speech_processor_call_recognizing_complete_text_finish (
    AisdkSpeechProcessor *proxy,
    gchar **out_audioFormat,
    gint *out_audioRate,
    gint *out_audioChannel,
    gchar **out_audioData,
    gint *out_audioDataLength,
    gint *out_errorMsg,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_speech_processor_call_recognizing_complete_text_sync (
    AisdkSpeechProcessor *proxy,
    const gchar *arg_voiceProperties,
    const gchar *arg_text,
    gint arg_session_Id,
    gchar **out_audioFormat,
    gint *out_audioRate,
    gint *out_audioChannel,
    gchar **out_audioData,
    gint *out_audioDataLength,
    gint *out_errorMsg,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_AISDK_SPEECH_PROCESSOR_PROXY (aisdk_speech_processor_proxy_get_type ())
#define AISDK_SPEECH_PROCESSOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AISDK_SPEECH_PROCESSOR_PROXY, AisdkSpeechProcessorProxy))
#define AISDK_SPEECH_PROCESSOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_AISDK_SPEECH_PROCESSOR_PROXY, AisdkSpeechProcessorProxyClass))
#define AISDK_SPEECH_PROCESSOR_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_AISDK_SPEECH_PROCESSOR_PROXY, AisdkSpeechProcessorProxyClass))
#define IS_AISDK_SPEECH_PROCESSOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AISDK_SPEECH_PROCESSOR_PROXY))
#define IS_AISDK_SPEECH_PROCESSOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_AISDK_SPEECH_PROCESSOR_PROXY))

typedef struct _AisdkSpeechProcessorProxy AisdkSpeechProcessorProxy;
typedef struct _AisdkSpeechProcessorProxyClass AisdkSpeechProcessorProxyClass;
typedef struct _AisdkSpeechProcessorProxyPrivate AisdkSpeechProcessorProxyPrivate;

struct _AisdkSpeechProcessorProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AisdkSpeechProcessorProxyPrivate *priv;
};

struct _AisdkSpeechProcessorProxyClass
{
  GDBusProxyClass parent_class;
};

GType aisdk_speech_processor_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AisdkSpeechProcessorProxy, g_object_unref)
#endif

void aisdk_speech_processor_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AisdkSpeechProcessor *aisdk_speech_processor_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
AisdkSpeechProcessor *aisdk_speech_processor_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void aisdk_speech_processor_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AisdkSpeechProcessor *aisdk_speech_processor_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
AisdkSpeechProcessor *aisdk_speech_processor_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_AISDK_SPEECH_PROCESSOR_SKELETON (aisdk_speech_processor_skeleton_get_type ())
#define AISDK_SPEECH_PROCESSOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AISDK_SPEECH_PROCESSOR_SKELETON, AisdkSpeechProcessorSkeleton))
#define AISDK_SPEECH_PROCESSOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_AISDK_SPEECH_PROCESSOR_SKELETON, AisdkSpeechProcessorSkeletonClass))
#define AISDK_SPEECH_PROCESSOR_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_AISDK_SPEECH_PROCESSOR_SKELETON, AisdkSpeechProcessorSkeletonClass))
#define IS_AISDK_SPEECH_PROCESSOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AISDK_SPEECH_PROCESSOR_SKELETON))
#define IS_AISDK_SPEECH_PROCESSOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_AISDK_SPEECH_PROCESSOR_SKELETON))

typedef struct _AisdkSpeechProcessorSkeleton AisdkSpeechProcessorSkeleton;
typedef struct _AisdkSpeechProcessorSkeletonClass AisdkSpeechProcessorSkeletonClass;
typedef struct _AisdkSpeechProcessorSkeletonPrivate AisdkSpeechProcessorSkeletonPrivate;

struct _AisdkSpeechProcessorSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AisdkSpeechProcessorSkeletonPrivate *priv;
};

struct _AisdkSpeechProcessorSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType aisdk_speech_processor_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AisdkSpeechProcessorSkeleton, g_object_unref)
#endif

AisdkSpeechProcessor *aisdk_speech_processor_skeleton_new (void);


G_END_DECLS

#endif /* __SPEECHPROCESSORGLUE_H__ */
