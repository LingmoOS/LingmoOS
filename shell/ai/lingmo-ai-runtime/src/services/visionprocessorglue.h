/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __VISIONPROCESSORGLUE_H__
#define __VISIONPROCESSORGLUE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.lingmo.aisdk.VisionProcessor */

#define TYPE_AISDK_VISION_PROCESSOR (aisdk_vision_processor_get_type ())
#define AISDK_VISION_PROCESSOR(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AISDK_VISION_PROCESSOR, AisdkVisionProcessor))
#define IS_AISDK_VISION_PROCESSOR(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AISDK_VISION_PROCESSOR))
#define AISDK_VISION_PROCESSOR_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_AISDK_VISION_PROCESSOR, AisdkVisionProcessorIface))

struct _AisdkVisionProcessor;
typedef struct _AisdkVisionProcessor AisdkVisionProcessor;
typedef struct _AisdkVisionProcessorIface AisdkVisionProcessorIface;

struct _AisdkVisionProcessorIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_prompt2_image_supported_params) (
    AisdkVisionProcessor *object,
    GDBusMethodInvocation *invocation,
    gint arg_session_Id);

  gboolean (*handle_init) (
    AisdkVisionProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_engine_name,
    const gchar *arg_config);

  gboolean (*handle_prompt_image) (
    AisdkVisionProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_prompt,
    gint arg_session_Id);

  gboolean (*handle_set_prompt_image_number) (
    AisdkVisionProcessor *object,
    GDBusMethodInvocation *invocation,
    gint arg_imageNumber,
    gint arg_session_Id);

  gboolean (*handle_set_prompt_image_size) (
    AisdkVisionProcessor *object,
    GDBusMethodInvocation *invocation,
    gint arg_imageWidth,
    gint arg_imageHeight,
    gint arg_session_Id);

  gboolean (*handle_set_prompt_image_style) (
    AisdkVisionProcessor *object,
    GDBusMethodInvocation *invocation,
    gint arg_imageStyle,
    gint arg_session_Id);

};

GType aisdk_vision_processor_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *aisdk_vision_processor_interface_info (void);
guint aisdk_vision_processor_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void aisdk_vision_processor_complete_init (
    AisdkVisionProcessor *object,
    GDBusMethodInvocation *invocation,
    gint session_Id,
    gint errorCode);

void aisdk_vision_processor_complete_set_prompt_image_size (
    AisdkVisionProcessor *object,
    GDBusMethodInvocation *invocation);

void aisdk_vision_processor_complete_set_prompt_image_number (
    AisdkVisionProcessor *object,
    GDBusMethodInvocation *invocation);

void aisdk_vision_processor_complete_set_prompt_image_style (
    AisdkVisionProcessor *object,
    GDBusMethodInvocation *invocation);

void aisdk_vision_processor_complete_get_prompt2_image_supported_params (
    AisdkVisionProcessor *object,
    GDBusMethodInvocation *invocation,
    const gchar *params);

void aisdk_vision_processor_complete_prompt_image (
    AisdkVisionProcessor *object,
    GDBusMethodInvocation *invocation,
    gint format,
    gint height,
    gint width,
    gint total,
    gint index,
    const gchar *data,
    gint dataSize,
    gint errorCode);



/* D-Bus method calls: */
void aisdk_vision_processor_call_init (
    AisdkVisionProcessor *proxy,
    const gchar *arg_engine_name,
    const gchar *arg_config,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_vision_processor_call_init_finish (
    AisdkVisionProcessor *proxy,
    gint *out_session_Id,
    gint *out_errorCode,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_vision_processor_call_init_sync (
    AisdkVisionProcessor *proxy,
    const gchar *arg_engine_name,
    const gchar *arg_config,
    gint *out_session_Id,
    gint *out_errorCode,
    GCancellable *cancellable,
    GError **error);

void aisdk_vision_processor_call_set_prompt_image_size (
    AisdkVisionProcessor *proxy,
    gint arg_imageWidth,
    gint arg_imageHeight,
    gint arg_session_Id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_vision_processor_call_set_prompt_image_size_finish (
    AisdkVisionProcessor *proxy,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_vision_processor_call_set_prompt_image_size_sync (
    AisdkVisionProcessor *proxy,
    gint arg_imageWidth,
    gint arg_imageHeight,
    gint arg_session_Id,
    GCancellable *cancellable,
    GError **error);

void aisdk_vision_processor_call_set_prompt_image_number (
    AisdkVisionProcessor *proxy,
    gint arg_imageNumber,
    gint arg_session_Id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_vision_processor_call_set_prompt_image_number_finish (
    AisdkVisionProcessor *proxy,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_vision_processor_call_set_prompt_image_number_sync (
    AisdkVisionProcessor *proxy,
    gint arg_imageNumber,
    gint arg_session_Id,
    GCancellable *cancellable,
    GError **error);

void aisdk_vision_processor_call_set_prompt_image_style (
    AisdkVisionProcessor *proxy,
    gint arg_imageStyle,
    gint arg_session_Id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_vision_processor_call_set_prompt_image_style_finish (
    AisdkVisionProcessor *proxy,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_vision_processor_call_set_prompt_image_style_sync (
    AisdkVisionProcessor *proxy,
    gint arg_imageStyle,
    gint arg_session_Id,
    GCancellable *cancellable,
    GError **error);

void aisdk_vision_processor_call_get_prompt2_image_supported_params (
    AisdkVisionProcessor *proxy,
    gint arg_session_Id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_vision_processor_call_get_prompt2_image_supported_params_finish (
    AisdkVisionProcessor *proxy,
    gchar **out_params,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_vision_processor_call_get_prompt2_image_supported_params_sync (
    AisdkVisionProcessor *proxy,
    gint arg_session_Id,
    gchar **out_params,
    GCancellable *cancellable,
    GError **error);

void aisdk_vision_processor_call_prompt_image (
    AisdkVisionProcessor *proxy,
    const gchar *arg_prompt,
    gint arg_session_Id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_vision_processor_call_prompt_image_finish (
    AisdkVisionProcessor *proxy,
    gint *out_format,
    gint *out_height,
    gint *out_width,
    gint *out_total,
    gint *out_index,
    gchar **out_data,
    gint *out_dataSize,
    gint *out_errorCode,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_vision_processor_call_prompt_image_sync (
    AisdkVisionProcessor *proxy,
    const gchar *arg_prompt,
    gint arg_session_Id,
    gint *out_format,
    gint *out_height,
    gint *out_width,
    gint *out_total,
    gint *out_index,
    gchar **out_data,
    gint *out_dataSize,
    gint *out_errorCode,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_AISDK_VISION_PROCESSOR_PROXY (aisdk_vision_processor_proxy_get_type ())
#define AISDK_VISION_PROCESSOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AISDK_VISION_PROCESSOR_PROXY, AisdkVisionProcessorProxy))
#define AISDK_VISION_PROCESSOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_AISDK_VISION_PROCESSOR_PROXY, AisdkVisionProcessorProxyClass))
#define AISDK_VISION_PROCESSOR_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_AISDK_VISION_PROCESSOR_PROXY, AisdkVisionProcessorProxyClass))
#define IS_AISDK_VISION_PROCESSOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AISDK_VISION_PROCESSOR_PROXY))
#define IS_AISDK_VISION_PROCESSOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_AISDK_VISION_PROCESSOR_PROXY))

typedef struct _AisdkVisionProcessorProxy AisdkVisionProcessorProxy;
typedef struct _AisdkVisionProcessorProxyClass AisdkVisionProcessorProxyClass;
typedef struct _AisdkVisionProcessorProxyPrivate AisdkVisionProcessorProxyPrivate;

struct _AisdkVisionProcessorProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AisdkVisionProcessorProxyPrivate *priv;
};

struct _AisdkVisionProcessorProxyClass
{
  GDBusProxyClass parent_class;
};

GType aisdk_vision_processor_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AisdkVisionProcessorProxy, g_object_unref)
#endif

void aisdk_vision_processor_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AisdkVisionProcessor *aisdk_vision_processor_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
AisdkVisionProcessor *aisdk_vision_processor_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void aisdk_vision_processor_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AisdkVisionProcessor *aisdk_vision_processor_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
AisdkVisionProcessor *aisdk_vision_processor_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_AISDK_VISION_PROCESSOR_SKELETON (aisdk_vision_processor_skeleton_get_type ())
#define AISDK_VISION_PROCESSOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AISDK_VISION_PROCESSOR_SKELETON, AisdkVisionProcessorSkeleton))
#define AISDK_VISION_PROCESSOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_AISDK_VISION_PROCESSOR_SKELETON, AisdkVisionProcessorSkeletonClass))
#define AISDK_VISION_PROCESSOR_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_AISDK_VISION_PROCESSOR_SKELETON, AisdkVisionProcessorSkeletonClass))
#define IS_AISDK_VISION_PROCESSOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AISDK_VISION_PROCESSOR_SKELETON))
#define IS_AISDK_VISION_PROCESSOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_AISDK_VISION_PROCESSOR_SKELETON))

typedef struct _AisdkVisionProcessorSkeleton AisdkVisionProcessorSkeleton;
typedef struct _AisdkVisionProcessorSkeletonClass AisdkVisionProcessorSkeletonClass;
typedef struct _AisdkVisionProcessorSkeletonPrivate AisdkVisionProcessorSkeletonPrivate;

struct _AisdkVisionProcessorSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AisdkVisionProcessorSkeletonPrivate *priv;
};

struct _AisdkVisionProcessorSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType aisdk_vision_processor_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AisdkVisionProcessorSkeleton, g_object_unref)
#endif

AisdkVisionProcessor *aisdk_vision_processor_skeleton_new (void);


G_END_DECLS

#endif /* __VISIONPROCESSORGLUE_H__ */
