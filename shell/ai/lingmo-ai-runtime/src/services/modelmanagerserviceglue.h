/*
 * Copyright 2024 KylinSoft Co., Ltd.
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <https://www.gnu.org/licenses/>.
 */

/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __MODELMANAGERSERVICEGLUE_H__
#define __MODELMANAGERSERVICEGLUE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.lingmo.aisdk.ModelManagerService */

#define TYPE_AISDK_MODEL_MANAGER_SERVICE (aisdk_model_manager_service_get_type ())
#define AISDK_MODEL_MANAGER_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AISDK_MODEL_MANAGER_SERVICE, AisdkModelManagerService))
#define IS_AISDK_MODEL_MANAGER_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AISDK_MODEL_MANAGER_SERVICE))
#define AISDK_MODEL_MANAGER_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_AISDK_MODEL_MANAGER_SERVICE, AisdkModelManagerServiceIface))

struct _AisdkModelManagerService;
typedef struct _AisdkModelManagerService AisdkModelManagerService;
typedef struct _AisdkModelManagerServiceIface AisdkModelManagerServiceIface;

struct _AisdkModelManagerServiceIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_default_remote_model_vendor) (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_remote_model_config) (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_remote_model_config_length) (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_remote_model_list) (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation,
    gint arg_vendor);

  gboolean (*handle_get_remote_model_list_length) (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation,
    gint arg_vendor);

  gboolean (*handle_get_remote_model_vendor_list) (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_remote_model_vendor_list_length) (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_remote_model_config) (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation,
    gint arg_vendor,
    gint arg_modelId);

  gboolean (*handle_set_default_remote_model_vendor) (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation,
    gint arg_vendor);

  gboolean (*handle_set_remote_model_config) (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation,
    gint arg_vendor,
    gint arg_modelId,
    const gchar *arg_json);

};

GType aisdk_model_manager_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *aisdk_model_manager_service_interface_info (void);
guint aisdk_model_manager_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void aisdk_model_manager_service_complete_get_remote_model_vendor_list_length (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation,
    guint length);

void aisdk_model_manager_service_complete_get_remote_model_vendor_list (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation,
    GVariant *list);

void aisdk_model_manager_service_complete_get_remote_model_list_length (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation,
    guint length);

void aisdk_model_manager_service_complete_get_remote_model_list (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation,
    GVariant *list);

void aisdk_model_manager_service_complete_set_remote_model_config (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void aisdk_model_manager_service_complete_remove_remote_model_config (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void aisdk_model_manager_service_complete_get_remote_model_config_length (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation,
    guint length);

void aisdk_model_manager_service_complete_get_remote_model_config (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation,
    const gchar *json);

void aisdk_model_manager_service_complete_get_default_remote_model_vendor (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation,
    gint vendor);

void aisdk_model_manager_service_complete_set_default_remote_model_vendor (
    AisdkModelManagerService *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void aisdk_model_manager_service_call_get_remote_model_vendor_list_length (
    AisdkModelManagerService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_model_manager_service_call_get_remote_model_vendor_list_length_finish (
    AisdkModelManagerService *proxy,
    guint *out_length,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_model_manager_service_call_get_remote_model_vendor_list_length_sync (
    AisdkModelManagerService *proxy,
    guint *out_length,
    GCancellable *cancellable,
    GError **error);

void aisdk_model_manager_service_call_get_remote_model_vendor_list (
    AisdkModelManagerService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_model_manager_service_call_get_remote_model_vendor_list_finish (
    AisdkModelManagerService *proxy,
    GVariant **out_list,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_model_manager_service_call_get_remote_model_vendor_list_sync (
    AisdkModelManagerService *proxy,
    GVariant **out_list,
    GCancellable *cancellable,
    GError **error);

void aisdk_model_manager_service_call_get_remote_model_list_length (
    AisdkModelManagerService *proxy,
    gint arg_vendor,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_model_manager_service_call_get_remote_model_list_length_finish (
    AisdkModelManagerService *proxy,
    guint *out_length,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_model_manager_service_call_get_remote_model_list_length_sync (
    AisdkModelManagerService *proxy,
    gint arg_vendor,
    guint *out_length,
    GCancellable *cancellable,
    GError **error);

void aisdk_model_manager_service_call_get_remote_model_list (
    AisdkModelManagerService *proxy,
    gint arg_vendor,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_model_manager_service_call_get_remote_model_list_finish (
    AisdkModelManagerService *proxy,
    GVariant **out_list,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_model_manager_service_call_get_remote_model_list_sync (
    AisdkModelManagerService *proxy,
    gint arg_vendor,
    GVariant **out_list,
    GCancellable *cancellable,
    GError **error);

void aisdk_model_manager_service_call_set_remote_model_config (
    AisdkModelManagerService *proxy,
    gint arg_vendor,
    gint arg_modelId,
    const gchar *arg_json,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_model_manager_service_call_set_remote_model_config_finish (
    AisdkModelManagerService *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_model_manager_service_call_set_remote_model_config_sync (
    AisdkModelManagerService *proxy,
    gint arg_vendor,
    gint arg_modelId,
    const gchar *arg_json,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void aisdk_model_manager_service_call_remove_remote_model_config (
    AisdkModelManagerService *proxy,
    gint arg_vendor,
    gint arg_modelId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_model_manager_service_call_remove_remote_model_config_finish (
    AisdkModelManagerService *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_model_manager_service_call_remove_remote_model_config_sync (
    AisdkModelManagerService *proxy,
    gint arg_vendor,
    gint arg_modelId,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void aisdk_model_manager_service_call_get_remote_model_config_length (
    AisdkModelManagerService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_model_manager_service_call_get_remote_model_config_length_finish (
    AisdkModelManagerService *proxy,
    guint *out_length,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_model_manager_service_call_get_remote_model_config_length_sync (
    AisdkModelManagerService *proxy,
    guint *out_length,
    GCancellable *cancellable,
    GError **error);

void aisdk_model_manager_service_call_get_remote_model_config (
    AisdkModelManagerService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_model_manager_service_call_get_remote_model_config_finish (
    AisdkModelManagerService *proxy,
    gchar **out_json,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_model_manager_service_call_get_remote_model_config_sync (
    AisdkModelManagerService *proxy,
    gchar **out_json,
    GCancellable *cancellable,
    GError **error);

void aisdk_model_manager_service_call_get_default_remote_model_vendor (
    AisdkModelManagerService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_model_manager_service_call_get_default_remote_model_vendor_finish (
    AisdkModelManagerService *proxy,
    gint *out_vendor,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_model_manager_service_call_get_default_remote_model_vendor_sync (
    AisdkModelManagerService *proxy,
    gint *out_vendor,
    GCancellable *cancellable,
    GError **error);

void aisdk_model_manager_service_call_set_default_remote_model_vendor (
    AisdkModelManagerService *proxy,
    gint arg_vendor,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean aisdk_model_manager_service_call_set_default_remote_model_vendor_finish (
    AisdkModelManagerService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean aisdk_model_manager_service_call_set_default_remote_model_vendor_sync (
    AisdkModelManagerService *proxy,
    gint arg_vendor,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_AISDK_MODEL_MANAGER_SERVICE_PROXY (aisdk_model_manager_service_proxy_get_type ())
#define AISDK_MODEL_MANAGER_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AISDK_MODEL_MANAGER_SERVICE_PROXY, AisdkModelManagerServiceProxy))
#define AISDK_MODEL_MANAGER_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_AISDK_MODEL_MANAGER_SERVICE_PROXY, AisdkModelManagerServiceProxyClass))
#define AISDK_MODEL_MANAGER_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_AISDK_MODEL_MANAGER_SERVICE_PROXY, AisdkModelManagerServiceProxyClass))
#define IS_AISDK_MODEL_MANAGER_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AISDK_MODEL_MANAGER_SERVICE_PROXY))
#define IS_AISDK_MODEL_MANAGER_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_AISDK_MODEL_MANAGER_SERVICE_PROXY))

typedef struct _AisdkModelManagerServiceProxy AisdkModelManagerServiceProxy;
typedef struct _AisdkModelManagerServiceProxyClass AisdkModelManagerServiceProxyClass;
typedef struct _AisdkModelManagerServiceProxyPrivate AisdkModelManagerServiceProxyPrivate;

struct _AisdkModelManagerServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AisdkModelManagerServiceProxyPrivate *priv;
};

struct _AisdkModelManagerServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType aisdk_model_manager_service_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AisdkModelManagerServiceProxy, g_object_unref)
#endif

void aisdk_model_manager_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AisdkModelManagerService *aisdk_model_manager_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
AisdkModelManagerService *aisdk_model_manager_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void aisdk_model_manager_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AisdkModelManagerService *aisdk_model_manager_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
AisdkModelManagerService *aisdk_model_manager_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_AISDK_MODEL_MANAGER_SERVICE_SKELETON (aisdk_model_manager_service_skeleton_get_type ())
#define AISDK_MODEL_MANAGER_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AISDK_MODEL_MANAGER_SERVICE_SKELETON, AisdkModelManagerServiceSkeleton))
#define AISDK_MODEL_MANAGER_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_AISDK_MODEL_MANAGER_SERVICE_SKELETON, AisdkModelManagerServiceSkeletonClass))
#define AISDK_MODEL_MANAGER_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_AISDK_MODEL_MANAGER_SERVICE_SKELETON, AisdkModelManagerServiceSkeletonClass))
#define IS_AISDK_MODEL_MANAGER_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AISDK_MODEL_MANAGER_SERVICE_SKELETON))
#define IS_AISDK_MODEL_MANAGER_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_AISDK_MODEL_MANAGER_SERVICE_SKELETON))

typedef struct _AisdkModelManagerServiceSkeleton AisdkModelManagerServiceSkeleton;
typedef struct _AisdkModelManagerServiceSkeletonClass AisdkModelManagerServiceSkeletonClass;
typedef struct _AisdkModelManagerServiceSkeletonPrivate AisdkModelManagerServiceSkeletonPrivate;

struct _AisdkModelManagerServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AisdkModelManagerServiceSkeletonPrivate *priv;
};

struct _AisdkModelManagerServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType aisdk_model_manager_service_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AisdkModelManagerServiceSkeleton, g_object_unref)
#endif

AisdkModelManagerService *aisdk_model_manager_service_skeleton_new (void);


G_END_DECLS

#endif /* __MODELMANAGERSERVICEGLUE_H__ */
