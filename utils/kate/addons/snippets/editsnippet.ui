<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>EditSnippetBase</class>
 <widget class="QWidget" name="EditSnippetBase">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>500</width>
    <height>525</height>
   </rect>
  </property>
  <property name="minimumSize">
   <size>
    <width>500</width>
    <height>0</height>
   </size>
  </property>
  <layout class="QVBoxLayout" name="verticalLayout">
   <item>
    <widget class="KMessageWidget" name="messageWidget" native="true">
     <property name="visible">
      <bool>true</bool>
     </property>
     <property name="closeButtonVisible" stdset="0">
      <bool>false</bool>
     </property>
    </widget>
   </item>
   <item>
    <layout class="QHBoxLayout" name="horizontalLayout">
     <item>
      <widget class="QLabel" name="snippetName">
       <property name="text">
        <string>Name:</string>
       </property>
      </widget>
     </item>
     <item>
      <widget class="QLineEdit" name="snippetNameEdit">
       <property name="placeholderText">
        <string>will be shown in the completion list</string>
       </property>
      </widget>
     </item>
     <item>
      <widget class="KKeySequenceWidget" name="snippetShortcut"/>
     </item>
    </layout>
   </item>
   <item>
    <widget class="QSplitter" name="splitter">
     <property name="orientation">
      <enum>Qt::Vertical</enum>
     </property>
     <widget class="QTabWidget" name="editorTabs">
      <property name="currentIndex">
       <number>0</number>
      </property>
      <widget class="QWidget" name="snippetTab">
       <attribute name="title">
        <string>&amp;Snippet</string>
       </attribute>
       <layout class="QVBoxLayout" name="verticalLayout_2">
        <item>
         <widget class="QLabel" name="snippetLabel">
          <property name="text">
           <string>The text your snippet will insert into the document. &lt;a href=&quot;A snippet can contain editable fields. They can be cycled by pressing Tab. The following expressions can be used in the template text to create fields: &lt;br&gt;&lt;tt&gt;${field_name}&lt;/tt&gt; creates a simple, editable field. All subsequent occurrences of the same field_name create fields which mirror the contents of the first during editing.&lt;br&gt;&lt;tt&gt;${field_name=default}&lt;/tt&gt; can be used to specify a default value for the field. &lt;tt&gt;default&lt;/tt&gt; can be any JavaScript expression.&lt;br&gt;Use &lt;tt&gt;${field_name=text}&lt;/tt&gt; to specify a fixed string as default value.&lt;br&gt;&lt;tt&gt;${func(other_field1, other_field2, ...)}&lt;/tt&gt; can be used to create a field which evaluates a JavaScript function on each edit and contains its contents. See the Scripts tab for more information.&lt;br&gt;&lt;tt&gt;${cursor}&lt;/tt&gt; can be used to mark the end position of the cursor after everything else was filled in.&quot;&gt;More...&lt;/a&gt;</string>
          </property>
          <property name="textFormat">
           <enum>Qt::RichText</enum>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </item>
       </layout>
      </widget>
      <widget class="QWidget" name="scriptTab">
       <attribute name="title">
        <string>S&amp;cripts</string>
       </attribute>
       <layout class="QVBoxLayout" name="verticalLayout_4">
        <item>
         <widget class="QLabel" name="scriptLabel">
          <property name="text">
           <string>Write down JavaScript helper functions to use in your snippets here. &lt;a href=&quot;All JavaScript functions should return the contents you want to place in a template field as a string.&lt;br&gt;Functions are called in a scope which contains the contents of all editable template fields as local variables. For example in a snippet containing &lt;tt&gt;${field}&lt;/tt&gt;, a variable called &lt;tt&gt;field&lt;/tt&gt; will be present which contains the up-to-date contents of the template field. Those variables can either be used in the function statically or passed as arguments, by using the &lt;tt&gt;${func(field)}&lt;/tt&gt; or &lt;tt&gt;${field2=func(field)}&lt;/tt&gt; syntax in the snippet string.&lt;br&gt;You can use the kate scripting API to get the selected text, full text, file name and more by using the appropriate methods of the &lt;tt&gt;document&lt;/tt&gt; and &lt;tt&gt;view&lt;/tt&gt; objects. Refer to the scripting API documentation for more information.&quot;&gt;More...&lt;/a&gt;</string>
          </property>
          <property name="wordWrap">
           <bool>true</bool>
          </property>
         </widget>
        </item>
       </layout>
      </widget>
     </widget>
     <widget class="QWidget" name="testWidget" native="true">
      <layout class="QVBoxLayout" name="verticalLayout_3">
       <item>
        <layout class="QHBoxLayout" name="horizontalLayout_4">
         <item>
          <widget class="QPushButton" name="dotest_button">
           <property name="text">
            <string>Test this snippet</string>
           </property>
          </widget>
         </item>
         <item>
          <spacer name="horizontalSpacer">
           <property name="orientation">
            <enum>Qt::Horizontal</enum>
           </property>
           <property name="sizeHint" stdset="0">
            <size>
             <width>40</width>
             <height>20</height>
            </size>
           </property>
          </spacer>
         </item>
        </layout>
       </item>
      </layout>
     </widget>
    </widget>
   </item>
   <item>
    <widget class="QDialogButtonBox" name="buttons">
     <property name="standardButtons">
      <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>
     </property>
    </widget>
   </item>
  </layout>
 </widget>
 <customwidgets>
  <customwidget>
   <class>KKeySequenceWidget</class>
   <extends>QWidget</extends>
   <header>kkeysequencewidget.h</header>
  </customwidget>
  <customwidget>
   <class>KMessageWidget</class>
   <extends>QWidget</extends>
   <header>kmessagewidget.h</header>
  </customwidget>
 </customwidgets>
 <resources/>
 <connections/>
</ui>
