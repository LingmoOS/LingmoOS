# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/home/lingmo/project/nx_pkg/LingmoOS/utils/kate/addons/snippets/editsnippet.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_EditSnippetBase(object):
    def setupUi(self, EditSnippetBase):
        EditSnippetBase.setObjectName("EditSnippetBase")
        EditSnippetBase.resize(500, 525)
        EditSnippetBase.setMinimumSize(QtCore.QSize(500, 0))
        self.verticalLayout = QtWidgets.QVBoxLayout(EditSnippetBase)
        self.verticalLayout.setObjectName("verticalLayout")
        self.messageWidget = KMessageWidget(EditSnippetBase)
        self.messageWidget.setVisible(True)
        self.messageWidget.setProperty("closeButtonVisible", False)
        self.messageWidget.setObjectName("messageWidget")
        self.verticalLayout.addWidget(self.messageWidget)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.snippetName = QtWidgets.QLabel(EditSnippetBase)
        self.snippetName.setObjectName("snippetName")
        self.horizontalLayout.addWidget(self.snippetName)
        self.snippetNameEdit = QtWidgets.QLineEdit(EditSnippetBase)
        self.snippetNameEdit.setObjectName("snippetNameEdit")
        self.horizontalLayout.addWidget(self.snippetNameEdit)
        self.snippetShortcut = KKeySequenceWidget(EditSnippetBase)
        self.snippetShortcut.setObjectName("snippetShortcut")
        self.horizontalLayout.addWidget(self.snippetShortcut)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.splitter = QtWidgets.QSplitter(EditSnippetBase)
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setObjectName("splitter")
        self.editorTabs = QtWidgets.QTabWidget(self.splitter)
        self.editorTabs.setObjectName("editorTabs")
        self.snippetTab = QtWidgets.QWidget()
        self.snippetTab.setObjectName("snippetTab")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.snippetTab)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.snippetLabel = QtWidgets.QLabel(self.snippetTab)
        self.snippetLabel.setTextFormat(QtCore.Qt.RichText)
        self.snippetLabel.setWordWrap(True)
        self.snippetLabel.setObjectName("snippetLabel")
        self.verticalLayout_2.addWidget(self.snippetLabel)
        self.editorTabs.addTab(self.snippetTab, "")
        self.scriptTab = QtWidgets.QWidget()
        self.scriptTab.setObjectName("scriptTab")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.scriptTab)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.scriptLabel = QtWidgets.QLabel(self.scriptTab)
        self.scriptLabel.setWordWrap(True)
        self.scriptLabel.setObjectName("scriptLabel")
        self.verticalLayout_4.addWidget(self.scriptLabel)
        self.editorTabs.addTab(self.scriptTab, "")
        self.testWidget = QtWidgets.QWidget(self.splitter)
        self.testWidget.setObjectName("testWidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.testWidget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.dotest_button = QtWidgets.QPushButton(self.testWidget)
        self.dotest_button.setObjectName("dotest_button")
        self.horizontalLayout_4.addWidget(self.dotest_button)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem)
        self.verticalLayout_3.addLayout(self.horizontalLayout_4)
        self.verticalLayout.addWidget(self.splitter)
        self.buttons = QtWidgets.QDialogButtonBox(EditSnippetBase)
        self.buttons.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttons.setObjectName("buttons")
        self.verticalLayout.addWidget(self.buttons)

        self.retranslateUi(EditSnippetBase)
        self.editorTabs.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(EditSnippetBase)

    def retranslateUi(self, EditSnippetBase):
        _translate = QtCore.QCoreApplication.translate
        self.snippetName.setText(_translate("EditSnippetBase", "Name:"))
        self.snippetNameEdit.setPlaceholderText(_translate("EditSnippetBase", "will be shown in the completion list"))
        self.snippetLabel.setText(_translate("EditSnippetBase", "The text your snippet will insert into the document. <a href=\"A snippet can contain editable fields. They can be cycled by pressing Tab. The following expressions can be used in the template text to create fields: <br><tt>${field_name}</tt> creates a simple, editable field. All subsequent occurrences of the same field_name create fields which mirror the contents of the first during editing.<br><tt>${field_name=default}</tt> can be used to specify a default value for the field. <tt>default</tt> can be any JavaScript expression.<br>Use <tt>${field_name=text}</tt> to specify a fixed string as default value.<br><tt>${func(other_field1, other_field2, ...)}</tt> can be used to create a field which evaluates a JavaScript function on each edit and contains its contents. See the Scripts tab for more information.<br><tt>${cursor}</tt> can be used to mark the end position of the cursor after everything else was filled in.\">More...</a>"))
        self.editorTabs.setTabText(self.editorTabs.indexOf(self.snippetTab), _translate("EditSnippetBase", "&Snippet"))
        self.scriptLabel.setText(_translate("EditSnippetBase", "Write down JavaScript helper functions to use in your snippets here. <a href=\"All JavaScript functions should return the contents you want to place in a template field as a string.<br>Functions are called in a scope which contains the contents of all editable template fields as local variables. For example in a snippet containing <tt>${field}</tt>, a variable called <tt>field</tt> will be present which contains the up-to-date contents of the template field. Those variables can either be used in the function statically or passed as arguments, by using the <tt>${func(field)}</tt> or <tt>${field2=func(field)}</tt> syntax in the snippet string.<br>You can use the kate scripting API to get the selected text, full text, file name and more by using the appropriate methods of the <tt>document</tt> and <tt>view</tt> objects. Refer to the scripting API documentation for more information.\">More...</a>"))
        self.editorTabs.setTabText(self.editorTabs.indexOf(self.scriptTab), _translate("EditSnippetBase", "S&cripts"))
        self.dotest_button.setText(_translate("EditSnippetBase", "Test this snippet"))
from kkeysequencewidget import KKeySequenceWidget
from kmessagewidget import KMessageWidget
