<appendix id="regular-expressions">
<appendixinfo>
<authorgroup>
<author
>&Anders.Lund; &Anders.Lund.mail;</author>
<othercredit role="translator"
> <firstname
>Thomas</firstname
> <surname
>Diehl</surname
> <affiliation
> <address
><email
>thd@kde.org</email
></address
> </affiliation
> <contrib
>GUI-Übersetzung</contrib
></othercredit
> <othercredit role="translator"
> <firstname
>Matthias</firstname
><surname
>Schulz</surname
> <affiliation
> <address
><email
>matthias.schulz@kdemail.net</email
></address
> </affiliation
> <contrib
>Deutsche Übersetzung</contrib
></othercredit
> 
</authorgroup>
</appendixinfo>

<title
>Reguläre Ausdrücke</title>

<synopsis
>Dieser Anhang enthält eine kurze, aber hoffentlich ausreichende Einführung in die Welt der <emphasis
>regulären Ausdrücke</emphasis
>. Es werden reguläre Ausdrücke in der Form dokumentiert, in der sie in &kappname; anwendbar sind, die aber nicht kompatibel &eg; zu der in Perl oder in <command
>grep</command
> verwendeten Form ist.</synopsis>

<sect1>

<title
>Einleitung</title>

<para
><emphasis
>Reguläre Ausdrücke</emphasis
> stellen eine Möglichkeit zur Verfügung, vielleicht zu suchende Teile von Text in einer Form zu beschreiben, die von einer kleinen Software verstanden wird, sodass diese feststellen kann, ob die Beschreibung zutrifft und sogar Text zur späteren Verwendung speichern kann.</para>

<para
>Ein Beispiel: Nehmen Sie an, Sie wollen eine Text nach Abschnitten durchsuchen, die mit einem der Namen <quote
>Henrik</quote
> oder <quote
>Pernille</quote
> beginnen, gefolgt von einer Form des Verbs <quote
>say</quote
>.</para>

<para
>Mit einer normalen Suche würden Sie anfangen, nach dem ersten Namen <quote
>Henrik</quote
> zu suchen, vielleicht gefolgt von <quote
>sa</quote
>, also <userinput
>Henrik sa</userinput
>. Bei dieser Suche würden Sie alle Übereinstimmungen überspringen müssen, die nicht am Anfang eines Abschnittes stehen und die, hinter denen ein <quote
>sa</quote
> steht, aber kein <quote
>says</quote
>, <quote
>said</quote
> und so weiter. Dann natürlich das Ganze von vorn für den nächsten Namen ...</para>

<para
>Mit regulären Ausdrücken können Sie dies mit einer einzelnen Suche erreichen und das noch genauer.</para>

<para
>Um dies zu erreichen, definieren reguläre Ausdrücke Regeln zum Ausdrücken von Details einer zu suchenden Zeichenfolge. Unser Beispiel, das wir wie folgt ausdrücken können: <quote
>Eine Zeile mit <quote
>Henrik</quote
> oder <quote
>Pernille</quote
> beginnend (eventuell nach bis zu 4 Leerzeichen oder Tabulatoren) gefolgt von einem Leerzeichen gefolgt von <quote
>sa</quote
> und dann entweder <quote
>ys</quote
> oder <quote
>id</quote
></quote
> kann so als regulärer Ausdruck geschrieben werden:</para
> <para
><userinput
>^[ \t]{0,4}(Henrik|Pernille) sa(ys|id)</userinput
></para>

<para
>Das oben angegebene Beispiel zeigt alle vier Hauptkonzepte von regulären Ausdrücke, speziell: </para>

<itemizedlist>
<listitem
><para
>Muster</para
></listitem>
<listitem
><para
>Behauptungen</para
></listitem>
<listitem
><para
>Quantifiers</para
></listitem>
<listitem
><para
>Rückwärtsreferenzen</para
></listitem>
</itemizedlist>

<para
>Das Hochzeichen (<literal
>^</literal
>) am Anfang des Ausdruckes kennzeichnet eine Behauptung, die nur dann wahr ist, wenn sich der folgende Text am Anfang einer Zeile befindet.</para>

<para
>Die Zeichenfolgen <literal
>[ \t]</literal
> und  <literal
>(Henrik|Pernille) sa(ys|id)</literal
> sind Muster. Das erste ist ein <emphasis
>Zeichen</emphasis
> das entweder auf ein Leerzeichen oder ein Tabulatorzeichen zutrifft, das andere enthält als erstes ein Untermuster, das entweder auf <literal
>Henrik</literal
> <emphasis
>oder</emphasis
> <literal
>Pernille</literal
> zutrifft, dann ein Muster, das exakt auf <literal
> sa</literal
> zutrifft und zum Schluss wieder ein Untermuster, das auf <literal
>ys</literal
>, <emphasis
>oder</emphasis
> <literal
>id</literal
> zutrifft.</para>

<para
>Die Angabe <literal
>{0,4}</literal
> ist ein Quantifizierer, der sagt: <quote
>von 0 bis 4 mal das vorher spezifizierte</quote
>.</para>

<para
>Weil Software für reguläre Ausdrücke, die das Konzept von <emphasis
>Referenzen</emphasis
> den gesamten zutreffenden Teil des Textes wie auch in Klammern eingeschlossene Untermuster sichert, können Sie diese gefundenen Textstellen (diese sind nach dem Suchen mit einem regulären Ausdruck in einem Textdokument in einem Editor meistens ausgewählt) oder den gefundenen Namen oder den letzten Teil des Verbs weiterverwenden, die <emphasis
>Referenzen</emphasis
> ermöglichen den Zugriff auf diese.</para>

<para
>Zusammengefasst: die regulären Ausdrücke treffen zu, wo wir wollten, und nur dort.</para>

<para
>Die folgenden Abschnitte beschreiben im einzelnen, wie Muster, Zeichenklassen, Behauptungen, Quantifizierer und Rückwärtsreferenzen benutzt werden und der letzte Abschnitt gibt einige nützliche Beispiele.</para>

</sect1>

<sect1 id="regex-patterns">

<title
>Muster</title>

<para
>Muster bestehen aus Zeichenfolgen und Zeichenklassen. Muster können Untermuster enthalten, diese sind in Klammern eingeschlossene Muster.</para>

<sect2>
<title
>Steuerzeichen</title>

<para
>In Mustern und in Zeichenklassen haben einige Zeichen spezielle Bedeutungen. Um diese Steuerzeichen zu finden, müssen sie als solche markiert werden.</para>

<para
>Dies geschieht durch das Voranstellen eines Rückwärtsschrägstriches (<literal
>\</literal
>) vor das Zeichen.</para>


<para
>Die Software ignoriert die Kennzeichnung als Steuerzeichen von Zeichen, die in dem betrachteten Zusammenhang keine Steuerzeichen sind. So ist &eg; die Angabe von (<userinput
>\j</userinput
>), also ein <quote
>j</quote
> als Steuerzeichen markiert, kein Problem. Wenn Sie Zweifel haben, ob ein Zeichen eine spezielle Bedeutung hat, können Sie dies ohne Bedenken als Steuerzeichen markieren.</para>

<para
>Selbstverständlich können Sie auch den Rückwärtsschrägstrich als Steuerzeichen markieren, dies geschieht durch <userinput
>\\</userinput
>.</para>

</sect2>

<sect2>
<title
>Zeichenklassen und Abkürzungen</title>

<para
>Eine <emphasis
>Zeichenklasse</emphasis
> ist ein Ausdruck, der auf einen bestimmten Satz von Zeichen zutrifft. Zeichenklassen werden in regulären Ausdrücken durch Setzen der zugelassenen Zeichen in eckige Klammern <literal
>[]</literal
> oder durch Nutzen einer der im Folgenden beschriebenen abgekürzten Klassen definiert.</para>

<para
>Einfache Zeichenklassen enthalten nur ein oder mehrere Zeichen, &eg; <userinput
>[abc]</userinput
> (zutreffend auf einen der Buchstaben <quote
>a</quote
>, <quote
>b</quote
> oder <quote
>c</quote
>) oder <userinput
>[0123456789]</userinput
> (zutreffend auf eine Zahl).</para>

<para
>Da Buchstaben und Zahlen eine festgelegte Reihenfolge haben, können diese durch Angabe des Bereiches :abgekürzt werden: <userinput
>[a-c]</userinput
> entspricht <userinput
>[abc]</userinput
> und <userinput
>[0-9]</userinput
> entspricht <userinput
>[0123456789]</userinput
>. Diese Angaben können auch kombiniert werden, zum Beispiel trifft <userinput
>[a-fynot1-38]</userinput
> auf die folgenden Zeichen zu: <quote
>a</quote
>,<quote
>b</quote
>,<quote
>c</quote
>,<quote
>d</quote
>, <quote
>e</quote
>,<quote
>f</quote
>,<quote
>y</quote
>,<quote
>n</quote
>,<quote
>o</quote
>,<quote
>t</quote
>, <quote
>1</quote
>,<quote
>2</quote
>,<quote
>3</quote
> oder <quote
>8</quote
>.</para>

<para
>Da Großbuchstaben von Kleinbuchstaben unterschieden werden, müssen Sie zur Angabe von <quote
>a</quote
> oder <quote
>b</quote
> ohne Unterscheidung von Groß- und Kleinschreibung <userinput
>[aAbB]</userinput
> angeben.</para>

<para
>Die Erzeugung von <quote
>negativen</quote
> Klassen, die auf <quote
>alles außer</quote
> zutreffen, erfolgt durch das Hoch-Zeichen (<literal
>^</literal
>) am Anfang der Klassendefinition: </para>

<para
><userinput
>[^abc]</userinput
> trifft auf alle Zeichen <emphasis
>außer</emphasis
> <quote
>a</quote
>, <quote
>b</quote
> oder <quote
>c</quote
> zu.</para>

<para
>Zusätzlich zu den druckbaren Zeichen sind noch einige Abkürzungen definiert, um die Verwendung ein wenig einfacher zu machen: <variablelist>

<varlistentry>
<term
><userinput
>\a</userinput
></term>
<listitem
><para
>Trifft auf das &ASCII;-Beep-Zeichen zu (BEL, 0x07).</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\f</userinput
></term>
<listitem
><para
>Trifft auf das &ASCII;Seitenvorschub-Zeichen zu (FF, 0x0C).</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\n</userinput
></term>
<listitem
><para
>Trifft auf das &ASCII;-Zeilenvorschub-Zeichen zu (LF, 0x0A, Unix newline).</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\r</userinput
></term>
<listitem
><para
>Trifft auf das &ASCII;-Wagenrücklauf-Zeichen zu (CR, 0x0D).</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\t</userinput
></term>
<listitem
><para
>Trifft auf das &ASCII;-Zeichen Horizontaltabulator zu (HT, 0x09).</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\v</userinput
></term>
<listitem
><para
>Trifft auf das &ASCII;-Zeichen Vertikaltabulator zu (VT, 0x0B).</para
></listitem>
</varlistentry>
<varlistentry>
<term
><userinput
>\xhhhh</userinput
></term>

<listitem
><para
>Dieser Ausdruck trifft auf das Unicodezeichen mit dem Code mit der Hexadezimalzahl hhhh (zwischen 0x0000 und 0xFFFF) zu. \0ooo (&ie;, \zero ooo) trifft auf das &ASCII;-/Latin-1-Zeichen mit dem Code mit der Oktalzahl ooo (zwischen 0 und 0377) zu.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>.</userinput
> (Punkt)</term>
<listitem
><para
>Trifft auf jedes Zeichen einschließlich Zeilenvorschub zu.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\d</userinput
></term>
<listitem
><para
>Trifft auf eine Ziffer zu. Entspricht <literal
>[0-9]</literal
>.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\D</userinput
></term>
<listitem
><para
>Trifft auf ein Zeichen, das keine Ziffer ist, zu. Entspricht <literal
>[^0-9]</literal
> oder <literal
>[^\d]</literal
>.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\s</userinput
></term>
<listitem
><para
>Trifft auf ein Zeichen, das einen Zwischenraum angibt, zu. Praktisch entspricht dies <literal
>[ \t\n\r]</literal
>.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\S</userinput
></term>
<listitem
><para
>Trifft auf ein Zeichen, das keinen Zwischenraum angibt, zu. Praktisch entspricht dies <literal
>[^ \t\n\r]</literal
> oder <literal
>[^\s]</literal
>.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\w</userinput
></term>
<listitem
><para
>Trifft auf jedes <quote
>druckbares Zeichen</quote
> zu - in diesem Fall Buchstaben, Ziffern oder Unterstrich. Entspricht <literal
>[a-zA-Z0-9]</literal
></para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\W</userinput
></term>
<listitem
><para
>Trifft auf alle nicht druckbaren Zeichen außer Buchstaben, Ziffern und Unterstrich zu. Entspricht <literal
>[^a-zA-Z0-9]</literal
> oder <literal
>[^\w]</literal
></para
></listitem>
</varlistentry>


</variablelist>

</para>

<para
>Die <emphasis
>POSIX-Notation von Klassen</emphasis
>, <userinput
>[:&lt;class name&gt;:]</userinput
> wird auch unterstützt. Zum Beispiel entspricht <userinput
>[:digit:]</userinput
>  <userinput
>\d</userinput
> und <userinput
>[:space:]</userinput
>  <userinput
>\s</userinput
>. Die vollständige Liste der POSIX-Zeichenklassen finden Sie <ulink url="https://www.regular-expressions.info/posixbrackets.html"
>hier</ulink
>.</para>

<para
>Die abgekürzten Klassen können in selbstdefinierte Klassen eingefügt werden, &eg; kann für die Klasse <quote
>druckbares Zeichen, Leerzeichen oder Punkt</quote
> der Ausdruck <userinput
>[\w \.]</userinput
> verwendet werden.</para>

<sect3>
<title
>Zeichen mit speziellen Bedeutungen (Steuerzeichen) innerhalb von Zeichenklassen</title>

<para
>Die folgenden Zeichen haben spezielle Bedeutungen innerhalb des Ausdrucks in eckigen Klammern <quote
>[]</quote
>, diese müssen als Steuerzeichen gekennzeichnet werden, damit sie als Zeichen in die Klasse einbezogen werden:</para>

<variablelist>
<varlistentry>
<term
><userinput
>]</userinput
></term>
<listitem
><para
>Beendet die Definition der Zeichenklasse. Dieses Zeichen braucht nicht als Steuerzeichen gekennzeichnet werden, wenn es das erste Zeichen in einer Zeichenklassendefinition (nach dem Zeichen <quote
>[</quote
> oder <quote
>^</quote
>) ist.</para
></listitem>
</varlistentry>
<varlistentry>
<term
><userinput
>^</userinput
> (Hoch-Zeichen)</term>
<listitem
><para
>Bezeichnet eine negative Klasse, wenn es das erste Zeichen in einer Zeichenklassendefinition ist. Wenn es als druckbares Zeichen behandelt werden soll, muss es als Steuerzeichen gekennzeichnet werden, wenn es das erste Zeichen in einer Zeichenklassendefinition ist. </para
></listitem>
</varlistentry>
<varlistentry>
<term
><userinput
>-</userinput
> (Bindestrich)</term>
<listitem
><para
>Kennzeichnet einen logischen Bereich. Wenn es als Zeichen behandelt werden soll, muss es als Steuerzeichen gekennzeichnet werden.</para
></listitem>
</varlistentry>
<varlistentry>
<term
><userinput
>\</userinput
> (Rückwärtsschrägstrich)</term>
<listitem
><para
>Das Zeichen zum Kennzeichnen eines Steuerzeichens. Dieses Zeichen muss immer als Steuerzeichen gekennzeichnet werden, wenn es als druckbares Zeichen behandelt werden soll.</para
></listitem>
</varlistentry>

</variablelist>

</sect3>

</sect2>

<sect2>

<title
>Alternativen: trifft zu wenn <quote
>eins von</quote
></title>

<para
>Wenn ein erkanntes Muster von mehreren Mustern als zutreffend erkannt werden soll, dann müssen Sie diese Muster durch einen senkrechten Strich <literal
>|</literal
> getrennt angeben.</para>

<para
>Der Ausdruck <userinput
>John|Harry</userinput
> wird &eg; als zutreffend erkannt, wenn entweder <quote
>John</quote
> oder <quote
>Harry</quote
> gefunden wird.</para>

</sect2>

<sect2>

<title
>Untermuster</title>

<para
><emphasis
>Untermuster</emphasis
> sind in Klammern eingeschlossene Muster, die in regulären Ausdrücken viele Verwendungen haben.</para>

<sect3>

<title
>Angabe von Alternativen</title>

<para
>Sie können Untermuster verwenden, um Gruppen von Alternativen in einem Muster anzugeben. Die Alternativen werden durch den senkrechten Strich <literal
>|</literal
> getrennt.</para>

<para
>Um eines der Worte <quote
>int</quote
>, <quote
>float</quote
> oder <quote
>double</quote
> zu erkennen, geben Sie <userinput
>int|float|double</userinput
> an. Wenn eines der Worte nur dann erkannt werden soll, wenn nach dem Wort Zwischenraum und dann Buchstaben folgen, dann verwenden Sie den folgenden Ausdruck mit den Worten im Untermuster: <userinput
>(int|float|double)\s+\w+</userinput
>.</para>

</sect3>

<sect3 id="regex-capturing">

<title
>Speichern von gefundenem Text (Rückwärtsreferenzen)</title>

<para
>Wenn Sie einen Rückverweis verwenden möchten, benutzen Sie ein Untermuster <userinput
>(PATTERN)</userinput
>, um den gewünschten Teil des Musters zu merken. Um zu verhindern, dass das Untermuster gemerkt wird, verwenden Sie eine nicht speichernde Gruppe <userinput
>(?:PATTERN)</userinput
>.</para>

<para
>Wenn Sie &eg; das zweifache Auftreten des selben Wortes getrennt durch ein Komma und eventuell Zwischenraum finden wollen, dann würden Sie <userinput
>(\w+),\s*\1</userinput
> verwenden. Das Untermuster <literal
>\w+</literal
> findet ein Stück aus druckbaren Zeichen. Der gesamte Ausdruck trifft zu, wenn diese von einem Komma und keinem oder mehreren Zwischenraumzeichen und dann von einem gleichen Stück von Zeichen gefolgt werden. (Der Ausdruck <literal
>\1</literal
> verweist auf das <emphasis
>erste in Klammern angegebene Untermuster</emphasis
>.)</para>

<note>
<para
>Um Mehrdeutigkeiten bei Ausdrücken wie <userinput
>\1</userinput
> und einigen nachfolgenden Ziffern wie &eg; <userinput
>\12</userinput
> - 12tes Untermuster oder nur das erste Untermuster mit <userinput
>2</userinput
> zu vermeiden, wird die Syntax <userinput
>\{12}</userinput
>  für Untermuster aus mehreren Ziffern verwendet.</para>
<para
>Beispiele:</para>
<itemizedlist>
<listitem
><para
><userinput
>\{12}1</userinput
> bedeutet <quote
>Untermuster 12 benutzen</quote
></para
></listitem>
<listitem
><para
><userinput
>\123</userinput
> bedeutet <quote
>1 ist das Suchmuster und 23 normaler Text</quote
></para
></listitem>
</itemizedlist>

</note>

<!-- <para
>See also <link linkend="backreferences"
>Back references</link
>.</para
> -->

</sect3>

<sect3 id="lookahead-assertions">
<title
>Vorwärtsgerichtete Behauptungen</title>

<para
>Eine vorwärtsgerichtete Behauptung ist ein Untermuster, das mit <literal
>?=</literal
> oder <literal
>?!</literal
> anfängt.</para>

<para
>Der Ausdruck <userinput
>Bill(?! Gates)</userinput
> besagt, dass <quote
>Bill</quote
> gefunden wird, aber nur wenn nicht von <quote
> Gates</quote
> gefolgt. Dies findet <quote
>Bill Clinton</quote
> oder <quote
>Billy the kid</quote
>, aber ignoriert stillschweigend die andere Übereinstimmung.</para>

<para
>Untermuster, die für Behauptungen benutzt werden, werden nicht gespeichert.</para>

<para
>Sehen Sie auch unter <link linkend="assertions"
>Behauptungen</link
> nach.</para>

</sect3>

<sect3 id="lookbehind-assertions">
<title
>Rückwärtsgerichtete Behauptungen</title>

<para
>Eine rückwärtsgerichtete Behauptung ist ein Untermuster, das entweder mit <literal
>?&lt;=</literal
> oder mit <literal
>?&lt;!</literal
> anfängt.</para>

<para
>Eine Rückwärtsreferenz hat die gleiche Wirkung wie eine Vorwärtsreferenz,  funktioniert aber rückwärts. Um zum Beispiel die Zeichenfolge <quote
>fruit</quote
> zu finden, aber nur, wenn nicht <quote
>grape</quote
> vorangestellt ist, könnten Sie diesen Ausdruck verwenden: <userinput
>(?&lt;!grape)fruit</userinput
>.</para>

<para
>Untermuster, die für Behauptungen benutzt werden, werden nicht gespeichert.</para>

<para
>Sehen Sie auch unter <link linkend="assertions"
>Behauptungen</link
> nach.</para>

</sect3>

</sect2>

<sect2 id="special-characters-in-patterns">
<title
>Zeichen mit speziellen Bedeutungen (Steuerzeichen) innerhalb von Mustern</title>

<para
>Die folgenden Zeichen haben spezielle Bedeutungen innerhalb eines Musters, diese müssen als Steuerzeichen gekennzeichnet werden, damit sie als Zeichen behandelt werden: <variablelist>

<varlistentry>
<term
><userinput
>\</userinput
> (Rückwärtsschrägstrich)</term>
<listitem
><para
>Das Escape-Zeichen.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>^</userinput
> (Hoch-Zeichen)</term>
<listitem
><para
>Kennzeichnet den Anfang der Zeichenfolge.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>$</userinput
></term>
<listitem
><para
>Kennzeichnet das Ende der Zeichenfolge.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>()</userinput
> (linke und rechte Klammer)</term>
<listitem
><para
>Kennzeichnet Untermuster.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>{}</userinput
> (linke und rechte geschweifte Klammer)</term>
<listitem
><para
>Kennzeichnet numerische Quantifizierer.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>[]</userinput
> (linke und rechte eckige Klammer)</term>
<listitem
><para
>Kennzeichnet Zeichenklassen.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>|</userinput
> (senkrechter Strich)</term>
<listitem
><para
>Logisches ODER. Trennt Alternativen.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>+</userinput
> (Pluszeichen)</term>
<listitem
><para
>Quantifizierer, steht für eins oder mehrere.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>*</userinput
> (Stern)</term>
<listitem
><para
>Quantifizierer, steht für kein oder mehrere.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>?</userinput
> (Fragezeichen)</term>
<listitem
><para
>Ein optionales Zeichen. Kann als Quantifizierer; 0- oder 1-mal gedeutet werden.</para
></listitem>
</varlistentry>

</variablelist>

</para>

</sect2>

</sect1>

<sect1 id="quantifiers">
<title
>Quantifizierer</title>

<para
><emphasis
>Quantifizierer</emphasis
> gestatten dem regulären Ausdruck die Angabe einer Anzahl von entweder Zeichen, Zeichenklassen oder Untermustern.</para>

<para
><emphasis
>Quantifizierer</emphasis
> werden in geschweifte Klammern (<literal
>{</literal
> und <literal
>}</literal
>) eingeschlossen und haben die Form <literal
>{[minimale Anzahl][,[maximale Anzahl]]}</literal
> </para>

<para
>Die Benutzung ist am besten an Beispielen erklärt: <variablelist>

<varlistentry>
<term
><userinput
>{1}</userinput
></term>
<listitem
><para
>Genau einmaliges Auftreten</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>{0,1}</userinput
></term>
<listitem
><para
>Kein oder einmaliges Auftreten</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>{,1}</userinput
></term>
<listitem
><para
>Kein oder einmaliges Auftreten (Kurzform)</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>{5,10}</userinput
></term>
<listitem
><para
>Mindestens 5- bis maximal 10-maliges Auftreten</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>{5,}</userinput
></term>
<listitem
><para
>Mindestens 5-maliges Auftreten.</para
></listitem>
</varlistentry>

</variablelist>

</para>

<para
>Zusätzlich gibt es einige Abkürzungen: <variablelist>

<varlistentry>
<term
><userinput
>*</userinput
> (Stern)</term>
<listitem
><para
>entspricht <literal
>{0,}</literal
> findet jede Anzahl des Auftretens.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>+</userinput
> (Pluszeichen)</term>
<listitem
><para
>entspricht <literal
>{1,}</literal
> findet mindestens einmaliges Auftreten.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>?</userinput
> (Fragezeichen)</term>
<listitem
><para
>entspricht <literal
>{0,1}</literal
> findet kein oder einmaliges Auftreten.</para
></listitem>
</varlistentry>

</variablelist>

</para>

<sect2>

<title
>Gier</title>

<para
>Wenn Quantifizierer ohne Maximum verwendet werden, dann findet der reguläre Ausdruck so viel wie möglich vom Suchtext, dieses Verhalten wird auch als <emphasis
>gierig</emphasis
> bezeichnet.</para>

<para
>Moderne Software für reguläre Ausdrücke stellt die Möglichkeit bereit, das <quote
>gierige Verhalten auszuschalten</quote
>, aber in einer grafischen Umgebung ist es das Interface, das Ihnen Zugriff auf diese Möglichkeit bereitstellen muss. Ein Dialogfenster zum Suchen kann &eg; eine Option mit dem Namen <quote
>Minimales Finden</quote
> bereitstellen, es sollte auch anzeigen, ob <quote
>gieriges Verhalten</quote
> Standard ist.</para>

</sect2>

<sect2>
<title
>In Beispielen</title>

<para
>Hier sind einige Beispiele der Verwendung von Quantifizierern:</para>

<variablelist>

<varlistentry>
<term
><userinput
>^\d{4,5}\s</userinput
></term>
<listitem
><para
>Trifft auf die Zahlen in <quote
>1234 go</quote
> und <quote
>12345 now</quote
> zu, aber nicht die in für <quote
>567 eleven</quote
> oder <quote
>223459 somewhere</quote
>.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\s+</userinput
></term>
<listitem
><para
>Trifft auf ein oder mehrere Zwischenraumzeichen zu.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>(bla){1,}</userinput
></term>
<listitem
><para
>Trifft zu für alle in <quote
>blablabla</quote
> und das <quote
>bla</quote
> in <quote
>blackbird</quote
> oder <quote
>tabla</quote
>.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>/?&gt;</userinput
></term>
<listitem
><para
>Trifft für das <quote
>/&gt;</quote
> in <quote
>&lt;closeditem/&gt;</quote
> sowie auch für das <quote
>&gt;</quote
> in <quote
>&lt;openitem&gt;</quote
> zu.</para
></listitem>
</varlistentry>

</variablelist>

</sect2>

</sect1>

<sect1 id="assertions">
<title
>Behauptungen</title>

<para
><emphasis
>Behauptungen</emphasis
> erweitern den regulären Ausdruck so, dass er nur unter bestimmten Bedingungen zutrifft.</para>

<para
>Eine Behauptung braucht kein Zeichen um zuzutreffen, diese ermittelt vielmehr die Umgebung einer eventuellen Übereinstimmung bevor dieser bestätigt wird. Die Behauptung <emphasis
>Wortgrenze</emphasis
> &eg; versucht nicht, ein nichtdruckbares Zeichen neben einem druckbaren Zeichen zu finden, sondern stellt fest, dass dort KEIN druckbares Zeichen ist. Das heißt, dass dieses &eg; auch am Ende einer Zeichenfolge zutrifft. </para>

<para
>Einige Behauptungen haben ein Muster das gefunden werden muss, aber der zutreffende Teil des Suchtextes dieses Musters wird nicht Teil des Ergebnisses des gesamten regulären Ausdrucks.</para>

<para
>Reguläre Ausdrücke wie hier beschrieben unterstützen die folgenden Behauptungen: <variablelist>

<varlistentry>
<term
><userinput
>^</userinput
> (Hochzeichen: Anfang der Zeichenfolge)</term>
<listitem
><para
>Trifft auf den Anfang des zu suchenden Textes zu.</para
> <para
>Der Ausdruck <userinput
>^Peter</userinput
> trifft auf <quote
>Peter</quote
> im Text <quote
>Peter, hey!</quote
> zu, aber nicht auf <quote
>Hey, Peter!</quote
>. </para
> </listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>$</userinput
> (Ende der Zeichenfolge)</term>
<listitem
><para
>Trifft auf das Ende des Suchtextes zu.</para>

<para
>Der Ausdruck <userinput
>you\?$</userinput
> trifft auf das letzte <quote
>you</quote
> in <quote
>You didn‚t do that, did you?</quote
> zu, aber nirgendwo in <quote
>You didn‘t do that, right?</quote
>.</para>

</listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\b</userinput
> (Wortgrenze)</term>
<listitem
><para
>Trifft zu, wenn ein druckbares Zeichen auf der einen Seite aber keines auf der anderen Seite ist.</para>
<para
>Dieser Ausdruck dient zum Finden von Wortenden, wenn nach beiden Enden gesucht wird, zum Finden des ganzen (einzelnstehenden) Wortes. Der Ausdruck <userinput
>\bin\b</userinput
> trifft auf das einzelnstehende <quote
>in</quote
> in <quote
>He came in through the window</quote
> zu, aber nicht auf das <quote
>in</quote
> in <quote
>window</quote
>.</para
></listitem>

</varlistentry>

<varlistentry>
<term
><userinput
>\B</userinput
> (keine Wortgrenze)</term>
<listitem
><para
>Trifft immer dort zu, wo <quote
>\b</quote
> nicht zutrifft.</para>
<para
>Dieser Ausdruck dient zum Finden von Text innerhalb von Worten. Der Ausdruck <userinput
>\Bin\B</userinput
> trifft &eg; auf das <quote
>in</quote
> im Wort <quote
>window</quote
> im Text <quote
>He came in through the window</quote
> zu, aber nicht auf <quote
>integer</quote
> oder <quote
>I'm in love</quote
>.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>(?=PATTERN)</userinput
> (Positive Vorwärtsreferenz)</term>
<listitem
><para
>Eine Vorwärtsreferenz prüft den Text, der dem eventuell zutreffenden Teil des Textes folgt. Die Vorwärtsreferenz verhindert, dass der Text zutrifft, wenn der nachfolgende Text nicht auf das <emphasis
>MUSTER</emphasis
> der Behauptung zutrifft. Wenn die Behauptung zutrifft, wird der Text, der auf diese zutrifft, allerdings nicht Bestandteil des Ergebnisses.</para>
<para
>Der Ausdruck <userinput
>handy(?=\w)</userinput
> trifft auf <quote
>handy</quote
> in <quote
>handyman</quote
> zu, aber nicht auf das in <quote
>That came in handy!</quote
></para>
</listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>(?!PATTERN)</userinput
> (Negative Vorwärtsreferenz)</term>

<listitem
><para
>Eine negative Vorwärtsreferenz verhindert, dass der Text zutrifft, wenn der nachfolgende Text auf das <emphasis
>MUSTER</emphasis
> zutrifft.</para>
<para
>Der Ausdruck <userinput
>const \w+\b(?!\s*&amp;)</userinput
> trifft auf <quote
>const char</quote
> im Text <quote
>const char* foo</quote
>, aber nicht <quote
>const QString</quote
> in <quote
>const QString&amp; bar</quote
> weil das <quote
>&amp;</quote
> auf die negative Vorwärtsreferenz zutrifft.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>(?=PATTERN)</userinput
> (Positive Rückwärtsreferenz)</term>
<listitem
><para
>Eine Rückwärtsreferenz hat die gleiche Wirkung wie eine Vorwärtsreferenz, funktioniert aber rückwärts. Eine Rückwärtsreferenz sucht den Teil der Zeichenfolge vor einer mögliche Übereinstimmung. Die positive Rückwärtsreferenz passt nur dann auf eine Zeichenfolge, wenn <emphasis
>PATTERN</emphasis
> der Behauptung vorangestellt ist, aber der damit übereinstimmende Text wird nicht in das Ergebnis aufgenommen.</para>
<para
>Der Ausdruck <userinput
>(?&lt;=cup)cake</userinput
> passt auf <quote
>cake</quote
>, wenn <quote
>cup</quote
> vorangestellt ist wie z. B. in <quote
>cupcake</quote
> aber nicht in <quote
>cheesecake</quote
> oder in nur <quote
>cake</quote
>.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>(?!PATTERN)</userinput
> (Negative Rückwärtsreferenz)</term>
<listitem
><para
>Eine negative Rückwärtsreferenz verhindert, dass der Text zutrifft, wenn der vorherige Text auf das <emphasis
>MUSTER</emphasis
> zutrifft.</para>
<para
>Der Ausdruck <userinput
>(?&lt;![\w\.])[0-9]+</userinput
> passt auf <quote
>123</quote
> in der Zeichenfolgen <quote
>=123</quote
> und <quote
>-123</quote
>, aber nicht auf <quote
>123</quote
> in <quote
>.123</quote
> oder <quote
>word123</quote
>.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>(PATTERN)</userinput
> (Gruppierung)</term>

<listitem
><para
>Das Untermuster innerhalb der Klammern wird gespeichert und gemerkt, so dass es in Rückwärtsreferenzen verwendet werden kann. Der Ausdruck <userinput
>(&amp;quot;+)[^&amp;quot;]*\1</userinput
> passt zum Beispiel auf <userinput
>&quot;&quot;&quot;&quot;text&quot;&quot;&quot;&quot;</userinput
> und <userinput
>&quot;text&quot;</userinput
>.</para>
<para
>Weitere Informationen im Abschnitt <link linkend="regex-capturing"
>Speichern von gefundenem Text (Rückwärtsreferenzen)</link
>.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>(?:PATTERN)</userinput
> (Nicht speichernde Gruppe)</term>

<listitem
><para
>Das Untermuster in den Klammern wird nicht gespeichert und gemerkt. Sie sollten immer nicht speichernde Gruppen zu verwenden, wenn die Speicherungen nicht verwendet werden.</para>
</listitem>
</varlistentry>

</variablelist>

</para>

</sect1>

<!-- TODO sect1 id="backreferences">

<title
>Back References</title>

<para
></para>

</sect1 -->

</appendix>
