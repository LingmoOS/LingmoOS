<appendix id="regular-expressions">
<appendixinfo>
<authorgroup>
<author
>&Anders.Lund; &Anders.Lund.mail;</author>
&Otto.Bruggeman;&Freek.de.Kruijf; 
</authorgroup>
</appendixinfo>

<title
>Reguliere expressies</title>

<synopsis
>Deze Appendix bevat een beknopte maar hopelijk voldoende en
dekkende introductie tot de wereld van <emphasis
>reguliere
expressies</emphasis
>. Het documenteert reguliere expressies in de vorm
beschikbaar in &kappname;, wat niet compatibel is met de reguliere
expressies van perl, noch met die van bijvoorbeeld
<command
>grep</command
>.</synopsis>

<sect1>

<title
>Inleiding</title>

<para
><emphasis
>Reguliere expressies</emphasis
> bieden ons een manier om mogelijke inhoud van een tekenreeks te beschrijven zodat deze verstaan wordt door een klein stukje software, waarmee het kan nagaan of een tekst overeenkomt en ook in het geval van geavanceerde toepassingen met de middelen om stukjes overeenkomende tekst op te slaan.</para>

<para
>Een voorbeeld: Zeg dat u naar een tekst in paragrafen wilt zoeken die begint met ofwel de namen <quote
>Hendrik</quote
> of <quote
>Piet</quote
> gevolgd door een werkwoordsvorm <quote
>zegt</quote
>.</para>

<para
>Met een normale zoekopdracht, zou u beginnen met te zoeken naar de eerste naam, <quote
>Hendrik</quote
> misschien gevolgd door <quote
>ze</quote
> zoals dit: <userinput
>Hendrik ze</userinput
> en, terwijl u zoekt naar overeenkomsten, moet u diegene negeren die niet het begin van een paragraaf zijn, evenals die waarin het woord beginnend met de letters <quote
>ze</quote
> niet ofwel <quote
>zegt</quote
>, <quote
>zei</quote
> of zoiets is. En dan natuurlijk dat alles herhalen met de volgende naam...</para>

<para
>Met reguliere expressies kan die taak worden gedaan met een enkele zoekopdracht en met een grotere graad van precisie.</para>

<para
>Om dit te bereiken definieert Reguliere Expressies regels voor het uitdrukken van details op een generaliserende manier van een overeenkomst met een tekenreeks. Ons voorbeeld, die we letterlijk als volgt uitdrukken: <quote
>Een regel beginnend met ofwel <quote
>Hendrik</quote
> of <quote
>Piet</quote
> (mogelijk gevolgd door tot 4 spaties of een tab) gevolgd door een witruimte gevolgd door <quote
>ze</quote
> en dan ofwel <quote
>gt</quote
> of <quote
>i</quote
></quote
> kan worden uitgedrukt met de volgende reguliere expressie:</para
> <para
><userinput
>^[ \t]{0,4}(Hendrik|Piet) ze(gt|i)</userinput
></para>

<para
>Het bovenstaande voorbeeld demonstreert alle vier belangrijkste concepten van moderne reguliere expressies namelijk:</para>

<itemizedlist>
<listitem
><para
>Patronen</para
></listitem>
<listitem
><para
>Toekenningen</para
></listitem>
<listitem
><para
>Aantallen</para
></listitem>
<listitem
><para
>Achterwaartse verwijzingen</para
></listitem>
</itemizedlist>

<para
>Het dakje (<literal
>^</literal
>) waarmee de uitdrukking begint is een toekenning, die alleen waar is als de volgende overeenkomende tekenreeks zich aan het begin van de regel bevindt.</para>

<para
>De tekenreeksen <literal
>[ \t]</literal
> en <literal
>(Hendrik|Piet) ze(gt|i)</literal
> zijn patronen. De eerste is een <emphasis
>tekenklasse</emphasis
> die ofwel overeenkomt met een spatie of een teken (horizontale) tab; het andere patroon bevat eerst een subpatroonn overeenkomend met ofwel <literal
>Hendrik</literal
> <emphasis
>of</emphasis
> <literal
>Piet</literal
>, daarna iets wat exact overeenkomt met de tekenreeks <literal
> ze</literal
> en tenslotte een subpatroon overeenkomend met ofwel <literal
>gt</literal
> <emphasis
>of</emphasis
> <literal
>e</literal
></para>

<para
>De tekenreeks <literal
>{0,4}</literal
> is een aantal dat aangeeft <quote
>ergens van 0 t/m 4 van de vorige</quote
>.</para>

<para
>Omdat software voor reguliere expressies, die het concept van <emphasis
>achterwaartse verwijzingen</emphasis
> ondersteunt, het gehele deel van de tekenreeks, dat overeenkomt, evenals subpatronen tussen haakjes, opslaat, geeft dus ook toegang tot die verwijzingen, zodat we onze handen kunnen leggen op ofwel de gehele overeenkomst (bij het zoeken in een tekstdocument in een tekstbewerker met een reguliere expressie, die vaak gemarkeerd is als geselecteerd) of ofwel de gevonden naam of het laatste deel van de zin.</para>

<para
>Samenvattend zal de uitdrukking overeenkomen met wat we willen waarmee deze moet overeenkomen en alleen daarmee.</para>

<para
>De volgende secties zullen in detail beschrijven hoe patronen, tekenklassen, toekenningen, aantallen en achterwaartse verwijzingen, te construeren en te gebruiken en de laatste sectie zal een paar bruikbare voorbeelden geven.</para>

</sect1>

<sect1 id="regex-patterns">

<title
>Patronen</title>

<para
>Patronen bestaan uit letterlijke tekenreeksen en tekenklassen. Patronen mogen subpatronen bevatten, die patronen zijn tussen haakjes.</para>

<sect2>
<title
>Escape-tekens</title>

<para
>In patronen evenals in tekenklassen hebben sommige tekens een speciale betekenis. Om zulke tekens letterlijk overeen te laten komen met deze tekens, moeten ze zo gemarkeerd worden of <emphasis
>escaped</emphasis
> om de software  voor reguliere expressies te laten weten dat het zulke tekens letterlijk moet interpreteren.</para>

<para
>Dit wordt gedaan door het teken vooraf te laten gaan door een backslash (<literal
>\</literal
>).</para>


<para
>De software voor reguliere expressies zal stilletjes een teken met een escape-teken ervoor negeren die geen speciale betekenis heeft in de context, dus, bijvoorbeeld, een <quote
>j</quote
> met een escape ervoor (<userinput
>\j</userinput
>) is veilig. Als u er niet zeker van bent of een teken een speciale betekenis heeft, dan kunt u er veilig een escape-teken voor zetten.</para>

<para
>Met het escape-teken werken omvat natuurlijk ook het teken backslash zelf, om letterlijk dat teken weer te geven, moet u schrijven <userinput
>\\</userinput
>.</para>

</sect2>

<sect2>
<title
>Tekenklassen en afkortingen</title>

<para
>Een <emphasis
>tekenklasse</emphasis
> is een uitdrukking die overeenkomt met een gedefinieerde set tekens. In Reguliere Expressies, worden tekenklassen gedefinieerd door de toegestane tekens voor de klasse tussen rechte haken te zetten, <literal
>[]</literal
>, of door een van de hieronder beschreven afgekorte klassen te gebruiken.</para>

<para
>Eenvoudige tekenklassen bevatten letterlijk een of meer tekens, bijvoorbeeld <userinput
>[abc]</userinput
> (komt overeen met een van de letters <quote
>a</quote
>, <quote
>b</quote
> of <quote
>c</quote
>) of <userinput
>[0123456789]</userinput
> (komt overeen met een cijfer).</para>

<para
>Omdat letters en cijfers een logische volgorde hebben, kunt u deze afbreken door er reeksen van te specificeren: <userinput
>[a-c]</userinput
> is gelijk aan <userinput
>[abc]</userinput
> en <userinput
>[0-9]</userinput
> is gelijk aan <userinput
>[0123456789]</userinput
>. Combineren van deze constructies, bijvoorbeeld <userinput
>[a-fynot1-38]</userinput
> is geheel toegestaan (de laatste zou natuurlijk overeenkomen met ofwel <quote
>a</quote
>,<quote
>b</quote
>,<quote
>c</quote
>,<quote
>d</quote
>, <quote
>e</quote
>,<quote
>f</quote
>,<quote
>y</quote
>,<quote
>n</quote
>,<quote
>o</quote
>,<quote
>t</quote
>,<quote
>1</quote
>,<quote
>2</quote
>,<quote
>3</quote
> of <quote
>8</quote
>).</para>

<para
>Omdat hoofdletters andere tekens zijn dan hun kleine letter equivalenten, is het nodig om overeenkomsten zonder onderscheid van hoofd- en kleine letters te maken tussen <quote
>a</quote
> of <quote
>b</quote
>, moet u het schrijven als <userinput
>[aAbB]</userinput
>.</para>

<para
>Het is natuurlijk mogelijk om een <quote
>negatieve</quote
> klasse overeenkomst te maken zoals <quote
>alles behalve</quote
>. Er moet dan een dakje (<literal
>^</literal
>) aan het begin van de klasse staan: </para>

<para
><userinput
>[^abc]</userinput
> komt overeen met elk teken <emphasis
>behalve</emphasis
> <quote
>a</quote
>, <quote
>b</quote
> of <quote
>c</quote
>.</para>

<para
>Naast letterlijke tekens, zijn er ook enige afkortingen gedefinieerd, om het leven een beetje gemakkelijker te maken: <variablelist>

<varlistentry>
<term
><userinput
>\a</userinput
></term>
<listitem
><para
>Dit komt overeen met het &ASCII; bel-teken (BEL, 0x07).</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\f</userinput
></term>
<listitem
><para
>Dit komt overeen met het &ASCII; formfeed-teken (FF, 0x0C).</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\n</userinput
></term>
<listitem
><para
>Dit komt overeen met het &ASCII; linefeed-teken (LF, 0x0A, Unix nieuwe-regel).</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\r</userinput
></term>
<listitem
><para
>Dit komt overeen met het &ASCII; carriage-return-teken (CR, 0x0D).</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\t</userinput
></term>
<listitem
><para
>Dit komt overeen met het &ASCII; horizontale tab-teken (HT, 0x09).</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\v</userinput
></term>
<listitem
><para
>Dit komt overeen met het &ASCII; verticale tab-teken (VT, 0x0B).</para
></listitem>
</varlistentry>
<varlistentry>
<term
><userinput
>\xhhhh</userinput
></term>

<listitem
><para
>Dit komt overeen met het Unicode-teken overeenkomend met het hexadecimale getal hhhh (tussen 0x0000 en 0xFFFF). \0ooo (&ie;, \zero ooo) komt overeen met het &ASCII;/Latin-1 teken overeenkomend met het octale getal ooo (tussen 0 en 0377).</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>.</userinput
> (punt)</term>
<listitem
><para
>Dit komt overeen met elk teken (inclusief nieuwe-regel).</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\d</userinput
></term>
<listitem
><para
>Dit komt overeen met een cijfer. Gelijk aan <literal
>[0-9]</literal
></para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\D</userinput
></term>
<listitem
><para
>Dit komt overeen met een niet-cijfer. Gelijk aan <literal
>[^0-9]</literal
> of <literal
>[^\d]</literal
></para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\s</userinput
></term>
<listitem
><para
>Dit komt overeen met een witruimte-teken. Praktisch gelijk aan <literal
>[ \t\n\r]</literal
></para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\S</userinput
></term>
<listitem
><para
>Dit komt overeen met een niet-witruimte-teken. Praktisch gelijk aan <literal
>[^ \t\r\n]</literal
> en gelijk aan <literal
>[^\s]</literal
></para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\w</userinput
></term>
<listitem
><para
>Komt overeen met elk <quote
>woordteken</quote
> - in dit geval elke letter, elk cijfer of underscore. Gelijk aan <literal
>[a-zA-Z0-9_]</literal
></para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\W</userinput
></term>
<listitem
><para
>Dit komt overeen met een niet-woord-teken - alles behalve letters, cijfers of underscore. Gelijk aan <literal
>[^a-zA-Z0-9_]</literal
> of <literal
>[^\w]</literal
></para
></listitem>
</varlistentry>


</variablelist>

</para>

<para
>De <emphasis
>POSIX-notatie van klassen</emphasis
>, <userinput
>[:&lt;class name&gt;:]</userinput
> wordt ook ondersteund. Bijvoorbeeld, <userinput
>[:digit:]</userinput
> is equivalent met <userinput
>\d</userinput
> en <userinput
>[:space:]</userinput
> met <userinput
>\s</userinput
>. Zie de volledige lijst met POSIX-tekenklassen <ulink url="https://www.regular-expressions.info/posixbrackets.html"
>hier</ulink
>.</para>

<para
>De afgekorte klassen kunnen in een zelf gemaakte klasse worden gezet, bijvoorbeeld om overeen te komen met een woord-teken, een spatie of een punt, u kunt dan schrijven <userinput
>[\w \.]</userinput
></para>

<sect3>
<title
>Tekens met een speciale betekenis in tekenklassen</title>

<para
>De volgende tekens hebben een speciale betekenis binnen de constructie <quote
>[]</quote
> van de tekenklasse en er moet een escape-teken voor om letterlijk ingevoegd te worden in een klasse:</para>

<variablelist>
<varlistentry>
<term
><userinput
>]</userinput
></term>
<listitem
><para
>Beëindigt de tekenklasse. Moet een escape-teken voor tenzij het het allereerste teken in de klasse is (mag na een dakje zonder escape-teken).</para
></listitem>
</varlistentry>
<varlistentry>
<term
><userinput
>^</userinput
> (dakje)</term>
<listitem
><para
>Geeft een negatieve klasse aan als het het eerste teken is. Moet een escape-teken voor om letterlijk overeen te komen als het het eerste teken in de klasse is.</para
></listitem>
</varlistentry>
<varlistentry>
<term
><userinput
>-</userinput
> (streepje)</term>
<listitem
><para
>Geeft een logische reeks aan. Moet altijd een escape-teken voor binnen een tekenklasse.</para
></listitem>
</varlistentry>
<varlistentry>
<term
><userinput
>\</userinput
> (backslash)</term>
<listitem
><para
>Het escape-teken. Moet altijd een escape-teken voor.</para
></listitem>
</varlistentry>

</variablelist>

</sect3>

</sect2>

<sect2>

<title
>Alternatieven: overeenkomen met <quote
>één van</quote
></title>

<para
>Als u met een set van alternatieve patronen overeen wilt komen, dan kunt u die scheiden door <literal
>|</literal
> (teken verticale streep).</para>

<para
>Om bijvoorbeeld ofwel <quote
>Jan</quote
> of <quote
>Harry</quote
> te zoeken, zou u een expressie <userinput
>Jan|Harry</userinput
> moeten gebruiken.</para>

</sect2>

<sect2>

<title
>Subpatronen</title>

<para
><emphasis
>Subpatronen</emphasis
> zijn patronen omgeven door haakjes, ze kunnen op verschillende manieren in de wereld van de reguliere expressies worden gebruikt.</para>

<sect3>

<title
>Alternatieven specificeren</title>

<para
>U kunt een subpatroon gebruiken om een set alternatieven in een groter patroon te groeperen. De alternatieven zijn gescheiden door het teken <quote
>|</quote
> (verticale streep).</para>

<para
>Om de woorden <quote
>int</quote
>, <quote
>float</quote
> of <quote
>double</quote
> te laten overeenkomen, kunt u het patroon <userinput
>int|float|double</userinput
> gebruiken. Als u het alleen wilt vinden wanneer het gevolgd wordt door enige witruimte en dan enige letters, stop de alternatieven dan in een subpatroon: <userinput
>(int|float|double)\s+\w+</userinput
>.</para>

</sect3>

<sect3 id="regex-capturing">

<title
>Overeenkomende tekst vangen (achterwaartse verwijzingen)</title>

<para
>Als u een achterwaartse referentie wilt gebruiken, gebruik dan een subpatroon <userinput
>(PATTERN)</userinput
> om het gewenste deel van het patroon te onthouden. Om te verhinderen het subpatroon te onthouden, gebruik een non-capturing groep <userinput
>(?:PATTERN)</userinput
>.</para>

<para
>U wilt bijvoorbeeld twee exemplaren van hetzelfde woord gescheiden door een komma en mogelijk enige witruimte, dan kunt u schrijven <userinput
>(\w+),\s*\1</userinput
>. Het subpatroon <literal
>\w+</literal
> zou een groep tekens in een woord vinden en de gehele expressie zou overeenkomen als die gevolgd worden door een komma, 0 of meer witruimtes en dan een gelijke groep woordtekens. (De tekenreeks <literal
>\1</literal
> refereert naar <emphasis
>het eerste subpatroon ingesloten in haakjes</emphasis
>).</para>

<note>
<para
>Om meerduidigheid met het gebruik van <userinput
>\1</userinput
> met enige cijfers erachter (&eg; <userinput
>\12</userinput
> kan het 12de subpatroon zijn of gewoon het eerste subpatroon met <userinput
>2</userinput
>) we gebruiken <userinput
>\{12}</userinput
> als syntaxis voor subpatronen met meerdere cijfers.</para>
<para
>Voorbeelden:</para>
<itemizedlist>
<listitem
><para
><userinput
>\{12}1</userinput
> is <quote
>gebruik subpatroon 12</quote
></para
></listitem>
<listitem
><para
><userinput
>\123</userinput
> is <quote
>gebruik gevangen 1 daarna 23 als de normale tekst</quote
></para
></listitem>
</itemizedlist>

</note>

<!-- <para
>See also <link linkend="backreferences"
>Back references</link
>.</para
> -->

</sect3>

<sect3 id="lookahead-assertions">
<title
>Vooruitblik-toekenningen</title>

<para
>Een vooruitblik-toekenning is een subpatroon die begint met ofwel <literal
>?=</literal
> of <literal
>?!</literal
>.</para>

<para
>Om bijvoorbeeld een overeenkomst te vinden met de letterlijke tekenreeks <quote
>Bill</quote
> maar alleen als deze niet wordt gevolgd door <quote
> Gates</quote
>, dan kunt u deze expressie gebruiken: <userinput
>Bill(?! Gates)</userinput
>. (Dit vindt <quote
>Bill Clinton</quote
> evenals <quote
>Billy the kid</quote
>, maar negeert stilletjes de andere overeenkomsten.)</para>

<para
>Subpatronen voor toekenningen worden niet gevangen.</para>

<para
>Zie ook <link linkend="assertions"
>Toekenningen</link
>.</para>

</sect3>

<sect3 id="lookbehind-assertions">
<title
>Achteruitblik-toekenningen</title>

<para
>Een achteruitblik-toekenning is een subpatroon dat begint met ofwel <literal
>?&lt;=</literal
> of <literal
>?&lt;!</literal
>.</para>

<para
>Achteruitblik heeft hetzelfde effect als de vooruitblik, maar werkt achterwaarts. Om de letterlijke tekenreeks <quote
>fruit</quote
> overeen te laten komen maar alleen indien niet vooraf gegaan door <quote
>grape</quote
>, dan kunt u deze expressie gebruiken: <userinput
>(?&lt;!grape)fruit</userinput
>.</para>

<para
>Subpatronen voor toekenningen worden niet gevangen.</para>

<para
>Zie ook <link linkend="assertions"
>Toekenningen</link
></para>

</sect3>

</sect2>

<sect2 id="special-characters-in-patterns">
<title
>Tekens met een speciale betekenis in patronen</title>

<para
>De volgende tekens hebben een speciale betekenis binnen een patroon en er moet een escape-teken voor om letterlijk met ze overeen te komen: <variablelist>

<varlistentry>
<term
><userinput
>\</userinput
> (backslash)</term>
<listitem
><para
>Het escape-teken.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>^</userinput
> (dakje)</term>
<listitem
><para
>Kent het begin van de tekenreeks toe.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>$</userinput
></term>
<listitem
><para
>Kent het einde van de tekenreeks toe.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>()</userinput
> (linker en rechter haakje)</term>
<listitem
><para
>Geeft subpatronen aan.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>{}</userinput
> (linker en rechter accolade)</term>
<listitem
><para
>Geeft numerieke aantallen aan.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>[]</userinput
> (linker en rechter rechte haakje)</term>
<listitem
><para
>Geeft tekenklassen aan.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>|</userinput
> (verticale streep)</term>
<listitem
><para
>logische OR. Scheidt alternatieven.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>+</userinput
> (plusteken)</term>
<listitem
><para
>Aantal, 1 of meer.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>*</userinput
> (sterretje)</term>
<listitem
><para
>Aantal, 0 of meer.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>?</userinput
> (vraagteken)</term>
<listitem
><para
>Een optioneel teken. Kan geïnterpreteerd worden als een aantal, 0 of 1.</para
></listitem>
</varlistentry>

</variablelist>

</para>

</sect2>

</sect1>

<sect1 id="quantifiers">
<title
>Aantallen</title>

<para
><emphasis
>Aantallen</emphasis
> biedt een reguliere expressie de mogelijkheid om een gespecificeerd aantal of reeks aantallen van ofwel een teken, tekenklasse of subpatroon.</para>

<para
>Aantallen worden omgeven door accolades (<literal
>{</literal
> en <literal
>}</literal
>) en hebben de algemene vorm <literal
>{[minimum-aantal][,[maximum-aantal]]}</literal
> </para>

<para
>Het gebruik wordt het beste uitgelegd door een voorbeeld: <variablelist>

<varlistentry>
<term
><userinput
>{1}</userinput
></term>
<listitem
><para
>Exact 1 keer</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>{0,1}</userinput
></term>
<listitem
><para
>Nul of 1 keer</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>{,1}</userinput
></term>
<listitem
><para
>Hetzelfde, met minder werk;)</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>{5,10}</userinput
></term>
<listitem
><para
>Minstens 5 maar maximaal 10 keer.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>{5,}</userinput
></term>
<listitem
><para
>Minstens 5 keer, geen maximum.</para
></listitem>
</varlistentry>

</variablelist>

</para>

<para
>Verder zijn er enkele afkortingen: <variablelist>

<varlistentry>
<term
><userinput
>*</userinput
> (sterretje)</term>
<listitem
><para
>gelijk aan <literal
>{0,}</literal
>, elk aantal keren.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>+</userinput
> (plusteken)</term>
<listitem
><para
>gelijk aan <literal
>{1,}</literal
>, minstens 1 keer.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>?</userinput
> (vraagteken)</term>
<listitem
><para
>gelijk aan <literal
>{0,1}</literal
>, nul of 1 keer.</para
></listitem>
</varlistentry>

</variablelist>

</para>

<sect2>

<title
>Happig</title>

<para
>Bij het gebruik van aantallen zonder maximum, is de standaard bij reguliere expressies om overeen te komen met zo veel als mogelijk van de gezochte tekenreeks, algemeen bekend staand als <emphasis
>happig</emphasis
> gedrag.</para>

<para
>Moderne software voor reguliere expressies levert de middelen om <quote
>happigheid uit te zetten</quote
>, hoewel in een grafische omgeving het aan het interface is om toegang tot deze functie te leveren. Een zoekdialoog bijvoorbeeld, die een reguliere expressie biedt bij het zoeken, kan een keuzevakje hebben met het label <quote
>Minimale overeenkomst</quote
> evenals het zou moeten aangeven of happigheid het standaard gedrag.</para>

</sect2>

<sect2>
<title
>In voorbeelden van context</title>

<para
>Hier zijn een paar voorbeelden van het gebruik van aantallen:</para>

<variablelist>

<varlistentry>
<term
><userinput
>^\d{4,5}\s</userinput
></term>
<listitem
><para
>Komt overeen met de cijfers in <quote
>1234 ga</quote
> en <quote
>12345 nu</quote
>, maar niet in <quote
>567 elf</quote
> of in <quote
>223459 ergens</quote
>.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\s+</userinput
></term>
<listitem
><para
>Komt overeen met één of meer witruimte tekens.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>(bla){1,}</userinput
></term>
<listitem
><para
>Komt overeen met alles van <quote
>blablabla</quote
> en de <quote
>bla</quote
> in <quote
>blackbird</quote
> of <quote
>tabla</quote
>.</para
></listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>/?&gt;</userinput
></term>
<listitem
><para
>Komt overeen met <quote
>/&gt;</quote
> in <quote
>&lt;closeditem/&gt;</quote
> evenals <quote
>&gt;</quote
> in <quote
>&lt;openitem&gt;</quote
>.</para
></listitem>
</varlistentry>

</variablelist>

</sect2>

</sect1>

<sect1 id="assertions">
<title
>Toekenningen</title>

<para
><emphasis
>Toekenningen</emphasis
> bieden de mogelijkheid om een reguliere expressie alleen te laten overeenkomen onder bepaalde gecontroleerde condities.</para>

<para
>Een toekenning heeft geen teken nodig om mee overeen te komen, in plaats daarvan onderzoekt het de omgeving voor een mogelijke overeenkomst alvorens deze toe te kennen. Bijvoorbeeld de <emphasis
>woordgrens</emphasis
> toekenning probeert geen niet-woord-teken ten opzichte van een woordteken op zijn positie te vinden, in plaats daarvan moet er geen woordteken zijn. Dit betekent dat de toekenning overeen kan komen met iets waar geen teken is, &ie; aan het eind van een te zoeken tekenreeks.</para>

<para
>Sommige toekenningen hebben in werkelijkheid een patroon waarmee overeen gekomen moet worden, maar het deel van de overeenkomst met de tekenreeks behoort niet bij een deel van het resultaat van overeenkomst met de volledige expressie.</para>

<para
>Reguliere expressies zoals hier gedocumenteerd ondersteunt de volgende toekenningen: <variablelist>

<varlistentry>
<term
><userinput
>^</userinput
> (dakje: begin van de tekenreeks)</term>
<listitem
><para
>Komt overeen met het begin van de tekenreeks.</para
> <para
>De expressie <userinput
>^Peter</userinput
> komt overeen met <quote
>Peter</quote
> in de tekenreeks <quote
>Peter, hey!</quote
> maar niet in <quote
>Hey, Peter!</quote
> </para
> </listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>$</userinput
> (eind van de tekenreeks)</term>
<listitem
><para
>Komt overeen met het eind van de tekenreeks.</para>

<para
>De expressie <userinput
>you\?$</userinput
> komt overeen met de laatste you in de tekenreeks <quote
>You didn't do that, did you?</quote
> maar nergens in <quote
>You didn't do that, right?</quote
></para>

</listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>\b</userinput
> (woordgrens)</term>
<listitem
><para
>Komt overeen als er een woordteken is aan één kant en niet aan de andere kant.</para>
<para
>Dit is nuttig om woordeinden te vinden, bijvoorbeeld beide einden om een  heel woord te vinden. De expressie <userinput
>\bin\b</userinput
> komt overeen met het aparte <quote
>in</quote
> in de tekenreeks <quote
>He came in through the window</quote
>, maar niet met het <quote
>in</quote
> in <quote
>window</quote
>.</para
></listitem>

</varlistentry>

<varlistentry>
<term
><userinput
>\B</userinput
> (niet-woordgrens)</term>
<listitem
><para
>Komt overeen waar <quote
>\b</quote
> dat niet doet.</para>
<para
>Dit betekent dat het zal overeenkomen bijvoorbeeld in woorden: De expressie <userinput
>\Bin\B</userinput
> komt overeen in <quote
>window</quote
> maar niet in <quote
>integer</quote
> of <quote
>I'm in love</quote
>.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>(?=PATROON)</userinput
> (Positief vooruitkijken)</term>
<listitem
><para
>Een vooruitkijktoekenning kijkt naar het deel van de tekenreeks die volgt op een mogelijke overeenkomst. Het positieve vooruitkijken voorkomt dat de tekenreeks overeenkomt als de tekst die volgt op de mogelijke overeenkomst niet overeenkomt met het <emphasis
>PATROON</emphasis
> van de toekenning, maar voorkomt dat de tekst daarmee overeenkomt en zal niet meegenomen worden in het resultaat.</para>
<para
>De expressie <userinput
>handy(?=\w)</userinput
> komt overeen met <quote
>handy</quote
> in <quote
>handyman</quote
> maar niet in <quote
>That came in handy!</quote
></para>
</listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>(?!PATROON)</userinput
> (Negatieve vooruitblik)</term>

<listitem
><para
>Het negatieve vooruitkijken voorkomt dat de tekenreeks overeenkomt als de tekst die volgt op de mogelijke overeenkomst overeenkomt met het <emphasis
>PATROON</emphasis
> van de toekenning.</para>
<para
>De expressie <userinput
>const \w+\b(?!\s*&amp;)</userinput
> zal overeenkomen met <quote
>const char</quote
> in de tekenreeks <quote
>const char* foo</quote
> terwijl het niet kan overeenkomen met <quote
>const QString</quote
> in <quote
>const QString&amp; bar</quote
> omdat de <quote
>&amp;</quote
> overeenkomt met het patroon in de negatieve vooruitkijktoekenning.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>(?&lt;=PATROON)</userinput
> (Positief achteruit kijken)</term>
<listitem
><para
>Een achteruitkijktoekenning heeft hetzelfde effect als de vooruitkijk, maar werkt achterwaarts. Een achteruitkijktoekenning kijkt naar het deel van de vorige tekenreeks met een mogelijke overeenkomst. Het positieve achteruitkijken zal alleen overeenkomen met een tekenreeks als het voorafgegaan wordt door het <emphasis
>PATROON</emphasis
> van de toekenning, maar voorkomt dat de tekst daarmee overeenkomt en zal niet meegenomen worden in het resultaat.</para>
<para
>De expressie <userinput
>(?&lt;=cup)cake</userinput
> zal overeenkomen met <quote
>cake</quote
> als het volgt op <quote
>cup</quote
> (in <quote
>cupcake</quote
> maar niet in <quote
>cheesecake</quote
> of in alleen <quote
>cake</quote
>).</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>(?&lt;!PATROON)</userinput
> (Negatieve achteruitblik)</term>
<listitem
><para
>Het negatieve achteruitkijken voorkomt dat de tekenreeks overeenkomt als het voorgaande deel van de zoektekst overeenkomt met het <emphasis
>PATROON</emphasis
>.</para>
<para
>De expressie <userinput
>(?&lt;![\w\.])[0-9]+</userinput
> zal overeenkomen met <quote
>123</quote
> in de tekenreeksen <quote
>=123</quote
> en <quote
>-123</quote
> terwijl het niet kan overeenkomen met <quote
>123</quote
> in <quote
>.123</quote
> of <quote
>word123</quote
>.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>(PATROON)</userinput
> (Vanggroep)</term>

<listitem
><para
>Het subpatroon in de haakjes wordt gevangen en onthouden, zodat het gebruikt kan worden in achterwaartse referentie. Bijvoorbeeld, de expressie <userinput
>(&amp;quot;+)[^&amp;quot;]*\1</userinput
> komt overeeen met <userinput
>&quot;&quot;&quot;&quot;tekst&quot;&quot;&quot;&quot;</userinput
> en <userinput
>&quot;tekst&quot;</userinput
>.</para>
<para
>Zie de sectie <link linkend="regex-capturing"
>Overeenkomende tekst vangen (achterwaartse referenties)</link
> voor meer informatie.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><userinput
>(?:PATROON)</userinput
> (Non-capturing groep)</term>

<listitem
><para
>Het subpatroon in de haakjes wordt niet gevangen en niet onthouden. Het heeft de voorkeur om altijd non-capturing groepen te gebruiken als de vangst niet zal worden gebruikt.</para>
</listitem>
</varlistentry>

</variablelist>

</para>

</sect1>

<!-- TODO sect1 id="backreferences">

<title
>Back References</title>

<para
></para>

</sect1 -->

</appendix>
