.TH "AUSEARCH_ADD_INTERPRETED_ITEM" "3" "Nov 2007" "Red Hat" "Linux Audit API"
.SH NAME
ausearch_add_interpreted_item \- build up search rule
.SH "SYNOPSIS"
.B #include <auparse.h>
.sp
int ausearch_add_interpreted_item(auparse_state_t *au, const char *field, const char *op, const char *value, ausearch_rule_t how);

.SH "DESCRIPTION"

ausearch_add_interpreted_item adds one search condition to the current audit search expression. The search conditions can then be used to scan logs, files, or buffers for something of interest. The field value is the field name that the value will be checked for. The op variable describes what kind of check is to be done. Legal op values are:

.RS
.TP
.I "exists"
 just check that a field name exists
.TP
.I "="
 locate the field name and check that the value associated with it is equal to the value given in this rule.
.TP
.I "!="
 locate the field name and check that the value associated with it is NOT equal to the value given in this rule.
.RE

The value parameter is compared to the interpreted field value (the value that would be returned by \fBauparse_interpret_field\fR(3)).

The how value determines how this search condition will affect the existing search expression if one is already defined. The possible values are:
.RS
.TP
.I AUSEARCH_RULE_CLEAR
Clear the current search expression, if any, and use only this search condition.
.TP
.I AUSEARCH_RULE_OR
If a search expression
.I E
is already configured, replace it by \fB(\fIE\fB || \fIthis_search_condition\fB)\fR.
.TP
.I AUSEARCH_RULE_AND
If a search expression
.I E
is already configured, replace it by \fB(\fIE\fB && \fIthis_search_condition\fB)\fR.
.RE

.SH "RETURN VALUE"

Returns \-1 if an error occurs; otherwise, 0 for success.

.SH "SEE ALSO"

.BR ausearch_add_expression (3),
.BR ausearch_add_item (3),
.BR ausearch_add_timestamp_item (3),
.BR ausearch_add_regex (3),
.BR ausearch_set_stop (3),
.BR ausearch_clear (3),
.BR ausearch_next_event (3),
.BR ausearch_cur_event (3),
.BR ausearch\-expression (5).

.SH AUTHOR
Steve Grubb
